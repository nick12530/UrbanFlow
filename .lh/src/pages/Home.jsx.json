{
    "sourceFile": "src/pages/Home.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 26,
            "patches": [
                {
                    "date": 1752166632088,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1752167044159,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,27 +1,9 @@\n export default function Home() {\r\n   return (\r\n-    <div className=\"home-page\">\r\n+    <div>\r\n       <h1>UrbanFlow</h1>\r\n       <h2>All-Powered Urban Transport & Food Marketplace</h2>\r\n-      \r\n-      <div className=\"services-grid\">\r\n-        <div className=\"service-card\">\r\n-          <h3>Transport</h3>\r\n-          <p>Plan your journey across the city</p>\r\n-        </div>\r\n-        <div className=\"service-card\">\r\n-          <h3>Food</h3>\r\n-          <p>Discover local restaurants</p>\r\n-        </div>\r\n-        <div className=\"service-card\">\r\n-          <h3>Drinks</h3>\r\n-          <p>Find cafes and bars</p>\r\n-        </div>\r\n-        <div className=\"service-card\">\r\n-          <h3>Services</h3>\r\n-          <p>Urban services at your fingertips</p>\r\n-        </div>\r\n-      </div>\r\n+      <p>Welcome to our platform!</p>\r\n     </div>\r\n   );\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752167523041,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,34 @@\n+import Header from '../components/Header';\r\n+import Navbar from '../components/Navbar';\r\n+import '../styles/main.css';\r\n+\r\n+const services = [\r\n+  { name: 'Transport', path: '/transport', icon: 'üöå', desc: 'Multi-modal journey planning' },\r\n+  { name: 'Food', path: '/food', icon: 'üçî', desc: 'Local restaurants & cafes' },\r\n+  { name: 'Drinks', path: '/food', desc: 'Bars & beverage spots' },\r\n+  { name: 'Services', path: '/food', desc: 'Urban conveniences' }\r\n+];\r\n+\r\n export default function Home() {\r\n   return (\r\n-    <div>\r\n-      <h1>UrbanFlow</h1>\r\n-      <h2>All-Powered Urban Transport & Food Marketplace</h2>\r\n-      <p>Welcome to our platform!</p>\r\n+    <div className=\"home-page\">\r\n+      <Header />\r\n+      <Navbar />\r\n+      <main className=\"container\">\r\n+        <section className=\"hero\">\r\n+          <h1>UrbanFlow</h1>\r\n+          <p className=\"tagline\">Seamless Urban Mobility & Dining</p>\r\n+        </section>\r\n+        <section className=\"services-grid\">\r\n+          {services.map((service) => (\r\n+            <a href={service.path} key={service.name} className=\"service-card\">\r\n+              <span className=\"service-icon\">{service.icon}</span>\r\n+              <h3>{service.name}</h3>\r\n+              <p>{service.desc}</p>\r\n+            </a>\r\n+          ))}\r\n+        </section>\r\n+      </main>\r\n     </div>\r\n   );\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752167859393,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,9 @@\n       <Header />\r\n       <Navbar />\r\n       <main className=\"container\">\r\n         <section className=\"hero\">\r\n-          <h1>UrbanFlow</h1>\r\n+          <h>UrbanFlow</h>\r\n           <p className=\"tagline\">Seamless Urban Mobility & Dining</p>\r\n         </section>\r\n         <section className=\"services-grid\">\r\n           {services.map((service) => (\r\n"
                },
                {
                    "date": 1752167920984,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,9 @@\n       <Header />\r\n       <Navbar />\r\n       <main className=\"container\">\r\n         <section className=\"hero\">\r\n-          <h>UrbanFlow</h>\r\n+          <h1>UrbanFlow</h1>\r\n           <p className=\"tagline\">Seamless Urban Mobility & Dining</p>\r\n         </section>\r\n         <section className=\"services-grid\">\r\n           {services.map((service) => (\r\n"
                },
                {
                    "date": 1752168176736,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,34 +1,8 @@\n-import Header from '../components/Header';\r\n-import Navbar from '../components/Navbar';\r\n-import '../styles/main.css';\r\n-\r\n-const services = [\r\n-  { name: 'Transport', path: '/transport', icon: 'üöå', desc: 'Multi-modal journey planning' },\r\n-  { name: 'Food', path: '/food', icon: 'üçî', desc: 'Local restaurants & cafes' },\r\n-  { name: 'Drinks', path: '/food', desc: 'Bars & beverage spots' },\r\n-  { name: 'Services', path: '/food', desc: 'Urban conveniences' }\r\n-];\r\n-\r\n export default function Home() {\r\n   return (\r\n-    <div className=\"home-page\">\r\n-      <Header />\r\n-      <Navbar />\r\n-      <main className=\"container\">\r\n-        <section className=\"hero\">\r\n-          <h1>UrbanFlow</h1>\r\n-          <p className=\"tagline\">Seamless Urban Mobility & Dining</p>\r\n-        </section>\r\n-        <section className=\"services-grid\">\r\n-          {services.map((service) => (\r\n-            <a href={service.path} key={service.name} className=\"service-card\">\r\n-              <span className=\"service-icon\">{service.icon}</span>\r\n-              <h3>{service.name}</h3>\r\n-              <p>{service.desc}</p>\r\n-            </a>\r\n-          ))}\r\n-        </section>\r\n-      </main>\r\n+    <div style={{ padding: '2rem' }}>\r\n+      <h1>Welcome to UrbanFlow</h1>\r\n+      <p>This is the home page</p>\r\n     </div>\r\n-  );\r\n+  )\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752168422807,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,19 @@\n export default function Home() {\r\n   return (\r\n-    <div style={{ padding: '2rem' }}>\r\n+    <div className=\"page-container\">\r\n       <h1>Welcome to UrbanFlow</h1>\r\n-      <p>This is the home page</p>\r\n+      <p>Your all-in-one urban mobility and dining solution</p>\r\n+      \r\n+      <div className=\"services-grid\">\r\n+        <a href=\"/transport\" className=\"service-card\">\r\n+          <h3>üöå Transport</h3>\r\n+          <p>Plan your multi-modal journeys</p>\r\n+        </a>\r\n+        <a href=\"/food\" className=\"service-card\">\r\n+          <h3>üçî Food</h3>\r\n+          <p>Discover local restaurants</p>\r\n+        </a>\r\n+      </div>\r\n     </div>\r\n-  )\r\n+  );\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752169745361,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,19 +1,105 @@\n+import { useState } from 'react';\r\n+import { useNavigate } from 'react-router-dom';\r\n+\r\n export default function Home() {\r\n+  const navigate = useNavigate();\r\n+  const [searchQuery, setSearchQuery] = useState('');\r\n+\r\n+  const services = [\r\n+    { \r\n+      name: 'Transport', \r\n+      path: '/transport', \r\n+      icon: 'üöå', \r\n+      desc: 'Plan your multi-modal journey across the city',\r\n+      color: '#3b82f6'\r\n+    },\r\n+    { \r\n+      name: 'Food Delivery', \r\n+      path: '/food', \r\n+      icon: 'üçî', \r\n+      desc: 'Discover local restaurants and cafes',\r\n+      color: '#ef4444'\r\n+    },\r\n+    { \r\n+      name: 'Groceries', \r\n+      path: '/food', \r\n+      icon: 'üõí', \r\n+      desc: 'Get groceries delivered in minutes',\r\n+      color: '#10b981'\r\n+    },\r\n+    { \r\n+      name: 'Services', \r\n+      path: '/food', \r\n+      icon: 'üõ†Ô∏è', \r\n+      desc: 'Find urban services near you',\r\n+      color: '#8b5cf6'\r\n+    }\r\n+  ];\r\n+\r\n+  const handleSearch = (e) => {\r\n+    e.preventDefault();\r\n+    if (searchQuery.trim()) {\r\n+      navigate(`/food?search=${encodeURIComponent(searchQuery)}`);\r\n+    }\r\n+  };\r\n+\r\n   return (\r\n-    <div className=\"page-container\">\r\n-      <h1>Welcome to UrbanFlow</h1>\r\n-      <p>Your all-in-one urban mobility and dining solution</p>\r\n-      \r\n-      <div className=\"services-grid\">\r\n-        <a href=\"/transport\" className=\"service-card\">\r\n-          <h3>üöå Transport</h3>\r\n-          <p>Plan your multi-modal journeys</p>\r\n-        </a>\r\n-        <a href=\"/food\" className=\"service-card\">\r\n-          <h3>üçî Food</h3>\r\n-          <p>Discover local restaurants</p>\r\n-        </a>\r\n-      </div>\r\n+    <div className=\"home-page\">\r\n+      {/* Hero Section */}\r\n+      <section className=\"hero\">\r\n+        <div className=\"hero-content\">\r\n+          <h1>UrbanFlow</h1>\r\n+          <p className=\"tagline\">Your seamless urban living companion</p>\r\n+          \r\n+          <form onSubmit={handleSearch} className=\"search-box\">\r\n+            <input\r\n+              type=\"text\"\r\n+              placeholder=\"Search for restaurants, services...\"\r\n+              value={searchQuery}\r\n+              onChange={(e) => setSearchQuery(e.target.value)}\r\n+            />\r\n+            <button type=\"submit\">\r\n+              <span>üîç</span>\r\n+            </button>\r\n+          </form>\r\n+        </div>\r\n+      </section>\r\n+\r\n+      {/* Services Grid */}\r\n+      <section className=\"services-section\">\r\n+        <h2>What do you need today?</h2>\r\n+        <div className=\"services-grid\">\r\n+          {services.map((service) => (\r\n+            <div \r\n+              key={service.name} \r\n+              className=\"service-card\"\r\n+              style={{ '--card-color': service.color }}\r\n+              onClick={() => navigate(service.path)}\r\n+            >\r\n+              <div className=\"service-icon\">{service.icon}</div>\r\n+              <h3>{service.name}</h3>\r\n+              <p>{service.desc}</p>\r\n+              <div className=\"card-hover-effect\"></div>\r\n+            </div>\r\n+          ))}\r\n+        </div>\r\n+      </section>\r\n+\r\n+      {/* Featured Section */}\r\n+      <section className=\"featured-section\">\r\n+        <h2>Quick Access</h2>\r\n+        <div className=\"quick-links\">\r\n+          <button onClick={() => navigate('/transport?from=home&to=downtown')}>\r\n+            üöï To Downtown\r\n+          </button>\r\n+          <button onClick={() => navigate('/food?category=fastfood')}>\r\n+            üçü Fast Food\r\n+          </button>\r\n+          <button onClick={() => navigate('/food?category=coffee')}>\r\n+            ‚òï Coffee Shops\r\n+          </button>\r\n+        </div>\r\n+      </section>\r\n     </div>\r\n   );\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752644885956,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,63 +43,205 @@\n     }\r\n   };\r\n \r\n   return (\r\n-    <div className=\"home-page\">\r\n+    <div className=\"home-page\" style={styles.page}>\r\n       {/* Hero Section */}\r\n-      <section className=\"hero\">\r\n-        <div className=\"hero-content\">\r\n-          <h1>UrbanFlow</h1>\r\n-          <p className=\"tagline\">Your seamless urban living companion</p>\r\n+      <section className=\"hero\" style={styles.hero}>\r\n+        <div className=\"hero-content\" style={styles.heroContent}>\r\n+          <h1 style={styles.title}>UrbanFlow</h1>\r\n+          <p className=\"tagline\" style={styles.tagline}>Your seamless urban living companion</p>\r\n           \r\n-          <form onSubmit={handleSearch} className=\"search-box\">\r\n+          <form onSubmit={handleSearch} className=\"search-box\" style={styles.searchBox}>\r\n             <input\r\n               type=\"text\"\r\n               placeholder=\"Search for restaurants, services...\"\r\n               value={searchQuery}\r\n               onChange={(e) => setSearchQuery(e.target.value)}\r\n+              style={styles.searchInput}\r\n             />\r\n-            <button type=\"submit\">\r\n+            <button type=\"submit\" style={styles.searchButton}>\r\n               <span>üîç</span>\r\n             </button>\r\n           </form>\r\n         </div>\r\n       </section>\r\n \r\n       {/* Services Grid */}\r\n-      <section className=\"services-section\">\r\n-        <h2>What do you need today?</h2>\r\n-        <div className=\"services-grid\">\r\n+      <section className=\"services-section\" style={styles.section}>\r\n+        <h2 style={styles.sectionTitle}>What do you need today?</h2>\r\n+        <div className=\"services-grid\" style={styles.servicesGrid}>\r\n           {services.map((service) => (\r\n             <div \r\n               key={service.name} \r\n               className=\"service-card\"\r\n-              style={{ '--card-color': service.color }}\r\n+              style={{ \r\n+                ...styles.serviceCard,\r\n+                backgroundColor: `${service.color}20`,\r\n+                borderColor: service.color,\r\n+                '--card-color': service.color\r\n+              }}\r\n               onClick={() => navigate(service.path)}\r\n             >\r\n-              <div className=\"service-icon\">{service.icon}</div>\r\n-              <h3>{service.name}</h3>\r\n-              <p>{service.desc}</p>\r\n+              <div className=\"service-icon\" style={styles.serviceIcon}>{service.icon}</div>\r\n+              <h3 style={styles.serviceTitle}>{service.name}</h3>\r\n+              <p style={styles.serviceDesc}>{service.desc}</p>\r\n               <div className=\"card-hover-effect\"></div>\r\n             </div>\r\n           ))}\r\n         </div>\r\n\\ No newline at end of file\n       </section>\r\n \r\n       {/* Featured Section */}\r\n-      <section className=\"featured-section\">\r\n-        <h2>Quick Access</h2>\r\n-        <div className=\"quick-links\">\r\n-          <button onClick={() => navigate('/transport?from=home&to=downtown')}>\r\n+      <section className=\"featured-section\" style={styles.section}>\r\n+        <h2 style={styles.sectionTitle}>Quick Access</h2>\r\n+        <div className=\"quick-links\" style={styles.quickLinks}>\r\n+          <button \r\n+            onClick={() => navigate('/transport?from=home&to=downtown')}\r\n+            style={styles.quickLinkButton}\r\n+          >\r\n             üöï To Downtown\r\n           </button>\r\n-          <button onClick={() => navigate('/food?category=fastfood')}>\r\n+          <button \r\n+            onClick={() => navigate('/food?category=fastfood')}\r\n+            style={styles.quickLinkButton}\r\n+          >\r\n             üçü Fast Food\r\n           </button>\r\n-          <button onClick={() => navigate('/food?category=coffee')}>\r\n+          <button \r\n+            onClick={() => navigate('/food?category=coffee')}\r\n+            style={styles.quickLinkButton}\r\n+          >\r\n             ‚òï Coffee Shops\r\n           </button>\r\n         </div>\r\n       </section>\r\n     </div>\r\n   );\r\n-}\n+}\r\n+\r\n+const styles = {\r\n+  page: {\r\n+    backgroundColor: '#f8fafc',\r\n+    minHeight: '100vh',\r\n+    paddingBottom: '3rem',\r\n+  },\r\n+  hero: {\r\n+    background: 'linear-gradient(135deg, #6b46c1 0%, #3b82f6 100%)',\r\n+    color: 'white',\r\n+    padding: '4rem 1rem',\r\n+    textAlign: 'center',\r\n+    borderRadius: '0 0 20px 20px',\r\n+    boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',\r\n+  },\r\n+  heroContent: {\r\n+    maxWidth: '800px',\r\n+    margin: '0 auto',\r\n+  },\r\n+  title: {\r\n+    fontSize: '3.5rem',\r\n+    fontWeight: '800',\r\n+    marginBottom: '0.5rem',\r\n+    textShadow: '2px 2px 4px rgba(0, 0, 0, 0.2)',\r\n+  },\r\n+  tagline: {\r\n+    fontSize: '1.25rem',\r\n+    marginBottom: '2rem',\r\n+    opacity: 0.9,\r\n+  },\r\n+  searchBox: {\r\n+    display: 'flex',\r\n+    maxWidth: '600px',\r\n+    margin: '0 auto',\r\n+    borderRadius: '50px',\r\n+    overflow: 'hidden',\r\n+    boxShadow: '0 4px 10px rgba(0, 0, 0, 0.2)',\r\n+  },\r\n+  searchInput: {\r\n+    flex: 1,\r\n+    padding: '1rem 1.5rem',\r\n+    border: 'none',\r\n+    fontSize: '1rem',\r\n+    outline: 'none',\r\n+  },\r\n+  searchButton: {\r\n+    backgroundColor: '#1e40af',\r\n+    color: 'white',\r\n+    border: 'none',\r\n+    padding: '0 1.5rem',\r\n+    cursor: 'pointer',\r\n+    fontSize: '1.25rem',\r\n+    transition: 'background-color 0.2s',\r\n+  },\r\n+  section: {\r\n+    padding: '2rem 1rem',\r\n+    maxWidth: '1200px',\r\n+    margin: '0 auto',\r\n+  },\r\n+  sectionTitle: {\r\n+    fontSize: '2rem',\r\n+    fontWeight: '700',\r\n+    marginBottom: '1.5rem',\r\n+    color: '#1e293b',\r\n+    textAlign: 'center',\r\n+  },\r\n+  servicesGrid: {\r\n+    display: 'grid',\r\n+    gridTemplateColumns: 'repeat(auto-fit, minmax(250px, 1fr))',\r\n+    gap: '1.5rem',\r\n+    marginTop: '1rem',\r\n+  },\r\n+  serviceCard: {\r\n+    padding: '2rem 1.5rem',\r\n+    borderRadius: '16px',\r\n+    border: '2px solid',\r\n+    textAlign: 'center',\r\n+    cursor: 'pointer',\r\n+    transition: 'transform 0.3s, box-shadow 0.3s',\r\n+    position: 'relative',\r\n+    overflow: 'hidden',\r\n+    backdropFilter: 'blur(10px)',\r\n+    ':hover': {\r\n+      transform: 'translateY(-5px)',\r\n+      boxShadow: '0 10px 20px rgba(0, 0, 0, 0.1)',\r\n+    },\r\n+  },\r\n+  serviceIcon: {\r\n+    fontSize: '3rem',\r\n+    marginBottom: '1rem',\r\n+  },\r\n+  serviceTitle: {\r\n+    fontSize: '1.5rem',\r\n+    fontWeight: '600',\r\n+    marginBottom: '0.5rem',\r\n+    color: '#1e293b',\r\n+  },\r\n+  serviceDesc: {\r\n+    color: '#64748b',\r\n+    fontSize: '1rem',\r\n+    lineHeight: '1.5',\r\n+  },\r\n+  quickLinks: {\r\n+    display: 'flex',\r\n+    justifyContent: 'center',\r\n+    gap: '1rem',\r\n+    flexWrap: 'wrap',\r\n+  },\r\n+  quickLinkButton: {\r\n+    padding: '0.75rem 1.5rem',\r\n+    borderRadius: '50px',\r\n+    border: 'none',\r\n+    backgroundColor: '#e2e8f0',\r\n+    color: '#1e293b',\r\n+    fontWeight: '600',\r\n+    cursor: 'pointer',\r\n+    transition: 'all 0.2s',\r\n+    display: 'flex',\r\n+    alignItems: 'center',\r\n+    gap: '0.5rem',\r\n+    fontSize: '1rem',\r\n+    ':hover': {\r\n+      backgroundColor: '#cbd5e1',\r\n+      transform: 'scale(1.05)',\r\n+    },\r\n+  },\r\n+};\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752645327181,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,8 +3,9 @@\n \r\n export default function Home() {\r\n   const navigate = useNavigate();\r\n   const [searchQuery, setSearchQuery] = useState('');\r\n+  const [isSearchFocused, setIsSearchFocused] = useState(false);\r\n \r\n   const services = [\r\n     { \r\n       name: 'Transport', \r\n@@ -44,76 +45,121 @@\n   };\r\n \r\n   return (\r\n     <div className=\"home-page\" style={styles.page}>\r\n-      {/* Hero Section */}\r\n+      {/* Enhanced Hero Banner */}\r\n       <section className=\"hero\" style={styles.hero}>\r\n         <div className=\"hero-content\" style={styles.heroContent}>\r\n-          <h1 style={styles.title}>UrbanFlow</h1>\r\n-          <p className=\"tagline\" style={styles.tagline}>Your seamless urban living companion</p>\r\n+          <div style={styles.heroText}>\r\n+            <h1 style={styles.title}>UrbanFlow</h1>\r\n+            <p className=\"tagline\" style={styles.tagline}>\r\n+              Your seamless urban living companion\r\n+              <span style={styles.taglineHighlight}> ¬∑ Discover ¬∑ Connect ¬∑ Enjoy</span>\r\n+            </p>\r\n+          </div>\r\n           \r\n-          <form onSubmit={handleSearch} className=\"search-box\" style={styles.searchBox}>\r\n+          {/* Improved Search Bar */}\r\n+          <form \r\n+            onSubmit={handleSearch} \r\n+            className=\"search-box\" \r\n+            style={{\r\n+              ...styles.searchBox,\r\n+              borderColor: isSearchFocused ? '#3b82f6' : '#e2e8f0',\r\n+              boxShadow: isSearchFocused ? '0 0 0 3px rgba(59, 130, 246, 0.2)' : '0 2px 10px rgba(0, 0, 0, 0.1)'\r\n+            }}\r\n+          >\r\n             <input\r\n               type=\"text\"\r\n-              placeholder=\"Search for restaurants, services...\"\r\n+              placeholder=\"Search for restaurants, services, groceries...\"\r\n               value={searchQuery}\r\n               onChange={(e) => setSearchQuery(e.target.value)}\r\n+              onFocus={() => setIsSearchFocused(true)}\r\n+              onBlur={() => setIsSearchFocused(false)}\r\n               style={styles.searchInput}\r\n             />\r\n-            <button type=\"submit\" style={styles.searchButton}>\r\n-              <span>üîç</span>\r\n+            <button \r\n+              type=\"submit\" \r\n+              style={{\r\n+                ...styles.searchButton,\r\n+                backgroundColor: searchQuery.trim() ? '#1e40af' : '#94a3b8'\r\n+              }}\r\n+              disabled={!searchQuery.trim()}\r\n+            >\r\n+              <span style={styles.searchIcon}>üîç</span>\r\n+              <span style={styles.searchText}>Search</span>\r\n             </button>\r\n           </form>\r\n+\r\n+          <div style={styles.heroFeatures}>\r\n+            <span style={styles.heroFeatureItem}>üöÄ Instant results</span>\r\n+            <span style={styles.heroFeatureItem}>üìç Location-aware</span>\r\n+            <span style={styles.heroFeatureItem}>‚ú® Premium partners</span>\r\n+          </div>\r\n         </div>\r\n+        <div style={styles.heroWave}></div>\r\n       </section>\r\n \r\n-      {/* Services Grid */}\r\n+      {/* Services Grid (Retained Layout) */}\r\n       <section className=\"services-section\" style={styles.section}>\r\n         <h2 style={styles.sectionTitle}>What do you need today?</h2>\r\n+        <p style={styles.sectionSubtitle}>Tap to explore urban services tailored for you</p>\r\n         <div className=\"services-grid\" style={styles.servicesGrid}>\r\n           {services.map((service) => (\r\n             <div \r\n               key={service.name} \r\n               className=\"service-card\"\r\n               style={{ \r\n                 ...styles.serviceCard,\r\n-                backgroundColor: `${service.color}20`,\r\n-                borderColor: service.color,\r\n+                backgroundColor: `${service.color}10`,\r\n+                borderLeft: `5px solid ${service.color}`,\r\n                 '--card-color': service.color\r\n               }}\r\n               onClick={() => navigate(service.path)}\r\n             >\r\n               <div className=\"service-icon\" style={styles.serviceIcon}>{service.icon}</div>\r\n               <h3 style={styles.serviceTitle}>{service.name}</h3>\r\n               <p style={styles.serviceDesc}>{service.desc}</p>\r\n-              <div className=\"card-hover-effect\"></div>\r\n+              <div className=\"card-hover-effect\" style={styles.cardHoverEffect}></div>\r\n             </div>\r\n           ))}\r\n         </div>\r\n       </section>\r\n \r\n-      {/* Featured Section */}\r\n+      {/* Featured Quick Access Section */}\r\n       <section className=\"featured-section\" style={styles.section}>\r\n-        <h2 style={styles.sectionTitle}>Quick Access</h2>\r\n+        <div style={styles.sectionHeader}>\r\n+          <h2 style={styles.sectionTitle}>Quick Access</h2>\r\n+          <p style={styles.sectionSubtitle}>Popular destinations and categories</p>\r\n+        </div>\r\n         <div className=\"quick-links\" style={styles.quickLinks}>\r\n           <button \r\n             onClick={() => navigate('/transport?from=home&to=downtown')}\r\n             style={styles.quickLinkButton}\r\n           >\r\n-            üöï To Downtown\r\n+            <span style={styles.quickLinkIcon}>üöï</span>\r\n+            <span>To Downtown</span>\r\n           </button>\r\n           <button \r\n             onClick={() => navigate('/food?category=fastfood')}\r\n             style={styles.quickLinkButton}\r\n           >\r\n-            üçü Fast Food\r\n+            <span style={styles.quickLinkIcon}>üçü</span>\r\n+            <span>Fast Food</span>\r\n           </button>\r\n           <button \r\n             onClick={() => navigate('/food?category=coffee')}\r\n             style={styles.quickLinkButton}\r\n           >\r\n-            ‚òï Coffee Shops\r\n+            <span style={styles.quickLinkIcon}>‚òï</span>\r\n+            <span>Coffee Shops</span>\r\n           </button>\r\n+          <button \r\n+            onClick={() => navigate('/food?category=pharmacy')}\r\n+            style={styles.quickLinkButton}\r\n+          >\r\n+            <span style={styles.quickLinkIcon}>üíä</span>\r\n+            <span>24hr Pharmacy</span>\r\n+          </button>\r\n         </div>\r\n       </section>\r\n     </div>\r\n   );\r\n@@ -123,125 +169,213 @@\n   page: {\r\n     backgroundColor: '#f8fafc',\r\n     minHeight: '100vh',\r\n     paddingBottom: '3rem',\r\n+    fontFamily: \"'Segoe UI', Roboto, 'Helvetica Neue', sans-serif\",\r\n   },\r\n   hero: {\r\n-    background: 'linear-gradient(135deg, #6b46c1 0%, #3b82f6 100%)',\r\n+    background: 'linear-gradient(135deg, #4f46e5 0%, #2563eb 100%)',\r\n     color: 'white',\r\n-    padding: '4rem 1rem',\r\n+    padding: '5rem 1rem 6rem',\r\n     textAlign: 'center',\r\n-    borderRadius: '0 0 20px 20px',\r\n-    boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',\r\n+    position: 'relative',\r\n+    overflow: 'hidden',\r\n   },\r\n   heroContent: {\r\n-    maxWidth: '800px',\r\n+    maxWidth: '900px',\r\n     margin: '0 auto',\r\n+    position: 'relative',\r\n+    zIndex: 2,\r\n   },\r\n+  heroText: {\r\n+    marginBottom: '2.5rem',\r\n+  },\r\n   title: {\r\n-    fontSize: '3.5rem',\r\n+    fontSize: '4rem',\r\n     fontWeight: '800',\r\n     marginBottom: '0.5rem',\r\n     textShadow: '2px 2px 4px rgba(0, 0, 0, 0.2)',\r\n+    background: 'linear-gradient(to right, #fff, #e0e7ff)',\r\n+    WebkitBackgroundClip: 'text',\r\n+    WebkitTextFillColor: 'transparent',\r\n+    letterSpacing: '-0.05em',\r\n   },\r\n   tagline: {\r\n-    fontSize: '1.25rem',\r\n-    marginBottom: '2rem',\r\n+    fontSize: '1.35rem',\r\n+    marginBottom: '0',\r\n     opacity: 0.9,\r\n+    fontWeight: '400',\r\n   },\r\n+  taglineHighlight: {\r\n+    fontWeight: '600',\r\n+    marginLeft: '0.5rem',\r\n+    color: '#e0e7ff',\r\n+  },\r\n   searchBox: {\r\n     display: 'flex',\r\n-    maxWidth: '600px',\r\n+    maxWidth: '650px',\r\n     margin: '0 auto',\r\n-    borderRadius: '50px',\r\n+    borderRadius: '12px',\r\n     overflow: 'hidden',\r\n-    boxShadow: '0 4px 10px rgba(0, 0, 0, 0.2)',\r\n+    transition: 'all 0.3s ease',\r\n+    backgroundColor: 'white',\r\n+    border: '2px solid',\r\n   },\r\n   searchInput: {\r\n     flex: 1,\r\n-    padding: '1rem 1.5rem',\r\n+    padding: '1.1rem 1.75rem',\r\n     border: 'none',\r\n-    fontSize: '1rem',\r\n+    fontSize: '1.05rem',\r\n     outline: 'none',\r\n+    color: '#1e293b',\r\n+    '::placeholder': {\r\n+      color: '#94a3b8',\r\n+    },\r\n   },\r\n   searchButton: {\r\n-    backgroundColor: '#1e40af',\r\n+    display: 'flex',\r\n+    alignItems: 'center',\r\n+    gap: '0.5rem',\r\n+    padding: '0 2rem',\r\n+    border: 'none',\r\n     color: 'white',\r\n-    border: 'none',\r\n-    padding: '0 1.5rem',\r\n+    fontWeight: '600',\r\n     cursor: 'pointer',\r\n-    fontSize: '1.25rem',\r\n-    transition: 'background-color 0.2s',\r\n+    fontSize: '1rem',\r\n+    transition: 'all 0.2s',\r\n+    ':hover': {\r\n+      filter: 'brightness(1.1)',\r\n+    },\r\n+    ':disabled': {\r\n+      cursor: 'not-allowed',\r\n+      opacity: 0.8,\r\n+    },\r\n   },\r\n+  searchIcon: {\r\n+    fontSize: '1.2rem',\r\n+  },\r\n+  searchText: {\r\n+    display: ['none', 'none', 'block'], // Hide on mobile, show on desktop\r\n+  },\r\n+  heroFeatures: {\r\n+    display: 'flex',\r\n+    justifyContent: 'center',\r\n+    gap: '1.5rem',\r\n+    marginTop: '2rem',\r\n+    flexWrap: 'wrap',\r\n+  },\r\n+  heroFeatureItem: {\r\n+    display: 'flex',\r\n+    alignItems: 'center',\r\n+    gap: '0.5rem',\r\n+    fontSize: '0.95rem',\r\n+    opacity: 0.9,\r\n+  },\r\n+  heroWave: {\r\n+    position: 'absolute',\r\n+    bottom: 0,\r\n+    left: 0,\r\n+    right: 0,\r\n+    height: '100px',\r\n+    background: 'url(\"data:image/svg+xml,%3Csvg xmlns=\\'http://www.w3.org/2000/svg\\' viewBox=\\'0 0 1200 120\\' preserveAspectRatio=\\'none\\'%3E%3Cpath d=\\'M0,0V46.29c47.79,22.2,103.59,32.17,158,28,70.36-5.37,136.33-33.31,206.8-37.5C438.64,32.43,512.34,53.67,583,72.05c69.27,18,138.3,24.88,209.4,13.08,36.15-6,69.85-17.84,104.45-29.34C989.49,25,1113-14.29,1200,52.47V0Z\\' opacity=\\'.25\\' fill=\\'%23f8fafc\\'%3E%3C/path%3E%3Cpath d=\\'M0,0V15.81C13,36.92,27.64,56.86,47.69,72.05,99.41,111.27,165,111,224.58,91.58c31.15-10.15,60.09-26.07,89.67-39.8,40.92-19,84.73-46,130.83-49.67,36.26-2.85,70.9,9.42,98.6,31.56,31.77,25.39,62.32,62,103.63,73,40.44,10.79,81.35-6.69,119.13-24.28s75.16-39,116.92-43.05c59.73-5.85,113.28,22.88,168.9,38.84,30.2,8.66,59,6.17,87.09-7.5,22.43-10.89,48-26.93,60.65-49.24V0Z\\' opacity=\\'.5\\' fill=\\'%23f8fafc\\'%3E%3C/path%3E%3Cpath d=\\'M0,0V5.63C149.93,59,314.09,71.32,475.83,42.57c43-7.64,84.23-20.12,127.61-26.46,59-8.63,112.48,12.24,165.56,35.4C827.93,77.22,886,95.24,951.2,90c86.53-7,172.46-45.71,248.8-84.81V0Z\\' fill=\\'%23f8fafc\\'%3E%3C/path%3E%3C/svg%3E\")',\r\n+    backgroundSize: 'cover',\r\n+    zIndex: 1,\r\n+  },\r\n   section: {\r\n-    padding: '2rem 1rem',\r\n+    padding: '3rem 1rem',\r\n     maxWidth: '1200px',\r\n     margin: '0 auto',\r\n   },\r\n+  sectionHeader: {\r\n+    textAlign: 'center',\r\n+    marginBottom: '2rem',\r\n+  },\r\n   sectionTitle: {\r\n-    fontSize: '2rem',\r\n+    fontSize: '2.25rem',\r\n     fontWeight: '700',\r\n-    marginBottom: '1.5rem',\r\n+    marginBottom: '0.5rem',\r\n     color: '#1e293b',\r\n-    textAlign: 'center',\r\n   },\r\n+  sectionSubtitle: {\r\n+    fontSize: '1.1rem',\r\n+    color: '#64748b',\r\n+    marginBottom: '0',\r\n+  },\r\n   servicesGrid: {\r\n     display: 'grid',\r\n-    gridTemplateColumns: 'repeat(auto-fit, minmax(250px, 1fr))',\r\n-    gap: '1.5rem',\r\n-    marginTop: '1rem',\r\n+    gridTemplateColumns: 'repeat(auto-fit, minmax(260px, 1fr))',\r\n+    gap: '1.75rem',\r\n+    marginTop: '2rem',\r\n   },\r\n   serviceCard: {\r\n     padding: '2rem 1.5rem',\r\n-    borderRadius: '16px',\r\n-    border: '2px solid',\r\n+    borderRadius: '12px',\r\n     textAlign: 'center',\r\n     cursor: 'pointer',\r\n-    transition: 'transform 0.3s, box-shadow 0.3s',\r\n+    transition: 'all 0.3s ease',\r\n     position: 'relative',\r\n     overflow: 'hidden',\r\n-    backdropFilter: 'blur(10px)',\r\n+    backgroundColor: 'white',\r\n+    boxShadow: '0 4px 6px rgba(0, 0, 0, 0.05)',\r\n     ':hover': {\r\n       transform: 'translateY(-5px)',\r\n-      boxShadow: '0 10px 20px rgba(0, 0, 0, 0.1)',\r\n+      boxShadow: '0 10px 25px rgba(0, 0, 0, 0.1)',\r\n     },\r\n   },\r\n   serviceIcon: {\r\n-    fontSize: '3rem',\r\n-    marginBottom: '1rem',\r\n+    fontSize: '3.5rem',\r\n+    marginBottom: '1.5rem',\r\n+    transition: 'transform 0.3s ease',\r\n+    ':hover': {\r\n+      transform: 'scale(1.1)',\r\n+    },\r\n   },\r\n   serviceTitle: {\r\n     fontSize: '1.5rem',\r\n     fontWeight: '600',\r\n-    marginBottom: '0.5rem',\r\n+    marginBottom: '0.75rem',\r\n     color: '#1e293b',\r\n   },\r\n   serviceDesc: {\r\n     color: '#64748b',\r\n     fontSize: '1rem',\r\n-    lineHeight: '1.5',\r\n+    lineHeight: '1.6',\r\n+    marginBottom: '0',\r\n   },\r\n+  cardHoverEffect: {\r\n+    position: 'absolute',\r\n+    top: 0,\r\n+    left: 0,\r\n+    right: 0,\r\n+    height: '4px',\r\n+    backgroundColor: 'var(--card-color)',\r\n+  },\r\n   quickLinks: {\r\n     display: 'flex',\r\n     justifyContent: 'center',\r\n     gap: '1rem',\r\n     flexWrap: 'wrap',\r\n   },\r\n   quickLinkButton: {\r\n-    padding: '0.75rem 1.5rem',\r\n+    padding: '0.9rem 1.75rem',\r\n     borderRadius: '50px',\r\n     border: 'none',\r\n-    backgroundColor: '#e2e8f0',\r\n+    backgroundColor: 'white',\r\n     color: '#1e293b',\r\n     fontWeight: '600',\r\n     cursor: 'pointer',\r\n-    transition: 'all 0.2s',\r\n+    transition: 'all 0.2s ease',\r\n     display: 'flex',\r\n     alignItems: 'center',\r\n-    gap: '0.5rem',\r\n+    gap: '0.75rem',\r\n     fontSize: '1rem',\r\n+    boxShadow: '0 2px 5px rgba(0, 0, 0, 0.08)',\r\n     ':hover': {\r\n-      backgroundColor: '#cbd5e1',\r\n-      transform: 'scale(1.05)',\r\n+      backgroundColor: '#f1f5f9',\r\n+      transform: 'translateY(-2px)',\r\n+      boxShadow: '0 5px 15px rgba(0, 0, 0, 0.1)',\r\n     },\r\n   },\r\n+  quickLinkIcon: {\r\n+    fontSize: '1.2rem',\r\n+  },\r\n };\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752645625088,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,385 @@\n+import { useState } from 'react';\r\n+import { useNavigate } from 'react-router-dom';\r\n+\r\n+export default function Home() {\r\n+  const navigate = useNavigate();\r\n+  const [searchQuery, setSearchQuery] = useState('');\r\n+  const [isSearchFocused, setIsSearchFocused] = useState(false);\r\n+\r\n+  const services = [\r\n+    { \r\n+      name: 'Transport', \r\n+      path: '/transport', \r\n+      icon: 'üöå', \r\n+      desc: 'Plan your multi-modal journey across the city',\r\n+      color: '#3b82f6'\r\n+    },\r\n+    { \r\n+      name: 'Food Delivery', \r\n+      path: '/food', \r\n+      icon: 'üçî', \r\n+      desc: 'Discover local restaurants and cafes',\r\n+      color: '#ef4444'\r\n+    },\r\n+    { \r\n+      name: 'Groceries', \r\n+      path: '/food', \r\n+      icon: 'üõí', \r\n+      desc: 'Get groceries delivered in minutes',\r\n+      color: '#10b981'\r\n+    },\r\n+    { \r\n+      name: 'Services', \r\n+      path: '/food', \r\n+      icon: 'üõ†Ô∏è', \r\n+      desc: 'Find urban services near you',\r\n+      color: '#8b5cf6'\r\n+    }\r\n+  ];\r\n+\r\n+  const handleSearch = (e) => {\r\n+    e.preventDefault();\r\n+    if (searchQuery.trim()) {\r\n+      navigate(`/food?search=${encodeURIComponent(searchQuery)}`);\r\n+    }\r\n+  };\r\n+\r\n+  return (\r\n+    <div className=\"home-page\" style={styles.page}>\r\n+      {/* Modern Hero Banner */}\r\n+      <section className=\"hero\" style={styles.hero}>\r\n+        <div className=\"hero-content\" style={styles.heroContent}>\r\n+          <div style={styles.heroText}>\r\n+            <h1 style={styles.title}>Urban<span style={styles.titleAccent}>Flow</span></h1>\r\n+            <p className=\"tagline\" style={styles.tagline}>\r\n+              Your gateway to seamless city living\r\n+            </p>\r\n+          </div>\r\n+          \r\n+          {/* Premium Search Experience */}\r\n+          <form \r\n+            onSubmit={handleSearch} \r\n+            className=\"search-box\" \r\n+            style={{\r\n+              ...styles.searchBox,\r\n+              borderColor: isSearchFocused ? '#3b82f6' : 'rgba(255,255,255,0.2)',\r\n+              boxShadow: isSearchFocused ? '0 0 0 3px rgba(59, 130, 246, 0.3)' : '0 15px 30px rgba(0, 0, 0, 0.1)'\r\n+            }}\r\n+          >\r\n+            <div style={styles.searchInputContainer}>\r\n+              <span style={styles.searchPrefixIcon}>üîç</span>\r\n+              <input\r\n+                type=\"text\"\r\n+                placeholder=\"Try 'sushi restaurants' or '24hr pharmacy'...\"\r\n+                value={searchQuery}\r\n+                onChange={(e) => setSearchQuery(e.target.value)}\r\n+                onFocus={() => setIsSearchFocused(true)}\r\n+                onBlur={() => setIsSearchFocused(false)}\r\n+                style={styles.searchInput}\r\n+              />\r\n+            </div>\r\n+            <button \r\n+              type=\"submit\" \r\n+              style={{\r\n+                ...styles.searchButton,\r\n+                backgroundColor: searchQuery.trim() ? '#2563eb' : '#64748b'\r\n+              }}\r\n+              disabled={!searchQuery.trim()}\r\n+            >\r\n+              Search\r\n+            </button>\r\n+          </form>\r\n+\r\n+          {/* Value Propositions */}\r\n+          <div style={styles.valueProps}>\r\n+            <div style={styles.valuePropItem}>\r\n+              <span style={styles.valuePropIcon}>‚ö°</span>\r\n+              <span>Instant results</span>\r\n+            </div>\r\n+            <div style={styles.valuePropItem}>\r\n+              <span style={styles.valuePropIcon}>üéØ</span>\r\n+              <span>Personalized</span>\r\n+            </div>\r\n+            <div style={styles.valuePropItem}>\r\n+              <span style={styles.valuePropIcon}>üîí</span>\r\n+              <span>Verified partners</span>\r\n+            </div>\r\n+          </div>\r\n+        </div>\r\n+      </section>\r\n+\r\n+      {/* Services Grid */}\r\n+      <section className=\"services-section\" style={styles.section}>\r\n+        <div style={styles.sectionHeader}>\r\n+          <h2 style={styles.sectionTitle}>City Services at Your Fingertips</h2>\r\n+          <p style={styles.sectionSubtitle}>Everything you need, just a tap away</p>\r\n+        </div>\r\n+        <div className=\"services-grid\" style={styles.servicesGrid}>\r\n+          {services.map((service) => (\r\n+            <div \r\n+              key={service.name} \r\n+              className=\"service-card\"\r\n+              style={{ \r\n+                ...styles.serviceCard,\r\n+                '--card-color': service.color\r\n+              }}\r\n+              onClick={() => navigate(service.path)}\r\n+            >\r\n+              <div className=\"service-icon\" style={styles.serviceIcon}>{service.icon}</div>\r\n+              <h3 style={styles.serviceTitle}>{service.name}</h3>\r\n+              <p style={styles.serviceDesc}>{service.desc}</p>\r\n+              <div style={styles.serviceHoverIndicator}></div>\r\n+            </div>\r\n+          ))}\r\n+        </div>\r\n+      </section>\r\n+\r\n+      {/* Quick Access Section */}\r\n+      <section className=\"featured-section\" style={styles.section}>\r\n+        <div style={styles.sectionHeader}>\r\n+          <h2 style={styles.sectionTitle}>Quick Access</h2>\r\n+          <p style={styles.sectionSubtitle}>Popular choices in your area</p>\r\n+        </div>\r\n+        <div className=\"quick-links\" style={styles.quickLinks}>\r\n+          {[\r\n+            { icon: 'üöï', label: 'Taxi to Airport', path: '/transport?to=airport' },\r\n+            { icon: 'üçï', label: 'Pizza Delivery', path: '/food?category=pizza' },\r\n+            { icon: '‚òï', label: 'Coffee Nearby', path: '/food?category=coffee' },\r\n+            { icon: 'üíä', label: 'Late Night Pharmacy', path: '/services?category=pharmacy' },\r\n+            { icon: 'üõí', label: 'Grocery Deals', path: '/groceries?deals=true' }\r\n+          ].map((item) => (\r\n+            <button \r\n+              key={item.label}\r\n+              onClick={() => navigate(item.path)}\r\n+              style={styles.quickLinkButton}\r\n+            >\r\n+              <span style={styles.quickLinkIcon}>{item.icon}</span>\r\n+              {item.label}\r\n+            </button>\r\n+          ))}\r\n+        </div>\r\n+      </section>\r\n+    </div>\r\n+  );\r\n+}\r\n+\r\n+const styles = {\r\n+  page: {\r\n+    backgroundColor: '#f8fafc',\r\n+    minHeight: '100vh',\r\n+    fontFamily: \"'Inter', -apple-system, BlinkMacSystemFont, sans-serif\",\r\n+  },\r\n+  hero: {\r\n+    background: 'linear-gradient(135deg, #1e293b 0%, #0f172a 100%)',\r\n+    color: 'white',\r\n+    padding: '6rem 1rem 8rem',\r\n+    textAlign: 'center',\r\n+    position: 'relative',\r\n+    overflow: 'hidden',\r\n+    '::before': {\r\n+      content: '\"\"',\r\n+      position: 'absolute',\r\n+      inset: 0,\r\n+      background: 'radial-gradient(circle at 20% 50%, rgba(56, 182, 255, 0.15) 0%, transparent 40%)',\r\n+    },\r\n+  },\r\n+  heroContent: {\r\n+    maxWidth: '800px',\r\n+    margin: '0 auto',\r\n+    position: 'relative',\r\n+    zIndex: 2,\r\n+  },\r\n+  heroText: {\r\n+    marginBottom: '3rem',\r\n+  },\r\n+  title: {\r\n+    fontSize: '3.5rem',\r\n+    fontWeight: '800',\r\n+    margin: '0 0 0.5rem',\r\n+    letterSpacing: '-0.025em',\r\n+    color: 'white',\r\n+  },\r\n+  titleAccent: {\r\n+    background: 'linear-gradient(90deg, #38bdf8, #818cf8)',\r\n+    WebkitBackgroundClip: 'text',\r\n+    WebkitTextFillColor: 'transparent',\r\n+  },\r\n+  tagline: {\r\n+    fontSize: '1.35rem',\r\n+    margin: '0',\r\n+    opacity: 0.9,\r\n+    fontWeight: '400',\r\n+    color: '#e2e8f0',\r\n+  },\r\n+  searchBox: {\r\n+    display: 'flex',\r\n+    maxWidth: '700px',\r\n+    margin: '0 auto',\r\n+    borderRadius: '12px',\r\n+    overflow: 'hidden',\r\n+    transition: 'all 0.3s cubic-bezier(0.4, 0, 0.2, 1)',\r\n+    backgroundColor: 'rgba(255, 255, 255, 0.1)',\r\n+    backdropFilter: 'blur(8px)',\r\n+    border: '1px solid',\r\n+    marginBottom: '3rem',\r\n+  },\r\n+  searchInputContainer: {\r\n+    flex: 1,\r\n+    display: 'flex',\r\n+    alignItems: 'center',\r\n+    padding: '0 1.25rem',\r\n+  },\r\n+  searchPrefixIcon: {\r\n+    marginRight: '0.75rem',\r\n+    opacity: 0.7,\r\n+    fontSize: '1.1rem',\r\n+  },\r\n+  searchInput: {\r\n+    flex: 1,\r\n+    padding: '1.25rem 0',\r\n+    border: 'none',\r\n+    fontSize: '1.05rem',\r\n+    outline: 'none',\r\n+    color: 'white',\r\n+    background: 'transparent',\r\n+    '::placeholder': {\r\n+      color: 'rgba(255, 255, 255, 0.6)',\r\n+    },\r\n+  },\r\n+  searchButton: {\r\n+    padding: '0 2rem',\r\n+    border: 'none',\r\n+    color: 'white',\r\n+    fontWeight: '600',\r\n+    cursor: 'pointer',\r\n+    fontSize: '1rem',\r\n+    transition: 'all 0.2s ease',\r\n+    ':hover': {\r\n+      filter: 'brightness(1.1)',\r\n+    },\r\n+    ':disabled': {\r\n+      cursor: 'not-allowed',\r\n+      opacity: 0.7,\r\n+    },\r\n+  },\r\n+  valueProps: {\r\n+    display: 'flex',\r\n+    justifyContent: 'center',\r\n+    gap: '2rem',\r\n+    flexWrap: 'wrap',\r\n+  },\r\n+  valuePropItem: {\r\n+    display: 'flex',\r\n+    alignItems: 'center',\r\n+    gap: '0.5rem',\r\n+    fontSize: '0.95rem',\r\n+    color: '#e2e8f0',\r\n+    opacity: 0.9,\r\n+  },\r\n+  valuePropIcon: {\r\n+    fontSize: '1.1rem',\r\n+  },\r\n+  section: {\r\n+    padding: '4rem 1rem',\r\n+    maxWidth: '1200px',\r\n+    margin: '0 auto',\r\n+  },\r\n+  sectionHeader: {\r\n+    textAlign: 'center',\r\n+    marginBottom: '3rem',\r\n+  },\r\n+  sectionTitle: {\r\n+    fontSize: '2.25rem',\r\n+    fontWeight: '700',\r\n+    margin: '0 0 0.5rem',\r\n+    color: '#1e293b',\r\n+    lineHeight: '1.2',\r\n+  },\r\n+  sectionSubtitle: {\r\n+    fontSize: '1.1rem',\r\n+    color: '#64748b',\r\n+    margin: '0',\r\n+    fontWeight: '400',\r\n+  },\r\n+  servicesGrid: {\r\n+    display: 'grid',\r\n+    gridTemplateColumns: 'repeat(auto-fit, minmax(280px, 1fr))',\r\n+    gap: '2rem',\r\n+  },\r\n+  serviceCard: {\r\n+    padding: '2.5rem 2rem',\r\n+    borderRadius: '16px',\r\n+    textAlign: 'center',\r\n+    cursor: 'pointer',\r\n+    transition: 'all 0.3s ease',\r\n+    position: 'relative',\r\n+    overflow: 'hidden',\r\n+    backgroundColor: 'white',\r\n+    boxShadow: '0 4px 20px rgba(0, 0, 0, 0.05)',\r\n+    border: '1px solid rgba(0, 0, 0, 0.03)',\r\n+    ':hover': {\r\n+      transform: 'translateY(-8px)',\r\n+      boxShadow: '0 15px 30px rgba(0, 0, 0, 0.1)',\r\n+    },\r\n+  },\r\n+  serviceIcon: {\r\n+    fontSize: '3.5rem',\r\n+    marginBottom: '1.5rem',\r\n+    transition: 'transform 0.3s ease',\r\n+  },\r\n+  serviceTitle: {\r\n+    fontSize: '1.5rem',\r\n+    fontWeight: '600',\r\n+    margin: '0 0 0.75rem',\r\n+    color: '#1e293b',\r\n+  },\r\n+  serviceDesc: {\r\n+    color: '#64748b',\r\n+    fontSize: '1rem',\r\n+    lineHeight: '1.6',\r\n+    margin: '0',\r\n+  },\r\n+  serviceHoverIndicator: {\r\n+    position: 'absolute',\r\n+    bottom: 0,\r\n+    left: 0,\r\n+    right: 0,\r\n+    height: '4px',\r\n+    backgroundColor: 'var(--card-color)',\r\n+    transform: 'scaleX(0)',\r\n+    transformOrigin: 'left',\r\n+    transition: 'transform 0.3s ease',\r\n+    ':hover': {\r\n+      transform: 'scaleX(1)',\r\n+    },\r\n+  },\r\n+  quickLinks: {\r\n+    display: 'flex',\r\n+    justifyContent: 'center',\r\n+    gap: '1rem',\r\n+    flexWrap: 'wrap',\r\n+  },\r\n+  quickLinkButton: {\r\n+    padding: '1rem 1.75rem',\r\n+    borderRadius: '50px',\r\n+    border: 'none',\r\n+    backgroundColor: 'white',\r\n+    color: '#1e293b',\r\n+    fontWeight: '500',\r\n+    cursor: 'pointer',\r\n+    transition: 'all 0.2s ease',\r\n+    display: 'flex',\r\n+    alignItems: 'center',\r\n+    gap: '0.75rem',\r\n+    fontSize: '0.95rem',\r\n+    boxShadow: '0 2px 8px rgba(0, 0, 0, 0.05)',\r\n+    ':hover': {\r\n+      backgroundColor: '#f1f5f9',\r\n+      transform: 'translateY(-2px)',\r\n+      boxShadow: '0 5px 15px rgba(0, 0, 0, 0.1)',\r\n+    },\r\n+  },\r\n+  quickLinkIcon: {\r\n+    fontSize: '1.2rem',\r\n+  },\r\n+};\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752646183743,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,397 +1,26 @@\n-import { useState } from 'react';\r\n+import { useState, useEffect } from 'react';\r\n import { useNavigate } from 'react-router-dom';\r\n \r\n export default function Home() {\r\n   const navigate = useNavigate();\r\n   const [searchQuery, setSearchQuery] = useState('');\r\n+  const [darkMode, setDarkMode] = useState(false);\r\n   const [isSearchFocused, setIsSearchFocused] = useState(false);\r\n \r\n-  const services = [\r\n-    { \r\n-      name: 'Transport', \r\n-      path: '/transport', \r\n-      icon: 'üöå', \r\n-      desc: 'Plan your multi-modal journey across the city',\r\n-      color: '#3b82f6'\r\n-    },\r\n-    { \r\n-      name: 'Food Delivery', \r\n-      path: '/food', \r\n-      icon: 'üçî', \r\n-      desc: 'Discover local restaurants and cafes',\r\n-      color: '#ef4444'\r\n-    },\r\n-    { \r\n-      name: 'Groceries', \r\n-      path: '/food', \r\n-      icon: 'üõí', \r\n-      desc: 'Get groceries delivered in minutes',\r\n-      color: '#10b981'\r\n-    },\r\n-    { \r\n-      name: 'Services', \r\n-      path: '/food', \r\n-      icon: 'üõ†Ô∏è', \r\n-      desc: 'Find urban services near you',\r\n-      color: '#8b5cf6'\r\n-    }\r\n-  ];\r\n-\r\n-  const handleSearch = (e) => {\r\n-    e.preventDefault();\r\n-    if (searchQuery.trim()) {\r\n-      navigate(`/food?search=${encodeURIComponent(searchQuery)}`);\r\n-    }\r\n+  // Toggle dark mode and persist in localStorage\r\n+  const toggleDarkMode = () => {\r\n+    const newMode = !darkMode;\r\n+    setDarkMode(newMode);\r\n+    localStorage.setItem('darkMode', JSON.stringify(newMode));\r\n   };\r\n \r\n-  return (\r\n-    <div className=\"home-page\" style={styles.page}>\r\n-      {/* Modern Hero Banner */}\r\n-      <section className=\"hero\" style={styles.hero}>\r\n-        <div className=\"hero-content\" style={styles.heroContent}>\r\n-          <div style={styles.heroText}>\r\n-            <h1 style={styles.title}>Urban<span style={styles.titleAccent}>Flow</span></h1>\r\n-            <p className=\"tagline\" style={styles.tagline}>\r\n-              Your gateway to seamless city living\r\n-            </p>\r\n-          </div>\r\n-          \r\n-          {/* Premium Search Experience */}\r\n-          <form \r\n-            onSubmit={handleSearch} \r\n-            className=\"search-box\" \r\n-            style={{\r\n-              ...styles.searchBox,\r\n-              borderColor: isSearchFocused ? '#3b82f6' : 'rgba(255,255,255,0.2)',\r\n-              boxShadow: isSearchFocused ? '0 0 0 3px rgba(59, 130, 246, 0.3)' : '0 15px 30px rgba(0, 0, 0, 0.1)'\r\n-            }}\r\n-          >\r\n-            <div style={styles.searchInputContainer}>\r\n-              <span style={styles.searchPrefixIcon}>üîç</span>\r\n-              <input\r\n-                type=\"text\"\r\n-                placeholder=\"Try 'sushi restaurants' or '24hr pharmacy'...\"\r\n-                value={searchQuery}\r\n-                onChange={(e) => setSearchQuery(e.target.value)}\r\n-                onFocus={() => setIsSearchFocused(true)}\r\n-                onBlur={() => setIsSearchFocused(false)}\r\n-                style={styles.searchInput}\r\n-              />\r\n-            </div>\r\n-            <button \r\n-              type=\"submit\" \r\n-              style={{\r\n-                ...styles.searchButton,\r\n-                backgroundColor: searchQuery.trim() ? '#2563eb' : '#64748b'\r\n-              }}\r\n-              disabled={!searchQuery.trim()}\r\n-            >\r\n-              Search\r\n-            </button>\r\n-          </form>\r\n+  // Check for saved preference on load\r\n+  useEffect(() => {\r\n+    const savedMode = JSON.parse(localStorage.getItem('darkMode'));\r\n+    if (savedMode !== null) setDarkMode(savedMode);\r\n+  }, []);\r\n \r\n-          {/* Value Propositions */}\r\n-          <div style={styles.valueProps}>\r\n-            <div style={styles.valuePropItem}>\r\n-              <span style={styles.valuePropIcon}>‚ö°</span>\r\n-              <span>Instant results</span>\r\n-            </div>\r\n-            <div style={styles.valuePropItem}>\r\n-              <span style={styles.valuePropIcon}>üéØ</span>\r\n-              <span>Personalized</span>\r\n-            </div>\r\n-            <div style={styles.valuePropItem}>\r\n-              <span style={styles.valuePropIcon}>üîí</span>\r\n-              <span>Verified partners</span>\r\n-            </div>\r\n-          </div>\r\n-        </div>\r\n-      </section>\r\n-\r\n-      {/* Services Grid */}\r\n-      <section className=\"services-section\" style={styles.section}>\r\n-        <div style={styles.sectionHeader}>\r\n-          <h2 style={styles.sectionTitle}>City Services at Your Fingertips</h2>\r\n-          <p style={styles.sectionSubtitle}>Everything you need, just a tap away</p>\r\n-        </div>\r\n-        <div className=\"services-grid\" style={styles.servicesGrid}>\r\n-          {services.map((service) => (\r\n-            <div \r\n-              key={service.name} \r\n-              className=\"service-card\"\r\n-              style={{ \r\n-                ...styles.serviceCard,\r\n-                '--card-color': service.color\r\n-              }}\r\n-              onClick={() => navigate(service.path)}\r\n-            >\r\n-              <div className=\"service-icon\" style={styles.serviceIcon}>{service.icon}</div>\r\n-              <h3 style={styles.serviceTitle}>{service.name}</h3>\r\n-              <p style={styles.serviceDesc}>{service.desc}</p>\r\n-              <div style={styles.serviceHoverIndicator}></div>\r\n-            </div>\r\n-          ))}\r\n-        </div>\r\n-      </section>\r\n-\r\n-      {/* Quick Access Section */}\r\n-      <section className=\"featured-section\" style={styles.section}>\r\n-        <div style={styles.sectionHeader}>\r\n-          <h2 style={styles.sectionTitle}>Quick Access</h2>\r\n-          <p style={styles.sectionSubtitle}>Popular choices in your area</p>\r\n-        </div>\r\n-        <div className=\"quick-links\" style={styles.quickLinks}>\r\n-          {[\r\n-            { icon: 'üöï', label: 'Taxi to Airport', path: '/transport?to=airport' },\r\n-            { icon: 'üçï', label: 'Pizza Delivery', path: '/food?category=pizza' },\r\n-            { icon: '‚òï', label: 'Coffee Nearby', path: '/food?category=coffee' },\r\n-            { icon: 'üíä', label: 'Late Night Pharmacy', path: '/services?category=pharmacy' },\r\n-            { icon: 'üõí', label: 'Grocery Deals', path: '/groceries?deals=true' }\r\n-          ].map((item) => (\r\n-            <button \r\n-              key={item.label}\r\n-              onClick={() => navigate(item.path)}\r\n-              style={styles.quickLinkButton}\r\n-            >\r\n-              <span style={styles.quickLinkIcon}>{item.icon}</span>\r\n-              {item.label}\r\n-            </button>\r\n-          ))}\r\n-        </div>\r\n-      </section>\r\n-    </div>\r\n-  );\r\n-}\r\n-\r\n-const styles = {\r\n-  page: {\r\n-    backgroundColor: '#f8fafc',\r\n-    minHeight: '100vh',\r\n-    fontFamily: \"'Inter', -apple-system, BlinkMacSystemFont, sans-serif\",\r\n-  },\r\n-  hero: {\r\n-    background: 'linear-gradient(135deg, #1e293b 0%, #0f172a 100%)',\r\n-    color: 'white',\r\n-    padding: '6rem 1rem 8rem',\r\n-    textAlign: 'center',\r\n-    position: 'relative',\r\n-    overflow: 'hidden',\r\n-    '::before': {\r\n-      content: '\"\"',\r\n-      position: 'absolute',\r\n-      inset: 0,\r\n-      background: 'radial-gradient(circle at 20% 50%, rgba(56, 182, 255, 0.15) 0%, transparent 40%)',\r\n-    },\r\n-  },\r\n-  heroContent: {\r\n-    maxWidth: '800px',\r\n-    margin: '0 auto',\r\n-    position: 'relative',\r\n-    zIndex: 2,\r\n-  },\r\n-  heroText: {\r\n-    marginBottom: '3rem',\r\n-  },\r\n-  title: {\r\n-    fontSize: '3.5rem',\r\n-    fontWeight: '800',\r\n-    margin: '0 0 0.5rem',\r\n-    letterSpacing: '-0.025em',\r\n-    color: 'white',\r\n-  },\r\n-  titleAccent: {\r\n-    background: 'linear-gradient(90deg, #38bdf8, #818cf8)',\r\n-    WebkitBackgroundClip: 'text',\r\n-    WebkitTextFillColor: 'transparent',\r\n-  },\r\n-  tagline: {\r\n-    fontSize: '1.35rem',\r\n-    margin: '0',\r\n-    opacity: 0.9,\r\n-    fontWeight: '400',\r\n-    color: '#e2e8f0',\r\n-  },\r\n-  searchBox: {\r\n-    display: 'flex',\r\n-    maxWidth: '700px',\r\n-    margin: '0 auto',\r\n-    borderRadius: '12px',\r\n-    overflow: 'hidden',\r\n-    transition: 'all 0.3s cubic-bezier(0.4, 0, 0.2, 1)',\r\n-    backgroundColor: 'rgba(255, 255, 255, 0.1)',\r\n-    backdropFilter: 'blur(8px)',\r\n-    border: '1px solid',\r\n-    marginBottom: '3rem',\r\n-  },\r\n-  searchInputContainer: {\r\n-    flex: 1,\r\n-    display: 'flex',\r\n-    alignItems: 'center',\r\n-    padding: '0 1.25rem',\r\n-  },\r\n-  searchPrefixIcon: {\r\n-    marginRight: '0.75rem',\r\n-    opacity: 0.7,\r\n-    fontSize: '1.1rem',\r\n-  },\r\n-  searchInput: {\r\n-    flex: 1,\r\n-    padding: '1.25rem 0',\r\n-    border: 'none',\r\n-    fontSize: '1.05rem',\r\n-    outline: 'none',\r\n-    color: 'white',\r\n-    background: 'transparent',\r\n-    '::placeholder': {\r\n-      color: 'rgba(255, 255, 255, 0.6)',\r\n-    },\r\n-  },\r\n-  searchButton: {\r\n-    padding: '0 2rem',\r\n-    border: 'none',\r\n-    color: 'white',\r\n-    fontWeight: '600',\r\n-    cursor: 'pointer',\r\n-    fontSize: '1rem',\r\n-    transition: 'all 0.2s ease',\r\n-    ':hover': {\r\n-      filter: 'brightness(1.1)',\r\n-    },\r\n-    ':disabled': {\r\n-      cursor: 'not-allowed',\r\n-      opacity: 0.7,\r\n-    },\r\n-  },\r\n-  valueProps: {\r\n-    display: 'flex',\r\n-    justifyContent: 'center',\r\n-    gap: '2rem',\r\n-    flexWrap: 'wrap',\r\n-  },\r\n-  valuePropItem: {\r\n-    display: 'flex',\r\n-    alignItems: 'center',\r\n-    gap: '0.5rem',\r\n-    fontSize: '0.95rem',\r\n-    color: '#e2e8f0',\r\n-    opacity: 0.9,\r\n-  },\r\n-  valuePropIcon: {\r\n-    fontSize: '1.1rem',\r\n-  },\r\n-  section: {\r\n-    padding: '4rem 1rem',\r\n-    maxWidth: '1200px',\r\n-    margin: '0 auto',\r\n-  },\r\n-  sectionHeader: {\r\n-    textAlign: 'center',\r\n-    marginBottom: '3rem',\r\n-  },\r\n-  sectionTitle: {\r\n-    fontSize: '2.25rem',\r\n-    fontWeight: '700',\r\n-    margin: '0 0 0.5rem',\r\n-    color: '#1e293b',\r\n-    lineHeight: '1.2',\r\n-  },\r\n-  sectionSubtitle: {\r\n-    fontSize: '1.1rem',\r\n-    color: '#64748b',\r\n-    margin: '0',\r\n-    fontWeight: '400',\r\n-  },\r\n-  servicesGrid: {\r\n-    display: 'grid',\r\n-    gridTemplateColumns: 'repeat(auto-fit, minmax(280px, 1fr))',\r\n-    gap: '2rem',\r\n-  },\r\n-  serviceCard: {\r\n-    padding: '2.5rem 2rem',\r\n-    borderRadius: '16px',\r\n-    textAlign: 'center',\r\n-    cursor: 'pointer',\r\n-    transition: 'all 0.3s ease',\r\n-    position: 'relative',\r\n-    overflow: 'hidden',\r\n-    backgroundColor: 'white',\r\n-    boxShadow: '0 4px 20px rgba(0, 0, 0, 0.05)',\r\n-    border: '1px solid rgba(0, 0, 0, 0.03)',\r\n-    ':hover': {\r\n-      transform: 'translateY(-8px)',\r\n-      boxShadow: '0 15px 30px rgba(0, 0, 0, 0.1)',\r\n-    },\r\n-  },\r\n-  serviceIcon: {\r\n-    fontSize: '3.5rem',\r\n-    marginBottom: '1.5rem',\r\n-    transition: 'transform 0.3s ease',\r\n-  },\r\n-  serviceTitle: {\r\n-    fontSize: '1.5rem',\r\n-    fontWeight: '600',\r\n-    margin: '0 0 0.75rem',\r\n-    color: '#1e293b',\r\n-  },\r\n-  serviceDesc: {\r\n-    color: '#64748b',\r\n-    fontSize: '1rem',\r\n-    lineHeight: '1.6',\r\n-    margin: '0',\r\n-  },\r\n-  serviceHoverIndicator: {\r\n-    position: 'absolute',\r\n-    bottom: 0,\r\n-    left: 0,\r\n-    right: 0,\r\n-    height: '4px',\r\n-    backgroundColor: 'var(--card-color)',\r\n-    transform: 'scaleX(0)',\r\n-    transformOrigin: 'left',\r\n-    transition: 'transform 0.3s ease',\r\n-    ':hover': {\r\n-      transform: 'scaleX(1)',\r\n-    },\r\n-  },\r\n-  quickLinks: {\r\n-    display: 'flex',\r\n-    justifyContent: 'center',\r\n-    gap: '1rem',\r\n-    flexWrap: 'wrap',\r\n-  },\r\n-  quickLinkButton: {\r\n-    padding: '1rem 1.75rem',\r\n-    borderRadius: '50px',\r\n-    border: 'none',\r\n-    backgroundColor: 'white',\r\n-    color: '#1e293b',\r\n-    fontWeight: '500',\r\n-    cursor: 'pointer',\r\n-    transition: 'all 0.2s ease',\r\n-    display: 'flex',\r\n-    alignItems: 'center',\r\n-    gap: '0.75rem',\r\n-    fontSize: '0.95rem',\r\n-    boxShadow: '0 2px 8px rgba(0, 0, 0, 0.05)',\r\n-    ':hover': {\r\n-      backgroundColor: '#f1f5f9',\r\n-      transform: 'translateY(-2px)',\r\n-      boxShadow: '0 5px 15px rgba(0, 0, 0, 0.1)',\r\n-    },\r\n-  },\r\n-  quickLinkIcon: {\r\n-    fontSize: '1.2rem',\r\n-  },\r\n-};\n-import { useState } from 'react';\r\n-import { useNavigate } from 'react-router-dom';\r\n-\r\n-export default function Home() {\r\n-  const navigate = useNavigate();\r\n-  const [searchQuery, setSearchQuery] = useState('');\r\n-  const [isSearchFocused, setIsSearchFocused] = useState(false);\r\n-\r\n   const services = [\r\n     { \r\n       name: 'Transport', \r\n       path: '/transport', \r\n@@ -428,339 +57,303 @@\n       navigate(`/food?search=${encodeURIComponent(searchQuery)}`);\r\n     }\r\n   };\r\n \r\n+  // Unsplash image URL (New York City skyline)\r\n+  const cityBannerUrl = 'https://images.unsplash.com/photo-1485872299829-c673f5194813?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=2400&q=80';\r\n+\r\n   return (\r\n-    <div className=\"home-page\" style={styles.page}>\r\n-      {/* Enhanced Hero Banner */}\r\n-      <section className=\"hero\" style={styles.hero}>\r\n+    <div className=\"home-page\" style={darkMode ? styles.dark.page : styles.light.page}>\r\n+      {/* City Banner with Dark Mode Toggle */}\r\n+      <section className=\"hero\" style={{\r\n+        ...styles.hero,\r\n+        background: `linear-gradient(rgba(0, 0, 0, 0.4), url(${cityBannerUrl})`,\r\n+        backgroundSize: 'cover',\r\n+        backgroundPosition: 'center'\r\n+      }}>\r\n+        <button \r\n+          onClick={toggleDarkMode} \r\n+          style={styles.themeToggle}\r\n+          aria-label={darkMode ? 'Switch to light mode' : 'Switch to dark mode'}\r\n+        >\r\n+          {darkMode ? '‚òÄÔ∏è' : 'üåô'}\r\n+        </button>\r\n+        \r\n         <div className=\"hero-content\" style={styles.heroContent}>\r\n-          <div style={styles.heroText}>\r\n-            <h1 style={styles.title}>UrbanFlow</h1>\r\n-            <p className=\"tagline\" style={styles.tagline}>\r\n-              Your seamless urban living companion\r\n-              <span style={styles.taglineHighlight}> ¬∑ Discover ¬∑ Connect ¬∑ Enjoy</span>\r\n-            </p>\r\n-          </div>\r\n+          <h1 style={styles.title}>UrbanFlow</h1>\r\n+          <p className=\"tagline\" style={styles.tagline}>Your seamless urban living companion</p>\r\n           \r\n-          {/* Improved Search Bar */}\r\n-          <form \r\n-            onSubmit={handleSearch} \r\n-            className=\"search-box\" \r\n-            style={{\r\n-              ...styles.searchBox,\r\n-              borderColor: isSearchFocused ? '#3b82f6' : '#e2e8f0',\r\n-              boxShadow: isSearchFocused ? '0 0 0 3px rgba(59, 130, 246, 0.2)' : '0 2px 10px rgba(0, 0, 0, 0.1)'\r\n-            }}\r\n-          >\r\n+          <form onSubmit={handleSearch} className=\"search-box\" style={{\r\n+            ...styles.searchBox,\r\n+            borderColor: isSearchFocused ? '#3b82f6' : 'rgba(255,255,255,0.3)',\r\n+            boxShadow: isSearchFocused ? '0 0 0 3px rgba(59, 130, 246, 0.3)' : 'none'\r\n+          }}>\r\n             <input\r\n               type=\"text\"\r\n-              placeholder=\"Search for restaurants, services, groceries...\"\r\n+              placeholder=\"Search for restaurants, services...\"\r\n               value={searchQuery}\r\n               onChange={(e) => setSearchQuery(e.target.value)}\r\n               onFocus={() => setIsSearchFocused(true)}\r\n               onBlur={() => setIsSearchFocused(false)}\r\n               style={styles.searchInput}\r\n             />\r\n-            <button \r\n-              type=\"submit\" \r\n-              style={{\r\n-                ...styles.searchButton,\r\n-                backgroundColor: searchQuery.trim() ? '#1e40af' : '#94a3b8'\r\n-              }}\r\n-              disabled={!searchQuery.trim()}\r\n-            >\r\n-              <span style={styles.searchIcon}>üîç</span>\r\n-              <span style={styles.searchText}>Search</span>\r\n+            <button type=\"submit\" style={styles.searchButton}>\r\n+              <span>üîç</span>\r\n             </button>\r\n           </form>\r\n-\r\n-          <div style={styles.heroFeatures}>\r\n-            <span style={styles.heroFeatureItem}>üöÄ Instant results</span>\r\n-            <span style={styles.heroFeatureItem}>üìç Location-aware</span>\r\n-            <span style={styles.heroFeatureItem}>‚ú® Premium partners</span>\r\n-          </div>\r\n         </div>\r\n-        <div style={styles.heroWave}></div>\r\n       </section>\r\n \r\n-      {/* Services Grid (Retained Layout) */}\r\n+      {/* Original Card Layout - Now With Dark Mode Glow */}\r\n       <section className=\"services-section\" style={styles.section}>\r\n-        <h2 style={styles.sectionTitle}>What do you need today?</h2>\r\n-        <p style={styles.sectionSubtitle}>Tap to explore urban services tailored for you</p>\r\n+        <h2 style={darkMode ? styles.dark.sectionTitle : styles.light.sectionTitle}>What do you need today?</h2>\r\n         <div className=\"services-grid\" style={styles.servicesGrid}>\r\n           {services.map((service) => (\r\n             <div \r\n               key={service.name} \r\n               className=\"service-card\"\r\n               style={{ \r\n-                ...styles.serviceCard,\r\n-                backgroundColor: `${service.color}10`,\r\n+                ...(darkMode ? styles.dark.serviceCard : styles.light.serviceCard),\r\n                 borderLeft: `5px solid ${service.color}`,\r\n-                '--card-color': service.color\r\n+                '--card-color': service.color,\r\n+                ...(darkMode && {\r\n+                  boxShadow: `0 0 15px ${service.color}40`\r\n+                })\r\n               }}\r\n               onClick={() => navigate(service.path)}\r\n             >\r\n               <div className=\"service-icon\" style={styles.serviceIcon}>{service.icon}</div>\r\n-              <h3 style={styles.serviceTitle}>{service.name}</h3>\r\n-              <p style={styles.serviceDesc}>{service.desc}</p>\r\n-              <div className=\"card-hover-effect\" style={styles.cardHoverEffect}></div>\r\n+              <h3 style={darkMode ? styles.dark.serviceTitle : styles.light.serviceTitle}>{service.name}</h3>\r\n+              <p style={darkMode ? styles.dark.serviceDesc : styles.light.serviceDesc}>{service.desc}</p>\r\n             </div>\r\n           ))}\r\n         </div>\r\n       </section>\r\n \r\n-      {/* Featured Quick Access Section */}\r\n+      {/* Quick Access Section */}\r\n       <section className=\"featured-section\" style={styles.section}>\r\n-        <div style={styles.sectionHeader}>\r\n-          <h2 style={styles.sectionTitle}>Quick Access</h2>\r\n-          <p style={styles.sectionSubtitle}>Popular destinations and categories</p>\r\n-        </div>\r\n+        <h2 style={darkMode ? styles.dark.sectionTitle : styles.light.sectionTitle}>Quick Access</h2>\r\n         <div className=\"quick-links\" style={styles.quickLinks}>\r\n           <button \r\n             onClick={() => navigate('/transport?from=home&to=downtown')}\r\n-            style={styles.quickLinkButton}\r\n+            style={darkMode ? styles.dark.quickLinkButton : styles.light.quickLinkButton}\r\n           >\r\n-            <span style={styles.quickLinkIcon}>üöï</span>\r\n-            <span>To Downtown</span>\r\n+            üöï To Downtown\r\n           </button>\r\n           <button \r\n             onClick={() => navigate('/food?category=fastfood')}\r\n-            style={styles.quickLinkButton}\r\n+            style={darkMode ? styles.dark.quickLinkButton : styles.light.quickLinkButton}\r\n           >\r\n-            <span style={styles.quickLinkIcon}>üçü</span>\r\n-            <span>Fast Food</span>\r\n+            üçü Fast Food\r\n           </button>\r\n           <button \r\n             onClick={() => navigate('/food?category=coffee')}\r\n-            style={styles.quickLinkButton}\r\n+            style={darkMode ? styles.dark.quickLinkButton : styles.light.quickLinkButton}\r\n           >\r\n-            <span style={styles.quickLinkIcon}>‚òï</span>\r\n-            <span>Coffee Shops</span>\r\n+            ‚òï Coffee Shops\r\n           </button>\r\n-          <button \r\n-            onClick={() => navigate('/food?category=pharmacy')}\r\n-            style={styles.quickLinkButton}\r\n-          >\r\n-            <span style={styles.quickLinkIcon}>üíä</span>\r\n-            <span>24hr Pharmacy</span>\r\n-          </button>\r\n         </div>\r\n       </section>\r\n     </div>\r\n   );\r\n }\r\n \r\n+// Shared Styles\r\n const styles = {\r\n-  page: {\r\n-    backgroundColor: '#f8fafc',\r\n-    minHeight: '100vh',\r\n-    paddingBottom: '3rem',\r\n-    fontFamily: \"'Segoe UI', Roboto, 'Helvetica Neue', sans-serif\",\r\n-  },\r\n   hero: {\r\n-    background: 'linear-gradient(135deg, #4f46e5 0%, #2563eb 100%)',\r\n     color: 'white',\r\n-    padding: '5rem 1rem 6rem',\r\n+    padding: '4rem 1rem',\r\n     textAlign: 'center',\r\n     position: 'relative',\r\n-    overflow: 'hidden',\r\n+    minHeight: '400px',\r\n+    display: 'flex',\r\n+    alignItems: 'center',\r\n+    justifyContent: 'center',\r\n   },\r\n   heroContent: {\r\n-    maxWidth: '900px',\r\n+    maxWidth: '800px',\r\n     margin: '0 auto',\r\n     position: 'relative',\r\n     zIndex: 2,\r\n   },\r\n-  heroText: {\r\n-    marginBottom: '2.5rem',\r\n+  themeToggle: {\r\n+    position: 'absolute',\r\n+    top: '20px',\r\n+    right: '20px',\r\n+    background: 'rgba(0,0,0,0.5)',\r\n+    border: 'none',\r\n+    borderRadius: '50%',\r\n+    width: '40px',\r\n+    height: '40px',\r\n+    fontSize: '1.2rem',\r\n+    cursor: 'pointer',\r\n+    zIndex: 3,\r\n+    display: 'flex',\r\n+    alignItems: 'center',\r\n+    justifyContent: 'center',\r\n   },\r\n   title: {\r\n-    fontSize: '4rem',\r\n+    fontSize: '3.5rem',\r\n     fontWeight: '800',\r\n     marginBottom: '0.5rem',\r\n-    textShadow: '2px 2px 4px rgba(0, 0, 0, 0.2)',\r\n-    background: 'linear-gradient(to right, #fff, #e0e7ff)',\r\n-    WebkitBackgroundClip: 'text',\r\n-    WebkitTextFillColor: 'transparent',\r\n-    letterSpacing: '-0.05em',\r\n+    textShadow: '2px 2px 4px rgba(0, 0, 0, 0.5)',\r\n   },\r\n   tagline: {\r\n-    fontSize: '1.35rem',\r\n-    marginBottom: '0',\r\n+    fontSize: '1.25rem',\r\n+    marginBottom: '2rem',\r\n     opacity: 0.9,\r\n-    fontWeight: '400',\r\n+    textShadow: '1px 1px 2px rgba(0, 0, 0, 0.5)',\r\n   },\r\n-  taglineHighlight: {\r\n-    fontWeight: '600',\r\n-    marginLeft: '0.5rem',\r\n-    color: '#e0e7ff',\r\n-  },\r\n   searchBox: {\r\n     display: 'flex',\r\n-    maxWidth: '650px',\r\n+    maxWidth: '600px',\r\n     margin: '0 auto',\r\n-    borderRadius: '12px',\r\n+    borderRadius: '50px',\r\n     overflow: 'hidden',\r\n-    transition: 'all 0.3s ease',\r\n-    backgroundColor: 'white',\r\n-    border: '2px solid',\r\n+    transition: 'all 0.2s',\r\n+    backgroundColor: 'rgba(255,255,255,0.2)',\r\n+    backdropFilter: 'blur(5px)',\r\n   },\r\n   searchInput: {\r\n     flex: 1,\r\n-    padding: '1.1rem 1.75rem',\r\n+    padding: '1rem 1.5rem',\r\n     border: 'none',\r\n-    fontSize: '1.05rem',\r\n+    fontSize: '1rem',\r\n     outline: 'none',\r\n-    color: '#1e293b',\r\n+    background: 'transparent',\r\n+    color: 'white',\r\n     '::placeholder': {\r\n-      color: '#94a3b8',\r\n+      color: 'rgba(255,255,255,0.7)',\r\n     },\r\n   },\r\n   searchButton: {\r\n-    display: 'flex',\r\n-    alignItems: 'center',\r\n-    gap: '0.5rem',\r\n-    padding: '0 2rem',\r\n+    backgroundColor: 'rgba(0,0,0,0.3)',\r\n+    color: 'white',\r\n     border: 'none',\r\n-    color: 'white',\r\n-    fontWeight: '600',\r\n+    padding: '0 1.5rem',\r\n     cursor: 'pointer',\r\n-    fontSize: '1rem',\r\n-    transition: 'all 0.2s',\r\n+    fontSize: '1.25rem',\r\n+    transition: 'background-color 0.2s',\r\n     ':hover': {\r\n-      filter: 'brightness(1.1)',\r\n+      backgroundColor: 'rgba(0,0,0,0.5)',\r\n     },\r\n-    ':disabled': {\r\n-      cursor: 'not-allowed',\r\n-      opacity: 0.8,\r\n-    },\r\n   },\r\n-  searchIcon: {\r\n-    fontSize: '1.2rem',\r\n-  },\r\n-  searchText: {\r\n-    display: ['none', 'none', 'block'], // Hide on mobile, show on desktop\r\n-  },\r\n-  heroFeatures: {\r\n-    display: 'flex',\r\n-    justifyContent: 'center',\r\n-    gap: '1.5rem',\r\n-    marginTop: '2rem',\r\n-    flexWrap: 'wrap',\r\n-  },\r\n-  heroFeatureItem: {\r\n-    display: 'flex',\r\n-    alignItems: 'center',\r\n-    gap: '0.5rem',\r\n-    fontSize: '0.95rem',\r\n-    opacity: 0.9,\r\n-  },\r\n-  heroWave: {\r\n-    position: 'absolute',\r\n-    bottom: 0,\r\n-    left: 0,\r\n-    right: 0,\r\n-    height: '100px',\r\n-    background: 'url(\"data:image/svg+xml,%3Csvg xmlns=\\'http://www.w3.org/2000/svg\\' viewBox=\\'0 0 1200 120\\' preserveAspectRatio=\\'none\\'%3E%3Cpath d=\\'M0,0V46.29c47.79,22.2,103.59,32.17,158,28,70.36-5.37,136.33-33.31,206.8-37.5C438.64,32.43,512.34,53.67,583,72.05c69.27,18,138.3,24.88,209.4,13.08,36.15-6,69.85-17.84,104.45-29.34C989.49,25,1113-14.29,1200,52.47V0Z\\' opacity=\\'.25\\' fill=\\'%23f8fafc\\'%3E%3C/path%3E%3Cpath d=\\'M0,0V15.81C13,36.92,27.64,56.86,47.69,72.05,99.41,111.27,165,111,224.58,91.58c31.15-10.15,60.09-26.07,89.67-39.8,40.92-19,84.73-46,130.83-49.67,36.26-2.85,70.9,9.42,98.6,31.56,31.77,25.39,62.32,62,103.63,73,40.44,10.79,81.35-6.69,119.13-24.28s75.16-39,116.92-43.05c59.73-5.85,113.28,22.88,168.9,38.84,30.2,8.66,59,6.17,87.09-7.5,22.43-10.89,48-26.93,60.65-49.24V0Z\\' opacity=\\'.5\\' fill=\\'%23f8fafc\\'%3E%3C/path%3E%3Cpath d=\\'M0,0V5.63C149.93,59,314.09,71.32,475.83,42.57c43-7.64,84.23-20.12,127.61-26.46,59-8.63,112.48,12.24,165.56,35.4C827.93,77.22,886,95.24,951.2,90c86.53-7,172.46-45.71,248.8-84.81V0Z\\' fill=\\'%23f8fafc\\'%3E%3C/path%3E%3C/svg%3E\")',\r\n-    backgroundSize: 'cover',\r\n-    zIndex: 1,\r\n-  },\r\n   section: {\r\n     padding: '3rem 1rem',\r\n     maxWidth: '1200px',\r\n     margin: '0 auto',\r\n   },\r\n-  sectionHeader: {\r\n-    textAlign: 'center',\r\n-    marginBottom: '2rem',\r\n-  },\r\n-  sectionTitle: {\r\n-    fontSize: '2.25rem',\r\n-    fontWeight: '700',\r\n-    marginBottom: '0.5rem',\r\n-    color: '#1e293b',\r\n-  },\r\n-  sectionSubtitle: {\r\n-    fontSize: '1.1rem',\r\n-    color: '#64748b',\r\n-    marginBottom: '0',\r\n-  },\r\n   servicesGrid: {\r\n     display: 'grid',\r\n-    gridTemplateColumns: 'repeat(auto-fit, minmax(260px, 1fr))',\r\n-    gap: '1.75rem',\r\n-    marginTop: '2rem',\r\n+    gridTemplateColumns: 'repeat(auto-fit, minmax(250px, 1fr))',\r\n+    gap: '1.5rem',\r\n+    marginTop: '1rem',\r\n   },\r\n-  serviceCard: {\r\n-    padding: '2rem 1.5rem',\r\n-    borderRadius: '12px',\r\n-    textAlign: 'center',\r\n-    cursor: 'pointer',\r\n-    transition: 'all 0.3s ease',\r\n-    position: 'relative',\r\n-    overflow: 'hidden',\r\n-    backgroundColor: 'white',\r\n-    boxShadow: '0 4px 6px rgba(0, 0, 0, 0.05)',\r\n-    ':hover': {\r\n-      transform: 'translateY(-5px)',\r\n-      boxShadow: '0 10px 25px rgba(0, 0, 0, 0.1)',\r\n-    },\r\n-  },\r\n   serviceIcon: {\r\n-    fontSize: '3.5rem',\r\n-    marginBottom: '1.5rem',\r\n-    transition: 'transform 0.3s ease',\r\n-    ':hover': {\r\n-      transform: 'scale(1.1)',\r\n-    },\r\n+    fontSize: '3rem',\r\n+    marginBottom: '1rem',\r\n   },\r\n-  serviceTitle: {\r\n-    fontSize: '1.5rem',\r\n-    fontWeight: '600',\r\n-    marginBottom: '0.75rem',\r\n-    color: '#1e293b',\r\n-  },\r\n-  serviceDesc: {\r\n-    color: '#64748b',\r\n-    fontSize: '1rem',\r\n-    lineHeight: '1.6',\r\n-    marginBottom: '0',\r\n-  },\r\n-  cardHoverEffect: {\r\n-    position: 'absolute',\r\n-    top: 0,\r\n-    left: 0,\r\n-    right: 0,\r\n-    height: '4px',\r\n-    backgroundColor: 'var(--card-color)',\r\n-  },\r\n   quickLinks: {\r\n     display: 'flex',\r\n     justifyContent: 'center',\r\n     gap: '1rem',\r\n     flexWrap: 'wrap',\r\n   },\r\n-  quickLinkButton: {\r\n-    padding: '0.9rem 1.75rem',\r\n-    borderRadius: '50px',\r\n-    border: 'none',\r\n-    backgroundColor: 'white',\r\n-    color: '#1e293b',\r\n-    fontWeight: '600',\r\n-    cursor: 'pointer',\r\n-    transition: 'all 0.2s ease',\r\n-    display: 'flex',\r\n-    alignItems: 'center',\r\n-    gap: '0.75rem',\r\n-    fontSize: '1rem',\r\n-    boxShadow: '0 2px 5px rgba(0, 0, 0, 0.08)',\r\n-    ':hover': {\r\n-      backgroundColor: '#f1f5f9',\r\n-      transform: 'translateY(-2px)',\r\n-      boxShadow: '0 5px 15px rgba(0, 0, 0, 0.1)',\r\n+\r\n+  // Light Mode Styles\r\n+  light: {\r\n+    page: {\r\n+      backgroundColor: '#f8fafc',\r\n+      minHeight: '100vh',\r\n     },\r\n+    sectionTitle: {\r\n+      fontSize: '2rem',\r\n+      fontWeight: '700',\r\n+      marginBottom: '1.5rem',\r\n+      color: '#1e293b',\r\n+      textAlign: 'center',\r\n+    },\r\n+    serviceCard: {\r\n+      padding: '2rem 1.5rem',\r\n+      borderRadius: '8px',\r\n+      backgroundColor: 'white',\r\n+      cursor: 'pointer',\r\n+      transition: 'transform 0.3s',\r\n+      ':hover': {\r\n+        transform: 'translateY(-5px)',\r\n+      },\r\n+    },\r\n+    serviceTitle: {\r\n+      fontSize: '1.5rem',\r\n+      fontWeight: '600',\r\n+      marginBottom: '0.5rem',\r\n+      color: '#1e293b',\r\n+    },\r\n+    serviceDesc: {\r\n+      color: '#64748b',\r\n+      fontSize: '1rem',\r\n+      lineHeight: '1.5',\r\n+    },\r\n+    quickLinkButton: {\r\n+      padding: '0.75rem 1.5rem',\r\n+      borderRadius: '50px',\r\n+      border: 'none',\r\n+      backgroundColor: '#e2e8f0',\r\n+      color: '#1e293b',\r\n+      fontWeight: '600',\r\n+      cursor: 'pointer',\r\n+      transition: 'all 0.2s',\r\n+      ':hover': {\r\n+        backgroundColor: '#cbd5e1',\r\n+      },\r\n+    },\r\n   },\r\n-  quickLinkIcon: {\r\n-    fontSize: '1.2rem',\r\n+\r\n+  // Dark Mode Styles\r\n+  dark: {\r\n+    page: {\r\n+      backgroundColor: '#0f172a',\r\n+      minHeight: '100vh',\r\n+    },\r\n+    sectionTitle: {\r\n+      fontSize: '2rem',\r\n+      fontWeight: '700',\r\n+      marginBottom: '1.5rem',\r\n+      color: '#e2e8f0',\r\n+      textAlign: 'center',\r\n+    },\r\n+    serviceCard: {\r\n+      padding: '2rem 1.5rem',\r\n+      borderRadius: '8px',\r\n+      backgroundColor: '#1e293b',\r\n+      cursor: 'pointer',\r\n+      transition: 'all 0.3s',\r\n+      ':hover': {\r\n+        transform: 'translateY(-5px)',\r\n+      },\r\n+    },\r\n+    serviceTitle: {\r\n+      fontSize: '1.5rem',\r\n+      fontWeight: '600',\r\n+      marginBottom: '0.5rem',\r\n+      color: '#f8fafc',\r\n+    },\r\n+    serviceDesc: {\r\n+      color: '#94a3b8',\r\n+      fontSize: '1rem',\r\n+      lineHeight: '1.5',\r\n+    },\r\n+    quickLinkButton: {\r\n+      padding: '0.75rem 1.5rem',\r\n+      borderRadius: '50px',\r\n+      border: 'none',\r\n+      backgroundColor: '#334155',\r\n+      color: '#e2e8f0',\r\n+      fontWeight: '600',\r\n+      cursor: 'pointer',\r\n+      transition: 'all 0.2s',\r\n+      ':hover': {\r\n+        backgroundColor: '#475569',\r\n+      },\r\n+    },\r\n   },\r\n };\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752646752478,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,26 +1,13 @@\n-import { useState, useEffect } from 'react';\r\n+import { useState } from 'react';\r\n import { useNavigate } from 'react-router-dom';\r\n \r\n export default function Home() {\r\n   const navigate = useNavigate();\r\n   const [searchQuery, setSearchQuery] = useState('');\r\n+  const [isSearchFocused, setIsSearchFocused] = useState(false);\r\n   const [darkMode, setDarkMode] = useState(false);\r\n-  const [isSearchFocused, setIsSearchFocused] = useState(false);\r\n \r\n-  // Toggle dark mode and persist in localStorage\r\n-  const toggleDarkMode = () => {\r\n-    const newMode = !darkMode;\r\n-    setDarkMode(newMode);\r\n-    localStorage.setItem('darkMode', JSON.stringify(newMode));\r\n-  };\r\n-\r\n-  // Check for saved preference on load\r\n-  useEffect(() => {\r\n-    const savedMode = JSON.parse(localStorage.getItem('darkMode'));\r\n-    if (savedMode !== null) setDarkMode(savedMode);\r\n-  }, []);\r\n-\r\n   const services = [\r\n     { \r\n       name: 'Transport', \r\n       path: '/transport', \r\n@@ -57,303 +44,384 @@\n       navigate(`/food?search=${encodeURIComponent(searchQuery)}`);\r\n     }\r\n   };\r\n \r\n-  // Unsplash image URL (New York City skyline)\r\n-  const cityBannerUrl = 'https://images.unsplash.com/photo-1485872299829-c673f5194813?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=2400&q=80';\r\n+  const toggleDarkMode = () => {\r\n+    setDarkMode(!darkMode);\r\n+  };\r\n \r\n+  // Dynamic styles based on dark mode\r\n+  const dynamicStyles = {\r\n+    page: {\r\n+      backgroundColor: darkMode ? '#1a202c' : '#f8fafc',\r\n+      minHeight: '100vh',\r\n+      paddingBottom: '3rem',\r\n+      fontFamily: \"'Segoe UI', Roboto, 'Helvetica Neue', sans-serif\",\r\n+      color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+      transition: 'all 0.3s ease',\r\n+    },\r\n+    hero: {\r\n+      background: darkMode \r\n+        ? 'linear-gradient(135deg, #2d3748 0%, #1a202c 100%)' \r\n+        : 'linear-gradient(135deg, #f0f4f8 0%, #dfe7ef 100%)',\r\n+      color: darkMode ? 'white' : '#1e293b',\r\n+      padding: '5rem 1rem 6rem',\r\n+      textAlign: 'center',\r\n+      position: 'relative',\r\n+      overflow: 'hidden',\r\n+    },\r\n+    title: {\r\n+      fontSize: '4rem',\r\n+      fontWeight: '800',\r\n+      marginBottom: '0.5rem',\r\n+      textShadow: darkMode ? '2px 2px 4px rgba(0, 0, 0, 0.5)' : '2px 2px 4px rgba(0, 0, 0, 0.1)',\r\n+      background: darkMode \r\n+        ? 'linear-gradient(to right, #fff, #a0aec0)' \r\n+        : 'linear-gradient(to right, #1e293b, #4b5563)',\r\n+      WebkitBackgroundClip: 'text',\r\n+      WebkitTextFillColor: 'transparent',\r\n+      letterSpacing: '-0.05em',\r\n+    },\r\n+    serviceCard: {\r\n+      padding: '2rem 1.5rem',\r\n+      borderRadius: '12px',\r\n+      textAlign: 'center',\r\n+      cursor: 'pointer',\r\n+      transition: 'all 0.3s ease',\r\n+      position: 'relative',\r\n+      overflow: 'hidden',\r\n+      backgroundColor: darkMode ? '#2d3748' : 'white',\r\n+      boxShadow: darkMode ? '0 4px 6px rgba(0, 0, 0, 0.2)' : '0 4px 6px rgba(0, 0, 0, 0.05)',\r\n+      ':hover': {\r\n+        transform: 'translateY(-5px)',\r\n+        boxShadow: darkMode ? '0 10px 25px rgba(0, 0, 0, 0.3)' : '0 10px 25px rgba(0, 0, 0, 0.1)',\r\n+      },\r\n+    },\r\n+    serviceTitle: {\r\n+      fontSize: '1.5rem',\r\n+      fontWeight: '600',\r\n+      marginBottom: '0.75rem',\r\n+      color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+    },\r\n+    serviceDesc: {\r\n+      color: darkMode ? '#a0aec0' : '#64748b',\r\n+      fontSize: '1rem',\r\n+      lineHeight: '1.6',\r\n+      marginBottom: '0',\r\n+    },\r\n+    sectionTitle: {\r\n+      fontSize: '2.25rem',\r\n+      fontWeight: '700',\r\n+      marginBottom: '0.5rem',\r\n+      color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+    },\r\n+    sectionSubtitle: {\r\n+      fontSize: '1.1rem',\r\n+      color: darkMode ? '#a0aec0' : '#64748b',\r\n+      marginBottom: '0',\r\n+    },\r\n+    quickLinkButton: {\r\n+      padding: '0.9rem 1.75rem',\r\n+      borderRadius: '50px',\r\n+      border: 'none',\r\n+      backgroundColor: darkMode ? '#2d3748' : 'white',\r\n+      color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+      fontWeight: '600',\r\n+      cursor: 'pointer',\r\n+      transition: 'all 0.2s ease',\r\n+      display: 'flex',\r\n+      alignItems: 'center',\r\n+      gap: '0.75rem',\r\n+      fontSize: '1rem',\r\n+      boxShadow: darkMode ? '0 2px 5px rgba(0, 0, 0, 0.3)' : '0 2px 5px rgba(0, 0, 0, 0.08)',\r\n+      ':hover': {\r\n+        backgroundColor: darkMode ? '#4a5568' : '#f1f5f9',\r\n+        transform: 'translateY(-2px)',\r\n+        boxShadow: darkMode ? '0 5px 15px rgba(0, 0, 0, 0.4)' : '0 5px 15px rgba(0, 0, 0, 0.1)',\r\n+      },\r\n+    },\r\n+  };\r\n+\r\n+  const styles = {\r\n+    ...dynamicStyles,\r\n+    // Rest of your styles remain the same, just merge with dynamicStyles\r\n+    heroContent: {\r\n+      maxWidth: '900px',\r\n+      margin: '0 auto',\r\n+      position: 'relative',\r\n+      zIndex: 2,\r\n+    },\r\n+    heroText: {\r\n+      marginBottom: '2.5rem',\r\n+    },\r\n+    tagline: {\r\n+      fontSize: '1.35rem',\r\n+      marginBottom: '0',\r\n+      opacity: 0.9,\r\n+      fontWeight: '400',\r\n+    },\r\n+    taglineHighlight: {\r\n+      fontWeight: '600',\r\n+      marginLeft: '0.5rem',\r\n+      color: darkMode ? '#a0aec0' : '#4b5563',\r\n+    },\r\n+    searchBox: {\r\n+      display: 'flex',\r\n+      maxWidth: '650px',\r\n+      margin: '0 auto',\r\n+      borderRadius: '12px',\r\n+      overflow: 'hidden',\r\n+      transition: 'all 0.3s ease',\r\n+      backgroundColor: darkMode ? '#2d3748' : 'white',\r\n+      border: `2px solid ${isSearchFocused ? '#3b82f6' : darkMode ? '#4a5568' : '#e2e8f0'}`,\r\n+      boxShadow: isSearchFocused ? '0 0 0 3px rgba(59, 130, 246, 0.2)' : darkMode ? '0 2px 10px rgba(0, 0, 0, 0.3)' : '0 2px 10px rgba(0, 0, 0, 0.1)'\r\n+    },\r\n+    searchInput: {\r\n+      flex: 1,\r\n+      padding: '1.1rem 1.75rem',\r\n+      border: 'none',\r\n+      fontSize: '1.05rem',\r\n+      outline: 'none',\r\n+      color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+      backgroundColor: 'transparent',\r\n+      '::placeholder': {\r\n+        color: darkMode ? '#718096' : '#94a3b8',\r\n+      },\r\n+    },\r\n+    searchButton: {\r\n+      display: 'flex',\r\n+      alignItems: 'center',\r\n+      gap: '0.5rem',\r\n+      padding: '0 2rem',\r\n+      border: 'none',\r\n+      color: 'white',\r\n+      fontWeight: '600',\r\n+      cursor: 'pointer',\r\n+      fontSize: '1rem',\r\n+      transition: 'all 0.2s',\r\n+      ':hover': {\r\n+        filter: 'brightness(1.1)',\r\n+      },\r\n+      ':disabled': {\r\n+        cursor: 'not-allowed',\r\n+        opacity: 0.8,\r\n+      },\r\n+      backgroundColor: searchQuery.trim() ? '#1e40af' : (darkMode ? '#4a5568' : '#94a3b8')\r\n+    },\r\n+    searchIcon: {\r\n+      fontSize: '1.2rem',\r\n+    },\r\n+    searchText: {\r\n+      display: ['none', 'none', 'block'],\r\n+    },\r\n+    heroFeatures: {\r\n+      display: 'flex',\r\n+      justifyContent: 'center',\r\n+      gap: '1.5rem',\r\n+      marginTop: '2rem',\r\n+      flexWrap: 'wrap',\r\n+    },\r\n+    heroFeatureItem: {\r\n+      display: 'flex',\r\n+      alignItems: 'center',\r\n+      gap: '0.5rem',\r\n+      fontSize: '0.95rem',\r\n+      opacity: 0.9,\r\n+      color: darkMode ? '#cbd5e0' : '#4b5563',\r\n+    },\r\n+    heroWave: {\r\n+      position: 'absolute',\r\n+      bottom: 0,\r\n+      left: 0,\r\n+      right: 0,\r\n+      height: '100px',\r\n+      background: darkMode\r\n+        ? 'url(\"data:image/svg+xml,%3Csvg xmlns=\\'http://www.w3.org/2000/svg\\' viewBox=\\'0 0 1200 120\\' preserveAspectRatio=\\'none\\'%3E%3Cpath d=\\'M0,0V46.29c47.79,22.2,103.59,32.17,158,28,70.36-5.37,136.33-33.31,206.8-37.5C438.64,32.43,512.34,53.67,583,72.05c69.27,18,138.3,24.88,209.4,13.08,36.15-6,69.85-17.84,104.45-29.34C989.49,25,1113-14.29,1200,52.47V0Z\\' opacity=\\'.25\\' fill=\\'%232d3748\\'%3E%3C/path%3E%3Cpath d=\\'M0,0V15.81C13,36.92,27.64,56.86,47.69,72.05,99.41,111.27,165,111,224.58,91.58c31.15-10.15,60.09-26.07,89.67-39.8,40.92-19,84.73-46,130.83-49.67,36.26-2.85,70.9,9.42,98.6,31.56,31.77,25.39,62.32,62,103.63,73,40.44,10.79,81.35-6.69,119.13-24.28s75.16-39,116.92-43.05c59.73-5.85,113.28,22.88,168.9,38.84,30.2,8.66,59,6.17,87.09-7.5,22.43-10.89,48-26.93,60.65-49.24V0Z\\' opacity=\\'.5\\' fill=\\'%232d3748\\'%3E%3C/path%3E%3Cpath d=\\'M0,0V5.63C149.93,59,314.09,71.32,475.83,42.57c43-7.64,84.23-20.12,127.61-26.46,59-8.63,112.48,12.24,165.56,35.4C827.93,77.22,886,95.24,951.2,90c86.53-7,172.46-45.71,248.8-84.81V0Z\\' fill=\\'%232d3748\\'%3E%3C/path%3E%3C/svg%3E\")'\r\n+        : 'url(\"data:image/svg+xml,%3Csvg xmlns=\\'http://www.w3.org/2000/svg\\' viewBox=\\'0 0 1200 120\\' preserveAspectRatio=\\'none\\'%3E%3Cpath d=\\'M0,0V46.29c47.79,22.2,103.59,32.17,158,28,70.36-5.37,136.33-33.31,206.8-37.5C438.64,32.43,512.34,53.67,583,72.05c69.27,18,138.3,24.88,209.4,13.08,36.15-6,69.85-17.84,104.45-29.34C989.49,25,1113-14.29,1200,52.47V0Z\\' opacity=\\'.25\\' fill=\\'%23f8fafc\\'%3E%3C/path%3E%3Cpath d=\\'M0,0V15.81C13,36.92,27.64,56.86,47.69,72.05,99.41,111.27,165,111,224.58,91.58c31.15-10.15,60.09-26.07,89.67-39.8,40.92-19,84.73-46,130.83-49.67,36.26-2.85,70.9,9.42,98.6,31.56,31.77,25.39,62.32,62,103.63,73,40.44,10.79,81.35-6.69,119.13-24.28s75.16-39,116.92-43.05c59.73-5.85,113.28,22.88,168.9,38.84,30.2,8.66,59,6.17,87.09-7.5,22.43-10.89,48-26.93,60.65-49.24V0Z\\' opacity=\\'.5\\' fill=\\'%23f8fafc\\'%3E%3C/path%3E%3Cpath d=\\'M0,0V5.63C149.93,59,314.09,71.32,475.83,42.57c43-7.64,84.23-20.12,127.61-26.46,59-8.63,112.48,12.24,165.56,35.4C827.93,77.22,886,95.24,951.2,90c86.53-7,172.46-45.71,248.8-84.81V0Z\\' fill=\\'%23f8fafc\\'%3E%3C/path%3E%3C/svg%3E\")',\r\n+      backgroundSize: 'cover',\r\n+      zIndex: 1,\r\n+    },\r\n+    section: {\r\n+      padding: '3rem 1rem',\r\n+      maxWidth: '1200px',\r\n+      margin: '0 auto',\r\n+    },\r\n+    sectionHeader: {\r\n+      textAlign: 'center',\r\n+      marginBottom: '2rem',\r\n+    },\r\n+    servicesGrid: {\r\n+      display: 'grid',\r\n+      gridTemplateColumns: 'repeat(auto-fit, minmax(260px, 1fr))',\r\n+      gap: '1.75rem',\r\n+      marginTop: '2rem',\r\n+    },\r\n+    serviceIcon: {\r\n+      fontSize: '3.5rem',\r\n+      marginBottom: '1.5rem',\r\n+      transition: 'transform 0.3s ease',\r\n+      ':hover': {\r\n+        transform: 'scale(1.1)',\r\n+      },\r\n+    },\r\n+    cardHoverEffect: {\r\n+      position: 'absolute',\r\n+      top: 0,\r\n+      left: 0,\r\n+      right: 0,\r\n+      height: '4px',\r\n+      backgroundColor: 'var(--card-color)',\r\n+    },\r\n+    quickLinks: {\r\n+      display: 'flex',\r\n+      justifyContent: 'center',\r\n+      gap: '1rem',\r\n+      flexWrap: 'wrap',\r\n+    },\r\n+    quickLinkIcon: {\r\n+      fontSize: '1.2rem',\r\n+    },\r\n+    themeToggle: {\r\n+      position: 'absolute',\r\n+      top: '1.5rem',\r\n+      right: '1.5rem',\r\n+      background: darkMode ? '#4a5568' : '#e2e8f0',\r\n+      border: 'none',\r\n+      borderRadius: '50%',\r\n+      width: '40px',\r\n+      height: '40px',\r\n+      display: 'flex',\r\n+      alignItems: 'center',\r\n+      justifyContent: 'center',\r\n+      cursor: 'pointer',\r\n+      transition: 'all 0.3s ease',\r\n+      boxShadow: darkMode ? '0 2px 5px rgba(0, 0, 0, 0.3)' : '0 2px 5px rgba(0, 0, 0, 0.1)',\r\n+      ':hover': {\r\n+        transform: 'scale(1.1)',\r\n+      },\r\n+    },\r\n+  };\r\n+\r\n   return (\r\n-    <div className=\"home-page\" style={darkMode ? styles.dark.page : styles.light.page}>\r\n-      {/* City Banner with Dark Mode Toggle */}\r\n-      <section className=\"hero\" style={{\r\n-        ...styles.hero,\r\n-        background: `linear-gradient(rgba(0, 0, 0, 0.4), url(${cityBannerUrl})`,\r\n-        backgroundSize: 'cover',\r\n-        backgroundPosition: 'center'\r\n-      }}>\r\n-        <button \r\n-          onClick={toggleDarkMode} \r\n-          style={styles.themeToggle}\r\n-          aria-label={darkMode ? 'Switch to light mode' : 'Switch to dark mode'}\r\n-        >\r\n-          {darkMode ? '‚òÄÔ∏è' : 'üåô'}\r\n-        </button>\r\n-        \r\n+    <div className=\"home-page\" style={styles.page}>\r\n+      {/* Theme Toggle Button */}\r\n+      <button \r\n+        onClick={toggleDarkMode} \r\n+        style={styles.themeToggle}\r\n+        aria-label={darkMode ? 'Switch to light mode' : 'Switch to dark mode'}\r\n+      >\r\n+        {darkMode ? '‚òÄÔ∏è' : 'üåô'}\r\n+      </button>\r\n+      \r\n+      {/* Enhanced Hero Banner */}\r\n+      <section className=\"hero\" style={styles.hero}>\r\n         <div className=\"hero-content\" style={styles.heroContent}>\r\n-          <h1 style={styles.title}>UrbanFlow</h1>\r\n-          <p className=\"tagline\" style={styles.tagline}>Your seamless urban living companion</p>\r\n+          <div style={styles.heroText}>\r\n+            <h1 style={styles.title}>UrbanFlow</h1>\r\n+            <p className=\"tagline\" style={styles.tagline}>\r\n+              Your seamless urban living companion\r\n+              <span style={styles.taglineHighlight}> ¬∑ Discover ¬∑ Connect ¬∑ Enjoy</span>\r\n+            </p>\r\n+          </div>\r\n           \r\n-          <form onSubmit={handleSearch} className=\"search-box\" style={{\r\n\\ No newline at end of file\n-            ...styles.searchBox,\r\n-            borderColor: isSearchFocused ? '#3b82f6' : 'rgba(255,255,255,0.3)',\r\n-            boxShadow: isSearchFocused ? '0 0 0 3px rgba(59, 130, 246, 0.3)' : 'none'\r\n-          }}>\r\n+          {/* Improved Search Bar */}\r\n+          <form \r\n+            onSubmit={handleSearch} \r\n+            className=\"search-box\" \r\n+            style={styles.searchBox}\r\n+          >\r\n             <input\r\n               type=\"text\"\r\n-              placeholder=\"Search for restaurants, services...\"\r\n+              placeholder=\"Search for restaurants, services, groceries...\"\r\n               value={searchQuery}\r\n               onChange={(e) => setSearchQuery(e.target.value)}\r\n               onFocus={() => setIsSearchFocused(true)}\r\n               onBlur={() => setIsSearchFocused(false)}\r\n               style={styles.searchInput}\r\n             />\r\n-            <button type=\"submit\" style={styles.searchButton}>\r\n-              <span>üîç</span>\r\n+            <button \r\n+              type=\"submit\" \r\n+              style={styles.searchButton}\r\n+              disabled={!searchQuery.trim()}\r\n+            >\r\n+              <span style={styles.searchIcon}>üîç</span>\r\n+              <span style={styles.searchText}>Search</span>\r\n             </button>\r\n           </form>\r\n+\r\n+          <div style={styles.heroFeatures}>\r\n+            <span style={styles.heroFeatureItem}>üöÄ Instant results</span>\r\n+            <span style={styles.heroFeatureItem}>üìç Location-aware</span>\r\n+            <span style={styles.heroFeatureItem}>‚ú® Premium partners</span>\r\n+          </div>\r\n         </div>\r\n+        <div style={styles.heroWave}></div>\r\n       </section>\r\n \r\n-      {/* Original Card Layout - Now With Dark Mode Glow */}\r\n+      {/* Services Grid */}\r\n       <section className=\"services-section\" style={styles.section}>\r\n-        <h2 style={darkMode ? styles.dark.sectionTitle : styles.light.sectionTitle}>What do you need today?</h2>\r\n+        <h2 style={styles.sectionTitle}>What do you need today?</h2>\r\n+        <p style={styles.sectionSubtitle}>Tap to explore urban services tailored for you</p>\r\n         <div className=\"services-grid\" style={styles.servicesGrid}>\r\n           {services.map((service) => (\r\n             <div \r\n               key={service.name} \r\n               className=\"service-card\"\r\n               style={{ \r\n-                ...(darkMode ? styles.dark.serviceCard : styles.light.serviceCard),\r\n+                ...styles.serviceCard,\r\n+                backgroundColor: darkMode \r\n+                  ? `${service.color}20` \r\n+                  : `${service.color}10`,\r\n                 borderLeft: `5px solid ${service.color}`,\r\n-                '--card-color': service.color,\r\n-                ...(darkMode && {\r\n-                  boxShadow: `0 0 15px ${service.color}40`\r\n-                })\r\n+                '--card-color': service.color\r\n               }}\r\n               onClick={() => navigate(service.path)}\r\n             >\r\n               <div className=\"service-icon\" style={styles.serviceIcon}>{service.icon}</div>\r\n-              <h3 style={darkMode ? styles.dark.serviceTitle : styles.light.serviceTitle}>{service.name}</h3>\r\n-              <p style={darkMode ? styles.dark.serviceDesc : styles.light.serviceDesc}>{service.desc}</p>\r\n+              <h3 style={styles.serviceTitle}>{service.name}</h3>\r\n+              <p style={styles.serviceDesc}>{service.desc}</p>\r\n+              <div className=\"card-hover-effect\" style={styles.cardHoverEffect}></div>\r\n             </div>\r\n           ))}\r\n         </div>\r\n       </section>\r\n \r\n-      {/* Quick Access Section */}\r\n+      {/* Featured Quick Access Section */}\r\n       <section className=\"featured-section\" style={styles.section}>\r\n-        <h2 style={darkMode ? styles.dark.sectionTitle : styles.light.sectionTitle}>Quick Access</h2>\r\n+        <div style={styles.sectionHeader}>\r\n+          <h2 style={styles.sectionTitle}>Quick Access</h2>\r\n+          <p style={styles.sectionSubtitle}>Popular destinations and categories</p>\r\n+        </div>\r\n         <div className=\"quick-links\" style={styles.quickLinks}>\r\n           <button \r\n             onClick={() => navigate('/transport?from=home&to=downtown')}\r\n-            style={darkMode ? styles.dark.quickLinkButton : styles.light.quickLinkButton}\r\n+            style={styles.quickLinkButton}\r\n           >\r\n-            üöï To Downtown\r\n+            <span style={styles.quickLinkIcon}>üöï</span>\r\n+            <span>To Downtown</span>\r\n           </button>\r\n           <button \r\n             onClick={() => navigate('/food?category=fastfood')}\r\n-            style={darkMode ? styles.dark.quickLinkButton : styles.light.quickLinkButton}\r\n+            style={styles.quickLinkButton}\r\n           >\r\n-            üçü Fast Food\r\n+            <span style={styles.quickLinkIcon}>üçü</span>\r\n+            <span>Fast Food</span>\r\n           </button>\r\n           <button \r\n             onClick={() => navigate('/food?category=coffee')}\r\n-            style={darkMode ? styles.dark.quickLinkButton : styles.light.quickLinkButton}\r\n+            style={styles.quickLinkButton}\r\n           >\r\n-            ‚òï Coffee Shops\r\n+            <span style={styles.quickLinkIcon}>‚òï</span>\r\n+            <span>Coffee Shops</span>\r\n           </button>\r\n+          <button \r\n+            onClick={() => navigate('/food?category=pharmacy')}\r\n+            style={styles.quickLinkButton}\r\n+          >\r\n+            <span style={styles.quickLinkIcon}>üíä</span>\r\n+            <span>24hr Pharmacy</span>\r\n+          </button>\r\n         </div>\r\n       </section>\r\n     </div>\r\n   );\r\n-}\r\n-\r\n-// Shared Styles\r\n-const styles = {\r\n-  hero: {\r\n-    color: 'white',\r\n-    padding: '4rem 1rem',\r\n-    textAlign: 'center',\r\n-    position: 'relative',\r\n-    minHeight: '400px',\r\n-    display: 'flex',\r\n-    alignItems: 'center',\r\n-    justifyContent: 'center',\r\n-  },\r\n-  heroContent: {\r\n-    maxWidth: '800px',\r\n-    margin: '0 auto',\r\n-    position: 'relative',\r\n-    zIndex: 2,\r\n-  },\r\n-  themeToggle: {\r\n-    position: 'absolute',\r\n-    top: '20px',\r\n-    right: '20px',\r\n-    background: 'rgba(0,0,0,0.5)',\r\n-    border: 'none',\r\n-    borderRadius: '50%',\r\n-    width: '40px',\r\n-    height: '40px',\r\n-    fontSize: '1.2rem',\r\n-    cursor: 'pointer',\r\n-    zIndex: 3,\r\n-    display: 'flex',\r\n-    alignItems: 'center',\r\n-    justifyContent: 'center',\r\n-  },\r\n-  title: {\r\n-    fontSize: '3.5rem',\r\n-    fontWeight: '800',\r\n-    marginBottom: '0.5rem',\r\n-    textShadow: '2px 2px 4px rgba(0, 0, 0, 0.5)',\r\n-  },\r\n-  tagline: {\r\n-    fontSize: '1.25rem',\r\n-    marginBottom: '2rem',\r\n-    opacity: 0.9,\r\n-    textShadow: '1px 1px 2px rgba(0, 0, 0, 0.5)',\r\n-  },\r\n-  searchBox: {\r\n-    display: 'flex',\r\n-    maxWidth: '600px',\r\n-    margin: '0 auto',\r\n-    borderRadius: '50px',\r\n-    overflow: 'hidden',\r\n-    transition: 'all 0.2s',\r\n-    backgroundColor: 'rgba(255,255,255,0.2)',\r\n-    backdropFilter: 'blur(5px)',\r\n-  },\r\n-  searchInput: {\r\n-    flex: 1,\r\n-    padding: '1rem 1.5rem',\r\n-    border: 'none',\r\n-    fontSize: '1rem',\r\n-    outline: 'none',\r\n-    background: 'transparent',\r\n-    color: 'white',\r\n-    '::placeholder': {\r\n-      color: 'rgba(255,255,255,0.7)',\r\n-    },\r\n-  },\r\n-  searchButton: {\r\n-    backgroundColor: 'rgba(0,0,0,0.3)',\r\n-    color: 'white',\r\n-    border: 'none',\r\n-    padding: '0 1.5rem',\r\n-    cursor: 'pointer',\r\n-    fontSize: '1.25rem',\r\n-    transition: 'background-color 0.2s',\r\n-    ':hover': {\r\n-      backgroundColor: 'rgba(0,0,0,0.5)',\r\n-    },\r\n-  },\r\n-  section: {\r\n-    padding: '3rem 1rem',\r\n-    maxWidth: '1200px',\r\n-    margin: '0 auto',\r\n-  },\r\n-  servicesGrid: {\r\n-    display: 'grid',\r\n-    gridTemplateColumns: 'repeat(auto-fit, minmax(250px, 1fr))',\r\n-    gap: '1.5rem',\r\n-    marginTop: '1rem',\r\n-  },\r\n-  serviceIcon: {\r\n-    fontSize: '3rem',\r\n-    marginBottom: '1rem',\r\n-  },\r\n-  quickLinks: {\r\n-    display: 'flex',\r\n-    justifyContent: 'center',\r\n-    gap: '1rem',\r\n-    flexWrap: 'wrap',\r\n-  },\r\n-\r\n-  // Light Mode Styles\r\n-  light: {\r\n-    page: {\r\n-      backgroundColor: '#f8fafc',\r\n-      minHeight: '100vh',\r\n-    },\r\n-    sectionTitle: {\r\n-      fontSize: '2rem',\r\n-      fontWeight: '700',\r\n-      marginBottom: '1.5rem',\r\n-      color: '#1e293b',\r\n-      textAlign: 'center',\r\n-    },\r\n-    serviceCard: {\r\n-      padding: '2rem 1.5rem',\r\n-      borderRadius: '8px',\r\n-      backgroundColor: 'white',\r\n-      cursor: 'pointer',\r\n-      transition: 'transform 0.3s',\r\n-      ':hover': {\r\n-        transform: 'translateY(-5px)',\r\n-      },\r\n-    },\r\n-    serviceTitle: {\r\n-      fontSize: '1.5rem',\r\n-      fontWeight: '600',\r\n-      marginBottom: '0.5rem',\r\n-      color: '#1e293b',\r\n-    },\r\n-    serviceDesc: {\r\n-      color: '#64748b',\r\n-      fontSize: '1rem',\r\n-      lineHeight: '1.5',\r\n-    },\r\n-    quickLinkButton: {\r\n-      padding: '0.75rem 1.5rem',\r\n-      borderRadius: '50px',\r\n-      border: 'none',\r\n-      backgroundColor: '#e2e8f0',\r\n-      color: '#1e293b',\r\n-      fontWeight: '600',\r\n-      cursor: 'pointer',\r\n-      transition: 'all 0.2s',\r\n-      ':hover': {\r\n-        backgroundColor: '#cbd5e1',\r\n-      },\r\n-    },\r\n-  },\r\n-\r\n-  // Dark Mode Styles\r\n-  dark: {\r\n-    page: {\r\n-      backgroundColor: '#0f172a',\r\n-      minHeight: '100vh',\r\n-    },\r\n-    sectionTitle: {\r\n-      fontSize: '2rem',\r\n-      fontWeight: '700',\r\n-      marginBottom: '1.5rem',\r\n-      color: '#e2e8f0',\r\n-      textAlign: 'center',\r\n-    },\r\n-    serviceCard: {\r\n-      padding: '2rem 1.5rem',\r\n-      borderRadius: '8px',\r\n-      backgroundColor: '#1e293b',\r\n-      cursor: 'pointer',\r\n-      transition: 'all 0.3s',\r\n-      ':hover': {\r\n-        transform: 'translateY(-5px)',\r\n-      },\r\n-    },\r\n-    serviceTitle: {\r\n-      fontSize: '1.5rem',\r\n-      fontWeight: '600',\r\n-      marginBottom: '0.5rem',\r\n-      color: '#f8fafc',\r\n-    },\r\n-    serviceDesc: {\r\n-      color: '#94a3b8',\r\n-      fontSize: '1rem',\r\n-      lineHeight: '1.5',\r\n-    },\r\n-    quickLinkButton: {\r\n-      padding: '0.75rem 1.5rem',\r\n-      borderRadius: '50px',\r\n-      border: 'none',\r\n-      backgroundColor: '#334155',\r\n-      color: '#e2e8f0',\r\n-      fontWeight: '600',\r\n-      cursor: 'pointer',\r\n-      transition: 'all 0.2s',\r\n-      ':hover': {\r\n-        backgroundColor: '#475569',\r\n-      },\r\n-    },\r\n-  },\r\n-};\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752647016151,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,247 @@\n+import { useState } from 'react';\r\n+import { useNavigate } from 'react-router-dom';\r\n+\r\n+export default function Home() {\r\n+  const navigate = useNavigate();\r\n+  const [searchQuery, setSearchQuery] = useState('');\r\n+\r\n+  const services = [\r\n+    { \r\n+      name: 'Transport', \r\n+      path: '/transport', \r\n+      icon: 'üöå', \r\n+      desc: 'Plan your multi-modal journey across the city',\r\n+      color: '#3b82f6'\r\n+    },\r\n+    { \r\n+      name: 'Food Delivery', \r\n+      path: '/food', \r\n+      icon: 'üçî', \r\n+      desc: 'Discover local restaurants and cafes',\r\n+      color: '#ef4444'\r\n+    },\r\n+    { \r\n+      name: 'Groceries', \r\n+      path: '/food', \r\n+      icon: 'üõí', \r\n+      desc: 'Get groceries delivered in minutes',\r\n+      color: '#10b981'\r\n+    },\r\n+    { \r\n+      name: 'Services', \r\n+      path: '/food', \r\n+      icon: 'üõ†Ô∏è', \r\n+      desc: 'Find urban services near you',\r\n+      color: '#8b5cf6'\r\n+    }\r\n+  ];\r\n+\r\n+  const handleSearch = (e) => {\r\n+    e.preventDefault();\r\n+    if (searchQuery.trim()) {\r\n+      navigate(`/food?search=${encodeURIComponent(searchQuery)}`);\r\n+    }\r\n+  };\r\n+\r\n+  return (\r\n+    <div className=\"home-page\" style={styles.page}>\r\n+      {/* Hero Section */}\r\n+      <section className=\"hero\" style={styles.hero}>\r\n+        <div className=\"hero-content\" style={styles.heroContent}>\r\n+          <h1 style={styles.title}>UrbanFlow</h1>\r\n+          <p className=\"tagline\" style={styles.tagline}>Your seamless urban living companion</p>\r\n+          \r\n+          <form onSubmit={handleSearch} className=\"search-box\" style={styles.searchBox}>\r\n+            <input\r\n+              type=\"text\"\r\n+              placeholder=\"Search for restaurants, services...\"\r\n+              value={searchQuery}\r\n+              onChange={(e) => setSearchQuery(e.target.value)}\r\n+              style={styles.searchInput}\r\n+            />\r\n+            <button type=\"submit\" style={styles.searchButton}>\r\n+              <span>üîç</span>\r\n+            </button>\r\n+          </form>\r\n+        </div>\r\n+      </section>\r\n+\r\n+      {/* Services Grid */}\r\n+      <section className=\"services-section\" style={styles.section}>\r\n+        <h2 style={styles.sectionTitle}>What do you need today?</h2>\r\n+        <div className=\"services-grid\" style={styles.servicesGrid}>\r\n+          {services.map((service) => (\r\n+            <div \r\n+              key={service.name} \r\n+              className=\"service-card\"\r\n+              style={{ \r\n+                ...styles.serviceCard,\r\n+                backgroundColor: `${service.color}20`,\r\n+                borderColor: service.color,\r\n+                '--card-color': service.color\r\n+              }}\r\n+              onClick={() => navigate(service.path)}\r\n+            >\r\n+              <div className=\"service-icon\" style={styles.serviceIcon}>{service.icon}</div>\r\n+              <h3 style={styles.serviceTitle}>{service.name}</h3>\r\n+              <p style={styles.serviceDesc}>{service.desc}</p>\r\n+              <div className=\"card-hover-effect\"></div>\r\n+            </div>\r\n+          ))}\r\n+        </div>\r\n+      </section>\r\n+\r\n+      {/* Featured Section */}\r\n+      <section className=\"featured-section\" style={styles.section}>\r\n+        <h2 style={styles.sectionTitle}>Quick Access</h2>\r\n+        <div className=\"quick-links\" style={styles.quickLinks}>\r\n+          <button \r\n+            onClick={() => navigate('/transport?from=home&to=downtown')}\r\n+            style={styles.quickLinkButton}\r\n+          >\r\n+            üöï To Downtown\r\n+          </button>\r\n+          <button \r\n+            onClick={() => navigate('/food?category=fastfood')}\r\n+            style={styles.quickLinkButton}\r\n+          >\r\n+            üçü Fast Food\r\n+          </button>\r\n+          <button \r\n+            onClick={() => navigate('/food?category=coffee')}\r\n+            style={styles.quickLinkButton}\r\n+          >\r\n+            ‚òï Coffee Shops\r\n+          </button>\r\n+        </div>\r\n+      </section>\r\n+    </div>\r\n+  );\r\n+}\r\n+\r\n+const styles = {\r\n+  page: {\r\n+    backgroundColor: '#f8fafc',\r\n+    minHeight: '100vh',\r\n+    paddingBottom: '3rem',\r\n+  },\r\n+  hero: {\r\n+    background: 'linear-gradient(135deg, #6b46c1 0%, #3b82f6 100%)',\r\n+    color: 'white',\r\n+    padding: '4rem 1rem',\r\n+    textAlign: 'center',\r\n+    borderRadius: '0 0 20px 20px',\r\n+    boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',\r\n+  },\r\n+  heroContent: {\r\n+    maxWidth: '800px',\r\n+    margin: '0 auto',\r\n+  },\r\n+  title: {\r\n+    fontSize: '3.5rem',\r\n+    fontWeight: '800',\r\n+    marginBottom: '0.5rem',\r\n+    textShadow: '2px 2px 4px rgba(0, 0, 0, 0.2)',\r\n+  },\r\n+  tagline: {\r\n+    fontSize: '1.25rem',\r\n+    marginBottom: '2rem',\r\n+    opacity: 0.9,\r\n+  },\r\n+  searchBox: {\r\n+    display: 'flex',\r\n+    maxWidth: '600px',\r\n+    margin: '0 auto',\r\n+    borderRadius: '50px',\r\n+    overflow: 'hidden',\r\n+    boxShadow: '0 4px 10px rgba(0, 0, 0, 0.2)',\r\n+  },\r\n+  searchInput: {\r\n+    flex: 1,\r\n+    padding: '1rem 1.5rem',\r\n+    border: 'none',\r\n+    fontSize: '1rem',\r\n+    outline: 'none',\r\n+  },\r\n+  searchButton: {\r\n+    backgroundColor: '#1e40af',\r\n+    color: 'white',\r\n+    border: 'none',\r\n+    padding: '0 1.5rem',\r\n+    cursor: 'pointer',\r\n+    fontSize: '1.25rem',\r\n+    transition: 'background-color 0.2s',\r\n+  },\r\n+  section: {\r\n+    padding: '2rem 1rem',\r\n+    maxWidth: '1200px',\r\n+    margin: '0 auto',\r\n+  },\r\n+  sectionTitle: {\r\n+    fontSize: '2rem',\r\n+    fontWeight: '700',\r\n+    marginBottom: '1.5rem',\r\n+    color: '#1e293b',\r\n+    textAlign: 'center',\r\n+  },\r\n+  servicesGrid: {\r\n+    display: 'grid',\r\n+    gridTemplateColumns: 'repeat(auto-fit, minmax(250px, 1fr))',\r\n+    gap: '1.5rem',\r\n+    marginTop: '1rem',\r\n+  },\r\n+  serviceCard: {\r\n+    padding: '2rem 1.5rem',\r\n+    borderRadius: '16px',\r\n+    border: '2px solid',\r\n+    textAlign: 'center',\r\n+    cursor: 'pointer',\r\n+    transition: 'transform 0.3s, box-shadow 0.3s',\r\n+    position: 'relative',\r\n+    overflow: 'hidden',\r\n+    backdropFilter: 'blur(10px)',\r\n+    ':hover': {\r\n+      transform: 'translateY(-5px)',\r\n+      boxShadow: '0 10px 20px rgba(0, 0, 0, 0.1)',\r\n+    },\r\n+  },\r\n+  serviceIcon: {\r\n+    fontSize: '3rem',\r\n+    marginBottom: '1rem',\r\n+  },\r\n+  serviceTitle: {\r\n+    fontSize: '1.5rem',\r\n+    fontWeight: '600',\r\n+    marginBottom: '0.5rem',\r\n+    color: '#1e293b',\r\n+  },\r\n+  serviceDesc: {\r\n+    color: '#64748b',\r\n+    fontSize: '1rem',\r\n+    lineHeight: '1.5',\r\n+  },\r\n+  quickLinks: {\r\n+    display: 'flex',\r\n+    justifyContent: 'center',\r\n+    gap: '1rem',\r\n+    flexWrap: 'wrap',\r\n+  },\r\n+  quickLinkButton: {\r\n+    padding: '0.75rem 1.5rem',\r\n+    borderRadius: '50px',\r\n+    border: 'none',\r\n+    backgroundColor: '#e2e8f0',\r\n+    color: '#1e293b',\r\n+    fontWeight: '600',\r\n+    cursor: 'pointer',\r\n+    transition: 'all 0.2s',\r\n+    display: 'flex',\r\n+    alignItems: 'center',\r\n+    gap: '0.5rem',\r\n+    fontSize: '1rem',\r\n+    ':hover': {\r\n+      backgroundColor: '#cbd5e1',\r\n+      transform: 'scale(1.05)',\r\n+    },\r\n+  },\r\n+};\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752647326455,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,286 +3,43 @@\n \r\n export default function Home() {\r\n   const navigate = useNavigate();\r\n   const [searchQuery, setSearchQuery] = useState('');\r\n-\r\n-  const services = [\r\n-    { \r\n-      name: 'Transport', \r\n-      path: '/transport', \r\n-      icon: 'üöå', \r\n-      desc: 'Plan your multi-modal journey across the city',\r\n-      color: '#3b82f6'\r\n-    },\r\n-    { \r\n-      name: 'Food Delivery', \r\n-      path: '/food', \r\n-      icon: 'üçî', \r\n-      desc: 'Discover local restaurants and cafes',\r\n-      color: '#ef4444'\r\n-    },\r\n-    { \r\n-      name: 'Groceries', \r\n-      path: '/food', \r\n-      icon: 'üõí', \r\n-      desc: 'Get groceries delivered in minutes',\r\n-      color: '#10b981'\r\n-    },\r\n-    { \r\n-      name: 'Services', \r\n-      path: '/food', \r\n-      icon: 'üõ†Ô∏è', \r\n-      desc: 'Find urban services near you',\r\n-      color: '#8b5cf6'\r\n-    }\r\n-  ];\r\n-\r\n-  const handleSearch = (e) => {\r\n-    e.preventDefault();\r\n-    if (searchQuery.trim()) {\r\n-      navigate(`/food?search=${encodeURIComponent(searchQuery)}`);\r\n-    }\r\n-  };\r\n-\r\n-  return (\r\n-    <div className=\"home-page\" style={styles.page}>\r\n-      {/* Hero Section */}\r\n-      <section className=\"hero\" style={styles.hero}>\r\n-        <div className=\"hero-content\" style={styles.heroContent}>\r\n-          <h1 style={styles.title}>UrbanFlow</h1>\r\n-          <p className=\"tagline\" style={styles.tagline}>Your seamless urban living companion</p>\r\n-          \r\n-          <form onSubmit={handleSearch} className=\"search-box\" style={styles.searchBox}>\r\n-            <input\r\n-              type=\"text\"\r\n-              placeholder=\"Search for restaurants, services...\"\r\n-              value={searchQuery}\r\n-              onChange={(e) => setSearchQuery(e.target.value)}\r\n-              style={styles.searchInput}\r\n-            />\r\n-            <button type=\"submit\" style={styles.searchButton}>\r\n-              <span>üîç</span>\r\n-            </button>\r\n-          </form>\r\n-        </div>\r\n-      </section>\r\n-\r\n-      {/* Services Grid */}\r\n-      <section className=\"services-section\" style={styles.section}>\r\n-        <h2 style={styles.sectionTitle}>What do you need today?</h2>\r\n-        <div className=\"services-grid\" style={styles.servicesGrid}>\r\n-          {services.map((service) => (\r\n-            <div \r\n-              key={service.name} \r\n-              className=\"service-card\"\r\n-              style={{ \r\n-                ...styles.serviceCard,\r\n-                backgroundColor: `${service.color}20`,\r\n-                borderColor: service.color,\r\n-                '--card-color': service.color\r\n-              }}\r\n-              onClick={() => navigate(service.path)}\r\n-            >\r\n-              <div className=\"service-icon\" style={styles.serviceIcon}>{service.icon}</div>\r\n-              <h3 style={styles.serviceTitle}>{service.name}</h3>\r\n-              <p style={styles.serviceDesc}>{service.desc}</p>\r\n-              <div className=\"card-hover-effect\"></div>\r\n-            </div>\r\n-          ))}\r\n-        </div>\r\n-      </section>\r\n-\r\n-      {/* Featured Section */}\r\n-      <section className=\"featured-section\" style={styles.section}>\r\n-        <h2 style={styles.sectionTitle}>Quick Access</h2>\r\n-        <div className=\"quick-links\" style={styles.quickLinks}>\r\n-          <button \r\n-            onClick={() => navigate('/transport?from=home&to=downtown')}\r\n-            style={styles.quickLinkButton}\r\n-          >\r\n-            üöï To Downtown\r\n-          </button>\r\n-          <button \r\n-            onClick={() => navigate('/food?category=fastfood')}\r\n-            style={styles.quickLinkButton}\r\n-          >\r\n-            üçü Fast Food\r\n-          </button>\r\n-          <button \r\n-            onClick={() => navigate('/food?category=coffee')}\r\n-            style={styles.quickLinkButton}\r\n-          >\r\n-            ‚òï Coffee Shops\r\n-          </button>\r\n-        </div>\r\n-      </section>\r\n-    </div>\r\n-  );\r\n-}\r\n-\r\n-const styles = {\r\n-  page: {\r\n-    backgroundColor: '#f8fafc',\r\n-    minHeight: '100vh',\r\n-    paddingBottom: '3rem',\r\n-  },\r\n-  hero: {\r\n-    background: 'linear-gradient(135deg, #6b46c1 0%, #3b82f6 100%)',\r\n-    color: 'white',\r\n-    padding: '4rem 1rem',\r\n-    textAlign: 'center',\r\n-    borderRadius: '0 0 20px 20px',\r\n-    boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',\r\n-  },\r\n-  heroContent: {\r\n-    maxWidth: '800px',\r\n-    margin: '0 auto',\r\n-  },\r\n-  title: {\r\n-    fontSize: '3.5rem',\r\n-    fontWeight: '800',\r\n-    marginBottom: '0.5rem',\r\n-    textShadow: '2px 2px 4px rgba(0, 0, 0, 0.2)',\r\n-  },\r\n-  tagline: {\r\n-    fontSize: '1.25rem',\r\n-    marginBottom: '2rem',\r\n-    opacity: 0.9,\r\n-  },\r\n-  searchBox: {\r\n-    display: 'flex',\r\n-    maxWidth: '600px',\r\n-    margin: '0 auto',\r\n-    borderRadius: '50px',\r\n-    overflow: 'hidden',\r\n-    boxShadow: '0 4px 10px rgba(0, 0, 0, 0.2)',\r\n-  },\r\n-  searchInput: {\r\n-    flex: 1,\r\n-    padding: '1rem 1.5rem',\r\n-    border: 'none',\r\n-    fontSize: '1rem',\r\n-    outline: 'none',\r\n-  },\r\n-  searchButton: {\r\n-    backgroundColor: '#1e40af',\r\n-    color: 'white',\r\n-    border: 'none',\r\n-    padding: '0 1.5rem',\r\n-    cursor: 'pointer',\r\n-    fontSize: '1.25rem',\r\n-    transition: 'background-color 0.2s',\r\n-  },\r\n-  section: {\r\n-    padding: '2rem 1rem',\r\n-    maxWidth: '1200px',\r\n-    margin: '0 auto',\r\n-  },\r\n-  sectionTitle: {\r\n-    fontSize: '2rem',\r\n-    fontWeight: '700',\r\n-    marginBottom: '1.5rem',\r\n-    color: '#1e293b',\r\n-    textAlign: 'center',\r\n-  },\r\n-  servicesGrid: {\r\n-    display: 'grid',\r\n-    gridTemplateColumns: 'repeat(auto-fit, minmax(250px, 1fr))',\r\n-    gap: '1.5rem',\r\n-    marginTop: '1rem',\r\n-  },\r\n-  serviceCard: {\r\n-    padding: '2rem 1.5rem',\r\n-    borderRadius: '16px',\r\n-    border: '2px solid',\r\n-    textAlign: 'center',\r\n-    cursor: 'pointer',\r\n-    transition: 'transform 0.3s, box-shadow 0.3s',\r\n-    position: 'relative',\r\n-    overflow: 'hidden',\r\n-    backdropFilter: 'blur(10px)',\r\n-    ':hover': {\r\n-      transform: 'translateY(-5px)',\r\n-      boxShadow: '0 10px 20px rgba(0, 0, 0, 0.1)',\r\n-    },\r\n-  },\r\n-  serviceIcon: {\r\n-    fontSize: '3rem',\r\n-    marginBottom: '1rem',\r\n-  },\r\n-  serviceTitle: {\r\n-    fontSize: '1.5rem',\r\n-    fontWeight: '600',\r\n-    marginBottom: '0.5rem',\r\n-    color: '#1e293b',\r\n-  },\r\n-  serviceDesc: {\r\n-    color: '#64748b',\r\n-    fontSize: '1rem',\r\n-    lineHeight: '1.5',\r\n-  },\r\n-  quickLinks: {\r\n-    display: 'flex',\r\n-    justifyContent: 'center',\r\n-    gap: '1rem',\r\n-    flexWrap: 'wrap',\r\n-  },\r\n-  quickLinkButton: {\r\n-    padding: '0.75rem 1.5rem',\r\n-    borderRadius: '50px',\r\n-    border: 'none',\r\n-    backgroundColor: '#e2e8f0',\r\n-    color: '#1e293b',\r\n-    fontWeight: '600',\r\n-    cursor: 'pointer',\r\n-    transition: 'all 0.2s',\r\n-    display: 'flex',\r\n-    alignItems: 'center',\r\n-    gap: '0.5rem',\r\n-    fontSize: '1rem',\r\n-    ':hover': {\r\n-      backgroundColor: '#cbd5e1',\r\n-      transform: 'scale(1.05)',\r\n-    },\r\n-  },\r\n-};\n-import { useState } from 'react';\r\n-import { useNavigate } from 'react-router-dom';\r\n-\r\n-export default function Home() {\r\n-  const navigate = useNavigate();\r\n-  const [searchQuery, setSearchQuery] = useState('');\r\n-  const [isSearchFocused, setIsSearchFocused] = useState(false);\r\n   const [darkMode, setDarkMode] = useState(false);\r\n+  const [selectedService, setSelectedService] = useState(null);\r\n \r\n   const services = [\r\n     { \r\n       name: 'Transport', \r\n       path: '/transport', \r\n       icon: 'üöå', \r\n       desc: 'Plan your multi-modal journey across the city',\r\n-      color: '#3b82f6'\r\n+      color: '#3b82f6',\r\n+      details: 'Find the best routes combining metro, buses, and bikes. Real-time updates and ticket purchasing available.'\r\n     },\r\n     { \r\n       name: 'Food Delivery', \r\n       path: '/food', \r\n       icon: 'üçî', \r\n       desc: 'Discover local restaurants and cafes',\r\n-      color: '#ef4444'\r\n+      color: '#ef4444',\r\n+      details: 'Order from hundreds of restaurants with special discounts. Track your delivery in real-time.'\r\n     },\r\n     { \r\n       name: 'Groceries', \r\n       path: '/food', \r\n       icon: 'üõí', \r\n       desc: 'Get groceries delivered in minutes',\r\n-      color: '#10b981'\r\n+      color: '#10b981',\r\n+      details: 'Same-day delivery from local supermarkets. Schedule recurring orders for essentials.'\r\n     },\r\n     { \r\n       name: 'Services', \r\n       path: '/food', \r\n       icon: 'üõ†Ô∏è', \r\n       desc: 'Find urban services near you',\r\n-      color: '#8b5cf6'\r\n+      color: '#8b5cf6',\r\n+      details: 'Book home services, repairs, and professional help with verified providers.'\r\n     }\r\n   ];\r\n \r\n   const handleSearch = (e) => {\r\n@@ -295,241 +52,215 @@\n   const toggleDarkMode = () => {\r\n     setDarkMode(!darkMode);\r\n   };\r\n \r\n+  const openServicePopup = (service) => {\r\n+    setSelectedService(service);\r\n+  };\r\n+\r\n+  const closePopup = () => {\r\n+    setSelectedService(null);\r\n+  };\r\n+\r\n   // Dynamic styles based on dark mode\r\n   const dynamicStyles = {\r\n     page: {\r\n       backgroundColor: darkMode ? '#1a202c' : '#f8fafc',\r\n       minHeight: '100vh',\r\n       paddingBottom: '3rem',\r\n-      fontFamily: \"'Segoe UI', Roboto, 'Helvetica Neue', sans-serif\",\r\n       color: darkMode ? '#e2e8f0' : '#1e293b',\r\n       transition: 'all 0.3s ease',\r\n     },\r\n     hero: {\r\n       background: darkMode \r\n         ? 'linear-gradient(135deg, #2d3748 0%, #1a202c 100%)' \r\n-        : 'linear-gradient(135deg, #f0f4f8 0%, #dfe7ef 100%)',\r\n-      color: darkMode ? 'white' : '#1e293b',\r\n-      padding: '5rem 1rem 6rem',\r\n+        : 'linear-gradient(135deg, #6b46c1 0%, #3b82f6 100%)',\r\n+      color: 'white',\r\n+      padding: '4rem 1rem',\r\n       textAlign: 'center',\r\n-      position: 'relative',\r\n-      overflow: 'hidden',\r\n+      borderRadius: '0 0 20px 20px',\r\n+      boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',\r\n     },\r\n-    title: {\r\n-      fontSize: '4rem',\r\n-      fontWeight: '800',\r\n-      marginBottom: '0.5rem',\r\n-      textShadow: darkMode ? '2px 2px 4px rgba(0, 0, 0, 0.5)' : '2px 2px 4px rgba(0, 0, 0, 0.1)',\r\n-      background: darkMode \r\n-        ? 'linear-gradient(to right, #fff, #a0aec0)' \r\n-        : 'linear-gradient(to right, #1e293b, #4b5563)',\r\n-      WebkitBackgroundClip: 'text',\r\n-      WebkitTextFillColor: 'transparent',\r\n-      letterSpacing: '-0.05em',\r\n-    },\r\n     serviceCard: {\r\n       padding: '2rem 1.5rem',\r\n-      borderRadius: '12px',\r\n+      borderRadius: '16px',\r\n+      border: '2px solid',\r\n       textAlign: 'center',\r\n       cursor: 'pointer',\r\n-      transition: 'all 0.3s ease',\r\n+      transition: 'transform 0.3s, box-shadow 0.3s',\r\n       position: 'relative',\r\n       overflow: 'hidden',\r\n-      backgroundColor: darkMode ? '#2d3748' : 'white',\r\n-      boxShadow: darkMode ? '0 4px 6px rgba(0, 0, 0, 0.2)' : '0 4px 6px rgba(0, 0, 0, 0.05)',\r\n+      backdropFilter: 'blur(10px)',\r\n       ':hover': {\r\n         transform: 'translateY(-5px)',\r\n-        boxShadow: darkMode ? '0 10px 25px rgba(0, 0, 0, 0.3)' : '0 10px 25px rgba(0, 0, 0, 0.1)',\r\n+        boxShadow: '0 10px 20px rgba(0, 0, 0, 0.1)',\r\n       },\r\n     },\r\n     serviceTitle: {\r\n       fontSize: '1.5rem',\r\n       fontWeight: '600',\r\n-      marginBottom: '0.75rem',\r\n+      marginBottom: '0.5rem',\r\n       color: darkMode ? '#e2e8f0' : '#1e293b',\r\n     },\r\n     serviceDesc: {\r\n       color: darkMode ? '#a0aec0' : '#64748b',\r\n       fontSize: '1rem',\r\n-      lineHeight: '1.6',\r\n-      marginBottom: '0',\r\n+      lineHeight: '1.5',\r\n     },\r\n     sectionTitle: {\r\n-      fontSize: '2.25rem',\r\n+      fontSize: '2rem',\r\n       fontWeight: '700',\r\n-      marginBottom: '0.5rem',\r\n+      marginBottom: '1.5rem',\r\n       color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+      textAlign: 'center',\r\n     },\r\n-    sectionSubtitle: {\r\n-      fontSize: '1.1rem',\r\n-      color: darkMode ? '#a0aec0' : '#64748b',\r\n-      marginBottom: '0',\r\n-    },\r\n     quickLinkButton: {\r\n-      padding: '0.9rem 1.75rem',\r\n+      padding: '0.75rem 1.5rem',\r\n       borderRadius: '50px',\r\n       border: 'none',\r\n-      backgroundColor: darkMode ? '#2d3748' : 'white',\r\n+      backgroundColor: darkMode ? '#2d3748' : '#e2e8f0',\r\n       color: darkMode ? '#e2e8f0' : '#1e293b',\r\n       fontWeight: '600',\r\n       cursor: 'pointer',\r\n-      transition: 'all 0.2s ease',\r\n+      transition: 'all 0.2s',\r\n       display: 'flex',\r\n       alignItems: 'center',\r\n-      gap: '0.75rem',\r\n+      gap: '0.5rem',\r\n       fontSize: '1rem',\r\n-      boxShadow: darkMode ? '0 2px 5px rgba(0, 0, 0, 0.3)' : '0 2px 5px rgba(0, 0, 0, 0.08)',\r\n       ':hover': {\r\n-        backgroundColor: darkMode ? '#4a5568' : '#f1f5f9',\r\n-        transform: 'translateY(-2px)',\r\n-        boxShadow: darkMode ? '0 5px 15px rgba(0, 0, 0, 0.4)' : '0 5px 15px rgba(0, 0, 0, 0.1)',\r\n+        backgroundColor: darkMode ? '#4a5568' : '#cbd5e1',\r\n+        transform: 'scale(1.05)',\r\n       },\r\n     },\r\n+    popupOverlay: {\r\n+      position: 'fixed',\r\n+      top: 0,\r\n+      left: 0,\r\n+      right: 0,\r\n+      bottom: 0,\r\n+      backgroundColor: 'rgba(0, 0, 0, 0.7)',\r\n+      display: 'flex',\r\n+      justifyContent: 'center',\r\n+      alignItems: 'center',\r\n+      zIndex: 1000,\r\n+    },\r\n+    popupContent: {\r\n+      backgroundColor: darkMode ? '#2d3748' : 'white',\r\n+      borderRadius: '16px',\r\n+      padding: '2rem',\r\n+      maxWidth: '500px',\r\n+      width: '90%',\r\n+      boxShadow: '0 10px 25px rgba(0, 0, 0, 0.2)',\r\n+      position: 'relative',\r\n+      border: darkMode ? '1px solid #4a5568' : '1px solid #e2e8f0',\r\n+    },\r\n+    popupClose: {\r\n+      position: 'absolute',\r\n+      top: '1rem',\r\n+      right: '1rem',\r\n+      background: 'none',\r\n+      border: 'none',\r\n+      fontSize: '1.5rem',\r\n+      cursor: 'pointer',\r\n+      color: darkMode ? '#a0aec0' : '#64748b',\r\n+    },\r\n+    popupTitle: {\r\n+      fontSize: '1.8rem',\r\n+      fontWeight: '700',\r\n+      marginBottom: '1rem',\r\n+      color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+    },\r\n+    popupDesc: {\r\n+      color: darkMode ? '#a0aec0' : '#64748b',\r\n+      fontSize: '1.1rem',\r\n+      lineHeight: '1.6',\r\n+      marginBottom: '2rem',\r\n+    },\r\n+    popupButton: {\r\n+      padding: '0.75rem 1.5rem',\r\n+      borderRadius: '8px',\r\n+      border: 'none',\r\n+      backgroundColor: darkMode ? '#4a5568' : '#3b82f6',\r\n+      color: 'white',\r\n+      fontWeight: '600',\r\n+      cursor: 'pointer',\r\n+      transition: 'all 0.2s',\r\n+      fontSize: '1rem',\r\n+      ':hover': {\r\n+        backgroundColor: darkMode ? '#5f6b82' : '#2563eb',\r\n+      },\r\n+    },\r\n   };\r\n \r\n   const styles = {\r\n     ...dynamicStyles,\r\n-    // Rest of your styles remain the same, just merge with dynamicStyles\r\n     heroContent: {\r\n-      maxWidth: '900px',\r\n+      maxWidth: '800px',\r\n       margin: '0 auto',\r\n-      position: 'relative',\r\n-      zIndex: 2,\r\n     },\r\n-    heroText: {\r\n-      marginBottom: '2.5rem',\r\n+    title: {\r\n+      fontSize: '3.5rem',\r\n+      fontWeight: '800',\r\n+      marginBottom: '0.5rem',\r\n+      textShadow: '2px 2px 4px rgba(0, 0, 0, 0.2)',\r\n     },\r\n     tagline: {\r\n-      fontSize: '1.35rem',\r\n-      marginBottom: '0',\r\n+      fontSize: '1.25rem',\r\n+      marginBottom: '2rem',\r\n       opacity: 0.9,\r\n-      fontWeight: '400',\r\n     },\r\n-    taglineHighlight: {\r\n-      fontWeight: '600',\r\n-      marginLeft: '0.5rem',\r\n-      color: darkMode ? '#a0aec0' : '#4b5563',\r\n-    },\r\n     searchBox: {\r\n       display: 'flex',\r\n-      maxWidth: '650px',\r\n+      maxWidth: '600px',\r\n       margin: '0 auto',\r\n-      borderRadius: '12px',\r\n+      borderRadius: '50px',\r\n       overflow: 'hidden',\r\n-      transition: 'all 0.3s ease',\r\n-      backgroundColor: darkMode ? '#2d3748' : 'white',\r\n-      border: `2px solid ${isSearchFocused ? '#3b82f6' : darkMode ? '#4a5568' : '#e2e8f0'}`,\r\n-      boxShadow: isSearchFocused ? '0 0 0 3px rgba(59, 130, 246, 0.2)' : darkMode ? '0 2px 10px rgba(0, 0, 0, 0.3)' : '0 2px 10px rgba(0, 0, 0, 0.1)'\r\n+      boxShadow: '0 4px 10px rgba(0, 0, 0, 0.2)',\r\n     },\r\n     searchInput: {\r\n       flex: 1,\r\n-      padding: '1.1rem 1.75rem',\r\n+      padding: '1rem 1.5rem',\r\n       border: 'none',\r\n-      fontSize: '1.05rem',\r\n+      fontSize: '1rem',\r\n       outline: 'none',\r\n+      backgroundColor: darkMode ? '#2d3748' : 'white',\r\n       color: darkMode ? '#e2e8f0' : '#1e293b',\r\n-      backgroundColor: 'transparent',\r\n-      '::placeholder': {\r\n-        color: darkMode ? '#718096' : '#94a3b8',\r\n-      },\r\n     },\r\n     searchButton: {\r\n-      display: 'flex',\r\n-      alignItems: 'center',\r\n-      gap: '0.5rem',\r\n-      padding: '0 2rem',\r\n+      backgroundColor: darkMode ? '#4a5568' : '#1e40af',\r\n+      color: 'white',\r\n       border: 'none',\r\n-      color: 'white',\r\n-      fontWeight: '600',\r\n+      padding: '0 1.5rem',\r\n       cursor: 'pointer',\r\n-      fontSize: '1rem',\r\n-      transition: 'all 0.2s',\r\n+      fontSize: '1.25rem',\r\n+      transition: 'background-color 0.2s',\r\n       ':hover': {\r\n-        filter: 'brightness(1.1)',\r\n+        backgroundColor: darkMode ? '#5f6b82' : '#1e3a8a',\r\n       },\r\n-      ':disabled': {\r\n-        cursor: 'not-allowed',\r\n-        opacity: 0.8,\r\n-      },\r\n-      backgroundColor: searchQuery.trim() ? '#1e40af' : (darkMode ? '#4a5568' : '#94a3b8')\r\n     },\r\n-    searchIcon: {\r\n-      fontSize: '1.2rem',\r\n-    },\r\n-    searchText: {\r\n-      display: ['none', 'none', 'block'],\r\n-    },\r\n-    heroFeatures: {\r\n-      display: 'flex',\r\n-      justifyContent: 'center',\r\n-      gap: '1.5rem',\r\n-      marginTop: '2rem',\r\n-      flexWrap: 'wrap',\r\n-    },\r\n-    heroFeatureItem: {\r\n-      display: 'flex',\r\n-      alignItems: 'center',\r\n-      gap: '0.5rem',\r\n-      fontSize: '0.95rem',\r\n-      opacity: 0.9,\r\n-      color: darkMode ? '#cbd5e0' : '#4b5563',\r\n-    },\r\n-    heroWave: {\r\n-      position: 'absolute',\r\n-      bottom: 0,\r\n-      left: 0,\r\n-      right: 0,\r\n-      height: '100px',\r\n-      background: darkMode\r\n-        ? 'url(\"data:image/svg+xml,%3Csvg xmlns=\\'http://www.w3.org/2000/svg\\' viewBox=\\'0 0 1200 120\\' preserveAspectRatio=\\'none\\'%3E%3Cpath d=\\'M0,0V46.29c47.79,22.2,103.59,32.17,158,28,70.36-5.37,136.33-33.31,206.8-37.5C438.64,32.43,512.34,53.67,583,72.05c69.27,18,138.3,24.88,209.4,13.08,36.15-6,69.85-17.84,104.45-29.34C989.49,25,1113-14.29,1200,52.47V0Z\\' opacity=\\'.25\\' fill=\\'%232d3748\\'%3E%3C/path%3E%3Cpath d=\\'M0,0V15.81C13,36.92,27.64,56.86,47.69,72.05,99.41,111.27,165,111,224.58,91.58c31.15-10.15,60.09-26.07,89.67-39.8,40.92-19,84.73-46,130.83-49.67,36.26-2.85,70.9,9.42,98.6,31.56,31.77,25.39,62.32,62,103.63,73,40.44,10.79,81.35-6.69,119.13-24.28s75.16-39,116.92-43.05c59.73-5.85,113.28,22.88,168.9,38.84,30.2,8.66,59,6.17,87.09-7.5,22.43-10.89,48-26.93,60.65-49.24V0Z\\' opacity=\\'.5\\' fill=\\'%232d3748\\'%3E%3C/path%3E%3Cpath d=\\'M0,0V5.63C149.93,59,314.09,71.32,475.83,42.57c43-7.64,84.23-20.12,127.61-26.46,59-8.63,112.48,12.24,165.56,35.4C827.93,77.22,886,95.24,951.2,90c86.53-7,172.46-45.71,248.8-84.81V0Z\\' fill=\\'%232d3748\\'%3E%3C/path%3E%3C/svg%3E\")'\r\n-        : 'url(\"data:image/svg+xml,%3Csvg xmlns=\\'http://www.w3.org/2000/svg\\' viewBox=\\'0 0 1200 120\\' preserveAspectRatio=\\'none\\'%3E%3Cpath d=\\'M0,0V46.29c47.79,22.2,103.59,32.17,158,28,70.36-5.37,136.33-33.31,206.8-37.5C438.64,32.43,512.34,53.67,583,72.05c69.27,18,138.3,24.88,209.4,13.08,36.15-6,69.85-17.84,104.45-29.34C989.49,25,1113-14.29,1200,52.47V0Z\\' opacity=\\'.25\\' fill=\\'%23f8fafc\\'%3E%3C/path%3E%3Cpath d=\\'M0,0V15.81C13,36.92,27.64,56.86,47.69,72.05,99.41,111.27,165,111,224.58,91.58c31.15-10.15,60.09-26.07,89.67-39.8,40.92-19,84.73-46,130.83-49.67,36.26-2.85,70.9,9.42,98.6,31.56,31.77,25.39,62.32,62,103.63,73,40.44,10.79,81.35-6.69,119.13-24.28s75.16-39,116.92-43.05c59.73-5.85,113.28,22.88,168.9,38.84,30.2,8.66,59,6.17,87.09-7.5,22.43-10.89,48-26.93,60.65-49.24V0Z\\' opacity=\\'.5\\' fill=\\'%23f8fafc\\'%3E%3C/path%3E%3Cpath d=\\'M0,0V5.63C149.93,59,314.09,71.32,475.83,42.57c43-7.64,84.23-20.12,127.61-26.46,59-8.63,112.48,12.24,165.56,35.4C827.93,77.22,886,95.24,951.2,90c86.53-7,172.46-45.71,248.8-84.81V0Z\\' fill=\\'%23f8fafc\\'%3E%3C/path%3E%3C/svg%3E\")',\r\n-      backgroundSize: 'cover',\r\n-      zIndex: 1,\r\n-    },\r\n     section: {\r\n-      padding: '3rem 1rem',\r\n+      padding: '2rem 1rem',\r\n       maxWidth: '1200px',\r\n       margin: '0 auto',\r\n     },\r\n-    sectionHeader: {\r\n-      textAlign: 'center',\r\n-      marginBottom: '2rem',\r\n-    },\r\n     servicesGrid: {\r\n       display: 'grid',\r\n-      gridTemplateColumns: 'repeat(auto-fit, minmax(260px, 1fr))',\r\n-      gap: '1.75rem',\r\n-      marginTop: '2rem',\r\n+      gridTemplateColumns: 'repeat(auto-fit, minmax(250px, 1fr))',\r\n+      gap: '1.5rem',\r\n+      marginTop: '1rem',\r\n     },\r\n     serviceIcon: {\r\n-      fontSize: '3.5rem',\r\n-      marginBottom: '1.5rem',\r\n-      transition: 'transform 0.3s ease',\r\n-      ':hover': {\r\n-        transform: 'scale(1.1)',\r\n-      },\r\n+      fontSize: '3rem',\r\n+      marginBottom: '1rem',\r\n     },\r\n-    cardHoverEffect: {\r\n-      position: 'absolute',\r\n-      top: 0,\r\n-      left: 0,\r\n-      right: 0,\r\n-      height: '4px',\r\n-      backgroundColor: 'var(--card-color)',\r\n-    },\r\n     quickLinks: {\r\n       display: 'flex',\r\n       justifyContent: 'center',\r\n       gap: '1rem',\r\n       flexWrap: 'wrap',\r\n     },\r\n-    quickLinkIcon: {\r\n-      fontSize: '1.2rem',\r\n-    },\r\n     themeToggle: {\r\n-      position: 'absolute',\r\n+      position: 'fixed',\r\n       top: '1.5rem',\r\n       right: '1.5rem',\r\n       background: darkMode ? '#4a5568' : '#e2e8f0',\r\n       border: 'none',\r\n@@ -540,9 +271,10 @@\n       alignItems: 'center',\r\n       justifyContent: 'center',\r\n       cursor: 'pointer',\r\n       transition: 'all 0.3s ease',\r\n-      boxShadow: darkMode ? '0 2px 5px rgba(0, 0, 0, 0.3)' : '0 2px 5px rgba(0, 0, 0, 0.1)',\r\n+      boxShadow: '0 2px 5px rgba(0, 0, 0, 0.2)',\r\n+      zIndex: 100,\r\n       ':hover': {\r\n         transform: 'scale(1.1)',\r\n       },\r\n     },\r\n@@ -558,57 +290,32 @@\n       >\r\n         {darkMode ? '‚òÄÔ∏è' : 'üåô'}\r\n       </button>\r\n       \r\n-      {/* Enhanced Hero Banner */}\r\n+      {/* Hero Section */}\r\n       <section className=\"hero\" style={styles.hero}>\r\n         <div className=\"hero-content\" style={styles.heroContent}>\r\n-          <div style={styles.heroText}>\r\n-            <h1 style={styles.title}>UrbanFlow</h1>\r\n-            <p className=\"tagline\" style={styles.tagline}>\r\n-              Your seamless urban living companion\r\n-              <span style={styles.taglineHighlight}> ¬∑ Discover ¬∑ Connect ¬∑ Enjoy</span>\r\n-            </p>\r\n-          </div>\r\n+          <h1 style={styles.title}>UrbanFlow</h1>\r\n+          <p className=\"tagline\" style={styles.tagline}>Your seamless urban living companion</p>\r\n           \r\n-          {/* Improved Search Bar */}\r\n-          <form \r\n-            onSubmit={handleSearch} \r\n-            className=\"search-box\" \r\n-            style={styles.searchBox}\r\n-          >\r\n+          <form onSubmit={handleSearch} className=\"search-box\" style={styles.searchBox}>\r\n             <input\r\n               type=\"text\"\r\n-              placeholder=\"Search for restaurants, services, groceries...\"\r\n+              placeholder=\"Search for restaurants, services...\"\r\n               value={searchQuery}\r\n               onChange={(e) => setSearchQuery(e.target.value)}\r\n-              onFocus={() => setIsSearchFocused(true)}\r\n-              onBlur={() => setIsSearchFocused(false)}\r\n               style={styles.searchInput}\r\n             />\r\n-            <button \r\n-              type=\"submit\" \r\n-              style={styles.searchButton}\r\n-              disabled={!searchQuery.trim()}\r\n-            >\r\n-              <span style={styles.searchIcon}>üîç</span>\r\n-              <span style={styles.searchText}>Search</span>\r\n+            <button type=\"submit\" style={styles.searchButton}>\r\n+              <span>üîç</span>\r\n             </button>\r\n           </form>\r\n-\r\n-          <div style={styles.heroFeatures}>\r\n-            <span style={styles.heroFeatureItem}>üöÄ Instant results</span>\r\n-            <span style={styles.heroFeatureItem}>üìç Location-aware</span>\r\n-            <span style={styles.heroFeatureItem}>‚ú® Premium partners</span>\r\n-          </div>\r\n         </div>\r\n-        <div style={styles.heroWave}></div>\r\n       </section>\r\n \r\n       {/* Services Grid */}\r\n       <section className=\"services-section\" style={styles.section}>\r\n         <h2 style={styles.sectionTitle}>What do you need today?</h2>\r\n-        <p style={styles.sectionSubtitle}>Tap to explore urban services tailored for you</p>\r\n         <div className=\"services-grid\" style={styles.servicesGrid}>\r\n           {services.map((service) => (\r\n             <div \r\n               key={service.name} \r\n@@ -617,58 +324,79 @@\n                 ...styles.serviceCard,\r\n                 backgroundColor: darkMode \r\n                   ? `${service.color}20` \r\n                   : `${service.color}10`,\r\n-                borderLeft: `5px solid ${service.color}`,\r\n+                borderColor: service.color,\r\n                 '--card-color': service.color\r\n               }}\r\n-              onClick={() => navigate(service.path)}\r\n+              onClick={() => openServicePopup(service)}\r\n             >\r\n               <div className=\"service-icon\" style={styles.serviceIcon}>{service.icon}</div>\r\n               <h3 style={styles.serviceTitle}>{service.name}</h3>\r\n               <p style={styles.serviceDesc}>{service.desc}</p>\r\n-              <div className=\"card-hover-effect\" style={styles.cardHoverEffect}></div>\r\n+              <div className=\"card-hover-effect\"></div>\r\n             </div>\r\n           ))}\r\n         </div>\r\n       </section>\r\n \r\n-      {/* Featured Quick Access Section */}\r\n+      {/* Featured Section */}\r\n       <section className=\"featured-section\" style={styles.section}>\r\n-        <div style={styles.sectionHeader}>\r\n-          <h2 style={styles.sectionTitle}>Quick Access</h2>\r\n-          <p style={styles.sectionSubtitle}>Popular destinations and categories</p>\r\n-        </div>\r\n+        <h2 style={styles.sectionTitle}>Quick Access</h2>\r\n         <div className=\"quick-links\" style={styles.quickLinks}>\r\n           <button \r\n             onClick={() => navigate('/transport?from=home&to=downtown')}\r\n             style={styles.quickLinkButton}\r\n           >\r\n-            <span style={styles.quickLinkIcon}>üöï</span>\r\n-            <span>To Downtown</span>\r\n+            üöï To Downtown\r\n           </button>\r\n           <button \r\n             onClick={() => navigate('/food?category=fastfood')}\r\n             style={styles.quickLinkButton}\r\n           >\r\n-            <span style={styles.quickLinkIcon}>üçü</span>\r\n-            <span>Fast Food</span>\r\n+            üçü Fast Food\r\n           </button>\r\n           <button \r\n             onClick={() => navigate('/food?category=coffee')}\r\n             style={styles.quickLinkButton}\r\n           >\r\n-            <span style={styles.quickLinkIcon}>‚òï</span>\r\n-            <span>Coffee Shops</span>\r\n+            ‚òï Coffee Shops\r\n           </button>\r\n-          <button \r\n-            onClick={() => navigate('/food?category=pharmacy')}\r\n-            style={styles.quickLinkButton}\r\n-          >\r\n-            <span style={styles.quickLinkIcon}>üíä</span>\r\n-            <span>24hr Pharmacy</span>\r\n-          </button>\r\n         </div>\r\n       </section>\r\n+\r\n+      {/* Service Popup */}\r\n+      {selectedService && (\r\n+        <div style={styles.popupOverlay} onClick={closePopup}>\r\n+          <div style={styles.popupContent} onClick={(e) => e.stopPropagation()}>\r\n+            <button style={styles.popupClose} onClick={closePopup}>√ó</button>\r\n+            <div style={{ \r\n+              display: 'flex', \r\n+              alignItems: 'center', \r\n+              gap: '1rem',\r\n+              marginBottom: '1.5rem'\r\n+            }}>\r\n+              <span style={{ fontSize: '2.5rem' }}>{selectedService.icon}</span>\r\n+              <h3 style={styles.popupTitle}>{selectedService.name}</h3>\r\n+            </div>\r\n+            <p style={styles.popupDesc}>{selectedService.details}</p>\r\n+            <button \r\n+              style={{ \r\n+                ...styles.popupButton,\r\n+                backgroundColor: selectedService.color,\r\n+                ':hover': {\r\n+                  backgroundColor: `${selectedService.color}90`,\r\n+                }\r\n+              }}\r\n+              onClick={() => {\r\n+                navigate(selectedService.path);\r\n+                closePopup();\r\n+              }}\r\n+            >\r\n+              Explore {selectedService.name}\r\n+            </button>\r\n+          </div>\r\n+        </div>\r\n+      )}\r\n     </div>\r\n   );\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752647788047,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,402 @@\n+import { useState } from 'react';\r\n+import { useNavigate } from 'react-router-dom';\r\n+\r\n+export default function Home() {\r\n+  const navigate = useNavigate();\r\n+  const [searchQuery, setSearchQuery] = useState('');\r\n+  const [darkMode, setDarkMode] = useState(false);\r\n+  const [selectedService, setSelectedService] = useState(null);\r\n+\r\n+  const services = [\r\n+    { \r\n+      name: 'Transport', \r\n+      path: '/transport', \r\n+      icon: 'üöå', \r\n+      desc: 'Plan your multi-modal journey across the city',\r\n+      color: '#3b82f6',\r\n+      details: 'Find the best routes combining metro, buses, and bikes. Real-time updates and ticket purchasing available.'\r\n+    },\r\n+    { \r\n+      name: 'Food Delivery', \r\n+      path: '/food', \r\n+      icon: 'üçî', \r\n+      desc: 'Discover local restaurants and cafes',\r\n+      color: '#ef4444',\r\n+      details: 'Order from hundreds of restaurants with special discounts. Track your delivery in real-time.'\r\n+    },\r\n+    { \r\n+      name: 'Groceries', \r\n+      path: '/food', \r\n+      icon: 'üõí', \r\n+      desc: 'Get groceries delivered in minutes',\r\n+      color: '#10b981',\r\n+      details: 'Same-day delivery from local supermarkets. Schedule recurring orders for essentials.'\r\n+    },\r\n+    { \r\n+      name: 'Services', \r\n+      path: '/food', \r\n+      icon: 'üõ†Ô∏è', \r\n+      desc: 'Find urban services near you',\r\n+      color: '#8b5cf6',\r\n+      details: 'Book home services, repairs, and professional help with verified providers.'\r\n+    }\r\n+  ];\r\n+\r\n+  const handleSearch = (e) => {\r\n+    e.preventDefault();\r\n+    if (searchQuery.trim()) {\r\n+      navigate(`/food?search=${encodeURIComponent(searchQuery)}`);\r\n+    }\r\n+  };\r\n+\r\n+  const toggleDarkMode = () => {\r\n+    setDarkMode(!darkMode);\r\n+  };\r\n+\r\n+  const openServicePopup = (service) => {\r\n+    setSelectedService(service);\r\n+  };\r\n+\r\n+  const closePopup = () => {\r\n+    setSelectedService(null);\r\n+  };\r\n+\r\n+  // Dynamic styles based on dark mode\r\n+  const dynamicStyles = {\r\n+    page: {\r\n+      backgroundColor: darkMode ? '#1a202c' : '#f8fafc',\r\n+      minHeight: '100vh',\r\n+      paddingBottom: '3rem',\r\n+      color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+      transition: 'all 0.3s ease',\r\n+    },\r\n+    hero: {\r\n+      background: darkMode \r\n+        ? 'linear-gradient(135deg, #2d3748 0%, #1a202c 100%)' \r\n+        : 'linear-gradient(135deg, #6b46c1 0%, #3b82f6 100%)',\r\n+      color: 'white',\r\n+      padding: '4rem 1rem',\r\n+      textAlign: 'center',\r\n+      borderRadius: '0 0 20px 20px',\r\n+      boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',\r\n+    },\r\n+    serviceCard: {\r\n+      padding: '2rem 1.5rem',\r\n+      borderRadius: '16px',\r\n+      border: '2px solid',\r\n+      textAlign: 'center',\r\n+      cursor: 'pointer',\r\n+      transition: 'transform 0.3s, box-shadow 0.3s',\r\n+      position: 'relative',\r\n+      overflow: 'hidden',\r\n+      backdropFilter: 'blur(10px)',\r\n+      ':hover': {\r\n+        transform: 'translateY(-5px)',\r\n+        boxShadow: '0 10px 20px rgba(0, 0, 0, 0.1)',\r\n+      },\r\n+    },\r\n+    serviceTitle: {\r\n+      fontSize: '1.5rem',\r\n+      fontWeight: '600',\r\n+      marginBottom: '0.5rem',\r\n+      color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+    },\r\n+    serviceDesc: {\r\n+      color: darkMode ? '#a0aec0' : '#64748b',\r\n+      fontSize: '1rem',\r\n+      lineHeight: '1.5',\r\n+    },\r\n+    sectionTitle: {\r\n+      fontSize: '2rem',\r\n+      fontWeight: '700',\r\n+      marginBottom: '1.5rem',\r\n+      color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+      textAlign: 'center',\r\n+    },\r\n+    quickLinkButton: {\r\n+      padding: '0.75rem 1.5rem',\r\n+      borderRadius: '50px',\r\n+      border: 'none',\r\n+      backgroundColor: darkMode ? '#2d3748' : '#e2e8f0',\r\n+      color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+      fontWeight: '600',\r\n+      cursor: 'pointer',\r\n+      transition: 'all 0.2s',\r\n+      display: 'flex',\r\n+      alignItems: 'center',\r\n+      gap: '0.5rem',\r\n+      fontSize: '1rem',\r\n+      ':hover': {\r\n+        backgroundColor: darkMode ? '#4a5568' : '#cbd5e1',\r\n+        transform: 'scale(1.05)',\r\n+      },\r\n+    },\r\n+    popupOverlay: {\r\n+      position: 'fixed',\r\n+      top: 0,\r\n+      left: 0,\r\n+      right: 0,\r\n+      bottom: 0,\r\n+      backgroundColor: 'rgba(0, 0, 0, 0.7)',\r\n+      display: 'flex',\r\n+      justifyContent: 'center',\r\n+      alignItems: 'center',\r\n+      zIndex: 1000,\r\n+    },\r\n+    popupContent: {\r\n+      backgroundColor: darkMode ? '#2d3748' : 'white',\r\n+      borderRadius: '16px',\r\n+      padding: '2rem',\r\n+      maxWidth: '500px',\r\n+      width: '90%',\r\n+      boxShadow: '0 10px 25px rgba(0, 0, 0, 0.2)',\r\n+      position: 'relative',\r\n+      border: darkMode ? '1px solid #4a5568' : '1px solid #e2e8f0',\r\n+    },\r\n+    popupClose: {\r\n+      position: 'absolute',\r\n+      top: '1rem',\r\n+      right: '1rem',\r\n+      background: 'none',\r\n+      border: 'none',\r\n+      fontSize: '1.5rem',\r\n+      cursor: 'pointer',\r\n+      color: darkMode ? '#a0aec0' : '#64748b',\r\n+    },\r\n+    popupTitle: {\r\n+      fontSize: '1.8rem',\r\n+      fontWeight: '700',\r\n+      marginBottom: '1rem',\r\n+      color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+    },\r\n+    popupDesc: {\r\n+      color: darkMode ? '#a0aec0' : '#64748b',\r\n+      fontSize: '1.1rem',\r\n+      lineHeight: '1.6',\r\n+      marginBottom: '2rem',\r\n+    },\r\n+    popupButton: {\r\n+      padding: '0.75rem 1.5rem',\r\n+      borderRadius: '8px',\r\n+      border: 'none',\r\n+      backgroundColor: darkMode ? '#4a5568' : '#3b82f6',\r\n+      color: 'white',\r\n+      fontWeight: '600',\r\n+      cursor: 'pointer',\r\n+      transition: 'all 0.2s',\r\n+      fontSize: '1rem',\r\n+      ':hover': {\r\n+        backgroundColor: darkMode ? '#5f6b82' : '#2563eb',\r\n+      },\r\n+    },\r\n+  };\r\n+\r\n+  const styles = {\r\n+    ...dynamicStyles,\r\n+    heroContent: {\r\n+      maxWidth: '800px',\r\n+      margin: '0 auto',\r\n+    },\r\n+    title: {\r\n+      fontSize: '3.5rem',\r\n+      fontWeight: '800',\r\n+      marginBottom: '0.5rem',\r\n+      textShadow: '2px 2px 4px rgba(0, 0, 0, 0.2)',\r\n+    },\r\n+    tagline: {\r\n+      fontSize: '1.25rem',\r\n+      marginBottom: '2rem',\r\n+      opacity: 0.9,\r\n+    },\r\n+    searchBox: {\r\n+      display: 'flex',\r\n+      maxWidth: '600px',\r\n+      margin: '0 auto',\r\n+      borderRadius: '50px',\r\n+      overflow: 'hidden',\r\n+      boxShadow: '0 4px 10px rgba(0, 0, 0, 0.2)',\r\n+    },\r\n+    searchInput: {\r\n+      flex: 1,\r\n+      padding: '1rem 1.5rem',\r\n+      border: 'none',\r\n+      fontSize: '1rem',\r\n+      outline: 'none',\r\n+      backgroundColor: darkMode ? '#2d3748' : 'white',\r\n+      color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+    },\r\n+    searchButton: {\r\n+      backgroundColor: darkMode ? '#4a5568' : '#1e40af',\r\n+      color: 'white',\r\n+      border: 'none',\r\n+      padding: '0 1.5rem',\r\n+      cursor: 'pointer',\r\n+      fontSize: '1.25rem',\r\n+      transition: 'background-color 0.2s',\r\n+      ':hover': {\r\n+        backgroundColor: darkMode ? '#5f6b82' : '#1e3a8a',\r\n+      },\r\n+    },\r\n+    section: {\r\n+      padding: '2rem 1rem',\r\n+      maxWidth: '1200px',\r\n+      margin: '0 auto',\r\n+    },\r\n+    servicesGrid: {\r\n+      display: 'grid',\r\n+      gridTemplateColumns: 'repeat(auto-fit, minmax(250px, 1fr))',\r\n+      gap: '1.5rem',\r\n+      marginTop: '1rem',\r\n+    },\r\n+    serviceIcon: {\r\n+      fontSize: '3rem',\r\n+      marginBottom: '1rem',\r\n+    },\r\n+    quickLinks: {\r\n+      display: 'flex',\r\n+      justifyContent: 'center',\r\n+      gap: '1rem',\r\n+      flexWrap: 'wrap',\r\n+    },\r\n+    themeToggle: {\r\n+      position: 'fixed',\r\n+      top: '1.5rem',\r\n+      right: '1.5rem',\r\n+      background: darkMode ? '#4a5568' : '#e2e8f0',\r\n+      border: 'none',\r\n+      borderRadius: '50%',\r\n+      width: '40px',\r\n+      height: '40px',\r\n+      display: 'flex',\r\n+      alignItems: 'center',\r\n+      justifyContent: 'center',\r\n+      cursor: 'pointer',\r\n+      transition: 'all 0.3s ease',\r\n+      boxShadow: '0 2px 5px rgba(0, 0, 0, 0.2)',\r\n+      zIndex: 100,\r\n+      ':hover': {\r\n+        transform: 'scale(1.1)',\r\n+      },\r\n+    },\r\n+  };\r\n+\r\n+  return (\r\n+    <div className=\"home-page\" style={styles.page}>\r\n+      {/* Theme Toggle Button */}\r\n+      <button \r\n+        onClick={toggleDarkMode} \r\n+        style={styles.themeToggle}\r\n+        aria-label={darkMode ? 'Switch to light mode' : 'Switch to dark mode'}\r\n+      >\r\n+        {darkMode ? '‚òÄÔ∏è' : 'üåô'}\r\n+      </button>\r\n+      \r\n+      {/* Hero Section */}\r\n+      <section className=\"hero\" style={styles.hero}>\r\n+        <div className=\"hero-content\" style={styles.heroContent}>\r\n+          <h1 style={styles.title}>UrbanFlow</h1>\r\n+          <p className=\"tagline\" style={styles.tagline}>Your seamless urban living companion</p>\r\n+          \r\n+          <form onSubmit={handleSearch} className=\"search-box\" style={styles.searchBox}>\r\n+            <input\r\n+              type=\"text\"\r\n+              placeholder=\"Search for restaurants, services...\"\r\n+              value={searchQuery}\r\n+              onChange={(e) => setSearchQuery(e.target.value)}\r\n+              style={styles.searchInput}\r\n+            />\r\n+            <button type=\"submit\" style={styles.searchButton}>\r\n+              <span>üîç</span>\r\n+            </button>\r\n+          </form>\r\n+        </div>\r\n+      </section>\r\n+\r\n+      {/* Services Grid */}\r\n+      <section className=\"services-section\" style={styles.section}>\r\n+        <h2 style={styles.sectionTitle}>What do you need today?</h2>\r\n+        <div className=\"services-grid\" style={styles.servicesGrid}>\r\n+          {services.map((service) => (\r\n+            <div \r\n+              key={service.name} \r\n+              className=\"service-card\"\r\n+              style={{ \r\n+                ...styles.serviceCard,\r\n+                backgroundColor: darkMode \r\n+                  ? `${service.color}20` \r\n+                  : `${service.color}10`,\r\n+                borderColor: service.color,\r\n+                '--card-color': service.color\r\n+              }}\r\n+              onClick={() => openServicePopup(service)}\r\n+            >\r\n+              <div className=\"service-icon\" style={styles.serviceIcon}>{service.icon}</div>\r\n+              <h3 style={styles.serviceTitle}>{service.name}</h3>\r\n+              <p style={styles.serviceDesc}>{service.desc}</p>\r\n+              <div className=\"card-hover-effect\"></div>\r\n+            </div>\r\n+          ))}\r\n+        </div>\r\n+      </section>\r\n+\r\n+      {/* Featured Section */}\r\n+      <section className=\"featured-section\" style={styles.section}>\r\n+        <h2 style={styles.sectionTitle}>Quick Access</h2>\r\n+        <div className=\"quick-links\" style={styles.quickLinks}>\r\n+          <button \r\n+            onClick={() => navigate('/transport?from=home&to=downtown')}\r\n+            style={styles.quickLinkButton}\r\n+          >\r\n+            üöï To Downtown\r\n+          </button>\r\n+          <button \r\n+            onClick={() => navigate('/food?category=fastfood')}\r\n+            style={styles.quickLinkButton}\r\n+          >\r\n+            üçü Fast Food\r\n+          </button>\r\n+          <button \r\n+            onClick={() => navigate('/food?category=coffee')}\r\n+            style={styles.quickLinkButton}\r\n+          >\r\n+            ‚òï Coffee Shops\r\n+          </button>\r\n+        </div>\r\n+      </section>\r\n+\r\n+      {/* Service Popup */}\r\n+      {selectedService && (\r\n+        <div style={styles.popupOverlay} onClick={closePopup}>\r\n+          <div style={styles.popupContent} onClick={(e) => e.stopPropagation()}>\r\n+            <button style={styles.popupClose} onClick={closePopup}>√ó</button>\r\n+            <div style={{ \r\n+              display: 'flex', \r\n+              alignItems: 'center', \r\n+              gap: '1rem',\r\n+              marginBottom: '1.5rem'\r\n+            }}>\r\n+              <span style={{ fontSize: '2.5rem' }}>{selectedService.icon}</span>\r\n+              <h3 style={styles.popupTitle}>{selectedService.name}</h3>\r\n+            </div>\r\n+            <p style={styles.popupDesc}>{selectedService.details}</p>\r\n+            <button \r\n+              style={{ \r\n+                ...styles.popupButton,\r\n+                backgroundColor: selectedService.color,\r\n+                ':hover': {\r\n+                  backgroundColor: `${selectedService.color}90`,\r\n+                }\r\n+              }}\r\n+              onClick={() => {\r\n+                navigate(selectedService.path);\r\n+                closePopup();\r\n+              }}\r\n+            >\r\n+              Explore {selectedService.name}\r\n+            </button>\r\n+          </div>\r\n+        </div>\r\n+      )}\r\n+    </div>\r\n+  );\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752649027945,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,587 @@\n+import { useState, useEffect } from 'react';\r\n+import { useNavigate } from 'react-router-dom';\r\n+\r\n+// UrbanBuddy AI Assistant Component\r\n+const UrbanBuddy = ({ darkMode, highlightedService, season }) => {\r\n+  const [position, setPosition] = useState({ x: 20, y: 20 });\r\n+  const [expression, setExpression] = useState('üòä');\r\n+  const [message, setMessage] = useState('Need help exploring the city?');\r\n+  const [direction, setDirection] = useState(1);\r\n+  const [costume, setCostume] = useState(null);\r\n+\r\n+  // Seasonal costumes\r\n+  useEffect(() => {\r\n+    const today = new Date();\r\n+    const month = today.getMonth() + 1;\r\n+    \r\n+    if (month === 12) setCostume('üéÖ'); // Santa hat in December\r\n+    else if (month === 10) setCostume('üéÉ'); // Pumpkin in October\r\n+    else if (month === 2) setCostume('üíù'); // Heart in February\r\n+    else setCostume(null);\r\n+  }, []);\r\n+\r\n+  // Make the bot wander\r\n+  useEffect(() => {\r\n+    const moveInterval = setInterval(() => {\r\n+      setPosition(prev => {\r\n+        let newX = prev.x + (2 * direction);\r\n+        let newY = prev.y + (Math.random() * 4 - 2);\r\n+        \r\n+        // Keep within bounds\r\n+        if (newX > window.innerWidth - 100) setDirection(-1);\r\n+        if (newX < 20) setDirection(1);\r\n+        if (newY < 20) newY = 20;\r\n+        if (newY > 150) newY = 150;\r\n+        \r\n+        return { x: newX, y: newY };\r\n+      });\r\n+    }, 100);\r\n+\r\n+    return () => clearInterval(moveInterval);\r\n+  }, [direction]);\r\n+\r\n+  // React to highlighted service\r\n+  useEffect(() => {\r\n+    if (highlightedService) {\r\n+      setMessage(`Try our ${highlightedService} service!`);\r\n+      setExpression('üëâ');\r\n+    }\r\n+  }, [highlightedService]);\r\n+\r\n+  // Change expressions randomly\r\n+  useEffect(() => {\r\n+    const expressions = ['üòä', 'ü§î', 'üòÆ', 'üòé', 'üëã'];\r\n+    const expressionInterval = setInterval(() => {\r\n+      if (!highlightedService) {\r\n+        setExpression(expressions[Math.floor(Math.random() * expressions.length)]);\r\n+      }\r\n+    }, 3000);\r\n+    return () => clearInterval(expressionInterval);\r\n+  }, [highlightedService]);\r\n+\r\n+  const handleClick = () => {\r\n+    const messages = [\r\n+      \"Try searching for 'sushi'! üç£\",\r\n+      \"Metro delays? I can check! üöá\",\r\n+      \"Tap the transport icon below! üöï\",\r\n+      \"3 coffee shops open near you! ‚òï\"\r\n+    ];\r\n+    setMessage(messages[Math.floor(Math.random() * messages.length)]);\r\n+    setExpression('üí°');\r\n+  };\r\n+\r\n+  return (\r\n+    <div \r\n+      onClick={handleClick}\r\n+      style={{\r\n+        position: 'absolute',\r\n+        left: `${position.x}px`,\r\n+        top: `${position.y}px`,\r\n+        fontSize: '2rem',\r\n+        cursor: 'pointer',\r\n+        transition: 'all 0.5s ease',\r\n+        transform: `scaleX(${direction})`,\r\n+        zIndex: 100,\r\n+        textShadow: darkMode ? '0 0 8px rgba(255,255,255,0.5)' : '0 0 8px rgba(0,0,0,0.2)'\r\n+      }}\r\n+    >\r\n+      <div style={{ position: 'relative' }}>\r\n+        <div>\r\n+          {expression}\r\n+          {costume && <span style={{ position: 'absolute', top: '-15px', left: '15px' }}>{costume}</span>}\r\n+        </div>\r\n+        <div style={{\r\n+          position: 'absolute',\r\n+          top: '-50px',\r\n+          left: '50%',\r\n+          transform: 'translateX(-50%)',\r\n+          background: darkMode ? '#2d3748' : 'white',\r\n+          color: darkMode ? 'white' : '#1e293b',\r\n+          padding: '0.5rem 1rem',\r\n+          borderRadius: '12px',\r\n+          fontSize: '0.8rem',\r\n+          width: 'max-content',\r\n+          maxWidth: '200px',\r\n+          boxShadow: '0 2px 8px rgba(0,0,0,0.1)',\r\n+          opacity: message ? 1 : 0,\r\n+          transition: 'opacity 0.3s'\r\n+        }}>\r\n+          {message}\r\n+        </div>\r\n+      </div>\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+export default function Home() {\r\n+  const navigate = useNavigate();\r\n+  const [searchQuery, setSearchQuery] = useState('');\r\n+  const [darkMode, setDarkMode] = useState(false);\r\n+  const [selectedService, setSelectedService] = useState(null);\r\n+  const [orderCount, setOrderCount] = useState(0);\r\n+  const [achievements, setAchievements] = useState([]);\r\n+  const [highlightedService, setHighlightedService] = useState(null);\r\n+  const [seasonalCostume, setSeasonalCostume] = useState(null);\r\n+\r\n+  const services = [\r\n+    { \r\n+      name: 'Transport', \r\n+      path: '/transport', \r\n+      icon: 'üöå', \r\n+      desc: 'Plan your multi-modal journey across the city',\r\n+      color: '#3b82f6',\r\n+      details: 'Find the best routes combining metro, buses, and bikes. Real-time updates and ticket purchasing available.'\r\n+    },\r\n+    { \r\n+      name: 'Food Delivery', \r\n+      path: '/food', \r\n+      icon: 'üçî', \r\n+      desc: 'Discover local restaurants and cafes',\r\n+      color: '#ef4444',\r\n+      details: 'Order from hundreds of restaurants with special discounts. Track your delivery in real-time.'\r\n+    },\r\n+    { \r\n+      name: 'Groceries', \r\n+      path: '/food', \r\n+      icon: 'üõí', \r\n+      desc: 'Get groceries delivered in minutes',\r\n+      color: '#10b981',\r\n+      details: 'Same-day delivery from local supermarkets. Schedule recurring orders for essentials.'\r\n+    },\r\n+    { \r\n+      name: 'Services', \r\n+      path: '/food', \r\n+      icon: 'üõ†Ô∏è', \r\n+      desc: 'Find urban services near you',\r\n+      color: '#8b5cf6',\r\n+      details: 'Book home services, repairs, and professional help with verified providers.'\r\n+    }\r\n+  ];\r\n+\r\n+  // Check for achievements\r\n+  useEffect(() => {\r\n+    if (orderCount === 1) {\r\n+      addAchievement('First Order!', 'üéâ');\r\n+    } else if (orderCount === 5) {\r\n+      addAchievement('Regular Customer!', 'üèÜ');\r\n+    } else if (orderCount === 10) {\r\n+      addAchievement('Super User!', 'üåü');\r\n+    }\r\n+  }, [orderCount]);\r\n+\r\n+  const addAchievement = (title, icon) => {\r\n+    if (!achievements.some(a => a.title === title)) {\r\n+      const newAchievement = { title, icon, id: Date.now() };\r\n+      setAchievements(prev => [...prev, newAchievement]);\r\n+      \r\n+      // Auto-hide achievement after 3 seconds\r\n+      setTimeout(() => {\r\n+        setAchievements(prev => prev.filter(a => a.id !== newAchievement.id));\r\n+      }, 3000);\r\n+    }\r\n+  };\r\n+\r\n+  const handleSearch = (e) => {\r\n+    e.preventDefault();\r\n+    if (searchQuery.trim()) {\r\n+      navigate(`/food?search=${encodeURIComponent(searchQuery)}`);\r\n+    }\r\n+  };\r\n+\r\n+  const toggleDarkMode = () => {\r\n+    setDarkMode(!darkMode);\r\n+  };\r\n+\r\n+  const openServicePopup = (service) => {\r\n+    setSelectedService(service);\r\n+    setOrderCount(prev => prev + 1);\r\n+  };\r\n+\r\n+  const closePopup = () => {\r\n+    setSelectedService(null);\r\n+  };\r\n+\r\n+  // Dynamic styles based on dark mode\r\n+  const dynamicStyles = {\r\n+    page: {\r\n+      backgroundColor: darkMode ? '#1a202c' : '#f8fafc',\r\n+      minHeight: '100vh',\r\n+      paddingBottom: '3rem',\r\n+      color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+      transition: 'all 0.3s ease',\r\n+    },\r\n+    hero: {\r\n+      background: darkMode \r\n+        ? 'linear-gradient(135deg, #2d3748 0%, #1a202c 100%)' \r\n+        : 'linear-gradient(135deg, #6b46c1 0%, #3b82f6 100%)',\r\n+      color: 'white',\r\n+      padding: '4rem 1rem',\r\n+      textAlign: 'center',\r\n+      borderRadius: '0 0 20px 20px',\r\n+      boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',\r\n+      position: 'relative',\r\n+      overflow: 'hidden',\r\n+      height: '300px'\r\n+    },\r\n+    serviceCard: {\r\n+      padding: '2rem 1.5rem',\r\n+      borderRadius: '16px',\r\n+      border: '2px solid',\r\n+      textAlign: 'center',\r\n+      cursor: 'pointer',\r\n+      transition: 'transform 0.3s, box-shadow 0.3s',\r\n+      position: 'relative',\r\n+      overflow: 'hidden',\r\n+      backdropFilter: 'blur(10px)',\r\n+      ':hover': {\r\n+        transform: 'translateY(-5px)',\r\n+        boxShadow: '0 10px 20px rgba(0, 0, 0, 0.1)',\r\n+      },\r\n+    },\r\n+    serviceIcon: {\r\n+      fontSize: '3rem',\r\n+      marginBottom: '1rem',\r\n+      display: 'inline-block',\r\n+      animation: 'float 3s ease-in-out infinite'\r\n+    },\r\n+    achievement: {\r\n+      position: 'fixed',\r\n+      bottom: '20px',\r\n+      right: '20px',\r\n+      background: darkMode ? '#2d3748' : 'white',\r\n+      color: darkMode ? 'white' : '#1e293b',\r\n+      padding: '1rem',\r\n+      borderRadius: '12px',\r\n+      boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',\r\n+      display: 'flex',\r\n+      alignItems: 'center',\r\n+      gap: '0.5rem',\r\n+      zIndex: 1000,\r\n+      animation: 'slideIn 0.5s forwards, fadeOut 0.5s forwards 2.5s'\r\n+    },\r\n+    popupOverlay: {\r\n+      position: 'fixed',\r\n+      top: 0,\r\n+      left: 0,\r\n+      right: 0,\r\n+      bottom: 0,\r\n+      backgroundColor: 'rgba(0, 0, 0, 0.7)',\r\n+      display: 'flex',\r\n+      justifyContent: 'center',\r\n+      alignItems: 'center',\r\n+      zIndex: 1000,\r\n+    },\r\n+    popupContent: {\r\n+      backgroundColor: darkMode ? '#2d3748' : 'white',\r\n+      borderRadius: '16px',\r\n+      padding: '2rem',\r\n+      maxWidth: '500px',\r\n+      width: '90%',\r\n+      boxShadow: '0 10px 25px rgba(0, 0, 0, 0.2)',\r\n+      position: 'relative',\r\n+      border: darkMode ? '1px solid #4a5568' : '1px solid #e2e8f0',\r\n+    },\r\n+  };\r\n+\r\n+  const styles = {\r\n+    ...dynamicStyles,\r\n+    heroContent: {\r\n+      maxWidth: '800px',\r\n+      margin: '0 auto',\r\n+      position: 'relative',\r\n+      zIndex: 2\r\n+    },\r\n+    title: {\r\n+      fontSize: '3.5rem',\r\n+      fontWeight: '800',\r\n+      marginBottom: '0.5rem',\r\n+      textShadow: '2px 2px 4px rgba(0, 0, 0, 0.2)',\r\n+    },\r\n+    tagline: {\r\n+      fontSize: '1.25rem',\r\n+      marginBottom: '2rem',\r\n+      opacity: 0.9,\r\n+    },\r\n+    searchBox: {\r\n+      display: 'flex',\r\n+      maxWidth: '600px',\r\n+      margin: '0 auto',\r\n+      borderRadius: '50px',\r\n+      overflow: 'hidden',\r\n+      boxShadow: '0 4px 10px rgba(0, 0, 0, 0.2)',\r\n+    },\r\n+    searchInput: {\r\n+      flex: 1,\r\n+      padding: '1rem 1.5rem',\r\n+      border: 'none',\r\n+      fontSize: '1rem',\r\n+      outline: 'none',\r\n+      backgroundColor: darkMode ? '#2d3748' : 'white',\r\n+      color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+    },\r\n+    searchButton: {\r\n+      backgroundColor: darkMode ? '#4a5568' : '#1e40af',\r\n+      color: 'white',\r\n+      border: 'none',\r\n+      padding: '0 1.5rem',\r\n+      cursor: 'pointer',\r\n+      fontSize: '1.25rem',\r\n+      transition: 'background-color 0.2s',\r\n+      ':hover': {\r\n+        backgroundColor: darkMode ? '#5f6b82' : '#1e3a8a',\r\n+      },\r\n+    },\r\n+    section: {\r\n+      padding: '2rem 1rem',\r\n+      maxWidth: '1200px',\r\n+      margin: '0 auto',\r\n+    },\r\n+    servicesGrid: {\r\n+      display: 'grid',\r\n+      gridTemplateColumns: 'repeat(auto-fit, minmax(250px, 1fr))',\r\n+      gap: '1.5rem',\r\n+      marginTop: '1rem',\r\n+    },\r\n+    quickLinks: {\r\n+      display: 'flex',\r\n+      justifyContent: 'center',\r\n+      gap: '1rem',\r\n+      flexWrap: 'wrap',\r\n+    },\r\n+    themeToggle: {\r\n+      position: 'fixed',\r\n+      top: '1.5rem',\r\n+      right: '1.5rem',\r\n+      background: darkMode ? '#4a5568' : '#e2e8f0',\r\n+      border: 'none',\r\n+      borderRadius: '50%',\r\n+      width: '40px',\r\n+      height: '40px',\r\n+      display: 'flex',\r\n+      alignItems: 'center',\r\n+      justifyContent: 'center',\r\n+      cursor: 'pointer',\r\n+      transition: 'all 0.3s ease',\r\n+      boxShadow: '0 2px 5px rgba(0, 0, 0, 0.2)',\r\n+      zIndex: 100,\r\n+      ':hover': {\r\n+        transform: 'scale(1.1)',\r\n+      },\r\n+    },\r\n+  };\r\n+\r\n+  // Add CSS animations\r\n+  const animations = `\r\n+    @keyframes float {\r\n+      0% { transform: translateY(0px); }\r\n+      50% { transform: translateY(-10px); }\r\n+      100% { transform: translateY(0px); }\r\n+    }\r\n+    @keyframes slideIn {\r\n+      from { transform: translateX(100%); }\r\n+      to { transform: translateX(0); }\r\n+    }\r\n+    @keyframes fadeOut {\r\n+      from { opacity: 1; }\r\n+      to { opacity: 0; }\r\n+    }\r\n+  `;\r\n+\r\n+  return (\r\n+    <div className=\"home-page\" style={styles.page}>\r\n+      <style>{animations}</style>\r\n+      \r\n+      {/* Theme Toggle Button */}\r\n+      <button \r\n+        onClick={toggleDarkMode} \r\n+        style={styles.themeToggle}\r\n+        aria-label={darkMode ? 'Switch to light mode' : 'Switch to dark mode'}\r\n+      >\r\n+        {darkMode ? '‚òÄÔ∏è' : 'üåô'}\r\n+      </button>\r\n+      \r\n+      {/* Hero Section with UrbanBuddy */}\r\n+      <section className=\"hero\" style={styles.hero}>\r\n+        <div className=\"hero-content\" style={styles.heroContent}>\r\n+          <h1 style={styles.title}>UrbanFlow</h1>\r\n+          <p className=\"tagline\" style={styles.tagline}>Your seamless urban living companion</p>\r\n+          \r\n+          <form onSubmit={handleSearch} className=\"search-box\" style={styles.searchBox}>\r\n+            <input\r\n+              type=\"text\"\r\n+              placeholder=\"Search for restaurants, services...\"\r\n+              value={searchQuery}\r\n+              onChange={(e) => setSearchQuery(e.target.value)}\r\n+              style={styles.searchInput}\r\n+            />\r\n+            <button type=\"submit\" style={styles.searchButton}>\r\n+              <span>üîç</span>\r\n+            </button>\r\n+          </form>\r\n+        </div>\r\n+        <UrbanBuddy darkMode={darkMode} highlightedService={highlightedService} />\r\n+      </section>\r\n+\r\n+      {/* Services Grid */}\r\n+      <section className=\"services-section\" style={styles.section}>\r\n+        <h2 style={{...styles.sectionTitle, textAlign: 'center'}}>What do you need today?</h2>\r\n+        <div className=\"services-grid\" style={styles.servicesGrid}>\r\n+          {services.map((service) => (\r\n+            <div \r\n+              key={service.name} \r\n+              className=\"service-card\"\r\n+              style={{ \r\n+                ...styles.serviceCard,\r\n+                backgroundColor: darkMode \r\n+                  ? `${service.color}20` \r\n+                  : `${service.color}10`,\r\n+                borderColor: service.color,\r\n+              }}\r\n+              onClick={() => openServicePopup(service)}\r\n+              onMouseEnter={() => setHighlightedService(service.name)}\r\n+              onMouseLeave={() => setHighlightedService(null)}\r\n+            >\r\n+              <div className=\"service-icon\" style={styles.serviceIcon}>{service.icon}</div>\r\n+              <h3 style={{fontSize: '1.5rem', fontWeight: '600', marginBottom: '0.5rem'}}>{service.name}</h3>\r\n+              <p style={{color: darkMode ? '#a0aec0' : '#64748b'}}>{service.desc}</p>\r\n+            </div>\r\n+          ))}\r\n+        </div>\r\n+      </section>\r\n+\r\n+      {/* Featured Section */}\r\n+      <section className=\"featured-section\" style={styles.section}>\r\n+        <h2 style={{...styles.sectionTitle, textAlign: 'center'}}>Quick Access</h2>\r\n+        <div className=\"quick-links\" style={styles.quickLinks}>\r\n+          <button \r\n+            onClick={() => navigate('/transport?from=home&to=downtown')}\r\n+            style={{\r\n+              padding: '0.75rem 1.5rem',\r\n+              borderRadius: '50px',\r\n+              border: 'none',\r\n+              backgroundColor: darkMode ? '#2d3748' : '#e2e8f0',\r\n+              color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+              fontWeight: '600',\r\n+              cursor: 'pointer',\r\n+              transition: 'all 0.2s',\r\n+              display: 'flex',\r\n+              alignItems: 'center',\r\n+              gap: '0.5rem',\r\n+              fontSize: '1rem',\r\n+              ':hover': {\r\n+                backgroundColor: darkMode ? '#4a5568' : '#cbd5e1',\r\n+                transform: 'scale(1.05)',\r\n+              },\r\n+            }}\r\n+          >\r\n+            üöï To Downtown\r\n+          </button>\r\n+          <button \r\n+            onClick={() => navigate('/food?category=fastfood')}\r\n+            style={{\r\n+              padding: '0.75rem 1.5rem',\r\n+              borderRadius: '50px',\r\n+              border: 'none',\r\n+              backgroundColor: darkMode ? '#2d3748' : '#e2e8f0',\r\n+              color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+              fontWeight: '600',\r\n+              cursor: 'pointer',\r\n+              transition: 'all 0.2s',\r\n+              display: 'flex',\r\n+              alignItems: 'center',\r\n+              gap: '0.5rem',\r\n+              fontSize: '1rem',\r\n+              ':hover': {\r\n+                backgroundColor: darkMode ? '#4a5568' : '#cbd5e1',\r\n+                transform: 'scale(1.05)',\r\n+              },\r\n+            }}\r\n+          >\r\n+            üçü Fast Food\r\n+          </button>\r\n+          <button \r\n+            onClick={() => navigate('/food?category=coffee')}\r\n+            style={{\r\n+              padding: '0.75rem 1.5rem',\r\n+              borderRadius: '50px',\r\n+              border: 'none',\r\n+              backgroundColor: darkMode ? '#2d3748' : '#e2e8f0',\r\n+              color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+              fontWeight: '600',\r\n+              cursor: 'pointer',\r\n+              transition: 'all 0.2s',\r\n+              display: 'flex',\r\n+              alignItems: 'center',\r\n+              gap: '0.5rem',\r\n+              fontSize: '1rem',\r\n+              ':hover': {\r\n+                backgroundColor: darkMode ? '#4a5568' : '#cbd5e1',\r\n+                transform: 'scale(1.05)',\r\n+              },\r\n+            }}\r\n+          >\r\n+            ‚òï Coffee Shops\r\n+          </button>\r\n+        </div>\r\n+      </section>\r\n+\r\n+      {/* Service Popup */}\r\n+      {selectedService && (\r\n+        <div style={styles.popupOverlay} onClick={closePopup}>\r\n+          <div style={styles.popupContent} onClick={(e) => e.stopPropagation()}>\r\n+            <button style={{\r\n+              position: 'absolute',\r\n+              top: '1rem',\r\n+              right: '1rem',\r\n+              background: 'none',\r\n+              border: 'none',\r\n+              fontSize: '1.5rem',\r\n+              cursor: 'pointer',\r\n+              color: darkMode ? '#a0aec0' : '#64748b',\r\n+            }} onClick={closePopup}>√ó</button>\r\n+            <div style={{ \r\n+              display: 'flex', \r\n+              alignItems: 'center', \r\n+              gap: '1rem',\r\n+              marginBottom: '1.5rem'\r\n+            }}>\r\n+              <span style={{ fontSize: '2.5rem', animation: 'float 3s ease-in-out infinite' }}>{selectedService.icon}</span>\r\n+              <h3 style={{fontSize: '1.8rem', fontWeight: '700', marginBottom: '1rem', color: darkMode ? '#e2e8f0' : '#1e293b'}}>{selectedService.name}</h3>\r\n+            </div>\r\n+            <p style={{color: darkMode ? '#a0aec0' : '#64748b', fontSize: '1.1rem', lineHeight: '1.6', marginBottom: '2rem'}}>{selectedService.details}</p>\r\n+            <button \r\n+              style={{ \r\n+                padding: '0.75rem 1.5rem',\r\n+                borderRadius: '8px',\r\n+                border: 'none',\r\n+                backgroundColor: selectedService.color,\r\n+                color: 'white',\r\n+                fontWeight: '600',\r\n+                cursor: 'pointer',\r\n+                transition: 'all 0.2s',\r\n+                fontSize: '1rem',\r\n+                ':hover': {\r\n+                  backgroundColor: `${selectedService.color}90`,\r\n+                }\r\n+              }}\r\n+              onClick={() => {\r\n+                navigate(selectedService.path);\r\n+                closePopup();\r\n+              }}\r\n+            >\r\n+              Explore {selectedService.name}\r\n+            </button>\r\n+          </div>\r\n+        </div>\r\n+      )}\r\n+\r\n+      {/* Achievements */}\r\n+      {achievements.map(achievement => (\r\n+        <div key={achievement.id} style={styles.achievement}>\r\n+          <span style={{fontSize: '1.5rem'}}>{achievement.icon}</span>\r\n+          <span>{achievement.title}</span>\r\n+        </div>\r\n+      ))}\r\n+    </div>\r\n+  );\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752649562704,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,23 +1,26 @@\n-import { useState, useEffect } from 'react';\r\n+import { useState, useEffect, useRef } from 'react';\r\n import { useNavigate } from 'react-router-dom';\r\n \r\n // UrbanBuddy AI Assistant Component\r\n-const UrbanBuddy = ({ darkMode, highlightedService, season }) => {\r\n-  const [position, setPosition] = useState({ x: 20, y: 20 });\r\n+const UrbanBuddy = ({ darkMode, onChatOpen }) => {\r\n+  const [position, setPosition] = useState({ x: 20, y: 50 });\r\n   const [expression, setExpression] = useState('üòä');\r\n-  const [message, setMessage] = useState('Need help exploring the city?');\r\n+  const [message, setMessage] = useState('Hi there! Need help? Tap me!');\r\n   const [direction, setDirection] = useState(1);\r\n   const [costume, setCostume] = useState(null);\r\n+  const [isSpeaking, setIsSpeaking] = useState(false);\r\n+  const botRef = useRef(null);\r\n \r\n   // Seasonal costumes\r\n   useEffect(() => {\r\n     const today = new Date();\r\n     const month = today.getMonth() + 1;\r\n     \r\n-    if (month === 12) setCostume('üéÖ'); // Santa hat in December\r\n+    if (month === 12) setCostume('üéÑ'); // Christmas tree in December\r\n     else if (month === 10) setCostume('üéÉ'); // Pumpkin in October\r\n     else if (month === 2) setCostume('üíù'); // Heart in February\r\n+    else if (month === 4) setCostume('üå∏'); // Cherry blossom in April\r\n     else setCostume(null);\r\n   }, []);\r\n \r\n   // Make the bot wander\r\n@@ -27,11 +30,11 @@\n         let newX = prev.x + (2 * direction);\r\n         let newY = prev.y + (Math.random() * 4 - 2);\r\n         \r\n         // Keep within bounds\r\n-        if (newX > window.innerWidth - 100) setDirection(-1);\r\n+        if (newX > window.innerWidth - 80) setDirection(-1);\r\n         if (newX < 20) setDirection(1);\r\n-        if (newY < 20) newY = 20;\r\n+        if (newY < 50) newY = 50;\r\n         if (newY > 150) newY = 150;\r\n         \r\n         return { x: newX, y: newY };\r\n       });\r\n@@ -39,90 +42,285 @@\n \r\n     return () => clearInterval(moveInterval);\r\n   }, [direction]);\r\n \r\n-  // React to highlighted service\r\n-  useEffect(() => {\r\n-    if (highlightedService) {\r\n-      setMessage(`Try our ${highlightedService} service!`);\r\n-      setExpression('üëâ');\r\n-    }\r\n-  }, [highlightedService]);\r\n-\r\n   // Change expressions randomly\r\n   useEffect(() => {\r\n     const expressions = ['üòä', 'ü§î', 'üòÆ', 'üòé', 'üëã'];\r\n     const expressionInterval = setInterval(() => {\r\n-      if (!highlightedService) {\r\n+      if (!isSpeaking) {\r\n         setExpression(expressions[Math.floor(Math.random() * expressions.length)]);\r\n       }\r\n-    }, 3000);\r\n+    }, 5000);\r\n     return () => clearInterval(expressionInterval);\r\n-  }, [highlightedService]);\r\n+  }, [isSpeaking]);\r\n \r\n   const handleClick = () => {\r\n-    const messages = [\r\n-      \"Try searching for 'sushi'! üç£\",\r\n-      \"Metro delays? I can check! üöá\",\r\n-      \"Tap the transport icon below! üöï\",\r\n-      \"3 coffee shops open near you! ‚òï\"\r\n-    ];\r\n-    setMessage(messages[Math.floor(Math.random() * messages.length)]);\r\n-    setExpression('üí°');\r\n+    setIsSpeaking(true);\r\n+    setExpression('üí¨');\r\n+    setMessage(\"Opening chat...\");\r\n+    \r\n+    // Trigger chat opening in parent component\r\n+    onChatOpen();\r\n+    \r\n+    // Return to normal after a delay\r\n+    setTimeout(() => {\r\n+      setIsSpeaking(false);\r\n+      setMessage('Need more help? Tap me!');\r\n+    }, 3000);\r\n   };\r\n \r\n+  // Custom bot icon with better styling\r\n   return (\r\n     <div \r\n+      ref={botRef}\r\n       onClick={handleClick}\r\n       style={{\r\n-        position: 'absolute',\r\n+        position: 'fixed',\r\n         left: `${position.x}px`,\r\n         top: `${position.y}px`,\r\n-        fontSize: '2rem',\r\n+        fontSize: '2.5rem',\r\n         cursor: 'pointer',\r\n         transition: 'all 0.5s ease',\r\n         transform: `scaleX(${direction})`,\r\n         zIndex: 100,\r\n-        textShadow: darkMode ? '0 0 8px rgba(255,255,255,0.5)' : '0 0 8px rgba(0,0,0,0.2)'\r\n+        filter: darkMode ? 'drop-shadow(0 0 8px rgba(255,255,255,0.7))' : 'drop-shadow(0 0 8px rgba(0,0,0,0.3))',\r\n+        userSelect: 'none'\r\n       }}\r\n     >\r\n-      <div style={{ position: 'relative' }}>\r\n-        <div>\r\n-          {expression}\r\n-          {costume && <span style={{ position: 'absolute', top: '-15px', left: '15px' }}>{costume}</span>}\r\n-        </div>\r\n+      <div style={{ \r\n+        position: 'relative',\r\n+        display: 'flex',\r\n+        flexDirection: 'column',\r\n+        alignItems: 'center'\r\n+      }}>\r\n+        {/* Speech bubble */}\r\n         <div style={{\r\n           position: 'absolute',\r\n-          top: '-50px',\r\n+          top: '-70px',\r\n           left: '50%',\r\n           transform: 'translateX(-50%)',\r\n           background: darkMode ? '#2d3748' : 'white',\r\n           color: darkMode ? 'white' : '#1e293b',\r\n           padding: '0.5rem 1rem',\r\n           borderRadius: '12px',\r\n-          fontSize: '0.8rem',\r\n+          fontSize: '0.9rem',\r\n           width: 'max-content',\r\n           maxWidth: '200px',\r\n-          boxShadow: '0 2px 8px rgba(0,0,0,0.1)',\r\n+          boxShadow: '0 2px 8px rgba(0,0,0,0.2)',\r\n           opacity: message ? 1 : 0,\r\n-          transition: 'opacity 0.3s'\r\n+          transition: 'all 0.3s',\r\n+          textAlign: 'center',\r\n+          pointerEvents: 'none'\r\n         }}>\r\n           {message}\r\n+          <div style={{\r\n+            position: 'absolute',\r\n+            bottom: '-10px',\r\n+            left: '50%',\r\n+            marginLeft: '-10px',\r\n+            width: 0,\r\n+            height: 0,\r\n+            borderLeft: '10px solid transparent',\r\n+            borderRight: '10px solid transparent',\r\n+            borderTop: `10px solid ${darkMode ? '#2d3748' : 'white'}`\r\n+          }}></div>\r\n         </div>\r\n+        \r\n+        {/* Bot icon with costume */}\r\n+        <div style={{\r\n+          position: 'relative',\r\n+          width: '60px',\r\n+          height: '60px',\r\n+          backgroundColor: darkMode ? '#4a5568' : '#3b82f6',\r\n+          borderRadius: '50%',\r\n+          display: 'flex',\r\n+          justifyContent: 'center',\r\n+          alignItems: 'center',\r\n+          color: 'white'\r\n+        }}>\r\n+          <span style={{ fontSize: '1.8rem' }}>ü§ñ</span>\r\n+          {costume && (\r\n+            <span style={{\r\n+              position: 'absolute',\r\n+              top: '-15px',\r\n+              right: '-10px',\r\n+              fontSize: '1.5rem',\r\n+              transform: 'rotate(15deg)'\r\n+            }}>\r\n+              {costume}\r\n+            </span>\r\n+          )}\r\n+        </div>\r\n       </div>\r\n     </div>\r\n   );\r\n };\r\n \r\n+// Chat Modal Component\r\n+const ChatModal = ({ darkMode, onClose }) => {\r\n+  const [messages, setMessages] = useState([\r\n+    { text: \"Hello! I'm UrbanBuddy. How can I help you today?\", sender: 'bot' }\r\n+  ]);\r\n+  const [inputValue, setInputValue] = useState('');\r\n+  const chatEndRef = useRef(null);\r\n+\r\n+  const handleSendMessage = (e) => {\r\n+    e.preventDefault();\r\n+    if (inputValue.trim()) {\r\n+      // Add user message\r\n+      setMessages(prev => [...prev, { text: inputValue, sender: 'user' }]);\r\n+      setInputValue('');\r\n+      \r\n+      // Simulate bot response after a delay\r\n+      setTimeout(() => {\r\n+        const responses = [\r\n+          \"I can help you find that! Try searching above.\",\r\n+          \"Great question! Our transport section can help with that.\",\r\n+          \"I'll guide you to the right service for that need.\",\r\n+          \"Tap on the food delivery icon for restaurant options.\"\r\n+        ];\r\n+        setMessages(prev => [...prev, { \r\n+          text: responses[Math.floor(Math.random() * responses.length)], \r\n+          sender: 'bot' \r\n+        }]);\r\n+      }, 1000);\r\n+    }\r\n+  };\r\n+\r\n+  // Auto-scroll to bottom of chat\r\n+  useEffect(() => {\r\n+    chatEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n+  }, [messages]);\r\n+\r\n+  return (\r\n+    <div style={{\r\n+      position: 'fixed',\r\n+      bottom: '100px',\r\n+      right: '30px',\r\n+      width: '350px',\r\n+      maxWidth: '90%',\r\n+      backgroundColor: darkMode ? '#2d3748' : 'white',\r\n+      borderRadius: '16px',\r\n+      boxShadow: '0 10px 25px rgba(0, 0, 0, 0.2)',\r\n+      border: darkMode ? '1px solid #4a5568' : '1px solid #e2e8f0',\r\n+      zIndex: 1000,\r\n+      overflow: 'hidden',\r\n+      display: 'flex',\r\n+      flexDirection: 'column',\r\n+      maxHeight: '60vh'\r\n+    }}>\r\n+      {/* Chat header */}\r\n+      <div style={{\r\n+        padding: '1rem',\r\n+        backgroundColor: darkMode ? '#4a5568' : '#3b82f6',\r\n+        color: 'white',\r\n+        display: 'flex',\r\n+        justifyContent: 'space-between',\r\n+        alignItems: 'center'\r\n+      }}>\r\n+        <div style={{ display: 'flex', alignItems: 'center', gap: '0.5rem' }}>\r\n+          <span style={{ fontSize: '1.5rem' }}>ü§ñ</span>\r\n+          <h3 style={{ margin: 0 }}>UrbanBuddy</h3>\r\n+        </div>\r\n+        <button \r\n+          onClick={onClose}\r\n+          style={{\r\n+            background: 'none',\r\n+            border: 'none',\r\n+            color: 'white',\r\n+            fontSize: '1.2rem',\r\n+            cursor: 'pointer'\r\n+          }}\r\n+        >\r\n+          √ó\r\n+        </button>\r\n+      </div>\r\n+      \r\n+      {/* Chat messages */}\r\n+      <div style={{\r\n+        flex: 1,\r\n+        padding: '1rem',\r\n+        overflowY: 'auto',\r\n+        display: 'flex',\r\n+        flexDirection: 'column',\r\n+        gap: '0.8rem'\r\n+      }}>\r\n+        {messages.map((msg, index) => (\r\n+          <div \r\n+            key={index}\r\n+            style={{\r\n+              alignSelf: msg.sender === 'user' ? 'flex-end' : 'flex-start',\r\n+              maxWidth: '80%',\r\n+              padding: '0.6rem 1rem',\r\n+              borderRadius: msg.sender === 'user' \r\n+                ? '18px 18px 0 18px' \r\n+                : '18px 18px 18px 0',\r\n+              backgroundColor: msg.sender === 'user'\r\n+                ? (darkMode ? '#4a5568' : '#3b82f6')\r\n+                : (darkMode ? '#4a5568' : '#e2e8f0'),\r\n+              color: msg.sender === 'user' ? 'white' : (darkMode ? 'white' : '#1e293b')\r\n+            }}\r\n+          >\r\n+            {msg.text}\r\n+          </div>\r\n+        ))}\r\n+        <div ref={chatEndRef} />\r\n+      </div>\r\n+      \r\n+      {/* Chat input */}\r\n+      <form onSubmit={handleSendMessage} style={{\r\n+        padding: '0.8rem',\r\n+        borderTop: darkMode ? '1px solid #4a5568' : '1px solid #e2e8f0',\r\n+        display: 'flex',\r\n+        gap: '0.5rem'\r\n+      }}>\r\n+        <input\r\n+          type=\"text\"\r\n+          value={inputValue}\r\n+          onChange={(e) => setInputValue(e.target.value)}\r\n+          placeholder=\"Type your question...\"\r\n+          style={{\r\n+            flex: 1,\r\n+            padding: '0.6rem 1rem',\r\n+            borderRadius: '20px',\r\n+            border: darkMode ? '1px solid #4a5568' : '1px solid #e2e8f0',\r\n+            backgroundColor: darkMode ? '#2d3748' : 'white',\r\n+            color: darkMode ? 'white' : '#1e293b',\r\n+            outline: 'none'\r\n+          }}\r\n+        />\r\n+        <button \r\n+          type=\"submit\"\r\n+          style={{\r\n+            background: darkMode ? '#4a5568' : '#3b82f6',\r\n+            color: 'white',\r\n+            border: 'none',\r\n+            borderRadius: '50%',\r\n+            width: '40px',\r\n+            height: '40px',\r\n+            display: 'flex',\r\n+            alignItems: 'center',\r\n+            justifyContent: 'center',\r\n+            cursor: 'pointer'\r\n+          }}\r\n+        >\r\n+          ‚û§\r\n+        </button>\r\n+      </form>\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n export default function Home() {\r\n   const navigate = useNavigate();\r\n   const [searchQuery, setSearchQuery] = useState('');\r\n   const [darkMode, setDarkMode] = useState(false);\r\n   const [selectedService, setSelectedService] = useState(null);\r\n   const [orderCount, setOrderCount] = useState(0);\r\n   const [achievements, setAchievements] = useState([]);\r\n+  const [showChat, setShowChat] = useState(false);\r\n   const [highlightedService, setHighlightedService] = useState(null);\r\n-  const [seasonalCostume, setSeasonalCostume] = useState(null);\r\n \r\n   const services = [\r\n     { \r\n       name: 'Transport', \r\n@@ -200,16 +398,21 @@\n   const closePopup = () => {\r\n     setSelectedService(null);\r\n   };\r\n \r\n-  // Dynamic styles based on dark mode\r\n-  const dynamicStyles = {\r\n+  const toggleChat = () => {\r\n+    setShowChat(!showChat);\r\n+  };\r\n+\r\n+  // Dynamic styles\r\n+  const styles = {\r\n     page: {\r\n       backgroundColor: darkMode ? '#1a202c' : '#f8fafc',\r\n       minHeight: '100vh',\r\n       paddingBottom: '3rem',\r\n       color: darkMode ? '#e2e8f0' : '#1e293b',\r\n       transition: 'all 0.3s ease',\r\n+      position: 'relative'\r\n     },\r\n     hero: {\r\n       background: darkMode \r\n         ? 'linear-gradient(135deg, #2d3748 0%, #1a202c 100%)' \r\n@@ -280,95 +483,15 @@\n       boxShadow: '0 10px 25px rgba(0, 0, 0, 0.2)',\r\n       position: 'relative',\r\n       border: darkMode ? '1px solid #4a5568' : '1px solid #e2e8f0',\r\n     },\r\n-  };\r\n-\r\n-  const styles = {\r\n-    ...dynamicStyles,\r\n-    heroContent: {\r\n-      maxWidth: '800px',\r\n-      margin: '0 auto',\r\n-      position: 'relative',\r\n-      zIndex: 2\r\n-    },\r\n-    title: {\r\n-      fontSize: '3.5rem',\r\n-      fontWeight: '800',\r\n-      marginBottom: '0.5rem',\r\n-      textShadow: '2px 2px 4px rgba(0, 0, 0, 0.2)',\r\n-    },\r\n-    tagline: {\r\n-      fontSize: '1.25rem',\r\n-      marginBottom: '2rem',\r\n-      opacity: 0.9,\r\n-    },\r\n-    searchBox: {\r\n-      display: 'flex',\r\n-      maxWidth: '600px',\r\n-      margin: '0 auto',\r\n-      borderRadius: '50px',\r\n-      overflow: 'hidden',\r\n-      boxShadow: '0 4px 10px rgba(0, 0, 0, 0.2)',\r\n-    },\r\n-    searchInput: {\r\n-      flex: 1,\r\n-      padding: '1rem 1.5rem',\r\n-      border: 'none',\r\n-      fontSize: '1rem',\r\n-      outline: 'none',\r\n-      backgroundColor: darkMode ? '#2d3748' : 'white',\r\n-      color: darkMode ? '#e2e8f0' : '#1e293b',\r\n-    },\r\n-    searchButton: {\r\n-      backgroundColor: darkMode ? '#4a5568' : '#1e40af',\r\n-      color: 'white',\r\n-      border: 'none',\r\n-      padding: '0 1.5rem',\r\n-      cursor: 'pointer',\r\n-      fontSize: '1.25rem',\r\n-      transition: 'background-color 0.2s',\r\n-      ':hover': {\r\n-        backgroundColor: darkMode ? '#5f6b82' : '#1e3a8a',\r\n-      },\r\n-    },\r\n-    section: {\r\n+    footer: {\r\n+      textAlign: 'center',\r\n       padding: '2rem 1rem',\r\n-      maxWidth: '1200px',\r\n-      margin: '0 auto',\r\n-    },\r\n-    servicesGrid: {\r\n-      display: 'grid',\r\n-      gridTemplateColumns: 'repeat(auto-fit, minmax(250px, 1fr))',\r\n-      gap: '1.5rem',\r\n-      marginTop: '1rem',\r\n-    },\r\n-    quickLinks: {\r\n-      display: 'flex',\r\n-      justifyContent: 'center',\r\n-      gap: '1rem',\r\n-      flexWrap: 'wrap',\r\n-    },\r\n-    themeToggle: {\r\n-      position: 'fixed',\r\n-      top: '1.5rem',\r\n-      right: '1.5rem',\r\n-      background: darkMode ? '#4a5568' : '#e2e8f0',\r\n-      border: 'none',\r\n-      borderRadius: '50%',\r\n-      width: '40px',\r\n-      height: '40px',\r\n-      display: 'flex',\r\n-      alignItems: 'center',\r\n-      justifyContent: 'center',\r\n-      cursor: 'pointer',\r\n-      transition: 'all 0.3s ease',\r\n-      boxShadow: '0 2px 5px rgba(0, 0, 0, 0.2)',\r\n-      zIndex: 100,\r\n-      ':hover': {\r\n-        transform: 'scale(1.1)',\r\n-      },\r\n-    },\r\n+      color: darkMode ? '#a0aec0' : '#64748b',\r\n+      fontSize: '0.9rem',\r\n+      marginTop: '2rem'\r\n+    }\r\n   };\r\n \r\n   // Add CSS animations\r\n   const animations = `\r\n@@ -393,44 +516,117 @@\n       \r\n       {/* Theme Toggle Button */}\r\n       <button \r\n         onClick={toggleDarkMode} \r\n-        style={styles.themeToggle}\r\n+        style={{\r\n+          position: 'fixed',\r\n+          top: '1.5rem',\r\n+          right: '1.5rem',\r\n+          background: darkMode ? '#4a5568' : '#e2e8f0',\r\n+          border: 'none',\r\n+          borderRadius: '50%',\r\n+          width: '40px',\r\n+          height: '40px',\r\n+          display: 'flex',\r\n+          alignItems: 'center',\r\n+          justifyContent: 'center',\r\n+          cursor: 'pointer',\r\n+          transition: 'all 0.3s ease',\r\n+          boxShadow: '0 2px 5px rgba(0, 0, 0, 0.2)',\r\n+          zIndex: 100,\r\n+          ':hover': {\r\n+            transform: 'scale(1.1)',\r\n+          },\r\n+        }}\r\n         aria-label={darkMode ? 'Switch to light mode' : 'Switch to dark mode'}\r\n       >\r\n         {darkMode ? '‚òÄÔ∏è' : 'üåô'}\r\n       </button>\r\n       \r\n       {/* Hero Section with UrbanBuddy */}\r\n       <section className=\"hero\" style={styles.hero}>\r\n-        <div className=\"hero-content\" style={styles.heroContent}>\r\n-          <h1 style={styles.title}>UrbanFlow</h1>\r\n-          <p className=\"tagline\" style={styles.tagline}>Your seamless urban living companion</p>\r\n+        <div style={{\r\n+          maxWidth: '800px',\r\n+          margin: '0 auto',\r\n+          position: 'relative',\r\n+          zIndex: 2\r\n+        }}>\r\n+          <h1 style={{\r\n+            fontSize: '3.5rem',\r\n+            fontWeight: '800',\r\n+            marginBottom: '0.5rem',\r\n+            textShadow: '2px 2px 4px rgba(0, 0, 0, 0.2)',\r\n+          }}>UrbanFlow</h1>\r\n+          <p style={{\r\n+            fontSize: '1.25rem',\r\n+            marginBottom: '2rem',\r\n+            opacity: 0.9,\r\n+          }}>Your seamless urban living companion</p>\r\n           \r\n-          <form onSubmit={handleSearch} className=\"search-box\" style={styles.searchBox}>\r\n+          <form onSubmit={handleSearch} style={{\r\n+            display: 'flex',\r\n+            maxWidth: '600px',\r\n+            margin: '0 auto',\r\n+            borderRadius: '50px',\r\n+            overflow: 'hidden',\r\n+            boxShadow: '0 4px 10px rgba(0, 0, 0, 0.2)',\r\n+          }}>\r\n             <input\r\n               type=\"text\"\r\n               placeholder=\"Search for restaurants, services...\"\r\n               value={searchQuery}\r\n               onChange={(e) => setSearchQuery(e.target.value)}\r\n-              style={styles.searchInput}\r\n+              style={{\r\n+                flex: 1,\r\n+                padding: '1rem 1.5rem',\r\n+                border: 'none',\r\n+                fontSize: '1rem',\r\n+                outline: 'none',\r\n+                backgroundColor: darkMode ? '#2d3748' : 'white',\r\n+                color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+              }}\r\n             />\r\n-            <button type=\"submit\" style={styles.searchButton}>\r\n+            <button type=\"submit\" style={{\r\n+              backgroundColor: darkMode ? '#4a5568' : '#1e40af',\r\n+              color: 'white',\r\n+              border: 'none',\r\n+              padding: '0 1.5rem',\r\n+              cursor: 'pointer',\r\n+              fontSize: '1.25rem',\r\n+              transition: 'background-color 0.2s',\r\n+              ':hover': {\r\n+                backgroundColor: darkMode ? '#5f6b82' : '#1e3a8a',\r\n+              },\r\n+            }}>\r\n               <span>üîç</span>\r\n             </button>\r\n           </form>\r\n         </div>\r\n-        <UrbanBuddy darkMode={darkMode} highlightedService={highlightedService} />\r\n+        <UrbanBuddy darkMode={darkMode} onChatOpen={toggleChat} />\r\n       </section>\r\n \r\n       {/* Services Grid */}\r\n-      <section className=\"services-section\" style={styles.section}>\r\n-        <h2 style={{...styles.sectionTitle, textAlign: 'center'}}>What do you need today?</h2>\r\n-        <div className=\"services-grid\" style={styles.servicesGrid}>\r\n+      <section style={{\r\n+        padding: '2rem 1rem',\r\n+        maxWidth: '1200px',\r\n+        margin: '0 auto',\r\n+      }}>\r\n+        <h2 style={{\r\n+          fontSize: '2rem',\r\n+          fontWeight: '700',\r\n+          marginBottom: '1.5rem',\r\n+          color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+          textAlign: 'center',\r\n+        }}>What do you need today?</h2>\r\n+        <div style={{\r\n+          display: 'grid',\r\n+          gridTemplateColumns: 'repeat(auto-fit, minmax(250px, 1fr))',\r\n+          gap: '1.5rem',\r\n+          marginTop: '1rem',\r\n+        }}>\r\n           {services.map((service) => (\r\n             <div \r\n               key={service.name} \r\n-              className=\"service-card\"\r\n               style={{ \r\n                 ...styles.serviceCard,\r\n                 backgroundColor: darkMode \r\n                   ? `${service.color}20` \r\n@@ -440,20 +636,35 @@\n               onClick={() => openServicePopup(service)}\r\n               onMouseEnter={() => setHighlightedService(service.name)}\r\n               onMouseLeave={() => setHighlightedService(null)}\r\n             >\r\n-              <div className=\"service-icon\" style={styles.serviceIcon}>{service.icon}</div>\r\n+              <div style={styles.serviceIcon}>{service.icon}</div>\r\n               <h3 style={{fontSize: '1.5rem', fontWeight: '600', marginBottom: '0.5rem'}}>{service.name}</h3>\r\n               <p style={{color: darkMode ? '#a0aec0' : '#64748b'}}>{service.desc}</p>\r\n             </div>\r\n           ))}\r\n         </div>\r\n       </section>\r\n \r\n       {/* Featured Section */}\r\n-      <section className=\"featured-section\" style={styles.section}>\r\n-        <h2 style={{...styles.sectionTitle, textAlign: 'center'}}>Quick Access</h2>\r\n-        <div className=\"quick-links\" style={styles.quickLinks}>\r\n+      <section style={{\r\n+        padding: '2rem 1rem',\r\n+        maxWidth: '1200px',\r\n+        margin: '0 auto',\r\n+      }}>\r\n+        <h2 style={{\r\n+          fontSize: '2rem',\r\n+          fontWeight: '700',\r\n+          marginBottom: '1.5rem',\r\n+          color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+          textAlign: 'center',\r\n+        }}>Quick Access</h2>\r\n+        <div style={{\r\n+          display: 'flex',\r\n+          justifyContent: 'center',\r\n+          gap: '1rem',\r\n+          flexWrap: 'wrap',\r\n+        }}>\r\n           <button \r\n             onClick={() => navigate('/transport?from=home&to=downtown')}\r\n             style={{\r\n               padding: '0.75rem 1.5rem',\r\n@@ -581,7 +792,15 @@\n           <span style={{fontSize: '1.5rem'}}>{achievement.icon}</span>\r\n           <span>{achievement.title}</span>\r\n         </div>\r\n       ))}\r\n+\r\n+      {/* Chat Modal */}\r\n+      {showChat && <ChatModal darkMode={darkMode} onClose={toggleChat} />}\r\n+\r\n+      {/* Footer with copyright */}\r\n+      <footer style={styles.footer}>\r\n+        <p>¬© {new Date().getFullYear()} UrbanFlow - Created by Nick</p>\r\n+      </footer>\r\n     </div>\r\n   );\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752650545475,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,195 +4,264 @@\n // UrbanBuddy AI Assistant Component\r\n const UrbanBuddy = ({ darkMode, onChatOpen }) => {\r\n   const [position, setPosition] = useState({ x: 20, y: 50 });\r\n   const [expression, setExpression] = useState('üòä');\r\n-  const [message, setMessage] = useState('Hi there! Need help? Tap me!');\r\n   const [direction, setDirection] = useState(1);\r\n   const [costume, setCostume] = useState(null);\r\n-  const [isSpeaking, setIsSpeaking] = useState(false);\r\n+  const [isActive, setIsActive] = useState(false);\r\n   const botRef = useRef(null);\r\n+  const animationRef = useRef(null);\r\n+  const lastInteractionTime = useRef(Date.now());\r\n \r\n   // Seasonal costumes\r\n   useEffect(() => {\r\n     const today = new Date();\r\n     const month = today.getMonth() + 1;\r\n     \r\n-    if (month === 12) setCostume('üéÑ'); // Christmas tree in December\r\n-    else if (month === 10) setCostume('üéÉ'); // Pumpkin in October\r\n-    else if (month === 2) setCostume('üíù'); // Heart in February\r\n-    else if (month === 4) setCostume('üå∏'); // Cherry blossom in April\r\n+    if (month === 12) setCostume('üéÑ');\r\n+    else if (month === 10) setCostume('üéÉ');\r\n+    else if (month === 2) setCostume('üíù');\r\n+    else if (month === 4) setCostume('üå∏');\r\n     else setCostume(null);\r\n   }, []);\r\n \r\n-  // Make the bot wander\r\n+  // Make the bot wander with more dynamic movement\r\n   useEffect(() => {\r\n     const moveInterval = setInterval(() => {\r\n       setPosition(prev => {\r\n-        let newX = prev.x + (2 * direction);\r\n-        let newY = prev.y + (Math.random() * 4 - 2);\r\n+        const now = Date.now();\r\n+        const timeSinceLastInteraction = now - lastInteractionTime.current;\r\n         \r\n-        // Keep within bounds\r\n-        if (newX > window.innerWidth - 80) setDirection(-1);\r\n-        if (newX < 20) setDirection(1);\r\n-        if (newY < 50) newY = 50;\r\n-        if (newY > 150) newY = 150;\r\n+        // More active movement right after interaction\r\n+        const speedMultiplier = timeSinceLastInteraction < 5000 ? 2 : 1;\r\n         \r\n+        let newX = prev.x + (3 * direction * speedMultiplier);\r\n+        let newY = prev.y + (Math.random() * 6 - 3);\r\n+        \r\n+        // Bounce off edges\r\n+        if (newX > window.innerWidth - 80) {\r\n+          setDirection(-1);\r\n+          triggerAnimation('spin');\r\n+        }\r\n+        if (newX < 20) {\r\n+          setDirection(1);\r\n+          triggerAnimation('spin');\r\n+        }\r\n+        if (newY < 20) newY = 20;\r\n+        if (newY > window.innerHeight - 100) newY = window.innerHeight - 100;\r\n+        \r\n         return { x: newX, y: newY };\r\n       });\r\n     }, 100);\r\n \r\n     return () => clearInterval(moveInterval);\r\n   }, [direction]);\r\n \r\n-  // Change expressions randomly\r\n+  // Change expressions randomly with more variety\r\n   useEffect(() => {\r\n-    const expressions = ['üòä', 'ü§î', 'üòÆ', 'üòé', 'üëã'];\r\n+    const expressions = ['üòä', 'ü§î', 'üòÆ', 'üòé', 'üëã', 'ü§ñ', '‚ú®', 'üåü'];\r\n     const expressionInterval = setInterval(() => {\r\n-      if (!isSpeaking) {\r\n+      if (!isActive) {\r\n         setExpression(expressions[Math.floor(Math.random() * expressions.length)]);\r\n+        // Random animations when idle\r\n+        if (Math.random() > 0.8) {\r\n+          triggerAnimation(['bounce', 'spin', 'wobble'][Math.floor(Math.random() * 3)]);\r\n+        }\r\n       }\r\n-    }, 5000);\r\n+    }, 3000);\r\n     return () => clearInterval(expressionInterval);\r\n-  }, [isSpeaking]);\r\n+  }, [isActive]);\r\n \r\n+  const triggerAnimation = (type) => {\r\n+    if (animationRef.current) {\r\n+      clearTimeout(animationRef.current);\r\n+    }\r\n+    \r\n+    const botElement = botRef.current;\r\n+    if (!botElement) return;\r\n+    \r\n+    botElement.style.animation = 'none';\r\n+    void botElement.offsetWidth; // Trigger reflow\r\n+    \r\n+    switch(type) {\r\n+      case 'spin':\r\n+        botElement.style.animation = 'spin 1s ease';\r\n+        break;\r\n+      case 'bounce':\r\n+        botElement.style.animation = 'bounce 0.5s ease';\r\n+        break;\r\n+      case 'wobble':\r\n+        botElement.style.animation = 'wobble 0.8s ease';\r\n+        break;\r\n+      default:\r\n+        botElement.style.animation = '';\r\n+    }\r\n+    \r\n+    animationRef.current = setTimeout(() => {\r\n+      if (botElement) botElement.style.animation = '';\r\n+    }, 1000);\r\n+  };\r\n+\r\n   const handleClick = () => {\r\n-    setIsSpeaking(true);\r\n-    setExpression('üí¨');\r\n-    setMessage(\"Opening chat...\");\r\n+    lastInteractionTime.current = Date.now();\r\n+    setIsActive(true);\r\n+    triggerAnimation('bounce');\r\n+    setExpression('üí°');\r\n     \r\n     // Trigger chat opening in parent component\r\n     onChatOpen();\r\n     \r\n     // Return to normal after a delay\r\n     setTimeout(() => {\r\n-      setIsSpeaking(false);\r\n-      setMessage('Need more help? Tap me!');\r\n+      setIsActive(false);\r\n     }, 3000);\r\n   };\r\n \r\n-  // Custom bot icon with better styling\r\n+  // Custom animations\r\n+  const animations = `\r\n+    @keyframes spin {\r\n+      0% { transform: rotate(0deg) scaleX(${direction}); }\r\n+      100% { transform: rotate(360deg) scaleX(${direction}); }\r\n+    }\r\n+    @keyframes bounce {\r\n+      0%, 100% { transform: translateY(0) scaleX(${direction}); }\r\n+      50% { transform: translateY(-20px) scaleX(${direction}); }\r\n+    }\r\n+    @keyframes wobble {\r\n+      0%, 100% { transform: rotate(0deg) scaleX(${direction}); }\r\n+      25% { transform: rotate(5deg) scaleX(${direction}); }\r\n+      75% { transform: rotate(-5deg) scaleX(${direction}); }\r\n+    }\r\n+    @keyframes float {\r\n+      0% { transform: translateY(0px) scaleX(${direction}); }\r\n+      50% { transform: translateY(-10px) scaleX(${direction}); }\r\n+      100% { transform: translateY(0px) scaleX(${direction}); }\r\n+    }\r\n+  `;\r\n+\r\n   return (\r\n-    <div \r\n-      ref={botRef}\r\n-      onClick={handleClick}\r\n-      style={{\r\n-        position: 'fixed',\r\n-        left: `${position.x}px`,\r\n-        top: `${position.y}px`,\r\n-        fontSize: '2.5rem',\r\n-        cursor: 'pointer',\r\n-        transition: 'all 0.5s ease',\r\n-        transform: `scaleX(${direction})`,\r\n-        zIndex: 100,\r\n-        filter: darkMode ? 'drop-shadow(0 0 8px rgba(255,255,255,0.7))' : 'drop-shadow(0 0 8px rgba(0,0,0,0.3))',\r\n-        userSelect: 'none'\r\n-      }}\r\n-    >\r\n-      <div style={{ \r\n-        position: 'relative',\r\n-        display: 'flex',\r\n-        flexDirection: 'column',\r\n-        alignItems: 'center'\r\n-      }}>\r\n-        {/* Speech bubble */}\r\n-        <div style={{\r\n-          position: 'absolute',\r\n-          top: '-70px',\r\n-          left: '50%',\r\n-          transform: 'translateX(-50%)',\r\n-          background: darkMode ? '#2d3748' : 'white',\r\n-          color: darkMode ? 'white' : '#1e293b',\r\n-          padding: '0.5rem 1rem',\r\n-          borderRadius: '12px',\r\n-          fontSize: '0.9rem',\r\n-          width: 'max-content',\r\n-          maxWidth: '200px',\r\n-          boxShadow: '0 2px 8px rgba(0,0,0,0.2)',\r\n-          opacity: message ? 1 : 0,\r\n-          transition: 'all 0.3s',\r\n-          textAlign: 'center',\r\n-          pointerEvents: 'none'\r\n-        }}>\r\n-          {message}\r\n-          <div style={{\r\n-            position: 'absolute',\r\n-            bottom: '-10px',\r\n-            left: '50%',\r\n-            marginLeft: '-10px',\r\n-            width: 0,\r\n-            height: 0,\r\n-            borderLeft: '10px solid transparent',\r\n-            borderRight: '10px solid transparent',\r\n-            borderTop: `10px solid ${darkMode ? '#2d3748' : 'white'}`\r\n-          }}></div>\r\n-        </div>\r\n-        \r\n-        {/* Bot icon with costume */}\r\n-        <div style={{\r\n+    <>\r\n+      <style>{animations}</style>\r\n+      <div \r\n+        ref={botRef}\r\n+        onClick={handleClick}\r\n+        style={{\r\n+          position: 'fixed',\r\n+          left: `${position.x}px`,\r\n+          top: `${position.y}px`,\r\n+          fontSize: '2.5rem',\r\n+          cursor: 'pointer',\r\n+          transition: 'all 0.3s ease',\r\n+          transform: `scaleX(${direction})`,\r\n+          zIndex: 100,\r\n+          filter: darkMode \r\n+            ? 'drop-shadow(0 0 8px rgba(255,255,255,0.7))' \r\n+            : 'drop-shadow(0 0 8px rgba(0,0,0,0.3))',\r\n+          userSelect: 'none',\r\n+          animation: 'float 4s ease-in-out infinite'\r\n+        }}\r\n+      >\r\n+        <div style={{ \r\n           position: 'relative',\r\n-          width: '60px',\r\n-          height: '60px',\r\n-          backgroundColor: darkMode ? '#4a5568' : '#3b82f6',\r\n-          borderRadius: '50%',\r\n           display: 'flex',\r\n-          justifyContent: 'center',\r\n-          alignItems: 'center',\r\n-          color: 'white'\r\n+          flexDirection: 'column',\r\n+          alignItems: 'center'\r\n         }}>\r\n-          <span style={{ fontSize: '1.8rem' }}>ü§ñ</span>\r\n-          {costume && (\r\n-            <span style={{\r\n-              position: 'absolute',\r\n-              top: '-15px',\r\n-              right: '-10px',\r\n-              fontSize: '1.5rem',\r\n-              transform: 'rotate(15deg)'\r\n-            }}>\r\n-              {costume}\r\n-            </span>\r\n-          )}\r\n+          {/* Bot icon with costume */}\r\n+          <div style={{\r\n+            position: 'relative',\r\n+            width: '60px',\r\n+            height: '60px',\r\n+            backgroundColor: darkMode ? '#4a5568' : '#3b82f6',\r\n+            borderRadius: '50%',\r\n+            display: 'flex',\r\n+            justifyContent: 'center',\r\n+            alignItems: 'center',\r\n+            color: 'white'\r\n+          }}>\r\n+            <span style={{ fontSize: '1.8rem' }}>{expression}</span>\r\n+            {costume && (\r\n+              <span style={{\r\n+                position: 'absolute',\r\n+                top: '-15px',\r\n+                right: '-10px',\r\n+                fontSize: '1.5rem',\r\n+                transform: 'rotate(15deg)'\r\n+              }}>\r\n+                {costume}\r\n+              </span>\r\n+            )}\r\n+          </div>\r\n         </div>\r\n       </div>\r\n-    </div>\r\n+    </>\r\n   );\r\n };\r\n \r\n-// Chat Modal Component\r\n+// Chat Modal Component with Direct Gemini API Connection\r\n const ChatModal = ({ darkMode, onClose }) => {\r\n   const [messages, setMessages] = useState([\r\n-    { text: \"Hello! I'm UrbanBuddy. How can I help you today?\", sender: 'bot' }\r\n+    { text: \"Hello! I'm UrbanBuddy, your AI assistant powered by Gemini. How can I help you with urban living today?\", sender: 'bot' }\r\n   ]);\r\n   const [inputValue, setInputValue] = useState('');\r\n+  const [isTyping, setIsTyping] = useState(false);\r\n   const chatEndRef = useRef(null);\r\n+  const inputRef = useRef(null);\r\n \r\n-  const handleSendMessage = (e) => {\r\n+  // Auto-scroll to bottom and focus input\r\n+  useEffect(() => {\r\n+    chatEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n+    inputRef.current?.focus();\r\n+  }, [messages]);\r\n+\r\n+  // Direct API call to Gemini through a proxy\r\n+  const generateResponse = async (userMessage) => {\r\n+    setIsTyping(true);\r\n+    \r\n+    try {\r\n+      // Using a public AI API gateway (no API key needed)\r\n+      const response = await fetch('https://gemini-proxy.vercel.app/api/generate', {\r\n+        method: \"POST\",\r\n+        headers: { \r\n+          \"Content-Type\": \"application/json\",\r\n+        },\r\n+        body: JSON.stringify({\r\n+          prompt: `You are UrbanBuddy, a friendly AI assistant for urban living. \r\n+          Respond to this query about city life: ${userMessage}\r\n+          Keep responses concise (1-2 sentences) and helpful.`\r\n+        })\r\n+      });\r\n+      \r\n+      const data = await response.json();\r\n+      \r\n+      setMessages(prev => [...prev, { \r\n+        text: data.response || \"I'm here to help with urban living questions!\", \r\n+        sender: 'bot' \r\n+      }]);\r\n+    } catch (error) {\r\n+      console.error(\"API error:\", error);\r\n+      setMessages(prev => [...prev, { \r\n+        text: \"I'm having trouble connecting right now. Try again later!\", \r\n+        sender: 'bot' \r\n+      }]);\r\n+    } finally {\r\n+      setIsTyping(false);\r\n+    }\r\n+  };\r\n+\r\n+  const handleSendMessage = async (e) => {\r\n     e.preventDefault();\r\n-    if (inputValue.trim()) {\r\n+    if (inputValue.trim() && !isTyping) {\r\n       // Add user message\r\n-      setMessages(prev => [...prev, { text: inputValue, sender: 'user' }]);\r\n+      const userMessage = inputValue.trim();\r\n+      setMessages(prev => [...prev, { text: userMessage, sender: 'user' }]);\r\n       setInputValue('');\r\n       \r\n-      // Simulate bot response after a delay\r\n-      setTimeout(() => {\r\n-        const responses = [\r\n-          \"I can help you find that! Try searching above.\",\r\n-          \"Great question! Our transport section can help with that.\",\r\n-          \"I'll guide you to the right service for that need.\",\r\n-          \"Tap on the food delivery icon for restaurant options.\"\r\n-        ];\r\n-        setMessages(prev => [...prev, { \r\n-          text: responses[Math.floor(Math.random() * responses.length)], \r\n-          sender: 'bot' \r\n-        }]);\r\n-      }, 1000);\r\n+      // Generate AI response\r\n+      await generateResponse(userMessage);\r\n     }\r\n   };\r\n \r\n-  // Auto-scroll to bottom of chat\r\n-  useEffect(() => {\r\n-    chatEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n-  }, [messages]);\r\n-\r\n   return (\r\n     <div style={{\r\n       position: 'fixed',\r\n       bottom: '100px',\r\n@@ -219,9 +288,16 @@\n         alignItems: 'center'\r\n       }}>\r\n         <div style={{ display: 'flex', alignItems: 'center', gap: '0.5rem' }}>\r\n           <span style={{ fontSize: '1.5rem' }}>ü§ñ</span>\r\n-          <h3 style={{ margin: 0 }}>UrbanBuddy</h3>\r\n+          <h3 style={{ margin: 0 }}>UrbanBuddy AI</h3>\r\n+          {isTyping && (\r\n+            <span style={{ \r\n+              fontSize: '0.8rem',\r\n+              marginLeft: '0.5rem',\r\n+              opacity: 0.8\r\n+            }}>typing...</span>\r\n+          )}\r\n         </div>\r\n         <button \r\n           onClick={onClose}\r\n           style={{\r\n@@ -257,9 +333,12 @@\n                 : '18px 18px 18px 0',\r\n               backgroundColor: msg.sender === 'user'\r\n                 ? (darkMode ? '#4a5568' : '#3b82f6')\r\n                 : (darkMode ? '#4a5568' : '#e2e8f0'),\r\n-              color: msg.sender === 'user' ? 'white' : (darkMode ? 'white' : '#1e293b')\r\n+              color: msg.sender === 'user' ? 'white' : (darkMode ? 'white' : '#1e293b'),\r\n+              animation: msg.sender === 'bot' && index === messages.length - 1 \r\n+                ? 'fadeIn 0.3s ease' \r\n+                : 'none'\r\n             }}\r\n           >\r\n             {msg.text}\r\n           </div>\r\n@@ -274,53 +353,59 @@\n         display: 'flex',\r\n         gap: '0.5rem'\r\n       }}>\r\n         <input\r\n+          ref={inputRef}\r\n           type=\"text\"\r\n           value={inputValue}\r\n           onChange={(e) => setInputValue(e.target.value)}\r\n-          placeholder=\"Type your question...\"\r\n+          placeholder=\"Ask me about urban living...\"\r\n+          disabled={isTyping}\r\n           style={{\r\n             flex: 1,\r\n             padding: '0.6rem 1rem',\r\n             borderRadius: '20px',\r\n             border: darkMode ? '1px solid #4a5568' : '1px solid #e2e8f0',\r\n             backgroundColor: darkMode ? '#2d3748' : 'white',\r\n             color: darkMode ? 'white' : '#1e293b',\r\n-            outline: 'none'\r\n+            outline: 'none',\r\n+            opacity: isTyping ? 0.7 : 1\r\n           }}\r\n         />\r\n         <button \r\n           type=\"submit\"\r\n+          disabled={isTyping}\r\n           style={{\r\n-            background: darkMode ? '#4a5568' : '#3b82f6',\r\n+            background: isTyping \r\n+              ? (darkMode ? '#4a5568' : '#e2e8f0')\r\n+              : (darkMode ? '#4a5568' : '#3b82f6'),\r\n             color: 'white',\r\n             border: 'none',\r\n             borderRadius: '50%',\r\n             width: '40px',\r\n             height: '40px',\r\n             display: 'flex',\r\n             alignItems: 'center',\r\n             justifyContent: 'center',\r\n-            cursor: 'pointer'\r\n+            cursor: isTyping ? 'not-allowed' : 'pointer'\r\n           }}\r\n         >\r\n-          ‚û§\r\n+          {isTyping ? '...' : '‚û§'}\r\n         </button>\r\n       </form>\r\n     </div>\r\n   );\r\n };\r\n \r\n+// Main Home Component\r\n export default function Home() {\r\n   const navigate = useNavigate();\r\n   const [searchQuery, setSearchQuery] = useState('');\r\n   const [darkMode, setDarkMode] = useState(false);\r\n   const [selectedService, setSelectedService] = useState(null);\r\n   const [orderCount, setOrderCount] = useState(0);\r\n   const [achievements, setAchievements] = useState([]);\r\n   const [showChat, setShowChat] = useState(false);\r\n-  const [highlightedService, setHighlightedService] = useState(null);\r\n \r\n   const services = [\r\n     { \r\n       name: 'Transport', \r\n@@ -402,119 +487,17 @@\n   const toggleChat = () => {\r\n     setShowChat(!showChat);\r\n   };\r\n \r\n-  // Dynamic styles\r\n-  const styles = {\r\n-    page: {\r\n+  return (\r\n+    <div style={{\r\n       backgroundColor: darkMode ? '#1a202c' : '#f8fafc',\r\n       minHeight: '100vh',\r\n       paddingBottom: '3rem',\r\n       color: darkMode ? '#e2e8f0' : '#1e293b',\r\n       transition: 'all 0.3s ease',\r\n       position: 'relative'\r\n-    },\r\n-    hero: {\r\n-      background: darkMode \r\n-        ? 'linear-gradient(135deg, #2d3748 0%, #1a202c 100%)' \r\n-        : 'linear-gradient(135deg, #6b46c1 0%, #3b82f6 100%)',\r\n-      color: 'white',\r\n-      padding: '4rem 1rem',\r\n-      textAlign: 'center',\r\n-      borderRadius: '0 0 20px 20px',\r\n-      boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',\r\n-      position: 'relative',\r\n-      overflow: 'hidden',\r\n-      height: '300px'\r\n-    },\r\n-    serviceCard: {\r\n-      padding: '2rem 1.5rem',\r\n-      borderRadius: '16px',\r\n-      border: '2px solid',\r\n-      textAlign: 'center',\r\n-      cursor: 'pointer',\r\n-      transition: 'transform 0.3s, box-shadow 0.3s',\r\n-      position: 'relative',\r\n-      overflow: 'hidden',\r\n-      backdropFilter: 'blur(10px)',\r\n-      ':hover': {\r\n-        transform: 'translateY(-5px)',\r\n-        boxShadow: '0 10px 20px rgba(0, 0, 0, 0.1)',\r\n-      },\r\n-    },\r\n-    serviceIcon: {\r\n-      fontSize: '3rem',\r\n-      marginBottom: '1rem',\r\n-      display: 'inline-block',\r\n-      animation: 'float 3s ease-in-out infinite'\r\n-    },\r\n-    achievement: {\r\n-      position: 'fixed',\r\n-      bottom: '20px',\r\n-      right: '20px',\r\n-      background: darkMode ? '#2d3748' : 'white',\r\n-      color: darkMode ? 'white' : '#1e293b',\r\n-      padding: '1rem',\r\n-      borderRadius: '12px',\r\n-      boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',\r\n-      display: 'flex',\r\n-      alignItems: 'center',\r\n-      gap: '0.5rem',\r\n-      zIndex: 1000,\r\n-      animation: 'slideIn 0.5s forwards, fadeOut 0.5s forwards 2.5s'\r\n-    },\r\n-    popupOverlay: {\r\n-      position: 'fixed',\r\n-      top: 0,\r\n-      left: 0,\r\n-      right: 0,\r\n-      bottom: 0,\r\n-      backgroundColor: 'rgba(0, 0, 0, 0.7)',\r\n-      display: 'flex',\r\n-      justifyContent: 'center',\r\n-      alignItems: 'center',\r\n-      zIndex: 1000,\r\n-    },\r\n-    popupContent: {\r\n-      backgroundColor: darkMode ? '#2d3748' : 'white',\r\n-      borderRadius: '16px',\r\n-      padding: '2rem',\r\n-      maxWidth: '500px',\r\n-      width: '90%',\r\n-      boxShadow: '0 10px 25px rgba(0, 0, 0, 0.2)',\r\n-      position: 'relative',\r\n-      border: darkMode ? '1px solid #4a5568' : '1px solid #e2e8f0',\r\n-    },\r\n-    footer: {\r\n-      textAlign: 'center',\r\n-      padding: '2rem 1rem',\r\n-      color: darkMode ? '#a0aec0' : '#64748b',\r\n-      fontSize: '0.9rem',\r\n-      marginTop: '2rem'\r\n-    }\r\n-  };\r\n-\r\n-  // Add CSS animations\r\n-  const animations = `\r\n-    @keyframes float {\r\n-      0% { transform: translateY(0px); }\r\n-      50% { transform: translateY(-10px); }\r\n-      100% { transform: translateY(0px); }\r\n-    }\r\n-    @keyframes slideIn {\r\n-      from { transform: translateX(100%); }\r\n-      to { transform: translateX(0); }\r\n-    }\r\n-    @keyframes fadeOut {\r\n-      from { opacity: 1; }\r\n-      to { opacity: 0; }\r\n-    }\r\n-  `;\r\n-\r\n-  return (\r\n-    <div className=\"home-page\" style={styles.page}>\r\n-      <style>{animations}</style>\r\n-      \r\n+    }}>\r\n       {/* Theme Toggle Button */}\r\n       <button \r\n         onClick={toggleDarkMode} \r\n         style={{\r\n@@ -531,20 +514,29 @@\n           justifyContent: 'center',\r\n           cursor: 'pointer',\r\n           transition: 'all 0.3s ease',\r\n           boxShadow: '0 2px 5px rgba(0, 0, 0, 0.2)',\r\n-          zIndex: 100,\r\n-          ':hover': {\r\n-            transform: 'scale(1.1)',\r\n-          },\r\n+          zIndex: 100\r\n         }}\r\n         aria-label={darkMode ? 'Switch to light mode' : 'Switch to dark mode'}\r\n       >\r\n         {darkMode ? '‚òÄÔ∏è' : 'üåô'}\r\n       </button>\r\n       \r\n       {/* Hero Section with UrbanBuddy */}\r\n-      <section className=\"hero\" style={styles.hero}>\r\n+      <section style={{\r\n+        background: darkMode \r\n+          ? 'linear-gradient(135deg, #2d3748 0%, #1a202c 100%)' \r\n+          : 'linear-gradient(135deg, #6b46c1 0%, #3b82f6 100%)',\r\n+        color: 'white',\r\n+        padding: '4rem 1rem',\r\n+        textAlign: 'center',\r\n+        borderRadius: '0 0 20px 20px',\r\n+        boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',\r\n+        position: 'relative',\r\n+        overflow: 'hidden',\r\n+        height: '300px'\r\n+      }}>\r\n         <div style={{\r\n           maxWidth: '800px',\r\n           margin: '0 auto',\r\n           position: 'relative',\r\n@@ -591,12 +583,9 @@\n               border: 'none',\r\n               padding: '0 1.5rem',\r\n               cursor: 'pointer',\r\n               fontSize: '1.25rem',\r\n-              transition: 'background-color 0.2s',\r\n-              ':hover': {\r\n-                backgroundColor: darkMode ? '#5f6b82' : '#1e3a8a',\r\n-              },\r\n+              transition: 'background-color 0.2s'\r\n             }}>\r\n               <span>üîç</span>\r\n             </button>\r\n           </form>\r\n@@ -626,19 +615,30 @@\n           {services.map((service) => (\r\n             <div \r\n               key={service.name} \r\n               style={{ \r\n-                ...styles.serviceCard,\r\n+                padding: '2rem 1.5rem',\r\n+                borderRadius: '16px',\r\n+                border: `2px solid ${service.color}`,\r\n+                textAlign: 'center',\r\n+                cursor: 'pointer',\r\n+                transition: 'transform 0.3s, box-shadow 0.3s',\r\n                 backgroundColor: darkMode \r\n                   ? `${service.color}20` \r\n                   : `${service.color}10`,\r\n-                borderColor: service.color,\r\n+                ':hover': {\r\n+                  transform: 'translateY(-5px)',\r\n+                  boxShadow: '0 10px 20px rgba(0, 0, 0, 0.1)',\r\n+                }\r\n               }}\r\n               onClick={() => openServicePopup(service)}\r\n-              onMouseEnter={() => setHighlightedService(service.name)}\r\n-              onMouseLeave={() => setHighlightedService(null)}\r\n             >\r\n-              <div style={styles.serviceIcon}>{service.icon}</div>\r\n+              <div style={{ \r\n+                fontSize: '3rem',\r\n+                marginBottom: '1rem',\r\n+                display: 'inline-block',\r\n+                animation: 'float 3s ease-in-out infinite'\r\n+              }}>{service.icon}</div>\r\n               <h3 style={{fontSize: '1.5rem', fontWeight: '600', marginBottom: '0.5rem'}}>{service.name}</h3>\r\n               <p style={{color: darkMode ? '#a0aec0' : '#64748b'}}>{service.desc}</p>\r\n             </div>\r\n           ))}\r\n@@ -677,13 +677,9 @@\n               transition: 'all 0.2s',\r\n               display: 'flex',\r\n               alignItems: 'center',\r\n               gap: '0.5rem',\r\n-              fontSize: '1rem',\r\n-              ':hover': {\r\n-                backgroundColor: darkMode ? '#4a5568' : '#cbd5e1',\r\n-                transform: 'scale(1.05)',\r\n-              },\r\n+              fontSize: '1rem'\r\n             }}\r\n           >\r\n             üöï To Downtown\r\n           </button>\r\n@@ -700,13 +696,9 @@\n               transition: 'all 0.2s',\r\n               display: 'flex',\r\n               alignItems: 'center',\r\n               gap: '0.5rem',\r\n-              fontSize: '1rem',\r\n-              ':hover': {\r\n-                backgroundColor: darkMode ? '#4a5568' : '#cbd5e1',\r\n-                transform: 'scale(1.05)',\r\n-              },\r\n+              fontSize: '1rem'\r\n             }}\r\n           >\r\n             üçü Fast Food\r\n           </button>\r\n@@ -723,13 +715,9 @@\n               transition: 'all 0.2s',\r\n               display: 'flex',\r\n               alignItems: 'center',\r\n               gap: '0.5rem',\r\n-              fontSize: '1rem',\r\n-              ':hover': {\r\n-                backgroundColor: darkMode ? '#4a5568' : '#cbd5e1',\r\n-                transform: 'scale(1.05)',\r\n-              },\r\n+              fontSize: '1rem'\r\n             }}\r\n           >\r\n             ‚òï Coffee Shops\r\n           </button>\r\n@@ -737,10 +725,30 @@\n       </section>\r\n \r\n       {/* Service Popup */}\r\n       {selectedService && (\r\n-        <div style={styles.popupOverlay} onClick={closePopup}>\r\n-          <div style={styles.popupContent} onClick={(e) => e.stopPropagation()}>\r\n+        <div style={{\r\n+          position: 'fixed',\r\n+          top: 0,\r\n+          left: 0,\r\n+          right: 0,\r\n+          bottom: 0,\r\n+          backgroundColor: 'rgba(0, 0, 0, 0.7)',\r\n+          display: 'flex',\r\n+          justifyContent: 'center',\r\n+          alignItems: 'center',\r\n+          zIndex: 1000,\r\n+        }} onClick={closePopup}>\r\n+          <div style={{\r\n+            backgroundColor: darkMode ? '#2d3748' : 'white',\r\n+            borderRadius: '16px',\r\n+            padding: '2rem',\r\n+            maxWidth: '500px',\r\n+            width: '90%',\r\n+            boxShadow: '0 10px 25px rgba(0, 0, 0, 0.2)',\r\n+            position: 'relative',\r\n+            border: darkMode ? '1px solid #4a5568' : '1px solid #e2e8f0',\r\n+          }} onClick={(e) => e.stopPropagation()}>\r\n             <button style={{\r\n               position: 'absolute',\r\n               top: '1rem',\r\n               right: '1rem',\r\n@@ -769,12 +777,9 @@\n                 color: 'white',\r\n                 fontWeight: '600',\r\n                 cursor: 'pointer',\r\n                 transition: 'all 0.2s',\r\n-                fontSize: '1rem',\r\n-                ':hover': {\r\n-                  backgroundColor: `${selectedService.color}90`,\r\n-                }\r\n+                fontSize: '1rem'\r\n               }}\r\n               onClick={() => {\r\n                 navigate(selectedService.path);\r\n                 closePopup();\r\n@@ -787,9 +792,23 @@\n       )}\r\n \r\n       {/* Achievements */}\r\n       {achievements.map(achievement => (\r\n-        <div key={achievement.id} style={styles.achievement}>\r\n+        <div key={achievement.id} style={{\r\n+          position: 'fixed',\r\n+          bottom: '20px',\r\n+          right: '20px',\r\n+          background: darkMode ? '#2d3748' : 'white',\r\n+          color: darkMode ? 'white' : '#1e293b',\r\n+          padding: '1rem',\r\n+          borderRadius: '12px',\r\n+          boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',\r\n+          display: 'flex',\r\n+          alignItems: 'center',\r\n+          gap: '0.5rem',\r\n+          zIndex: 1000,\r\n+          animation: 'slideIn 0.5s forwards, fadeOut 0.5s forwards 2.5s'\r\n+        }}>\r\n           <span style={{fontSize: '1.5rem'}}>{achievement.icon}</span>\r\n           <span>{achievement.title}</span>\r\n         </div>\r\n       ))}\r\n@@ -797,814 +816,16 @@\n       {/* Chat Modal */}\r\n       {showChat && <ChatModal darkMode={darkMode} onClose={toggleChat} />}\r\n \r\n       {/* Footer with copyright */}\r\n-      <footer style={styles.footer}>\r\n+      <footer style={{\r\n+        textAlign: 'center',\r\n+        padding: '2rem 1rem',\r\n+        color: darkMode ? '#a0aec0' : '#64748b',\r\n+        fontSize: '0.9rem',\r\n+        marginTop: '2rem'\r\n+      }}>\r\n         <p>¬© {new Date().getFullYear()} UrbanFlow - Created by Nick</p>\r\n       </footer>\r\n     </div>\r\n   );\r\n-}\n-import { useState } from 'react';\r\n-import { useNavigate } from 'react-router-dom';\r\n-\r\n-export default function Home() {\r\n-  const navigate = useNavigate();\r\n-  const [searchQuery, setSearchQuery] = useState('');\r\n-  const [darkMode, setDarkMode] = useState(false);\r\n-  const [selectedService, setSelectedService] = useState(null);\r\n-\r\n-  const services = [\r\n-    { \r\n-      name: 'Transport', \r\n-      path: '/transport', \r\n-      icon: 'üöå', \r\n-      desc: 'Plan your multi-modal journey across the city',\r\n-      color: '#3b82f6',\r\n-      details: 'Find the best routes combining metro, buses, and bikes. Real-time updates and ticket purchasing available.'\r\n-    },\r\n-    { \r\n-      name: 'Food Delivery', \r\n-      path: '/food', \r\n-      icon: 'üçî', \r\n-      desc: 'Discover local restaurants and cafes',\r\n-      color: '#ef4444',\r\n-      details: 'Order from hundreds of restaurants with special discounts. Track your delivery in real-time.'\r\n-    },\r\n-    { \r\n-      name: 'Groceries', \r\n-      path: '/food', \r\n-      icon: 'üõí', \r\n-      desc: 'Get groceries delivered in minutes',\r\n-      color: '#10b981',\r\n-      details: 'Same-day delivery from local supermarkets. Schedule recurring orders for essentials.'\r\n-    },\r\n-    { \r\n-      name: 'Services', \r\n-      path: '/food', \r\n-      icon: 'üõ†Ô∏è', \r\n-      desc: 'Find urban services near you',\r\n-      color: '#8b5cf6',\r\n-      details: 'Book home services, repairs, and professional help with verified providers.'\r\n-    }\r\n-  ];\r\n-\r\n-  const handleSearch = (e) => {\r\n-    e.preventDefault();\r\n-    if (searchQuery.trim()) {\r\n-      navigate(`/food?search=${encodeURIComponent(searchQuery)}`);\r\n-    }\r\n-  };\r\n-\r\n-  const toggleDarkMode = () => {\r\n-    setDarkMode(!darkMode);\r\n-  };\r\n-\r\n-  const openServicePopup = (service) => {\r\n-    setSelectedService(service);\r\n-  };\r\n-\r\n-  const closePopup = () => {\r\n-    setSelectedService(null);\r\n-  };\r\n-\r\n-  // Dynamic styles based on dark mode\r\n-  const dynamicStyles = {\r\n-    page: {\r\n-      backgroundColor: darkMode ? '#1a202c' : '#f8fafc',\r\n-      minHeight: '100vh',\r\n-      paddingBottom: '3rem',\r\n-      color: darkMode ? '#e2e8f0' : '#1e293b',\r\n-      transition: 'all 0.3s ease',\r\n-    },\r\n-    hero: {\r\n-      background: darkMode \r\n-        ? 'linear-gradient(135deg, #2d3748 0%, #1a202c 100%)' \r\n-        : 'linear-gradient(135deg, #6b46c1 0%, #3b82f6 100%)',\r\n-      color: 'white',\r\n-      padding: '4rem 1rem',\r\n-      textAlign: 'center',\r\n-      borderRadius: '0 0 20px 20px',\r\n-      boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',\r\n-    },\r\n-    serviceCard: {\r\n-      padding: '2rem 1.5rem',\r\n-      borderRadius: '16px',\r\n-      border: '2px solid',\r\n-      textAlign: 'center',\r\n-      cursor: 'pointer',\r\n-      transition: 'transform 0.3s, box-shadow 0.3s',\r\n-      position: 'relative',\r\n-      overflow: 'hidden',\r\n-      backdropFilter: 'blur(10px)',\r\n-      ':hover': {\r\n-        transform: 'translateY(-5px)',\r\n-        boxShadow: '0 10px 20px rgba(0, 0, 0, 0.1)',\r\n-      },\r\n-    },\r\n-    serviceTitle: {\r\n-      fontSize: '1.5rem',\r\n-      fontWeight: '600',\r\n-      marginBottom: '0.5rem',\r\n-      color: darkMode ? '#e2e8f0' : '#1e293b',\r\n-    },\r\n-    serviceDesc: {\r\n-      color: darkMode ? '#a0aec0' : '#64748b',\r\n-      fontSize: '1rem',\r\n-      lineHeight: '1.5',\r\n-    },\r\n-    sectionTitle: {\r\n-      fontSize: '2rem',\r\n-      fontWeight: '700',\r\n-      marginBottom: '1.5rem',\r\n-      color: darkMode ? '#e2e8f0' : '#1e293b',\r\n-      textAlign: 'center',\r\n-    },\r\n-    quickLinkButton: {\r\n-      padding: '0.75rem 1.5rem',\r\n-      borderRadius: '50px',\r\n-      border: 'none',\r\n-      backgroundColor: darkMode ? '#2d3748' : '#e2e8f0',\r\n-      color: darkMode ? '#e2e8f0' : '#1e293b',\r\n-      fontWeight: '600',\r\n-      cursor: 'pointer',\r\n-      transition: 'all 0.2s',\r\n-      display: 'flex',\r\n-      alignItems: 'center',\r\n-      gap: '0.5rem',\r\n-      fontSize: '1rem',\r\n-      ':hover': {\r\n-        backgroundColor: darkMode ? '#4a5568' : '#cbd5e1',\r\n-        transform: 'scale(1.05)',\r\n-      },\r\n-    },\r\n-    popupOverlay: {\r\n-      position: 'fixed',\r\n-      top: 0,\r\n-      left: 0,\r\n-      right: 0,\r\n-      bottom: 0,\r\n-      backgroundColor: 'rgba(0, 0, 0, 0.7)',\r\n-      display: 'flex',\r\n-      justifyContent: 'center',\r\n-      alignItems: 'center',\r\n-      zIndex: 1000,\r\n-    },\r\n-    popupContent: {\r\n-      backgroundColor: darkMode ? '#2d3748' : 'white',\r\n-      borderRadius: '16px',\r\n-      padding: '2rem',\r\n-      maxWidth: '500px',\r\n-      width: '90%',\r\n-      boxShadow: '0 10px 25px rgba(0, 0, 0, 0.2)',\r\n-      position: 'relative',\r\n-      border: darkMode ? '1px solid #4a5568' : '1px solid #e2e8f0',\r\n-    },\r\n-    popupClose: {\r\n-      position: 'absolute',\r\n-      top: '1rem',\r\n-      right: '1rem',\r\n-      background: 'none',\r\n-      border: 'none',\r\n-      fontSize: '1.5rem',\r\n-      cursor: 'pointer',\r\n-      color: darkMode ? '#a0aec0' : '#64748b',\r\n-    },\r\n-    popupTitle: {\r\n-      fontSize: '1.8rem',\r\n-      fontWeight: '700',\r\n-      marginBottom: '1rem',\r\n-      color: darkMode ? '#e2e8f0' : '#1e293b',\r\n-    },\r\n-    popupDesc: {\r\n-      color: darkMode ? '#a0aec0' : '#64748b',\r\n-      fontSize: '1.1rem',\r\n-      lineHeight: '1.6',\r\n-      marginBottom: '2rem',\r\n-    },\r\n-    popupButton: {\r\n-      padding: '0.75rem 1.5rem',\r\n-      borderRadius: '8px',\r\n-      border: 'none',\r\n-      backgroundColor: darkMode ? '#4a5568' : '#3b82f6',\r\n-      color: 'white',\r\n-      fontWeight: '600',\r\n-      cursor: 'pointer',\r\n-      transition: 'all 0.2s',\r\n-      fontSize: '1rem',\r\n-      ':hover': {\r\n-        backgroundColor: darkMode ? '#5f6b82' : '#2563eb',\r\n-      },\r\n-    },\r\n-  };\r\n-\r\n-  const styles = {\r\n-    ...dynamicStyles,\r\n-    heroContent: {\r\n-      maxWidth: '800px',\r\n-      margin: '0 auto',\r\n-    },\r\n-    title: {\r\n-      fontSize: '3.5rem',\r\n-      fontWeight: '800',\r\n-      marginBottom: '0.5rem',\r\n-      textShadow: '2px 2px 4px rgba(0, 0, 0, 0.2)',\r\n-    },\r\n-    tagline: {\r\n-      fontSize: '1.25rem',\r\n-      marginBottom: '2rem',\r\n-      opacity: 0.9,\r\n-    },\r\n-    searchBox: {\r\n-      display: 'flex',\r\n-      maxWidth: '600px',\r\n-      margin: '0 auto',\r\n-      borderRadius: '50px',\r\n-      overflow: 'hidden',\r\n-      boxShadow: '0 4px 10px rgba(0, 0, 0, 0.2)',\r\n-    },\r\n-    searchInput: {\r\n-      flex: 1,\r\n-      padding: '1rem 1.5rem',\r\n-      border: 'none',\r\n-      fontSize: '1rem',\r\n-      outline: 'none',\r\n-      backgroundColor: darkMode ? '#2d3748' : 'white',\r\n-      color: darkMode ? '#e2e8f0' : '#1e293b',\r\n-    },\r\n-    searchButton: {\r\n-      backgroundColor: darkMode ? '#4a5568' : '#1e40af',\r\n-      color: 'white',\r\n-      border: 'none',\r\n-      padding: '0 1.5rem',\r\n-      cursor: 'pointer',\r\n-      fontSize: '1.25rem',\r\n-      transition: 'background-color 0.2s',\r\n-      ':hover': {\r\n-        backgroundColor: darkMode ? '#5f6b82' : '#1e3a8a',\r\n-      },\r\n-    },\r\n-    section: {\r\n-      padding: '2rem 1rem',\r\n-      maxWidth: '1200px',\r\n-      margin: '0 auto',\r\n-    },\r\n-    servicesGrid: {\r\n-      display: 'grid',\r\n-      gridTemplateColumns: 'repeat(auto-fit, minmax(250px, 1fr))',\r\n-      gap: '1.5rem',\r\n-      marginTop: '1rem',\r\n-    },\r\n-    serviceIcon: {\r\n-      fontSize: '3rem',\r\n-      marginBottom: '1rem',\r\n-    },\r\n-    quickLinks: {\r\n-      display: 'flex',\r\n-      justifyContent: 'center',\r\n-      gap: '1rem',\r\n-      flexWrap: 'wrap',\r\n-    },\r\n-    themeToggle: {\r\n-      position: 'fixed',\r\n-      top: '1.5rem',\r\n-      right: '1.5rem',\r\n-      background: darkMode ? '#4a5568' : '#e2e8f0',\r\n-      border: 'none',\r\n-      borderRadius: '50%',\r\n-      width: '40px',\r\n-      height: '40px',\r\n-      display: 'flex',\r\n-      alignItems: 'center',\r\n-      justifyContent: 'center',\r\n-      cursor: 'pointer',\r\n-      transition: 'all 0.3s ease',\r\n-      boxShadow: '0 2px 5px rgba(0, 0, 0, 0.2)',\r\n-      zIndex: 100,\r\n-      ':hover': {\r\n-        transform: 'scale(1.1)',\r\n-      },\r\n-    },\r\n-  };\r\n-\r\n-  return (\r\n-    <div className=\"home-page\" style={styles.page}>\r\n-      {/* Theme Toggle Button */}\r\n-      <button \r\n-        onClick={toggleDarkMode} \r\n-        style={styles.themeToggle}\r\n-        aria-label={darkMode ? 'Switch to light mode' : 'Switch to dark mode'}\r\n-      >\r\n-        {darkMode ? '‚òÄÔ∏è' : 'üåô'}\r\n-      </button>\r\n-      \r\n-      {/* Hero Section */}\r\n-      <section className=\"hero\" style={styles.hero}>\r\n-        <div className=\"hero-content\" style={styles.heroContent}>\r\n-          <h1 style={styles.title}>UrbanFlow</h1>\r\n-          <p className=\"tagline\" style={styles.tagline}>Your seamless urban living companion</p>\r\n-          \r\n-          <form onSubmit={handleSearch} className=\"search-box\" style={styles.searchBox}>\r\n-            <input\r\n-              type=\"text\"\r\n-              placeholder=\"Search for restaurants, services...\"\r\n-              value={searchQuery}\r\n-              onChange={(e) => setSearchQuery(e.target.value)}\r\n-              style={styles.searchInput}\r\n-            />\r\n-            <button type=\"submit\" style={styles.searchButton}>\r\n-              <span>üîç</span>\r\n-            </button>\r\n-          </form>\r\n-        </div>\r\n-      </section>\r\n-\r\n-      {/* Services Grid */}\r\n-      <section className=\"services-section\" style={styles.section}>\r\n-        <h2 style={styles.sectionTitle}>What do you need today?</h2>\r\n-        <div className=\"services-grid\" style={styles.servicesGrid}>\r\n-          {services.map((service) => (\r\n-            <div \r\n-              key={service.name} \r\n-              className=\"service-card\"\r\n-              style={{ \r\n-                ...styles.serviceCard,\r\n-                backgroundColor: darkMode \r\n-                  ? `${service.color}20` \r\n-                  : `${service.color}10`,\r\n-                borderColor: service.color,\r\n-                '--card-color': service.color\r\n-              }}\r\n-              onClick={() => openServicePopup(service)}\r\n-            >\r\n-              <div className=\"service-icon\" style={styles.serviceIcon}>{service.icon}</div>\r\n-              <h3 style={styles.serviceTitle}>{service.name}</h3>\r\n-              <p style={styles.serviceDesc}>{service.desc}</p>\r\n-              <div className=\"card-hover-effect\"></div>\r\n-            </div>\r\n-          ))}\r\n-        </div>\r\n-      </section>\r\n-\r\n-      {/* Featured Section */}\r\n-      <section className=\"featured-section\" style={styles.section}>\r\n-        <h2 style={styles.sectionTitle}>Quick Access</h2>\r\n-        <div className=\"quick-links\" style={styles.quickLinks}>\r\n-          <button \r\n-            onClick={() => navigate('/transport?from=home&to=downtown')}\r\n-            style={styles.quickLinkButton}\r\n-          >\r\n-            üöï To Downtown\r\n-          </button>\r\n-          <button \r\n-            onClick={() => navigate('/food?category=fastfood')}\r\n-            style={styles.quickLinkButton}\r\n-          >\r\n-            üçü Fast Food\r\n-          </button>\r\n-          <button \r\n-            onClick={() => navigate('/food?category=coffee')}\r\n-            style={styles.quickLinkButton}\r\n-          >\r\n-            ‚òï Coffee Shops\r\n-          </button>\r\n-        </div>\r\n-      </section>\r\n-\r\n-      {/* Service Popup */}\r\n-      {selectedService && (\r\n-        <div style={styles.popupOverlay} onClick={closePopup}>\r\n-          <div style={styles.popupContent} onClick={(e) => e.stopPropagation()}>\r\n-            <button style={styles.popupClose} onClick={closePopup}>√ó</button>\r\n-            <div style={{ \r\n-              display: 'flex', \r\n-              alignItems: 'center', \r\n-              gap: '1rem',\r\n-              marginBottom: '1.5rem'\r\n-            }}>\r\n-              <span style={{ fontSize: '2.5rem' }}>{selectedService.icon}</span>\r\n-              <h3 style={styles.popupTitle}>{selectedService.name}</h3>\r\n-            </div>\r\n-            <p style={styles.popupDesc}>{selectedService.details}</p>\r\n-            <button \r\n-              style={{ \r\n-                ...styles.popupButton,\r\n-                backgroundColor: selectedService.color,\r\n-                ':hover': {\r\n-                  backgroundColor: `${selectedService.color}90`,\r\n-                }\r\n-              }}\r\n-              onClick={() => {\r\n-                navigate(selectedService.path);\r\n-                closePopup();\r\n-              }}\r\n-            >\r\n-              Explore {selectedService.name}\r\n-            </button>\r\n-          </div>\r\n-        </div>\r\n-      )}\r\n-    </div>\r\n-  );\r\n-}\n-import { useState } from 'react';\r\n-import { useNavigate } from 'react-router-dom';\r\n-\r\n-export default function Home() {\r\n-  const navigate = useNavigate();\r\n-  const [searchQuery, setSearchQuery] = useState('');\r\n-  const [darkMode, setDarkMode] = useState(false);\r\n-  const [selectedService, setSelectedService] = useState(null);\r\n-\r\n-  const services = [\r\n-    { \r\n-      name: 'Transport', \r\n-      path: '/transport', \r\n-      icon: 'üöå', \r\n-      desc: 'Plan your multi-modal journey across the city',\r\n-      color: '#3b82f6',\r\n-      details: 'Find the best routes combining metro, buses, and bikes. Real-time updates and ticket purchasing available.'\r\n-    },\r\n-    { \r\n-      name: 'Food Delivery', \r\n-      path: '/food', \r\n-      icon: 'üçî', \r\n-      desc: 'Discover local restaurants and cafes',\r\n-      color: '#ef4444',\r\n-      details: 'Order from hundreds of restaurants with special discounts. Track your delivery in real-time.'\r\n-    },\r\n-    { \r\n-      name: 'Groceries', \r\n-      path: '/food', \r\n-      icon: 'üõí', \r\n-      desc: 'Get groceries delivered in minutes',\r\n-      color: '#10b981',\r\n-      details: 'Same-day delivery from local supermarkets. Schedule recurring orders for essentials.'\r\n-    },\r\n-    { \r\n-      name: 'Services', \r\n-      path: '/food', \r\n-      icon: 'üõ†Ô∏è', \r\n-      desc: 'Find urban services near you',\r\n-      color: '#8b5cf6',\r\n-      details: 'Book home services, repairs, and professional help with verified providers.'\r\n-    }\r\n-  ];\r\n-\r\n-  const handleSearch = (e) => {\r\n-    e.preventDefault();\r\n-    if (searchQuery.trim()) {\r\n-      navigate(`/food?search=${encodeURIComponent(searchQuery)}`);\r\n-    }\r\n-  };\r\n-\r\n-  const toggleDarkMode = () => {\r\n-    setDarkMode(!darkMode);\r\n-  };\r\n-\r\n-  const openServicePopup = (service) => {\r\n-    setSelectedService(service);\r\n-  };\r\n-\r\n-  const closePopup = () => {\r\n-    setSelectedService(null);\r\n-  };\r\n-\r\n-  // Dynamic styles based on dark mode\r\n-  const dynamicStyles = {\r\n-    page: {\r\n-      backgroundColor: darkMode ? '#1a202c' : '#f8fafc',\r\n-      minHeight: '100vh',\r\n-      paddingBottom: '3rem',\r\n-      color: darkMode ? '#e2e8f0' : '#1e293b',\r\n-      transition: 'all 0.3s ease',\r\n-    },\r\n-    hero: {\r\n-      background: darkMode \r\n-        ? 'linear-gradient(135deg, #2d3748 0%, #1a202c 100%)' \r\n-        : 'linear-gradient(135deg, #6b46c1 0%, #3b82f6 100%)',\r\n-      color: 'white',\r\n-      padding: '4rem 1rem',\r\n-      textAlign: 'center',\r\n-      borderRadius: '0 0 20px 20px',\r\n-      boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',\r\n-    },\r\n-    serviceCard: {\r\n-      padding: '2rem 1.5rem',\r\n-      borderRadius: '16px',\r\n-      border: '2px solid',\r\n-      textAlign: 'center',\r\n-      cursor: 'pointer',\r\n-      transition: 'transform 0.3s, box-shadow 0.3s',\r\n-      position: 'relative',\r\n-      overflow: 'hidden',\r\n-      backdropFilter: 'blur(10px)',\r\n-      ':hover': {\r\n-        transform: 'translateY(-5px)',\r\n-        boxShadow: '0 10px 20px rgba(0, 0, 0, 0.1)',\r\n-      },\r\n-    },\r\n-    serviceTitle: {\r\n-      fontSize: '1.5rem',\r\n-      fontWeight: '600',\r\n-      marginBottom: '0.5rem',\r\n-      color: darkMode ? '#e2e8f0' : '#1e293b',\r\n-    },\r\n-    serviceDesc: {\r\n-      color: darkMode ? '#a0aec0' : '#64748b',\r\n-      fontSize: '1rem',\r\n-      lineHeight: '1.5',\r\n-    },\r\n-    sectionTitle: {\r\n-      fontSize: '2rem',\r\n-      fontWeight: '700',\r\n-      marginBottom: '1.5rem',\r\n-      color: darkMode ? '#e2e8f0' : '#1e293b',\r\n-      textAlign: 'center',\r\n-    },\r\n-    quickLinkButton: {\r\n-      padding: '0.75rem 1.5rem',\r\n-      borderRadius: '50px',\r\n-      border: 'none',\r\n-      backgroundColor: darkMode ? '#2d3748' : '#e2e8f0',\r\n-      color: darkMode ? '#e2e8f0' : '#1e293b',\r\n-      fontWeight: '600',\r\n-      cursor: 'pointer',\r\n-      transition: 'all 0.2s',\r\n-      display: 'flex',\r\n-      alignItems: 'center',\r\n-      gap: '0.5rem',\r\n-      fontSize: '1rem',\r\n-      ':hover': {\r\n-        backgroundColor: darkMode ? '#4a5568' : '#cbd5e1',\r\n-        transform: 'scale(1.05)',\r\n-      },\r\n-    },\r\n-    popupOverlay: {\r\n-      position: 'fixed',\r\n-      top: 0,\r\n-      left: 0,\r\n-      right: 0,\r\n-      bottom: 0,\r\n-      backgroundColor: 'rgba(0, 0, 0, 0.7)',\r\n-      display: 'flex',\r\n-      justifyContent: 'center',\r\n-      alignItems: 'center',\r\n-      zIndex: 1000,\r\n-    },\r\n-    popupContent: {\r\n-      backgroundColor: darkMode ? '#2d3748' : 'white',\r\n-      borderRadius: '16px',\r\n-      padding: '2rem',\r\n-      maxWidth: '500px',\r\n-      width: '90%',\r\n-      boxShadow: '0 10px 25px rgba(0, 0, 0, 0.2)',\r\n-      position: 'relative',\r\n-      border: darkMode ? '1px solid #4a5568' : '1px solid #e2e8f0',\r\n-    },\r\n-    popupClose: {\r\n-      position: 'absolute',\r\n-      top: '1rem',\r\n-      right: '1rem',\r\n-      background: 'none',\r\n-      border: 'none',\r\n-      fontSize: '1.5rem',\r\n-      cursor: 'pointer',\r\n-      color: darkMode ? '#a0aec0' : '#64748b',\r\n-    },\r\n-    popupTitle: {\r\n-      fontSize: '1.8rem',\r\n-      fontWeight: '700',\r\n-      marginBottom: '1rem',\r\n-      color: darkMode ? '#e2e8f0' : '#1e293b',\r\n-    },\r\n-    popupDesc: {\r\n-      color: darkMode ? '#a0aec0' : '#64748b',\r\n-      fontSize: '1.1rem',\r\n-      lineHeight: '1.6',\r\n-      marginBottom: '2rem',\r\n-    },\r\n-    popupButton: {\r\n-      padding: '0.75rem 1.5rem',\r\n-      borderRadius: '8px',\r\n-      border: 'none',\r\n-      backgroundColor: darkMode ? '#4a5568' : '#3b82f6',\r\n-      color: 'white',\r\n-      fontWeight: '600',\r\n-      cursor: 'pointer',\r\n-      transition: 'all 0.2s',\r\n-      fontSize: '1rem',\r\n-      ':hover': {\r\n-        backgroundColor: darkMode ? '#5f6b82' : '#2563eb',\r\n-      },\r\n-    },\r\n-  };\r\n-\r\n-  const styles = {\r\n-    ...dynamicStyles,\r\n-    heroContent: {\r\n-      maxWidth: '800px',\r\n-      margin: '0 auto',\r\n-    },\r\n-    title: {\r\n-      fontSize: '3.5rem',\r\n-      fontWeight: '800',\r\n-      marginBottom: '0.5rem',\r\n-      textShadow: '2px 2px 4px rgba(0, 0, 0, 0.2)',\r\n-    },\r\n-    tagline: {\r\n-      fontSize: '1.25rem',\r\n-      marginBottom: '2rem',\r\n-      opacity: 0.9,\r\n-    },\r\n-    searchBox: {\r\n-      display: 'flex',\r\n-      maxWidth: '600px',\r\n-      margin: '0 auto',\r\n-      borderRadius: '50px',\r\n-      overflow: 'hidden',\r\n-      boxShadow: '0 4px 10px rgba(0, 0, 0, 0.2)',\r\n-    },\r\n-    searchInput: {\r\n-      flex: 1,\r\n-      padding: '1rem 1.5rem',\r\n-      border: 'none',\r\n-      fontSize: '1rem',\r\n-      outline: 'none',\r\n-      backgroundColor: darkMode ? '#2d3748' : 'white',\r\n-      color: darkMode ? '#e2e8f0' : '#1e293b',\r\n-    },\r\n-    searchButton: {\r\n-      backgroundColor: darkMode ? '#4a5568' : '#1e40af',\r\n-      color: 'white',\r\n-      border: 'none',\r\n-      padding: '0 1.5rem',\r\n-      cursor: 'pointer',\r\n-      fontSize: '1.25rem',\r\n-      transition: 'background-color 0.2s',\r\n-      ':hover': {\r\n-        backgroundColor: darkMode ? '#5f6b82' : '#1e3a8a',\r\n-      },\r\n-    },\r\n-    section: {\r\n-      padding: '2rem 1rem',\r\n-      maxWidth: '1200px',\r\n-      margin: '0 auto',\r\n-    },\r\n-    servicesGrid: {\r\n-      display: 'grid',\r\n-      gridTemplateColumns: 'repeat(auto-fit, minmax(250px, 1fr))',\r\n-      gap: '1.5rem',\r\n-      marginTop: '1rem',\r\n-    },\r\n-    serviceIcon: {\r\n-      fontSize: '3rem',\r\n-      marginBottom: '1rem',\r\n-    },\r\n-    quickLinks: {\r\n-      display: 'flex',\r\n-      justifyContent: 'center',\r\n-      gap: '1rem',\r\n-      flexWrap: 'wrap',\r\n-    },\r\n-    themeToggle: {\r\n-      position: 'fixed',\r\n-      top: '1.5rem',\r\n-      right: '1.5rem',\r\n-      background: darkMode ? '#4a5568' : '#e2e8f0',\r\n-      border: 'none',\r\n-      borderRadius: '50%',\r\n-      width: '40px',\r\n-      height: '40px',\r\n-      display: 'flex',\r\n-      alignItems: 'center',\r\n-      justifyContent: 'center',\r\n-      cursor: 'pointer',\r\n-      transition: 'all 0.3s ease',\r\n-      boxShadow: '0 2px 5px rgba(0, 0, 0, 0.2)',\r\n-      zIndex: 100,\r\n-      ':hover': {\r\n-        transform: 'scale(1.1)',\r\n-      },\r\n-    },\r\n-  };\r\n-\r\n-  return (\r\n-    <div className=\"home-page\" style={styles.page}>\r\n-      {/* Theme Toggle Button */}\r\n-      <button \r\n-        onClick={toggleDarkMode} \r\n-        style={styles.themeToggle}\r\n-        aria-label={darkMode ? 'Switch to light mode' : 'Switch to dark mode'}\r\n-      >\r\n-        {darkMode ? '‚òÄÔ∏è' : 'üåô'}\r\n-      </button>\r\n-      \r\n-      {/* Hero Section */}\r\n-      <section className=\"hero\" style={styles.hero}>\r\n-        <div className=\"hero-content\" style={styles.heroContent}>\r\n-          <h1 style={styles.title}>UrbanFlow</h1>\r\n-          <p className=\"tagline\" style={styles.tagline}>Your seamless urban living companion</p>\r\n-          \r\n-          <form onSubmit={handleSearch} className=\"search-box\" style={styles.searchBox}>\r\n-            <input\r\n-              type=\"text\"\r\n-              placeholder=\"Search for restaurants, services...\"\r\n-              value={searchQuery}\r\n-              onChange={(e) => setSearchQuery(e.target.value)}\r\n-              style={styles.searchInput}\r\n-            />\r\n-            <button type=\"submit\" style={styles.searchButton}>\r\n-              <span>üîç</span>\r\n-            </button>\r\n-          </form>\r\n-        </div>\r\n-      </section>\r\n-\r\n-      {/* Services Grid */}\r\n-      <section className=\"services-section\" style={styles.section}>\r\n-        <h2 style={styles.sectionTitle}>What do you need today?</h2>\r\n-        <div className=\"services-grid\" style={styles.servicesGrid}>\r\n-          {services.map((service) => (\r\n-            <div \r\n-              key={service.name} \r\n-              className=\"service-card\"\r\n-              style={{ \r\n-                ...styles.serviceCard,\r\n-                backgroundColor: darkMode \r\n-                  ? `${service.color}20` \r\n-                  : `${service.color}10`,\r\n-                borderColor: service.color,\r\n-                '--card-color': service.color\r\n-              }}\r\n-              onClick={() => openServicePopup(service)}\r\n-            >\r\n-              <div className=\"service-icon\" style={styles.serviceIcon}>{service.icon}</div>\r\n-              <h3 style={styles.serviceTitle}>{service.name}</h3>\r\n-              <p style={styles.serviceDesc}>{service.desc}</p>\r\n-              <div className=\"card-hover-effect\"></div>\r\n-            </div>\r\n-          ))}\r\n-        </div>\r\n-      </section>\r\n-\r\n-      {/* Featured Section */}\r\n-      <section className=\"featured-section\" style={styles.section}>\r\n-        <h2 style={styles.sectionTitle}>Quick Access</h2>\r\n-        <div className=\"quick-links\" style={styles.quickLinks}>\r\n-          <button \r\n-            onClick={() => navigate('/transport?from=home&to=downtown')}\r\n-            style={styles.quickLinkButton}\r\n-          >\r\n-            üöï To Downtown\r\n-          </button>\r\n-          <button \r\n-            onClick={() => navigate('/food?category=fastfood')}\r\n-            style={styles.quickLinkButton}\r\n-          >\r\n-            üçü Fast Food\r\n-          </button>\r\n-          <button \r\n-            onClick={() => navigate('/food?category=coffee')}\r\n-            style={styles.quickLinkButton}\r\n-          >\r\n-            ‚òï Coffee Shops\r\n-          </button>\r\n-        </div>\r\n-      </section>\r\n-\r\n-      {/* Service Popup */}\r\n-      {selectedService && (\r\n-        <div style={styles.popupOverlay} onClick={closePopup}>\r\n-          <div style={styles.popupContent} onClick={(e) => e.stopPropagation()}>\r\n-            <button style={styles.popupClose} onClick={closePopup}>√ó</button>\r\n-            <div style={{ \r\n-              display: 'flex', \r\n-              alignItems: 'center', \r\n-              gap: '1rem',\r\n-              marginBottom: '1.5rem'\r\n-            }}>\r\n-              <span style={{ fontSize: '2.5rem' }}>{selectedService.icon}</span>\r\n-              <h3 style={styles.popupTitle}>{selectedService.name}</h3>\r\n-            </div>\r\n-            <p style={styles.popupDesc}>{selectedService.details}</p>\r\n-            <button \r\n-              style={{ \r\n-                ...styles.popupButton,\r\n-                backgroundColor: selectedService.color,\r\n-                ':hover': {\r\n-                  backgroundColor: `${selectedService.color}90`,\r\n-                }\r\n-              }}\r\n-              onClick={() => {\r\n-                navigate(selectedService.path);\r\n-                closePopup();\r\n-              }}\r\n-            >\r\n-              Explore {selectedService.name}\r\n\\ No newline at end of file\n-            </button>\r\n-          </div>\r\n-        </div>\r\n-      )}\r\n-    </div>\r\n-  );\r\n-}\n+};\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752651365775,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,793 @@\n+import { useState, useEffect, useRef } from 'react';\r\n+import { useNavigate } from 'react-router-dom';\r\n+\r\n+// UrbanBuddy AI Assistant Component\r\n+const UrbanBuddy = ({ darkMode, onChatOpen }) => {\r\n+  const [position, setPosition] = useState({ x: 20, y: 50 });\r\n+  const [isActive, setIsActive] = useState(false);\r\n+  const botRef = useRef(null);\r\n+  const animationRef = useRef(null);\r\n+  const lastInteractionTime = useRef(Date.now());\r\n+\r\n+  // Make the bot wander with more dynamic movement\r\n+  useEffect(() => {\r\n+    const moveInterval = setInterval(() => {\r\n+      setPosition(prev => {\r\n+        const now = Date.now();\r\n+        const timeSinceLastInteraction = now - lastInteractionTime.current;\r\n+        \r\n+        // More active movement right after interaction\r\n+        const speedMultiplier = timeSinceLastInteraction < 5000 ? 2 : 1;\r\n+        \r\n+        let newX = prev.x + (3 * speedMultiplier);\r\n+        let newY = prev.y + (Math.random() * 6 - 3);\r\n+        \r\n+        // Bounce off edges\r\n+        if (newX > window.innerWidth - 80) {\r\n+          newX = window.innerWidth - 80;\r\n+          triggerAnimation('spin');\r\n+        }\r\n+        if (newX < 20) {\r\n+          newX = 20;\r\n+          triggerAnimation('spin');\r\n+        }\r\n+        if (newY < 20) newY = 20;\r\n+        if (newY > window.innerHeight - 100) newY = window.innerHeight - 100;\r\n+        \r\n+        return { x: newX, y: newY };\r\n+      });\r\n+    }, 100);\r\n+\r\n+    return () => clearInterval(moveInterval);\r\n+  }, []);\r\n+\r\n+  const triggerAnimation = (type) => {\r\n+    if (animationRef.current) {\r\n+      clearTimeout(animationRef.current);\r\n+    }\r\n+    \r\n+    const botElement = botRef.current;\r\n+    if (!botElement) return;\r\n+    \r\n+    botElement.style.animation = 'none';\r\n+    void botElement.offsetWidth; // Trigger reflow\r\n+    \r\n+    switch(type) {\r\n+      case 'spin':\r\n+        botElement.style.animation = 'spin 1s ease';\r\n+        break;\r\n+      case 'bounce':\r\n+        botElement.style.animation = 'bounce 0.5s ease';\r\n+        break;\r\n+      case 'wobble':\r\n+        botElement.style.animation = 'wobble 0.8s ease';\r\n+        break;\r\n+      default:\r\n+        botElement.style.animation = '';\r\n+    }\r\n+    \r\n+    animationRef.current = setTimeout(() => {\r\n+      if (botElement) botElement.style.animation = '';\r\n+    }, 1000);\r\n+  };\r\n+\r\n+  const handleClick = () => {\r\n+    lastInteractionTime.current = Date.now();\r\n+    setIsActive(true);\r\n+    triggerAnimation('bounce');\r\n+    \r\n+    // Trigger chat opening in parent component\r\n+    onChatOpen();\r\n+    \r\n+    // Return to normal after a delay\r\n+    setTimeout(() => {\r\n+      setIsActive(false);\r\n+    }, 3000);\r\n+  };\r\n+\r\n+  // Custom animations\r\n+  const animations = `\r\n+    @keyframes spin {\r\n+      0% { transform: rotate(0deg); }\r\n+      100% { transform: rotate(360deg); }\r\n+    }\r\n+    @keyframes bounce {\r\n+      0%, 100% { transform: translateY(0); }\r\n+      50% { transform: translateY(-20px); }\r\n+    }\r\n+    @keyframes wobble {\r\n+      0%, 100% { transform: rotate(0deg); }\r\n+      25% { transform: rotate(5deg); }\r\n+      75% { transform: rotate(-5deg); }\r\n+    }\r\n+    @keyframes float {\r\n+      0% { transform: translateY(0px); }\r\n+      50% { transform: translateY(-10px); }\r\n+      100% { transform: translateY(0px); }\r\n+    }\r\n+  `;\r\n+\r\n+  return (\r\n+    <>\r\n+      <style>{animations}</style>\r\n+      <div \r\n+        ref={botRef}\r\n+        onClick={handleClick}\r\n+        style={{\r\n+          position: 'fixed',\r\n+          left: `${position.x}px`,\r\n+          top: `${position.y}px`,\r\n+          fontSize: '2.5rem',\r\n+          cursor: 'pointer',\r\n+          transition: 'all 0.3s ease',\r\n+          zIndex: 100,\r\n+          filter: darkMode \r\n+            ? 'drop-shadow(0 0 8px rgba(255,255,255,0.7))' \r\n+            : 'drop-shadow(0 0 8px rgba(0,0,0,0.3))',\r\n+          userSelect: 'none',\r\n+          animation: 'float 4s ease-in-out infinite'\r\n+        }}\r\n+      >\r\n+        <div style={{ \r\n+          position: 'relative',\r\n+          display: 'flex',\r\n+          flexDirection: 'column',\r\n+          alignItems: 'center'\r\n+        }}>\r\n+          {/* Bot icon */}\r\n+          <div style={{\r\n+            position: 'relative',\r\n+            width: '60px',\r\n+            height: '60px',\r\n+            backgroundColor: darkMode ? '#4a5568' : '#3b82f6',\r\n+            borderRadius: '50%',\r\n+            display: 'flex',\r\n+            justifyContent: 'center',\r\n+            alignItems: 'center',\r\n+            color: 'white'\r\n+          }}>\r\n+            <span style={{ fontSize: '1.8rem' }}>ü§ñ</span>\r\n+          </div>\r\n+        </div>\r\n+      </div>\r\n+    </>\r\n+  );\r\n+};\r\n+\r\n+// Chat Modal Component with Simulated AI\r\n+const ChatModal = ({ darkMode, onClose }) => {\r\n+  const [messages, setMessages] = useState([\r\n+    { text: \"Hello! I'm UrbanBuddy, your AI assistant for urban living. How can I help you today?\", sender: 'bot' }\r\n+  ]);\r\n+  const [inputValue, setInputValue] = useState('');\r\n+  const [isTyping, setIsTyping] = useState(false);\r\n+  const chatEndRef = useRef(null);\r\n+  const inputRef = useRef(null);\r\n+\r\n+  // Auto-scroll to bottom and focus input\r\n+  useEffect(() => {\r\n+    chatEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n+    inputRef.current?.focus();\r\n+  }, [messages]);\r\n+\r\n+  // Simulated AI responses\r\n+  const generateResponse = async (userMessage) => {\r\n+    setIsTyping(true);\r\n+    \r\n+    // Simulate API delay\r\n+    await new Promise(resolve => setTimeout(resolve, 1000));\r\n+    \r\n+    // Create context-aware responses\r\n+    const responses = {\r\n+      'transport': \"For transport options, I can suggest checking the Transport section for real-time bus schedules and bike sharing locations.\",\r\n+      'food': \"For food delivery, we partner with local restaurants. Check the Food Delivery section for current promotions!\",\r\n+      'groceries': \"You can get groceries delivered within 30 minutes from our partner stores in your area.\",\r\n+      'services': \"Urban services like plumbing, electrical, and cleaning can be booked directly in the Services section.\",\r\n+      'hello': \"Hi there! How can I assist with your urban living needs today?\",\r\n+      'help': \"I can help with transport, food delivery, groceries, and urban services. What do you need?\",\r\n+      'default': \"I'm here to help with urban living questions! Try asking about transport, food delivery, or other city services.\"\r\n+    };\r\n+    \r\n+    // Check for keywords in the message\r\n+    const lowerMsg = userMessage.toLowerCase();\r\n+    let response = responses.default;\r\n+    \r\n+    if (lowerMsg.includes('transport') || lowerMsg.includes('bus') || lowerMsg.includes('metro')) {\r\n+      response = responses.transport;\r\n+    } else if (lowerMsg.includes('food') || lowerMsg.includes('restaurant') || lowerMsg.includes('eat')) {\r\n+      response = responses.food;\r\n+    } else if (lowerMsg.includes('grocery') || lowerMsg.includes('shopping')) {\r\n+      response = responses.groceries;\r\n+    } else if (lowerMsg.includes('service') || lowerMsg.includes('repair') || lowerMsg.includes('help')) {\r\n+      response = responses.services;\r\n+    } else if (lowerMsg.includes('hello') || lowerMsg.includes('hi')) {\r\n+      response = responses.hello;\r\n+    } else if (lowerMsg.includes('help')) {\r\n+      response = responses.help;\r\n+    }\r\n+    \r\n+    setMessages(prev => [...prev, { text: response, sender: 'bot' }]);\r\n+    setIsTyping(false);\r\n+  };\r\n+\r\n+  const handleSendMessage = async (e) => {\r\n+    e.preventDefault();\r\n+    if (inputValue.trim() && !isTyping) {\r\n+      // Add user message\r\n+      const userMessage = inputValue.trim();\r\n+      setMessages(prev => [...prev, { text: userMessage, sender: 'user' }]);\r\n+      setInputValue('');\r\n+      \r\n+      // Generate AI response\r\n+      await generateResponse(userMessage);\r\n+    }\r\n+  };\r\n+\r\n+  return (\r\n+    <div style={{\r\n+      position: 'fixed',\r\n+      bottom: '100px',\r\n+      right: '30px',\r\n+      width: '350px',\r\n+      maxWidth: '90%',\r\n+      backgroundColor: darkMode ? '#2d3748' : 'white',\r\n+      borderRadius: '16px',\r\n+      boxShadow: '0 10px 25px rgba(0, 0, 0, 0.2)',\r\n+      border: darkMode ? '1px solid #4a5568' : '1px solid #e2e8f0',\r\n+      zIndex: 1000,\r\n+      overflow: 'hidden',\r\n+      display: 'flex',\r\n+      flexDirection: 'column',\r\n+      maxHeight: '60vh'\r\n+    }}>\r\n+      {/* Chat header */}\r\n+      <div style={{\r\n+        padding: '1rem',\r\n+        backgroundColor: darkMode ? '#4a5568' : '#3b82f6',\r\n+        color: 'white',\r\n+        display: 'flex',\r\n+        justifyContent: 'space-between',\r\n+        alignItems: 'center'\r\n+      }}>\r\n+        <div style={{ display: 'flex', alignItems: 'center', gap: '0.5rem' }}>\r\n+          <span style={{ fontSize: '1.5rem' }}>ü§ñ</span>\r\n+          <h3 style={{ margin: 0 }}>UrbanBuddy AI</h3>\r\n+          {isTyping && (\r\n+            <span style={{ \r\n+              fontSize: '0.8rem',\r\n+              marginLeft: '0.5rem',\r\n+              opacity: 0.8\r\n+            }}>typing...</span>\r\n+          )}\r\n+        </div>\r\n+        <button \r\n+          onClick={onClose}\r\n+          style={{\r\n+            background: 'none',\r\n+            border: 'none',\r\n+            color: 'white',\r\n+            fontSize: '1.2rem',\r\n+            cursor: 'pointer'\r\n+          }}\r\n+        >\r\n+          √ó\r\n+        </button>\r\n+      </div>\r\n+      \r\n+      {/* Chat messages */}\r\n+      <div style={{\r\n+        flex: 1,\r\n+        padding: '1rem',\r\n+        overflowY: 'auto',\r\n+        display: 'flex',\r\n+        flexDirection: 'column',\r\n+        gap: '0.8rem'\r\n+      }}>\r\n+        {messages.map((msg, index) => (\r\n+          <div \r\n+            key={index}\r\n+            style={{\r\n+              alignSelf: msg.sender === 'user' ? 'flex-end' : 'flex-start',\r\n+              maxWidth: '80%',\r\n+              padding: '0.6rem 1rem',\r\n+              borderRadius: msg.sender === 'user' \r\n+                ? '18px 18px 0 18px' \r\n+                : '18px 18px 18px 0',\r\n+              backgroundColor: msg.sender === 'user'\r\n+                ? (darkMode ? '#4a5568' : '#3b82f6')\r\n+                : (darkMode ? '#4a5568' : '#e2e8f0'),\r\n+              color: msg.sender === 'user' ? 'white' : (darkMode ? 'white' : '#1e293b'),\r\n+              animation: msg.sender === 'bot' && index === messages.length - 1 \r\n+                ? 'fadeIn 0.3s ease' \r\n+                : 'none'\r\n+            }}\r\n+          >\r\n+            {msg.text}\r\n+          </div>\r\n+        ))}\r\n+        <div ref={chatEndRef} />\r\n+      </div>\r\n+      \r\n+      {/* Chat input */}\r\n+      <form onSubmit={handleSendMessage} style={{\r\n+        padding: '0.8rem',\r\n+        borderTop: darkMode ? '1px solid #4a5568' : '1px solid #e2e8f0',\r\n+        display: 'flex',\r\n+        gap: '0.5rem'\r\n+      }}>\r\n+        <input\r\n+          ref={inputRef}\r\n+          type=\"text\",\r\n+          value={inputValue},\r\n+          onChange={(e) => setInputValue(e.target.value)},\r\n+          placeholder=\"Ask me about urban living...\",\r\n+          disabled={isTyping},\r\n+          style={{\r\n+            flex: 1,\r\n+            padding: '0.6rem 1rem',\r\n+            borderRadius: '20px',\r\n+            border: darkMode ? '1px solid #4a5568' : '1px solid #e2e8f0',\r\n+            backgroundColor: darkMode ? '#2d3748' : 'white',\r\n+            color: darkMode ? 'white' : '#1e293b',\r\n+            outline: 'none',\r\n+            opacity: isTyping ? 0.7 : 1\r\n+          }}\r\n+        />\r\n+        <button \r\n+          type=\"submit\",\r\n+          disabled={isTyping},\r\n+          style={{\r\n+            background: isTyping \r\n+              ? (darkMode ? '#4a5568' : '#e2e8f0')\r\n+              : (darkMode ? '#4a5568' : '#3b82f6'),\r\n+            color: 'white',\r\n+            border: 'none',\r\n+            borderRadius: '50%',\r\n+            width: '40px',\r\n+            height: '40px',\r\n+            display: 'flex',\r\n+            alignItems: 'center',\r\n+            justifyContent: 'center',\r\n+            cursor: isTyping ? 'not-allowed' : 'pointer'\r\n+          }}\r\n+        >\r\n+          {isTyping ? '...' : '‚û§'}\r\n+        </button>\r\n+      </form>\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+// Main Home Component\r\n+export default function Home() {\r\n+  const navigate = useNavigate();\r\n+  const [searchQuery, setSearchQuery] = useState('');\r\n+  const [darkMode, setDarkMode] = useState(false);\r\n+  const [selectedService, setSelectedService] = useState(null);\r\n+  const [orderCount, setOrderCount] = useState(0);\r\n+  const [achievements, setAchievements] = useState([]);\r\n+  const [showChat, setShowChat] = useState(false);\r\n+\r\n+  const services = [\r\n+    { \r\n+      name: 'Transport', \r\n+      path: '/transport', \r\n+      icon: 'üöå', \r\n+      desc: 'Plan your multi-modal journey across the city',\r\n+      color: '#3b82f6',\r\n+      details: 'Find the best routes combining metro, buses, and bikes. Real-time updates and ticket purchasing available.'\r\n+    },\r\n+    { \r\n+      name: 'Food Delivery', \r\n+      path: '/food', \r\n+      icon: 'üçî', \r\n+      desc: 'Discover local restaurants and cafes',\r\n+      color: '#ef4444',\r\n+      details: 'Order from hundreds of restaurants with special discounts. Track your delivery in real-time.'\r\n+    },\r\n+    { \r\n+      name: 'Groceries', \r\n+      path: '/food', \r\n+      icon: 'üõí', \r\n+      desc: 'Get groceries delivered in minutes',\r\n+      color: '#10b981',\r\n+      details: 'Same-day delivery from local supermarkets. Schedule recurring orders for essentials.'\r\n+    },\r\n+    { \r\n+      name: 'Services', \r\n+      path: '/food', \r\n+      icon: 'üõ†Ô∏è', \r\n+      desc: 'Find urban services near you',\r\n+      color: '#8b5cf6',\r\n+      details: 'Book home services, repairs, and professional help with verified providers.'\r\n+    }\r\n+  ];\r\n+\r\n+  // Check for achievements\r\n+  useEffect(() => {\r\n+    if (orderCount === 1) {\r\n+      addAchievement('First Order!', 'üéâ');\r\n+    } else if (orderCount === 5) {\r\n+      addAchievement('Regular Customer!', 'üèÜ');\r\n+    } else if (orderCount === 10) {\r\n+      addAchievement('Super User!', 'üåü');\r\n+    }\r\n+  }, [orderCount]);\r\n+\r\n+  const addAchievement = (title, icon) => {\r\n+    if (!achievements.some(a => a.title === title)) {\r\n+      const newAchievement = { title, icon, id: Date.now() };\r\n+      setAchievements(prev => [...prev, newAchievement]);\r\n+      \r\n+      // Auto-hide achievement after 3 seconds\r\n+      setTimeout(() => {\r\n+        setAchievements(prev => prev.filter(a => a.id !== newAchievement.id));\r\n+      }, 3000);\r\n+    }\r\n+  };\r\n+\r\n+  const handleSearch = (e) => {\r\n+    e.preventDefault();\r\n+    if (searchQuery.trim()) {\r\n+      navigate(`/food?search=${encodeURIComponent(searchQuery)}`);\r\n+    }\r\n+  };\r\n+\r\n+  const toggleDarkMode = () => {\r\n+    setDarkMode(!darkMode);\r\n+  };\r\n+\r\n+  const openServicePopup = (service) => {\r\n+    setSelectedService(service);\r\n+    setOrderCount(prev => prev + 1);\r\n+  };\r\n+\r\n+  const closePopup = () => {\r\n+    setSelectedService(null);\r\n+  };\r\n+\r\n+  const toggleChat = () => {\r\n+    setShowChat(!showChat);\r\n+  };\r\n+\r\n+  return (\r\n+    <div style={{\r\n+      backgroundColor: darkMode ? '#1a202c' : '#f8fafc',\r\n+      minHeight: '100vh',\r\n+      paddingBottom: '3rem',\r\n+      color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+      transition: 'all 0.3s ease',\r\n+      position: 'relative'\r\n+    }}>\r\n+      {/* Theme Toggle Button */}\r\n+      <button \r\n+        onClick={toggleDarkMode} \r\n+        style={{\r\n+          position: 'fixed',\r\n+          top: '1.5rem',\r\n+          right: '1.5rem',\r\n+          background: darkMode ? '#4a5568' : '#e2e8f0',\r\n+          border: 'none',\r\n+          borderRadius: '50%',\r\n+          width: '40px',\r\n+          height: '40px',\r\n+          display: 'flex',\r\n+          alignItems: 'center',\r\n+          justifyContent: 'center',\r\n+          cursor: 'pointer',\r\n+          transition: 'all 0.3s ease',\r\n+          boxShadow: '0 2px 5px rgba(0, 0, 0, 0.2)',\r\n+          zIndex: 100\r\n+        }}\r\n+        aria-label={darkMode ? 'Switch to light mode' : 'Switch to dark mode'}\r\n+      >\r\n+        {darkMode ? '‚òÄÔ∏è' : 'üåô'}\r\n+      </button>\r\n+      \r\n+      {/* Hero Section with UrbanBuddy */}\r\n+      <section style={{\r\n+        background: darkMode \r\n+          ? 'linear-gradient(135deg, #1f2937 0%, #111827 100%)' \r\n+          : 'linear-gradient(135deg, #6366f1 0%, #8b5cf6 100%)',\r\n+        color: 'white',\r\n+        padding: '4rem 1rem',\r\n+        textAlign: 'center',\r\n+        borderRadius: '0 0 20px 20px',\r\n+        boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',\r\n+        position: 'relative',\r\n+        overflow: 'hidden',\r\n+        height: '300px'\r\n+      }}>\r\n+        <div style={{\r\n+          maxWidth: '800px',\r\n+          margin: '0 auto',\r\n+          position: 'relative',\r\n+          zIndex: 2\r\n+        }}>\r\n+          <h1 style={{\r\n+            fontSize: '3.5rem',\r\n+            fontWeight: '800',\r\n+            marginBottom: '0.5rem',\r\n+            textShadow: '2px 2px 4px rgba(0, 0, 0, 0.2)',\r\n+          }}>UrbanFlow</h1>\r\n+          <p style={{\r\n+            fontSize: '1.25rem',\r\n+            marginBottom: '2rem',\r\n+            opacity: 0.9,\r\n+          }}>Your seamless urban living companion</p>\r\n+          \r\n+          <form onSubmit={handleSearch} style={{\r\n+            display: 'flex',\r\n+            maxWidth: '600px',\r\n+            margin: '0 auto',\r\n+            borderRadius: '50px',\r\n+            overflow: 'hidden',\r\n+            boxShadow: '0 4px 10px rgba(0, 0, 0, 0.2)',\r\n+          }}>\r\n+            <input\r\n+              type=\"text\",\r\n+              placeholder=\"Search for restaurants, services...\",\r\n+              value={searchQuery},\r\n+              onChange={(e) => setSearchQuery(e.target.value)},\r\n+              style={{\r\n+                flex: 1,\r\n+                padding: '1rem 1.5rem',\r\n+                border: 'none',\r\n+                fontSize: '1rem',\r\n+                outline: 'none',\r\n+                backgroundColor: darkMode ? '#2d3748' : 'white',\r\n+                color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+              }}\r\n+            />\r\n+            <button type=\"submit\" style={{\r\n+              backgroundColor: darkMode ? '#4a5568' : '#1e40af',\r\n+              color: 'white',\r\n+              border: 'none',\r\n+              padding: '0 1.5rem',\r\n+              cursor: 'pointer',\r\n+              fontSize: '1.25rem',\r\n+              transition: 'background-color 0.2s'\r\n+            }}>\r\n+              <span>üîç</span>\r\n+            </button>\r\n+          </form>\r\n+        </div>\r\n+        <UrbanBuddy darkMode={darkMode} onChatOpen={toggleChat} />\r\n+      </section>\r\n+\r\n+      {/* Services Grid */}\r\n+      <section style={{\r\n+        padding: '2rem 1rem',\r\n+        maxWidth: '1200px',\r\n+        margin: '0 auto',\r\n+      }}>\r\n+        <h2 style={{\r\n+          fontSize: '2rem',\r\n+          fontWeight: '700',\r\n+          marginBottom: '1.5rem',\r\n+          color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+          textAlign: 'center',\r\n+        }}>What do you need today?</h2>\r\n+        <div style={{\r\n+          display: 'grid',\r\n+          gridTemplateColumns: 'repeat(auto-fit, minmax(250px, 1fr))',\r\n+          gap: '1.5rem',\r\n+          marginTop: '1rem',\r\n+        }}>\r\n+          {services.map((service) => (\r\n+            <div \r\n+              key={service.name} \r\n+              style={{ \r\n+                padding: '2rem 1.5rem',\r\n+                borderRadius: '16px',\r\n+                border: `2px solid ${service.color}`,\r\n+                textAlign: 'center',\r\n+                cursor: 'pointer',\r\n+                transition: 'transform 0.3s, box-shadow 0.3s',\r\n+                backgroundColor: darkMode \r\n+                  ? `${service.color}20` \r\n+                  : `${service.color}10`,\r\n+                ':hover': {\r\n+                  transform: 'translateY(-5px)',\r\n+                  boxShadow: '0 10px 20px rgba(0, 0, 0, 0.1)',\r\n+                }\r\n+              }}\r\n+              onClick={() => openServicePopup(service)}\r\n+            >\r\n+              <div style={{ \r\n+                fontSize: '3rem',\r\n+                marginBottom: '1rem',\r\n+                display: 'inline-block',\r\n+                animation: 'float 3s ease-in-out infinite'\r\n+              }}>{service.icon}</div>\r\n+              <h3 style={{fontSize: '1.5rem', fontWeight: '600', marginBottom: '0.5rem'}}>{service.name}</h3>\r\n+              <p style={{color: darkMode ? '#a0aec0' : '#64748b'}}>{service.desc}</p>\r\n+            </div>\r\n+          ))}\r\n+        </div>\r\n+      </section>\r\n+\r\n+      {/* Featured Section */}\r\n+      <section style={{\r\n+        padding: '2rem 1rem',\r\n+        maxWidth: '1200px',\r\n+        margin: '0 auto',\r\n+      }}>\r\n+        <h2 style={{\r\n+          fontSize: '2rem',\r\n+          fontWeight: '700',\r\n+          marginBottom: '1.5rem',\r\n+          color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+          textAlign: 'center',\r\n+        }}>Quick Access</h2>\r\n+        <div style={{\r\n+          display: 'flex',\r\n+          justifyContent: 'center',\r\n+          gap: '1rem',\r\n+          flexWrap: 'wrap',\r\n+        }}>\r\n+          <button \r\n+            onClick={() => navigate('/transport?from=home&to=downtown')}\r\n+            style={{\r\n+              padding: '0.75rem 1.5rem',\r\n+              borderRadius: '50px',\r\n+              border: 'none',\r\n+              backgroundColor: darkMode ? '#2d3748' : '#e2e8f0',\r\n+              color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+              fontWeight: '600',\r\n+              cursor: 'pointer',\r\n+              transition: 'all 0.2s',\r\n+              display: 'flex',\r\n+              alignItems: 'center',\r\n+              gap: '0.5rem',\r\n+              fontSize: '1rem'\r\n+            }}\r\n+          >\r\n+            üöï To Downtown\r\n+          </button>\r\n+          <button \r\n+            onClick={() => navigate('/food?category=fastfood')}\r\n+            style={{\r\n+              padding: '0.75rem 1.5rem',\r\n+              borderRadius: '50px',\r\n+              border: 'none',\r\n+              backgroundColor: darkMode ? '#2d3748' : '#e2e8f0',\r\n+              color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+              fontWeight: '600',\r\n+              cursor: 'pointer',\r\n+              transition: 'all 0.2s',\r\n+              display: 'flex',\r\n+              alignItems: 'center',\r\n+              gap: '0.5rem',\r\n+              fontSize: '1rem'\r\n+            }}\r\n+          >\r\n+            üçü Fast Food\r\n+          </button>\r\n+          <button \r\n+            onClick={() => navigate('/food?category=coffee')}\r\n+            style={{\r\n+              padding: '0.75rem 1.5rem',\r\n+              borderRadius: '50px',\r\n+              border: 'none',\r\n+              backgroundColor: darkMode ? '#2d3748' : '#e2e8f0',\r\n+              color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+              fontWeight: '600',\r\n+              cursor: 'pointer',\r\n+              transition: 'all 0.2s',\r\n+              display: 'flex',\r\n+              alignItems: 'center',\r\n+              gap: '0.5rem',\r\n+              fontSize: '1rem'\r\n+            }}\r\n+          >\r\n+            ‚òï Coffee Shops\r\n+          </button>\r\n+        </div>\r\n+      </section>\r\n+\r\n+      {/* Service Popup */}\r\n+      {selectedService && (\r\n+        <div style={{\r\n+          position: 'fixed',\r\n+          top: 0,\r\n+          left: 0,\r\n+          right: 0,\r\n+          bottom: 0,\r\n+          backgroundColor: 'rgba(0, 0, 0, 0.7)',\r\n+          display: 'flex',\r\n+          justifyContent: 'center',\r\n+          alignItems: 'center',\r\n+          zIndex: 1000,\r\n+        }} onClick={closePopup}>\r\n+          <div style={{\r\n+            backgroundColor: darkMode ? '#2d3748' : 'white',\r\n+            borderRadius: '16px',\r\n+            padding: '2rem',\r\n+            maxWidth: '500px',\r\n+            width: '90%',\r\n+            boxShadow: '0 10px 25px rgba(0, 0, 0, 0.2)',\r\n+            position: 'relative',\r\n+            border: darkMode ? '1px solid #4a5568' : '1px solid #e2e8f0',\r\n+          }} onClick={(e) => e.stopPropagation()}>\r\n+            <button style={{\r\n+              position: 'absolute',\r\n+              top: '1rem',\r\n+              right: '1rem',\r\n+              background: 'none',\r\n+              border: 'none',\r\n+              fontSize: '1.5rem',\r\n+              cursor: 'pointer',\r\n+              color: darkMode ? '#a0aec0' : '#64748b',\r\n+            }} onClick={closePopup}>√ó</button>\r\n+            <div style={{ \r\n+              display: 'flex', \r\n+              alignItems: 'center', \r\n+              gap: '1rem',\r\n+              marginBottom: '1.5rem'\r\n+            }}>\r\n+              <span style={{ fontSize: '2.5rem', animation: 'float 3s ease-in-out infinite' }}>{selectedService.icon}</span>\r\n+              <h3 style={{fontSize: '1.8rem', fontWeight: '700', marginBottom: '1rem', color: darkMode ? '#e2e8f0' : '#1e293b'}}>{selectedService.name}</h3>\r\n+            </div>\r\n+            <p style={{color: darkMode ? '#a0aec0' : '#64748b', fontSize: '1.1rem', lineHeight: '1.6', marginBottom: '2rem'}}>{selectedService.details}</p>\r\n+            <button \r\n+              style={{ \r\n+                padding: '0.75rem 1.5rem',\r\n+                borderRadius: '8px',\r\n+                border: 'none',\r\n+                backgroundColor: selectedService.color,\r\n+                color: 'white',\r\n+                fontWeight: '600',\r\n+                cursor: 'pointer',\r\n+                transition: 'all 0.2s',\r\n+                fontSize: '1rem'\r\n+              }}\r\n+              onClick={() => {\r\n+                navigate(selectedService.path);\r\n+                closePopup();\r\n+              }}\r\n+            >\r\n+              Explore {selectedService.name}\r\n+            </button>\r\n+          </div>\r\n+        </div>\r\n+      )}\r\n+\r\n+      {/* Achievements */}\r\n+      {achievements.map(achievement => (\r\n+        <div key={achievement.id} style={{\r\n+          position: 'fixed',\r\n+          bottom: '20px',\r\n+          right: '20px',\r\n+          background: darkMode ? '#2d3748' : 'white',\r\n+          color: darkMode ? 'white' : '#1e293b',\r\n+          padding: '1rem',\r\n+          borderRadius: '12px',\r\n+          boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',\r\n+          display: 'flex',\r\n+          alignItems: 'center',\r\n+          gap: '0.5rem',\r\n+          zIndex: 1000,\r\n+          animation: 'slideIn 0.5s forwards, fadeOut 0.5s forwards 2.5s'\r\n+        }}>\r\n+          <span style={{fontSize: '1.5rem'}}>{achievement.icon}</span>\r\n+          <span>{achievement.title}</span>\r\n+        </div>\r\n+      ))}\r\n+\r\n+      {/* Chat Modal */}\r\n+      {showChat && <ChatModal darkMode={darkMode} onClose={toggleChat} />}\r\n+\r\n+      {/* Footer with copyright */}\r\n+      <footer style={{\r\n+        textAlign: 'center',\r\n+        padding: '2rem 1rem',\r\n+        color: darkMode ? '#a0aec0' : '#64748b',\r\n+        fontSize: '0.9rem',\r\n+        marginTop: '2rem'\r\n+      }}>\r\n+        <p>¬© {new Date().getFullYear()} UrbanFlow - Created by Nick</p>\r\n+      </footer>\r\n+    </div>\r\n+  );\r\n+};\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752651372571,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,831 @@\n+import { useState, useEffect, useRef } from 'react';\r\n+import { useNavigate } from 'react-router-dom';\r\n+\r\n+// UrbanBuddy AI Assistant Component\r\n+const UrbanBuddy = ({ darkMode, onChatOpen }) => {\r\n+  const [position, setPosition] = useState({ x: 20, y: 50 });\r\n+  const [expression, setExpression] = useState('üòä');\r\n+  const [direction, setDirection] = useState(1);\r\n+  const [costume, setCostume] = useState(null);\r\n+  const [isActive, setIsActive] = useState(false);\r\n+  const botRef = useRef(null);\r\n+  const animationRef = useRef(null);\r\n+  const lastInteractionTime = useRef(Date.now());\r\n+\r\n+  // Seasonal costumes\r\n+  useEffect(() => {\r\n+    const today = new Date();\r\n+    const month = today.getMonth() + 1;\r\n+    \r\n+    if (month === 12) setCostume('üéÑ');\r\n+    else if (month === 10) setCostume('üéÉ');\r\n+    else if (month === 2) setCostume('üíù');\r\n+    else if (month === 4) setCostume('üå∏');\r\n+    else setCostume(null);\r\n+  }, []);\r\n+\r\n+  // Make the bot wander with more dynamic movement\r\n+  useEffect(() => {\r\n+    const moveInterval = setInterval(() => {\r\n+      setPosition(prev => {\r\n+        const now = Date.now();\r\n+        const timeSinceLastInteraction = now - lastInteractionTime.current;\r\n+        \r\n+        // More active movement right after interaction\r\n+        const speedMultiplier = timeSinceLastInteraction < 5000 ? 2 : 1;\r\n+        \r\n+        let newX = prev.x + (3 * direction * speedMultiplier);\r\n+        let newY = prev.y + (Math.random() * 6 - 3);\r\n+        \r\n+        // Bounce off edges\r\n+        if (newX > window.innerWidth - 80) {\r\n+          setDirection(-1);\r\n+          triggerAnimation('spin');\r\n+        }\r\n+        if (newX < 20) {\r\n+          setDirection(1);\r\n+          triggerAnimation('spin');\r\n+        }\r\n+        if (newY < 20) newY = 20;\r\n+        if (newY > window.innerHeight - 100) newY = window.innerHeight - 100;\r\n+        \r\n+        return { x: newX, y: newY };\r\n+      });\r\n+    }, 100);\r\n+\r\n+    return () => clearInterval(moveInterval);\r\n+  }, [direction]);\r\n+\r\n+  // Change expressions randomly with more variety\r\n+  useEffect(() => {\r\n+    const expressions = ['üòä', 'ü§î', 'üòÆ', 'üòé', 'üëã', 'ü§ñ', '‚ú®', 'üåü'];\r\n+    const expressionInterval = setInterval(() => {\r\n+      if (!isActive) {\r\n+        setExpression(expressions[Math.floor(Math.random() * expressions.length)]);\r\n+        // Random animations when idle\r\n+        if (Math.random() > 0.8) {\r\n+          triggerAnimation(['bounce', 'spin', 'wobble'][Math.floor(Math.random() * 3)]);\r\n+        }\r\n+      }\r\n+    }, 3000);\r\n+    return () => clearInterval(expressionInterval);\r\n+  }, [isActive]);\r\n+\r\n+  const triggerAnimation = (type) => {\r\n+    if (animationRef.current) {\r\n+      clearTimeout(animationRef.current);\r\n+    }\r\n+    \r\n+    const botElement = botRef.current;\r\n+    if (!botElement) return;\r\n+    \r\n+    botElement.style.animation = 'none';\r\n+    void botElement.offsetWidth; // Trigger reflow\r\n+    \r\n+    switch(type) {\r\n+      case 'spin':\r\n+        botElement.style.animation = 'spin 1s ease';\r\n+        break;\r\n+      case 'bounce':\r\n+        botElement.style.animation = 'bounce 0.5s ease';\r\n+        break;\r\n+      case 'wobble':\r\n+        botElement.style.animation = 'wobble 0.8s ease';\r\n+        break;\r\n+      default:\r\n+        botElement.style.animation = '';\r\n+    }\r\n+    \r\n+    animationRef.current = setTimeout(() => {\r\n+      if (botElement) botElement.style.animation = '';\r\n+    }, 1000);\r\n+  };\r\n+\r\n+  const handleClick = () => {\r\n+    lastInteractionTime.current = Date.now();\r\n+    setIsActive(true);\r\n+    triggerAnimation('bounce');\r\n+    setExpression('üí°');\r\n+    \r\n+    // Trigger chat opening in parent component\r\n+    onChatOpen();\r\n+    \r\n+    // Return to normal after a delay\r\n+    setTimeout(() => {\r\n+      setIsActive(false);\r\n+    }, 3000);\r\n+  };\r\n+\r\n+  // Custom animations\r\n+  const animations = `\r\n+    @keyframes spin {\r\n+      0% { transform: rotate(0deg) scaleX(${direction}); }\r\n+      100% { transform: rotate(360deg) scaleX(${direction}); }\r\n+    }\r\n+    @keyframes bounce {\r\n+      0%, 100% { transform: translateY(0) scaleX(${direction}); }\r\n+      50% { transform: translateY(-20px) scaleX(${direction}); }\r\n+    }\r\n+    @keyframes wobble {\r\n+      0%, 100% { transform: rotate(0deg) scaleX(${direction}); }\r\n+      25% { transform: rotate(5deg) scaleX(${direction}); }\r\n+      75% { transform: rotate(-5deg) scaleX(${direction}); }\r\n+    }\r\n+    @keyframes float {\r\n+      0% { transform: translateY(0px) scaleX(${direction}); }\r\n+      50% { transform: translateY(-10px) scaleX(${direction}); }\r\n+      100% { transform: translateY(0px) scaleX(${direction}); }\r\n+    }\r\n+  `;\r\n+\r\n+  return (\r\n+    <>\r\n+      <style>{animations}</style>\r\n+      <div \r\n+        ref={botRef}\r\n+        onClick={handleClick}\r\n+        style={{\r\n+          position: 'fixed',\r\n+          left: `${position.x}px`,\r\n+          top: `${position.y}px`,\r\n+          fontSize: '2.5rem',\r\n+          cursor: 'pointer',\r\n+          transition: 'all 0.3s ease',\r\n+          transform: `scaleX(${direction})`,\r\n+          zIndex: 100,\r\n+          filter: darkMode \r\n+            ? 'drop-shadow(0 0 8px rgba(255,255,255,0.7))' \r\n+            : 'drop-shadow(0 0 8px rgba(0,0,0,0.3))',\r\n+          userSelect: 'none',\r\n+          animation: 'float 4s ease-in-out infinite'\r\n+        }}\r\n+      >\r\n+        <div style={{ \r\n+          position: 'relative',\r\n+          display: 'flex',\r\n+          flexDirection: 'column',\r\n+          alignItems: 'center'\r\n+        }}>\r\n+          {/* Bot icon with costume */}\r\n+          <div style={{\r\n+            position: 'relative',\r\n+            width: '60px',\r\n+            height: '60px',\r\n+            backgroundColor: darkMode ? '#4a5568' : '#3b82f6',\r\n+            borderRadius: '50%',\r\n+            display: 'flex',\r\n+            justifyContent: 'center',\r\n+            alignItems: 'center',\r\n+            color: 'white'\r\n+          }}>\r\n+            <span style={{ fontSize: '1.8rem' }}>{expression}</span>\r\n+            {costume && (\r\n+              <span style={{\r\n+                position: 'absolute',\r\n+                top: '-15px',\r\n+                right: '-10px',\r\n+                fontSize: '1.5rem',\r\n+                transform: 'rotate(15deg)'\r\n+              }}>\r\n+                {costume}\r\n+              </span>\r\n+            )}\r\n+          </div>\r\n+        </div>\r\n+      </div>\r\n+    </>\r\n+  );\r\n+};\r\n+\r\n+// Chat Modal Component with Direct Gemini API Connection\r\n+const ChatModal = ({ darkMode, onClose }) => {\r\n+  const [messages, setMessages] = useState([\r\n+    { text: \"Hello! I'm UrbanBuddy, your AI assistant powered by Gemini. How can I help you with urban living today?\", sender: 'bot' }\r\n+  ]);\r\n+  const [inputValue, setInputValue] = useState('');\r\n+  const [isTyping, setIsTyping] = useState(false);\r\n+  const chatEndRef = useRef(null);\r\n+  const inputRef = useRef(null);\r\n+\r\n+  // Auto-scroll to bottom and focus input\r\n+  useEffect(() => {\r\n+    chatEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n+    inputRef.current?.focus();\r\n+  }, [messages]);\r\n+\r\n+  // Direct API call to Gemini through a proxy\r\n+  const generateResponse = async (userMessage) => {\r\n+    setIsTyping(true);\r\n+    \r\n+    try {\r\n+      // Using a public AI API gateway (no API key needed)\r\n+      const response = await fetch('https://gemini-proxy.vercel.app/api/generate', {\r\n+        method: \"POST\",\r\n+        headers: { \r\n+          \"Content-Type\": \"application/json\",\r\n+        },\r\n+        body: JSON.stringify({\r\n+          prompt: `You are UrbanBuddy, a friendly AI assistant for urban living. \r\n+          Respond to this query about city life: ${userMessage}\r\n+          Keep responses concise (1-2 sentences) and helpful.`\r\n+        })\r\n+      });\r\n+      \r\n+      const data = await response.json();\r\n+      \r\n+      setMessages(prev => [...prev, { \r\n+        text: data.response || \"I'm here to help with urban living questions!\", \r\n+        sender: 'bot' \r\n+      }]);\r\n+    } catch (error) {\r\n+      console.error(\"API error:\", error);\r\n+      setMessages(prev => [...prev, { \r\n+        text: \"I'm having trouble connecting right now. Try again later!\", \r\n+        sender: 'bot' \r\n+      }]);\r\n+    } finally {\r\n+      setIsTyping(false);\r\n+    }\r\n+  };\r\n+\r\n+  const handleSendMessage = async (e) => {\r\n+    e.preventDefault();\r\n+    if (inputValue.trim() && !isTyping) {\r\n+      // Add user message\r\n+      const userMessage = inputValue.trim();\r\n+      setMessages(prev => [...prev, { text: userMessage, sender: 'user' }]);\r\n+      setInputValue('');\r\n+      \r\n+      // Generate AI response\r\n+      await generateResponse(userMessage);\r\n+    }\r\n+  };\r\n+\r\n+  return (\r\n+    <div style={{\r\n+      position: 'fixed',\r\n+      bottom: '100px',\r\n+      right: '30px',\r\n+      width: '350px',\r\n+      maxWidth: '90%',\r\n+      backgroundColor: darkMode ? '#2d3748' : 'white',\r\n+      borderRadius: '16px',\r\n+      boxShadow: '0 10px 25px rgba(0, 0, 0, 0.2)',\r\n+      border: darkMode ? '1px solid #4a5568' : '1px solid #e2e8f0',\r\n+      zIndex: 1000,\r\n+      overflow: 'hidden',\r\n+      display: 'flex',\r\n+      flexDirection: 'column',\r\n+      maxHeight: '60vh'\r\n+    }}>\r\n+      {/* Chat header */}\r\n+      <div style={{\r\n+        padding: '1rem',\r\n+        backgroundColor: darkMode ? '#4a5568' : '#3b82f6',\r\n+        color: 'white',\r\n+        display: 'flex',\r\n+        justifyContent: 'space-between',\r\n+        alignItems: 'center'\r\n+      }}>\r\n+        <div style={{ display: 'flex', alignItems: 'center', gap: '0.5rem' }}>\r\n+          <span style={{ fontSize: '1.5rem' }}>ü§ñ</span>\r\n+          <h3 style={{ margin: 0 }}>UrbanBuddy AI</h3>\r\n+          {isTyping && (\r\n+            <span style={{ \r\n+              fontSize: '0.8rem',\r\n+              marginLeft: '0.5rem',\r\n+              opacity: 0.8\r\n+            }}>typing...</span>\r\n+          )}\r\n+        </div>\r\n+        <button \r\n+          onClick={onClose}\r\n+          style={{\r\n+            background: 'none',\r\n+            border: 'none',\r\n+            color: 'white',\r\n+            fontSize: '1.2rem',\r\n+            cursor: 'pointer'\r\n+          }}\r\n+        >\r\n+          √ó\r\n+        </button>\r\n+      </div>\r\n+      \r\n+      {/* Chat messages */}\r\n+      <div style={{\r\n+        flex: 1,\r\n+        padding: '1rem',\r\n+        overflowY: 'auto',\r\n+        display: 'flex',\r\n+        flexDirection: 'column',\r\n+        gap: '0.8rem'\r\n+      }}>\r\n+        {messages.map((msg, index) => (\r\n+          <div \r\n+            key={index}\r\n+            style={{\r\n+              alignSelf: msg.sender === 'user' ? 'flex-end' : 'flex-start',\r\n+              maxWidth: '80%',\r\n+              padding: '0.6rem 1rem',\r\n+              borderRadius: msg.sender === 'user' \r\n+                ? '18px 18px 0 18px' \r\n+                : '18px 18px 18px 0',\r\n+              backgroundColor: msg.sender === 'user'\r\n+                ? (darkMode ? '#4a5568' : '#3b82f6')\r\n+                : (darkMode ? '#4a5568' : '#e2e8f0'),\r\n+              color: msg.sender === 'user' ? 'white' : (darkMode ? 'white' : '#1e293b'),\r\n+              animation: msg.sender === 'bot' && index === messages.length - 1 \r\n+                ? 'fadeIn 0.3s ease' \r\n+                : 'none'\r\n+            }}\r\n+          >\r\n+            {msg.text}\r\n+          </div>\r\n+        ))}\r\n+        <div ref={chatEndRef} />\r\n+      </div>\r\n+      \r\n+      {/* Chat input */}\r\n+      <form onSubmit={handleSendMessage} style={{\r\n+        padding: '0.8rem',\r\n+        borderTop: darkMode ? '1px solid #4a5568' : '1px solid #e2e8f0',\r\n+        display: 'flex',\r\n+        gap: '0.5rem'\r\n+      }}>\r\n+        <input\r\n+          ref={inputRef}\r\n+          type=\"text\"\r\n+          value={inputValue}\r\n+          onChange={(e) => setInputValue(e.target.value)}\r\n+          placeholder=\"Ask me about urban living...\"\r\n+          disabled={isTyping}\r\n+          style={{\r\n+            flex: 1,\r\n+            padding: '0.6rem 1rem',\r\n+            borderRadius: '20px',\r\n+            border: darkMode ? '1px solid #4a5568' : '1px solid #e2e8f0',\r\n+            backgroundColor: darkMode ? '#2d3748' : 'white',\r\n+            color: darkMode ? 'white' : '#1e293b',\r\n+            outline: 'none',\r\n+            opacity: isTyping ? 0.7 : 1\r\n+          }}\r\n+        />\r\n+        <button \r\n+          type=\"submit\"\r\n+          disabled={isTyping}\r\n+          style={{\r\n+            background: isTyping \r\n+              ? (darkMode ? '#4a5568' : '#e2e8f0')\r\n+              : (darkMode ? '#4a5568' : '#3b82f6'),\r\n+            color: 'white',\r\n+            border: 'none',\r\n+            borderRadius: '50%',\r\n+            width: '40px',\r\n+            height: '40px',\r\n+            display: 'flex',\r\n+            alignItems: 'center',\r\n+            justifyContent: 'center',\r\n+            cursor: isTyping ? 'not-allowed' : 'pointer'\r\n+          }}\r\n+        >\r\n+          {isTyping ? '...' : '‚û§'}\r\n+        </button>\r\n+      </form>\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+// Main Home Component\r\n+export default function Home() {\r\n+  const navigate = useNavigate();\r\n+  const [searchQuery, setSearchQuery] = useState('');\r\n+  const [darkMode, setDarkMode] = useState(false);\r\n+  const [selectedService, setSelectedService] = useState(null);\r\n+  const [orderCount, setOrderCount] = useState(0);\r\n+  const [achievements, setAchievements] = useState([]);\r\n+  const [showChat, setShowChat] = useState(false);\r\n+\r\n+  const services = [\r\n+    { \r\n+      name: 'Transport', \r\n+      path: '/transport', \r\n+      icon: 'üöå', \r\n+      desc: 'Plan your multi-modal journey across the city',\r\n+      color: '#3b82f6',\r\n+      details: 'Find the best routes combining metro, buses, and bikes. Real-time updates and ticket purchasing available.'\r\n+    },\r\n+    { \r\n+      name: 'Food Delivery', \r\n+      path: '/food', \r\n+      icon: 'üçî', \r\n+      desc: 'Discover local restaurants and cafes',\r\n+      color: '#ef4444',\r\n+      details: 'Order from hundreds of restaurants with special discounts. Track your delivery in real-time.'\r\n+    },\r\n+    { \r\n+      name: 'Groceries', \r\n+      path: '/food', \r\n+      icon: 'üõí', \r\n+      desc: 'Get groceries delivered in minutes',\r\n+      color: '#10b981',\r\n+      details: 'Same-day delivery from local supermarkets. Schedule recurring orders for essentials.'\r\n+    },\r\n+    { \r\n+      name: 'Services', \r\n+      path: '/food', \r\n+      icon: 'üõ†Ô∏è', \r\n+      desc: 'Find urban services near you',\r\n+      color: '#8b5cf6',\r\n+      details: 'Book home services, repairs, and professional help with verified providers.'\r\n+    }\r\n+  ];\r\n+\r\n+  // Check for achievements\r\n+  useEffect(() => {\r\n+    if (orderCount === 1) {\r\n+      addAchievement('First Order!', 'üéâ');\r\n+    } else if (orderCount === 5) {\r\n+      addAchievement('Regular Customer!', 'üèÜ');\r\n+    } else if (orderCount === 10) {\r\n+      addAchievement('Super User!', 'üåü');\r\n+    }\r\n+  }, [orderCount]);\r\n+\r\n+  const addAchievement = (title, icon) => {\r\n+    if (!achievements.some(a => a.title === title)) {\r\n+      const newAchievement = { title, icon, id: Date.now() };\r\n+      setAchievements(prev => [...prev, newAchievement]);\r\n+      \r\n+      // Auto-hide achievement after 3 seconds\r\n+      setTimeout(() => {\r\n+        setAchievements(prev => prev.filter(a => a.id !== newAchievement.id));\r\n+      }, 3000);\r\n+    }\r\n+  };\r\n+\r\n+  const handleSearch = (e) => {\r\n+    e.preventDefault();\r\n+    if (searchQuery.trim()) {\r\n+      navigate(`/food?search=${encodeURIComponent(searchQuery)}`);\r\n+    }\r\n+  };\r\n+\r\n+  const toggleDarkMode = () => {\r\n+    setDarkMode(!darkMode);\r\n+  };\r\n+\r\n+  const openServicePopup = (service) => {\r\n+    setSelectedService(service);\r\n+    setOrderCount(prev => prev + 1);\r\n+  };\r\n+\r\n+  const closePopup = () => {\r\n+    setSelectedService(null);\r\n+  };\r\n+\r\n+  const toggleChat = () => {\r\n+    setShowChat(!showChat);\r\n+  };\r\n+\r\n+  return (\r\n+    <div style={{\r\n+      backgroundColor: darkMode ? '#1a202c' : '#f8fafc',\r\n+      minHeight: '100vh',\r\n+      paddingBottom: '3rem',\r\n+      color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+      transition: 'all 0.3s ease',\r\n+      position: 'relative'\r\n+    }}>\r\n+      {/* Theme Toggle Button */}\r\n+      <button \r\n+        onClick={toggleDarkMode} \r\n+        style={{\r\n+          position: 'fixed',\r\n+          top: '1.5rem',\r\n+          right: '1.5rem',\r\n+          background: darkMode ? '#4a5568' : '#e2e8f0',\r\n+          border: 'none',\r\n+          borderRadius: '50%',\r\n+          width: '40px',\r\n+          height: '40px',\r\n+          display: 'flex',\r\n+          alignItems: 'center',\r\n+          justifyContent: 'center',\r\n+          cursor: 'pointer',\r\n+          transition: 'all 0.3s ease',\r\n+          boxShadow: '0 2px 5px rgba(0, 0, 0, 0.2)',\r\n+          zIndex: 100\r\n+        }}\r\n+        aria-label={darkMode ? 'Switch to light mode' : 'Switch to dark mode'}\r\n+      >\r\n+        {darkMode ? '‚òÄÔ∏è' : 'üåô'}\r\n+      </button>\r\n+      \r\n+      {/* Hero Section with UrbanBuddy */}\r\n+      <section style={{\r\n+        background: darkMode \r\n+          ? 'linear-gradient(135deg, #2d3748 0%, #1a202c 100%)' \r\n+          : 'linear-gradient(135deg, #6b46c1 0%, #3b82f6 100%)',\r\n+        color: 'white',\r\n+        padding: '4rem 1rem',\r\n+        textAlign: 'center',\r\n+        borderRadius: '0 0 20px 20px',\r\n+        boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',\r\n+        position: 'relative',\r\n+        overflow: 'hidden',\r\n+        height: '300px'\r\n+      }}>\r\n+        <div style={{\r\n+          maxWidth: '800px',\r\n+          margin: '0 auto',\r\n+          position: 'relative',\r\n+          zIndex: 2\r\n+        }}>\r\n+          <h1 style={{\r\n+            fontSize: '3.5rem',\r\n+            fontWeight: '800',\r\n+            marginBottom: '0.5rem',\r\n+            textShadow: '2px 2px 4px rgba(0, 0, 0, 0.2)',\r\n+          }}>UrbanFlow</h1>\r\n+          <p style={{\r\n+            fontSize: '1.25rem',\r\n+            marginBottom: '2rem',\r\n+            opacity: 0.9,\r\n+          }}>Your seamless urban living companion</p>\r\n+          \r\n+          <form onSubmit={handleSearch} style={{\r\n+            display: 'flex',\r\n+            maxWidth: '600px',\r\n+            margin: '0 auto',\r\n+            borderRadius: '50px',\r\n+            overflow: 'hidden',\r\n+            boxShadow: '0 4px 10px rgba(0, 0, 0, 0.2)',\r\n+          }}>\r\n+            <input\r\n+              type=\"text\"\r\n+              placeholder=\"Search for restaurants, services...\"\r\n+              value={searchQuery}\r\n+              onChange={(e) => setSearchQuery(e.target.value)}\r\n+              style={{\r\n+                flex: 1,\r\n+                padding: '1rem 1.5rem',\r\n+                border: 'none',\r\n+                fontSize: '1rem',\r\n+                outline: 'none',\r\n+                backgroundColor: darkMode ? '#2d3748' : 'white',\r\n+                color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+              }}\r\n+            />\r\n+            <button type=\"submit\" style={{\r\n+              backgroundColor: darkMode ? '#4a5568' : '#1e40af',\r\n+              color: 'white',\r\n+              border: 'none',\r\n+              padding: '0 1.5rem',\r\n+              cursor: 'pointer',\r\n+              fontSize: '1.25rem',\r\n+              transition: 'background-color 0.2s'\r\n+            }}>\r\n+              <span>üîç</span>\r\n+            </button>\r\n+          </form>\r\n+        </div>\r\n+        <UrbanBuddy darkMode={darkMode} onChatOpen={toggleChat} />\r\n+      </section>\r\n+\r\n+      {/* Services Grid */}\r\n+      <section style={{\r\n+        padding: '2rem 1rem',\r\n+        maxWidth: '1200px',\r\n+        margin: '0 auto',\r\n+      }}>\r\n+        <h2 style={{\r\n+          fontSize: '2rem',\r\n+          fontWeight: '700',\r\n+          marginBottom: '1.5rem',\r\n+          color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+          textAlign: 'center',\r\n+        }}>What do you need today?</h2>\r\n+        <div style={{\r\n+          display: 'grid',\r\n+          gridTemplateColumns: 'repeat(auto-fit, minmax(250px, 1fr))',\r\n+          gap: '1.5rem',\r\n+          marginTop: '1rem',\r\n+        }}>\r\n+          {services.map((service) => (\r\n+            <div \r\n+              key={service.name} \r\n+              style={{ \r\n+                padding: '2rem 1.5rem',\r\n+                borderRadius: '16px',\r\n+                border: `2px solid ${service.color}`,\r\n+                textAlign: 'center',\r\n+                cursor: 'pointer',\r\n+                transition: 'transform 0.3s, box-shadow 0.3s',\r\n+                backgroundColor: darkMode \r\n+                  ? `${service.color}20` \r\n+                  : `${service.color}10`,\r\n+                ':hover': {\r\n+                  transform: 'translateY(-5px)',\r\n+                  boxShadow: '0 10px 20px rgba(0, 0, 0, 0.1)',\r\n+                }\r\n+              }}\r\n+              onClick={() => openServicePopup(service)}\r\n+            >\r\n+              <div style={{ \r\n+                fontSize: '3rem',\r\n+                marginBottom: '1rem',\r\n+                display: 'inline-block',\r\n+                animation: 'float 3s ease-in-out infinite'\r\n+              }}>{service.icon}</div>\r\n+              <h3 style={{fontSize: '1.5rem', fontWeight: '600', marginBottom: '0.5rem'}}>{service.name}</h3>\r\n+              <p style={{color: darkMode ? '#a0aec0' : '#64748b'}}>{service.desc}</p>\r\n+            </div>\r\n+          ))}\r\n+        </div>\r\n+      </section>\r\n+\r\n+      {/* Featured Section */}\r\n+      <section style={{\r\n+        padding: '2rem 1rem',\r\n+        maxWidth: '1200px',\r\n+        margin: '0 auto',\r\n+      }}>\r\n+        <h2 style={{\r\n+          fontSize: '2rem',\r\n+          fontWeight: '700',\r\n+          marginBottom: '1.5rem',\r\n+          color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+          textAlign: 'center',\r\n+        }}>Quick Access</h2>\r\n+        <div style={{\r\n+          display: 'flex',\r\n+          justifyContent: 'center',\r\n+          gap: '1rem',\r\n+          flexWrap: 'wrap',\r\n+        }}>\r\n+          <button \r\n+            onClick={() => navigate('/transport?from=home&to=downtown')}\r\n+            style={{\r\n+              padding: '0.75rem 1.5rem',\r\n+              borderRadius: '50px',\r\n+              border: 'none',\r\n+              backgroundColor: darkMode ? '#2d3748' : '#e2e8f0',\r\n+              color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+              fontWeight: '600',\r\n+              cursor: 'pointer',\r\n+              transition: 'all 0.2s',\r\n+              display: 'flex',\r\n+              alignItems: 'center',\r\n+              gap: '0.5rem',\r\n+              fontSize: '1rem'\r\n+            }}\r\n+          >\r\n+            üöï To Downtown\r\n+          </button>\r\n+          <button \r\n+            onClick={() => navigate('/food?category=fastfood')}\r\n+            style={{\r\n+              padding: '0.75rem 1.5rem',\r\n+              borderRadius: '50px',\r\n+              border: 'none',\r\n+              backgroundColor: darkMode ? '#2d3748' : '#e2e8f0',\r\n+              color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+              fontWeight: '600',\r\n+              cursor: 'pointer',\r\n+              transition: 'all 0.2s',\r\n+              display: 'flex',\r\n+              alignItems: 'center',\r\n+              gap: '0.5rem',\r\n+              fontSize: '1rem'\r\n+            }}\r\n+          >\r\n+            üçü Fast Food\r\n+          </button>\r\n+          <button \r\n+            onClick={() => navigate('/food?category=coffee')}\r\n+            style={{\r\n+              padding: '0.75rem 1.5rem',\r\n+              borderRadius: '50px',\r\n+              border: 'none',\r\n+              backgroundColor: darkMode ? '#2d3748' : '#e2e8f0',\r\n+              color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+              fontWeight: '600',\r\n+              cursor: 'pointer',\r\n+              transition: 'all 0.2s',\r\n+              display: 'flex',\r\n+              alignItems: 'center',\r\n+              gap: '0.5rem',\r\n+              fontSize: '1rem'\r\n+            }}\r\n+          >\r\n+            ‚òï Coffee Shops\r\n+          </button>\r\n+        </div>\r\n+      </section>\r\n+\r\n+      {/* Service Popup */}\r\n+      {selectedService && (\r\n+        <div style={{\r\n+          position: 'fixed',\r\n+          top: 0,\r\n+          left: 0,\r\n+          right: 0,\r\n+          bottom: 0,\r\n+          backgroundColor: 'rgba(0, 0, 0, 0.7)',\r\n+          display: 'flex',\r\n+          justifyContent: 'center',\r\n+          alignItems: 'center',\r\n+          zIndex: 1000,\r\n+        }} onClick={closePopup}>\r\n+          <div style={{\r\n+            backgroundColor: darkMode ? '#2d3748' : 'white',\r\n+            borderRadius: '16px',\r\n+            padding: '2rem',\r\n+            maxWidth: '500px',\r\n+            width: '90%',\r\n+            boxShadow: '0 10px 25px rgba(0, 0, 0, 0.2)',\r\n+            position: 'relative',\r\n+            border: darkMode ? '1px solid #4a5568' : '1px solid #e2e8f0',\r\n+          }} onClick={(e) => e.stopPropagation()}>\r\n+            <button style={{\r\n+              position: 'absolute',\r\n+              top: '1rem',\r\n+              right: '1rem',\r\n+              background: 'none',\r\n+              border: 'none',\r\n+              fontSize: '1.5rem',\r\n+              cursor: 'pointer',\r\n+              color: darkMode ? '#a0aec0' : '#64748b',\r\n+            }} onClick={closePopup}>√ó</button>\r\n+            <div style={{ \r\n+              display: 'flex', \r\n+              alignItems: 'center', \r\n+              gap: '1rem',\r\n+              marginBottom: '1.5rem'\r\n+            }}>\r\n+              <span style={{ fontSize: '2.5rem', animation: 'float 3s ease-in-out infinite' }}>{selectedService.icon}</span>\r\n+              <h3 style={{fontSize: '1.8rem', fontWeight: '700', marginBottom: '1rem', color: darkMode ? '#e2e8f0' : '#1e293b'}}>{selectedService.name}</h3>\r\n+            </div>\r\n+            <p style={{color: darkMode ? '#a0aec0' : '#64748b', fontSize: '1.1rem', lineHeight: '1.6', marginBottom: '2rem'}}>{selectedService.details}</p>\r\n+            <button \r\n+              style={{ \r\n+                padding: '0.75rem 1.5rem',\r\n+                borderRadius: '8px',\r\n+                border: 'none',\r\n+                backgroundColor: selectedService.color,\r\n+                color: 'white',\r\n+                fontWeight: '600',\r\n+                cursor: 'pointer',\r\n+                transition: 'all 0.2s',\r\n+                fontSize: '1rem'\r\n+              }}\r\n+              onClick={() => {\r\n+                navigate(selectedService.path);\r\n+                closePopup();\r\n+              }}\r\n+            >\r\n+              Explore {selectedService.name}\r\n+            </button>\r\n+          </div>\r\n+        </div>\r\n+      )}\r\n+\r\n+      {/* Achievements */}\r\n+      {achievements.map(achievement => (\r\n+        <div key={achievement.id} style={{\r\n+          position: 'fixed',\r\n+          bottom: '20px',\r\n+          right: '20px',\r\n+          background: darkMode ? '#2d3748' : 'white',\r\n+          color: darkMode ? 'white' : '#1e293b',\r\n+          padding: '1rem',\r\n+          borderRadius: '12px',\r\n+          boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',\r\n+          display: 'flex',\r\n+          alignItems: 'center',\r\n+          gap: '0.5rem',\r\n+          zIndex: 1000,\r\n+          animation: 'slideIn 0.5s forwards, fadeOut 0.5s forwards 2.5s'\r\n+        }}>\r\n+          <span style={{fontSize: '1.5rem'}}>{achievement.icon}</span>\r\n+          <span>{achievement.title}</span>\r\n+        </div>\r\n+      ))}\r\n+\r\n+      {/* Chat Modal */}\r\n+      {showChat && <ChatModal darkMode={darkMode} onClose={toggleChat} />}\r\n+\r\n+      {/* Footer with copyright */}\r\n+      <footer style={{\r\n+        textAlign: 'center',\r\n+        padding: '2rem 1rem',\r\n+        color: darkMode ? '#a0aec0' : '#64748b',\r\n+        fontSize: '0.9rem',\r\n+        marginTop: '2rem'\r\n+      }}>\r\n+        <p>¬© {new Date().getFullYear()} UrbanFlow - Created by Nick</p>\r\n+      </footer>\r\n+    </div>\r\n+  );\r\n+};\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752651378359,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,831 @@\n+import { useState, useEffect, useRef } from 'react';\r\n+import { useNavigate } from 'react-router-dom';\r\n+\r\n+// UrbanBuddy AI Assistant Component\r\n+const UrbanBuddy = ({ darkMode, onChatOpen }) => {\r\n+  const [position, setPosition] = useState({ x: 20, y: 50 });\r\n+  const [expression, setExpression] = useState('üòä');\r\n+  const [direction, setDirection] = useState(1);\r\n+  const [costume, setCostume] = useState(null);\r\n+  const [isActive, setIsActive] = useState(false);\r\n+  const botRef = useRef(null);\r\n+  const animationRef = useRef(null);\r\n+  const lastInteractionTime = useRef(Date.now());\r\n+\r\n+  // Seasonal costumes\r\n+  useEffect(() => {\r\n+    const today = new Date();\r\n+    const month = today.getMonth() + 1;\r\n+    \r\n+    if (month === 12) setCostume('üéÑ');\r\n+    else if (month === 10) setCostume('üéÉ');\r\n+    else if (month === 2) setCostume('üíù');\r\n+    else if (month === 4) setCostume('üå∏');\r\n+    else setCostume(null);\r\n+  }, []);\r\n+\r\n+  // Make the bot wander with more dynamic movement\r\n+  useEffect(() => {\r\n+    const moveInterval = setInterval(() => {\r\n+      setPosition(prev => {\r\n+        const now = Date.now();\r\n+        const timeSinceLastInteraction = now - lastInteractionTime.current;\r\n+        \r\n+        // More active movement right after interaction\r\n+        const speedMultiplier = timeSinceLastInteraction < 5000 ? 2 : 1;\r\n+        \r\n+        let newX = prev.x + (3 * direction * speedMultiplier);\r\n+        let newY = prev.y + (Math.random() * 6 - 3);\r\n+        \r\n+        // Bounce off edges\r\n+        if (newX > window.innerWidth - 80) {\r\n+          setDirection(-1);\r\n+          triggerAnimation('spin');\r\n+        }\r\n+        if (newX < 20) {\r\n+          setDirection(1);\r\n+          triggerAnimation('spin');\r\n+        }\r\n+        if (newY < 20) newY = 20;\r\n+        if (newY > window.innerHeight - 100) newY = window.innerHeight - 100;\r\n+        \r\n+        return { x: newX, y: newY };\r\n+      });\r\n+    }, 100);\r\n+\r\n+    return () => clearInterval(moveInterval);\r\n+  }, [direction]);\r\n+\r\n+  // Change expressions randomly with more variety\r\n+  useEffect(() => {\r\n+    const expressions = ['üòä', 'ü§î', 'üòÆ', 'üòé', 'üëã', 'ü§ñ', '‚ú®', 'üåü'];\r\n+    const expressionInterval = setInterval(() => {\r\n+      if (!isActive) {\r\n+        setExpression(expressions[Math.floor(Math.random() * expressions.length)]);\r\n+        // Random animations when idle\r\n+        if (Math.random() > 0.8) {\r\n+          triggerAnimation(['bounce', 'spin', 'wobble'][Math.floor(Math.random() * 3)]);\r\n+        }\r\n+      }\r\n+    }, 3000);\r\n+    return () => clearInterval(expressionInterval);\r\n+  }, [isActive]);\r\n+\r\n+  const triggerAnimation = (type) => {\r\n+    if (animationRef.current) {\r\n+      clearTimeout(animationRef.current);\r\n+    }\r\n+    \r\n+    const botElement = botRef.current;\r\n+    if (!botElement) return;\r\n+    \r\n+    botElement.style.animation = 'none';\r\n+    void botElement.offsetWidth; // Trigger reflow\r\n+    \r\n+    switch(type) {\r\n+      case 'spin':\r\n+        botElement.style.animation = 'spin 1s ease';\r\n+        break;\r\n+      case 'bounce':\r\n+        botElement.style.animation = 'bounce 0.5s ease';\r\n+        break;\r\n+      case 'wobble':\r\n+        botElement.style.animation = 'wobble 0.8s ease';\r\n+        break;\r\n+      default:\r\n+        botElement.style.animation = '';\r\n+    }\r\n+    \r\n+    animationRef.current = setTimeout(() => {\r\n+      if (botElement) botElement.style.animation = '';\r\n+    }, 1000);\r\n+  };\r\n+\r\n+  const handleClick = () => {\r\n+    lastInteractionTime.current = Date.now();\r\n+    setIsActive(true);\r\n+    triggerAnimation('bounce');\r\n+    setExpression('üí°');\r\n+    \r\n+    // Trigger chat opening in parent component\r\n+    onChatOpen();\r\n+    \r\n+    // Return to normal after a delay\r\n+    setTimeout(() => {\r\n+      setIsActive(false);\r\n+    }, 3000);\r\n+  };\r\n+\r\n+  // Custom animations\r\n+  const animations = `\r\n+    @keyframes spin {\r\n+      0% { transform: rotate(0deg) scaleX(${direction}); }\r\n+      100% { transform: rotate(360deg) scaleX(${direction}); }\r\n+    }\r\n+    @keyframes bounce {\r\n+      0%, 100% { transform: translateY(0) scaleX(${direction}); }\r\n+      50% { transform: translateY(-20px) scaleX(${direction}); }\r\n+    }\r\n+    @keyframes wobble {\r\n+      0%, 100% { transform: rotate(0deg) scaleX(${direction}); }\r\n+      25% { transform: rotate(5deg) scaleX(${direction}); }\r\n+      75% { transform: rotate(-5deg) scaleX(${direction}); }\r\n+    }\r\n+    @keyframes float {\r\n+      0% { transform: translateY(0px) scaleX(${direction}); }\r\n+      50% { transform: translateY(-10px) scaleX(${direction}); }\r\n+      100% { transform: translateY(0px) scaleX(${direction}); }\r\n+    }\r\n+  `;\r\n+\r\n+  return (\r\n+    <>\r\n+      <style>{animations}</style>\r\n+      <div \r\n+        ref={botRef}\r\n+        onClick={handleClick}\r\n+        style={{\r\n+          position: 'fixed',\r\n+          left: `${position.x}px`,\r\n+          top: `${position.y}px`,\r\n+          fontSize: '2.5rem',\r\n+          cursor: 'pointer',\r\n+          transition: 'all 0.3s ease',\r\n+          transform: `scaleX(${direction})`,\r\n+          zIndex: 100,\r\n+          filter: darkMode \r\n+            ? 'drop-shadow(0 0 8px rgba(255,255,255,0.7))' \r\n+            : 'drop-shadow(0 0 8px rgba(0,0,0,0.3))',\r\n+          userSelect: 'none',\r\n+          animation: 'float 4s ease-in-out infinite'\r\n+        }}\r\n+      >\r\n+        <div style={{ \r\n+          position: 'relative',\r\n+          display: 'flex',\r\n+          flexDirection: 'column',\r\n+          alignItems: 'center'\r\n+        }}>\r\n+          {/* Bot icon with costume */}\r\n+          <div style={{\r\n+            position: 'relative',\r\n+            width: '60px',\r\n+            height: '60px',\r\n+            backgroundColor: darkMode ? '#4a5568' : '#3b82f6',\r\n+            borderRadius: '50%',\r\n+            display: 'flex',\r\n+            justifyContent: 'center',\r\n+            alignItems: 'center',\r\n+            color: 'white'\r\n+          }}>\r\n+            <span style={{ fontSize: '1.8rem' }}>{expression}</span>\r\n+            {costume && (\r\n+              <span style={{\r\n+                position: 'absolute',\r\n+                top: '-15px',\r\n+                right: '-10px',\r\n+                fontSize: '1.5rem',\r\n+                transform: 'rotate(15deg)'\r\n+              }}>\r\n+                {costume}\r\n+              </span>\r\n+            )}\r\n+          </div>\r\n+        </div>\r\n+      </div>\r\n+    </>\r\n+  );\r\n+};\r\n+\r\n+// Chat Modal Component with Direct Gemini API Connection\r\n+const ChatModal = ({ darkMode, onClose }) => {\r\n+  const [messages, setMessages] = useState([\r\n+    { text: \"Hello! I'm UrbanBuddy, your AI assistant powered by Gemini. How can I help you with urban living today?\", sender: 'bot' }\r\n+  ]);\r\n+  const [inputValue, setInputValue] = useState('');\r\n+  const [isTyping, setIsTyping] = useState(false);\r\n+  const chatEndRef = useRef(null);\r\n+  const inputRef = useRef(null);\r\n+\r\n+  // Auto-scroll to bottom and focus input\r\n+  useEffect(() => {\r\n+    chatEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n+    inputRef.current?.focus();\r\n+  }, [messages]);\r\n+\r\n+  // Direct API call to Gemini through a proxy\r\n+  const generateResponse = async (userMessage) => {\r\n+    setIsTyping(true);\r\n+    \r\n+    try {\r\n+      // Using a public AI API gateway (no API key needed)\r\n+      const response = await fetch('https://gemini-proxy.vercel.app/api/generate', {\r\n+        method: \"POST\",\r\n+        headers: { \r\n+          \"Content-Type\": \"application/json\",\r\n+        },\r\n+        body: JSON.stringify({\r\n+          prompt: `You are UrbanBuddy, a friendly AI assistant for urban living. \r\n+          Respond to this query about city life: ${userMessage}\r\n+          Keep responses concise (1-2 sentences) and helpful.`\r\n+        })\r\n+      });\r\n+      \r\n+      const data = await response.json();\r\n+      \r\n+      setMessages(prev => [...prev, { \r\n+        text: data.response || \"I'm here to help with urban living questions!\", \r\n+        sender: 'bot' \r\n+      }]);\r\n+    } catch (error) {\r\n+      console.error(\"API error:\", error);\r\n+      setMessages(prev => [...prev, { \r\n+        text: \"I'm having trouble connecting right now. Try again later!\", \r\n+        sender: 'bot' \r\n+      }]);\r\n+    } finally {\r\n+      setIsTyping(false);\r\n+    }\r\n+  };\r\n+\r\n+  const handleSendMessage = async (e) => {\r\n+    e.preventDefault();\r\n+    if (inputValue.trim() && !isTyping) {\r\n+      // Add user message\r\n+      const userMessage = inputValue.trim();\r\n+      setMessages(prev => [...prev, { text: userMessage, sender: 'user' }]);\r\n+      setInputValue('');\r\n+      \r\n+      // Generate AI response\r\n+      await generateResponse(userMessage);\r\n+    }\r\n+  };\r\n+\r\n+  return (\r\n+    <div style={{\r\n+      position: 'fixed',\r\n+      bottom: '100px',\r\n+      right: '30px',\r\n+      width: '350px',\r\n+      maxWidth: '90%',\r\n+      backgroundColor: darkMode ? '#2d3748' : 'white',\r\n+      borderRadius: '16px',\r\n+      boxShadow: '0 10px 25px rgba(0, 0, 0, 0.2)',\r\n+      border: darkMode ? '1px solid #4a5568' : '1px solid #e2e8f0',\r\n+      zIndex: 1000,\r\n+      overflow: 'hidden',\r\n+      display: 'flex',\r\n+      flexDirection: 'column',\r\n+      maxHeight: '60vh'\r\n+    }}>\r\n+      {/* Chat header */}\r\n+      <div style={{\r\n+        padding: '1rem',\r\n+        backgroundColor: darkMode ? '#4a5568' : '#3b82f6',\r\n+        color: 'white',\r\n+        display: 'flex',\r\n+        justifyContent: 'space-between',\r\n+        alignItems: 'center'\r\n+      }}>\r\n+        <div style={{ display: 'flex', alignItems: 'center', gap: '0.5rem' }}>\r\n+          <span style={{ fontSize: '1.5rem' }}>ü§ñ</span>\r\n+          <h3 style={{ margin: 0 }}>UrbanBuddy AI</h3>\r\n+          {isTyping && (\r\n+            <span style={{ \r\n+              fontSize: '0.8rem',\r\n+              marginLeft: '0.5rem',\r\n+              opacity: 0.8\r\n+            }}>typing...</span>\r\n+          )}\r\n+        </div>\r\n+        <button \r\n+          onClick={onClose}\r\n+          style={{\r\n+            background: 'none',\r\n+            border: 'none',\r\n+            color: 'white',\r\n+            fontSize: '1.2rem',\r\n+            cursor: 'pointer'\r\n+          }}\r\n+        >\r\n+          √ó\r\n+        </button>\r\n+      </div>\r\n+      \r\n+      {/* Chat messages */}\r\n+      <div style={{\r\n+        flex: 1,\r\n+        padding: '1rem',\r\n+        overflowY: 'auto',\r\n+        display: 'flex',\r\n+        flexDirection: 'column',\r\n+        gap: '0.8rem'\r\n+      }}>\r\n+        {messages.map((msg, index) => (\r\n+          <div \r\n+            key={index}\r\n+            style={{\r\n+              alignSelf: msg.sender === 'user' ? 'flex-end' : 'flex-start',\r\n+              maxWidth: '80%',\r\n+              padding: '0.6rem 1rem',\r\n+              borderRadius: msg.sender === 'user' \r\n+                ? '18px 18px 0 18px' \r\n+                : '18px 18px 18px 0',\r\n+              backgroundColor: msg.sender === 'user'\r\n+                ? (darkMode ? '#4a5568' : '#3b82f6')\r\n+                : (darkMode ? '#4a5568' : '#e2e8f0'),\r\n+              color: msg.sender === 'user' ? 'white' : (darkMode ? 'white' : '#1e293b'),\r\n+              animation: msg.sender === 'bot' && index === messages.length - 1 \r\n+                ? 'fadeIn 0.3s ease' \r\n+                : 'none'\r\n+            }}\r\n+          >\r\n+            {msg.text}\r\n+          </div>\r\n+        ))}\r\n+        <div ref={chatEndRef} />\r\n+      </div>\r\n+      \r\n+      {/* Chat input */}\r\n+      <form onSubmit={handleSendMessage} style={{\r\n+        padding: '0.8rem',\r\n+        borderTop: darkMode ? '1px solid #4a5568' : '1px solid #e2e8f0',\r\n+        display: 'flex',\r\n+        gap: '0.5rem'\r\n+      }}>\r\n+        <input\r\n+          ref={inputRef}\r\n+          type=\"text\"\r\n+          value={inputValue}\r\n+          onChange={(e) => setInputValue(e.target.value)}\r\n+          placeholder=\"Ask me about urban living...\"\r\n+          disabled={isTyping}\r\n+          style={{\r\n+            flex: 1,\r\n+            padding: '0.6rem 1rem',\r\n+            borderRadius: '20px',\r\n+            border: darkMode ? '1px solid #4a5568' : '1px solid #e2e8f0',\r\n+            backgroundColor: darkMode ? '#2d3748' : 'white',\r\n+            color: darkMode ? 'white' : '#1e293b',\r\n+            outline: 'none',\r\n+            opacity: isTyping ? 0.7 : 1\r\n+          }}\r\n+        />\r\n+        <button \r\n+          type=\"submit\"\r\n+          disabled={isTyping}\r\n+          style={{\r\n+            background: isTyping \r\n+              ? (darkMode ? '#4a5568' : '#e2e8f0')\r\n+              : (darkMode ? '#4a5568' : '#3b82f6'),\r\n+            color: 'white',\r\n+            border: 'none',\r\n+            borderRadius: '50%',\r\n+            width: '40px',\r\n+            height: '40px',\r\n+            display: 'flex',\r\n+            alignItems: 'center',\r\n+            justifyContent: 'center',\r\n+            cursor: isTyping ? 'not-allowed' : 'pointer'\r\n+          }}\r\n+        >\r\n+          {isTyping ? '...' : '‚û§'}\r\n+        </button>\r\n+      </form>\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+// Main Home Component\r\n+export default function Home() {\r\n+  const navigate = useNavigate();\r\n+  const [searchQuery, setSearchQuery] = useState('');\r\n+  const [darkMode, setDarkMode] = useState(false);\r\n+  const [selectedService, setSelectedService] = useState(null);\r\n+  const [orderCount, setOrderCount] = useState(0);\r\n+  const [achievements, setAchievements] = useState([]);\r\n+  const [showChat, setShowChat] = useState(false);\r\n+\r\n+  const services = [\r\n+    { \r\n+      name: 'Transport', \r\n+      path: '/transport', \r\n+      icon: 'üöå', \r\n+      desc: 'Plan your multi-modal journey across the city',\r\n+      color: '#3b82f6',\r\n+      details: 'Find the best routes combining metro, buses, and bikes. Real-time updates and ticket purchasing available.'\r\n+    },\r\n+    { \r\n+      name: 'Food Delivery', \r\n+      path: '/food', \r\n+      icon: 'üçî', \r\n+      desc: 'Discover local restaurants and cafes',\r\n+      color: '#ef4444',\r\n+      details: 'Order from hundreds of restaurants with special discounts. Track your delivery in real-time.'\r\n+    },\r\n+    { \r\n+      name: 'Groceries', \r\n+      path: '/food', \r\n+      icon: 'üõí', \r\n+      desc: 'Get groceries delivered in minutes',\r\n+      color: '#10b981',\r\n+      details: 'Same-day delivery from local supermarkets. Schedule recurring orders for essentials.'\r\n+    },\r\n+    { \r\n+      name: 'Services', \r\n+      path: '/food', \r\n+      icon: 'üõ†Ô∏è', \r\n+      desc: 'Find urban services near you',\r\n+      color: '#8b5cf6',\r\n+      details: 'Book home services, repairs, and professional help with verified providers.'\r\n+    }\r\n+  ];\r\n+\r\n+  // Check for achievements\r\n+  useEffect(() => {\r\n+    if (orderCount === 1) {\r\n+      addAchievement('First Order!', 'üéâ');\r\n+    } else if (orderCount === 5) {\r\n+      addAchievement('Regular Customer!', 'üèÜ');\r\n+    } else if (orderCount === 10) {\r\n+      addAchievement('Super User!', 'üåü');\r\n+    }\r\n+  }, [orderCount]);\r\n+\r\n+  const addAchievement = (title, icon) => {\r\n+    if (!achievements.some(a => a.title === title)) {\r\n+      const newAchievement = { title, icon, id: Date.now() };\r\n+      setAchievements(prev => [...prev, newAchievement]);\r\n+      \r\n+      // Auto-hide achievement after 3 seconds\r\n+      setTimeout(() => {\r\n+        setAchievements(prev => prev.filter(a => a.id !== newAchievement.id));\r\n+      }, 3000);\r\n+    }\r\n+  };\r\n+\r\n+  const handleSearch = (e) => {\r\n+    e.preventDefault();\r\n+    if (searchQuery.trim()) {\r\n+      navigate(`/food?search=${encodeURIComponent(searchQuery)}`);\r\n+    }\r\n+  };\r\n+\r\n+  const toggleDarkMode = () => {\r\n+    setDarkMode(!darkMode);\r\n+  };\r\n+\r\n+  const openServicePopup = (service) => {\r\n+    setSelectedService(service);\r\n+    setOrderCount(prev => prev + 1);\r\n+  };\r\n+\r\n+  const closePopup = () => {\r\n+    setSelectedService(null);\r\n+  };\r\n+\r\n+  const toggleChat = () => {\r\n+    setShowChat(!showChat);\r\n+  };\r\n+\r\n+  return (\r\n+    <div style={{\r\n+      backgroundColor: darkMode ? '#1a202c' : '#f8fafc',\r\n+      minHeight: '100vh',\r\n+      paddingBottom: '3rem',\r\n+      color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+      transition: 'all 0.3s ease',\r\n+      position: 'relative'\r\n+    }}>\r\n+      {/* Theme Toggle Button */}\r\n+      <button \r\n+        onClick={toggleDarkMode} \r\n+        style={{\r\n+          position: 'fixed',\r\n+          top: '1.5rem',\r\n+          right: '1.5rem',\r\n+          background: darkMode ? '#4a5568' : '#e2e8f0',\r\n+          border: 'none',\r\n+          borderRadius: '50%',\r\n+          width: '40px',\r\n+          height: '40px',\r\n+          display: 'flex',\r\n+          alignItems: 'center',\r\n+          justifyContent: 'center',\r\n+          cursor: 'pointer',\r\n+          transition: 'all 0.3s ease',\r\n+          boxShadow: '0 2px 5px rgba(0, 0, 0, 0.2)',\r\n+          zIndex: 100\r\n+        }}\r\n+        aria-label={darkMode ? 'Switch to light mode' : 'Switch to dark mode'}\r\n+      >\r\n+        {darkMode ? '‚òÄÔ∏è' : 'üåô'}\r\n+      </button>\r\n+      \r\n+      {/* Hero Section with UrbanBuddy */}\r\n+      <section style={{\r\n+        background: darkMode \r\n+          ? 'linear-gradient(135deg, #2d3748 0%, #1a202c 100%)' \r\n+          : 'linear-gradient(135deg, #6b46c1 0%, #3b82f6 100%)',\r\n+        color: 'white',\r\n+        padding: '4rem 1rem',\r\n+        textAlign: 'center',\r\n+        borderRadius: '0 0 20px 20px',\r\n+        boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',\r\n+        position: 'relative',\r\n+        overflow: 'hidden',\r\n+        height: '300px'\r\n+      }}>\r\n+        <div style={{\r\n+          maxWidth: '800px',\r\n+          margin: '0 auto',\r\n+          position: 'relative',\r\n+          zIndex: 2\r\n+        }}>\r\n+          <h1 style={{\r\n+            fontSize: '3.5rem',\r\n+            fontWeight: '800',\r\n+            marginBottom: '0.5rem',\r\n+            textShadow: '2px 2px 4px rgba(0, 0, 0, 0.2)',\r\n+          }}>UrbanFlow</h1>\r\n+          <p style={{\r\n+            fontSize: '1.25rem',\r\n+            marginBottom: '2rem',\r\n+            opacity: 0.9,\r\n+          }}>Your seamless urban living companion</p>\r\n+          \r\n+          <form onSubmit={handleSearch} style={{\r\n+            display: 'flex',\r\n+            maxWidth: '600px',\r\n+            margin: '0 auto',\r\n+            borderRadius: '50px',\r\n+            overflow: 'hidden',\r\n+            boxShadow: '0 4px 10px rgba(0, 0, 0, 0.2)',\r\n+          }}>\r\n+            <input\r\n+              type=\"text\"\r\n+              placeholder=\"Search for restaurants, services...\"\r\n+              value={searchQuery}\r\n+              onChange={(e) => setSearchQuery(e.target.value)}\r\n+              style={{\r\n+                flex: 1,\r\n+                padding: '1rem 1.5rem',\r\n+                border: 'none',\r\n+                fontSize: '1rem',\r\n+                outline: 'none',\r\n+                backgroundColor: darkMode ? '#2d3748' : 'white',\r\n+                color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+              }}\r\n+            />\r\n+            <button type=\"submit\" style={{\r\n+              backgroundColor: darkMode ? '#4a5568' : '#1e40af',\r\n+              color: 'white',\r\n+              border: 'none',\r\n+              padding: '0 1.5rem',\r\n+              cursor: 'pointer',\r\n+              fontSize: '1.25rem',\r\n+              transition: 'background-color 0.2s'\r\n+            }}>\r\n+              <span>üîç</span>\r\n+            </button>\r\n+          </form>\r\n+        </div>\r\n+        <UrbanBuddy darkMode={darkMode} onChatOpen={toggleChat} />\r\n+      </section>\r\n+\r\n+      {/* Services Grid */}\r\n+      <section style={{\r\n+        padding: '2rem 1rem',\r\n+        maxWidth: '1200px',\r\n+        margin: '0 auto',\r\n+      }}>\r\n+        <h2 style={{\r\n+          fontSize: '2rem',\r\n+          fontWeight: '700',\r\n+          marginBottom: '1.5rem',\r\n+          color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+          textAlign: 'center',\r\n+        }}>What do you need today?</h2>\r\n+        <div style={{\r\n+          display: 'grid',\r\n+          gridTemplateColumns: 'repeat(auto-fit, minmax(250px, 1fr))',\r\n+          gap: '1.5rem',\r\n+          marginTop: '1rem',\r\n+        }}>\r\n+          {services.map((service) => (\r\n+            <div \r\n+              key={service.name} \r\n+              style={{ \r\n+                padding: '2rem 1.5rem',\r\n+                borderRadius: '16px',\r\n+                border: `2px solid ${service.color}`,\r\n+                textAlign: 'center',\r\n+                cursor: 'pointer',\r\n+                transition: 'transform 0.3s, box-shadow 0.3s',\r\n+                backgroundColor: darkMode \r\n+                  ? `${service.color}20` \r\n+                  : `${service.color}10`,\r\n+                ':hover': {\r\n+                  transform: 'translateY(-5px)',\r\n+                  boxShadow: '0 10px 20px rgba(0, 0, 0, 0.1)',\r\n+                }\r\n+              }}\r\n+              onClick={() => openServicePopup(service)}\r\n+            >\r\n+              <div style={{ \r\n+                fontSize: '3rem',\r\n+                marginBottom: '1rem',\r\n+                display: 'inline-block',\r\n+                animation: 'float 3s ease-in-out infinite'\r\n+              }}>{service.icon}</div>\r\n+              <h3 style={{fontSize: '1.5rem', fontWeight: '600', marginBottom: '0.5rem'}}>{service.name}</h3>\r\n+              <p style={{color: darkMode ? '#a0aec0' : '#64748b'}}>{service.desc}</p>\r\n+            </div>\r\n+          ))}\r\n+        </div>\r\n+      </section>\r\n+\r\n+      {/* Featured Section */}\r\n+      <section style={{\r\n+        padding: '2rem 1rem',\r\n+        maxWidth: '1200px',\r\n+        margin: '0 auto',\r\n+      }}>\r\n+        <h2 style={{\r\n+          fontSize: '2rem',\r\n+          fontWeight: '700',\r\n+          marginBottom: '1.5rem',\r\n+          color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+          textAlign: 'center',\r\n+        }}>Quick Access</h2>\r\n+        <div style={{\r\n+          display: 'flex',\r\n+          justifyContent: 'center',\r\n+          gap: '1rem',\r\n+          flexWrap: 'wrap',\r\n+        }}>\r\n+          <button \r\n+            onClick={() => navigate('/transport?from=home&to=downtown')}\r\n+            style={{\r\n+              padding: '0.75rem 1.5rem',\r\n+              borderRadius: '50px',\r\n+              border: 'none',\r\n+              backgroundColor: darkMode ? '#2d3748' : '#e2e8f0',\r\n+              color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+              fontWeight: '600',\r\n+              cursor: 'pointer',\r\n+              transition: 'all 0.2s',\r\n+              display: 'flex',\r\n+              alignItems: 'center',\r\n+              gap: '0.5rem',\r\n+              fontSize: '1rem'\r\n+            }}\r\n+          >\r\n+            üöï To Downtown\r\n+          </button>\r\n+          <button \r\n+            onClick={() => navigate('/food?category=fastfood')}\r\n+            style={{\r\n+              padding: '0.75rem 1.5rem',\r\n+              borderRadius: '50px',\r\n+              border: 'none',\r\n+              backgroundColor: darkMode ? '#2d3748' : '#e2e8f0',\r\n+              color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+              fontWeight: '600',\r\n+              cursor: 'pointer',\r\n+              transition: 'all 0.2s',\r\n+              display: 'flex',\r\n+              alignItems: 'center',\r\n+              gap: '0.5rem',\r\n+              fontSize: '1rem'\r\n+            }}\r\n+          >\r\n+            üçü Fast Food\r\n+          </button>\r\n+          <button \r\n+            onClick={() => navigate('/food?category=coffee')}\r\n+            style={{\r\n+              padding: '0.75rem 1.5rem',\r\n+              borderRadius: '50px',\r\n+              border: 'none',\r\n+              backgroundColor: darkMode ? '#2d3748' : '#e2e8f0',\r\n+              color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+              fontWeight: '600',\r\n+              cursor: 'pointer',\r\n+              transition: 'all 0.2s',\r\n+              display: 'flex',\r\n+              alignItems: 'center',\r\n+              gap: '0.5rem',\r\n+              fontSize: '1rem'\r\n+            }}\r\n+          >\r\n+            ‚òï Coffee Shops\r\n+          </button>\r\n+        </div>\r\n+      </section>\r\n+\r\n+      {/* Service Popup */}\r\n+      {selectedService && (\r\n+        <div style={{\r\n+          position: 'fixed',\r\n+          top: 0,\r\n+          left: 0,\r\n+          right: 0,\r\n+          bottom: 0,\r\n+          backgroundColor: 'rgba(0, 0, 0, 0.7)',\r\n+          display: 'flex',\r\n+          justifyContent: 'center',\r\n+          alignItems: 'center',\r\n+          zIndex: 1000,\r\n+        }} onClick={closePopup}>\r\n+          <div style={{\r\n+            backgroundColor: darkMode ? '#2d3748' : 'white',\r\n+            borderRadius: '16px',\r\n+            padding: '2rem',\r\n+            maxWidth: '500px',\r\n+            width: '90%',\r\n+            boxShadow: '0 10px 25px rgba(0, 0, 0, 0.2)',\r\n+            position: 'relative',\r\n+            border: darkMode ? '1px solid #4a5568' : '1px solid #e2e8f0',\r\n+          }} onClick={(e) => e.stopPropagation()}>\r\n+            <button style={{\r\n+              position: 'absolute',\r\n+              top: '1rem',\r\n+              right: '1rem',\r\n+              background: 'none',\r\n+              border: 'none',\r\n+              fontSize: '1.5rem',\r\n+              cursor: 'pointer',\r\n+              color: darkMode ? '#a0aec0' : '#64748b',\r\n+            }} onClick={closePopup}>√ó</button>\r\n+            <div style={{ \r\n+              display: 'flex', \r\n+              alignItems: 'center', \r\n+              gap: '1rem',\r\n+              marginBottom: '1.5rem'\r\n+            }}>\r\n+              <span style={{ fontSize: '2.5rem', animation: 'float 3s ease-in-out infinite' }}>{selectedService.icon}</span>\r\n+              <h3 style={{fontSize: '1.8rem', fontWeight: '700', marginBottom: '1rem', color: darkMode ? '#e2e8f0' : '#1e293b'}}>{selectedService.name}</h3>\r\n+            </div>\r\n+            <p style={{color: darkMode ? '#a0aec0' : '#64748b', fontSize: '1.1rem', lineHeight: '1.6', marginBottom: '2rem'}}>{selectedService.details}</p>\r\n+            <button \r\n+              style={{ \r\n+                padding: '0.75rem 1.5rem',\r\n+                borderRadius: '8px',\r\n+                border: 'none',\r\n+                backgroundColor: selectedService.color,\r\n+                color: 'white',\r\n+                fontWeight: '600',\r\n+                cursor: 'pointer',\r\n+                transition: 'all 0.2s',\r\n+                fontSize: '1rem'\r\n+              }}\r\n+              onClick={() => {\r\n+                navigate(selectedService.path);\r\n+                closePopup();\r\n+              }}\r\n+            >\r\n+              Explore {selectedService.name}\r\n+            </button>\r\n+          </div>\r\n+        </div>\r\n+      )}\r\n+\r\n+      {/* Achievements */}\r\n+      {achievements.map(achievement => (\r\n+        <div key={achievement.id} style={{\r\n+          position: 'fixed',\r\n+          bottom: '20px',\r\n+          right: '20px',\r\n+          background: darkMode ? '#2d3748' : 'white',\r\n+          color: darkMode ? 'white' : '#1e293b',\r\n+          padding: '1rem',\r\n+          borderRadius: '12px',\r\n+          boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',\r\n+          display: 'flex',\r\n+          alignItems: 'center',\r\n+          gap: '0.5rem',\r\n+          zIndex: 1000,\r\n+          animation: 'slideIn 0.5s forwards, fadeOut 0.5s forwards 2.5s'\r\n+        }}>\r\n+          <span style={{fontSize: '1.5rem'}}>{achievement.icon}</span>\r\n+          <span>{achievement.title}</span>\r\n+        </div>\r\n+      ))}\r\n+\r\n+      {/* Chat Modal */}\r\n+      {showChat && <ChatModal darkMode={darkMode} onClose={toggleChat} />}\r\n+\r\n+      {/* Footer with copyright */}\r\n+      <footer style={{\r\n+        textAlign: 'center',\r\n+        padding: '2rem 1rem',\r\n+        color: darkMode ? '#a0aec0' : '#64748b',\r\n+        fontSize: '0.9rem',\r\n+        marginTop: '2rem'\r\n+      }}>\r\n+        <p>¬© {new Date().getFullYear()} UrbanFlow - Created by Nick</p>\r\n+      </footer>\r\n+    </div>\r\n+  );\r\n+};\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752653116614,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,527 @@\n+import { useState, useEffect, useRef } from 'react';\r\n+import { useNavigate } from 'react-router-dom';\r\n+\r\n+// UrbanBuddy AI Assistant Component with proper bot icon\r\n+const UrbanBuddy = ({ darkMode, onChatOpen }) => {\r\n+  const [position, setPosition] = useState({ x: 20, y: 50 });\r\n+  const [direction, setDirection] = useState(1);\r\n+  const botRef = useRef(null);\r\n+  const lastInteractionTime = useRef(Date.now());\r\n+\r\n+  useEffect(() => {\r\n+    const moveInterval = setInterval(() => {\r\n+      setPosition(prev => {\r\n+        const now = Date.now();\r\n+        const timeSinceLastInteraction = now - lastInteractionTime.current;\r\n+        const speedMultiplier = timeSinceLastInteraction < 5000 ? 2 : 1;\r\n+        \r\n+        let newX = prev.x + (3 * direction * speedMultiplier);\r\n+        let newY = prev.y + (Math.random() * 6 - 3);\r\n+        \r\n+        if (newX > window.innerWidth - 80) setDirection(-1);\r\n+        if (newX < 20) setDirection(1);\r\n+        if (newY < 20) newY = 20;\r\n+        if (newY > window.innerHeight - 100) newY = window.innerHeight - 100;\r\n+        \r\n+        return { x: newX, y: newY };\r\n+      });\r\n+    }, 100);\r\n+\r\n+    return () => clearInterval(moveInterval);\r\n+  }, [direction]);\r\n+\r\n+  const handleClick = () => {\r\n+    lastInteractionTime.current = Date.now();\r\n+    onChatOpen();\r\n+  };\r\n+\r\n+  return (\r\n+    <div \r\n+      ref={botRef}\r\n+      onClick={handleClick}\r\n+      style={{\r\n+        position: 'fixed',\r\n+        left: `${position.x}px`,\r\n+        top: `${position.y}px`,\r\n+        fontSize: '2.5rem',\r\n+        cursor: 'pointer',\r\n+        transition: 'all 0.3s ease',\r\n+        transform: `scaleX(${direction})`,\r\n+        zIndex: 100,\r\n+        filter: darkMode \r\n+          ? 'drop-shadow(0 0 8px rgba(255,255,255,0.7))' \r\n+          : 'drop-shadow(0 0 8px rgba(0,0,0,0.3))',\r\n+        userSelect: 'none',\r\n+        animation: 'float 4s ease-in-out infinite'\r\n+      }}\r\n+    >\r\n+      <div style={{ \r\n+        position: 'relative',\r\n+        display: 'flex',\r\n+        flexDirection: 'column',\r\n+        alignItems: 'center'\r\n+      }}>\r\n+        <div style={{\r\n+          width: '60px',\r\n+          height: '60px',\r\n+          backgroundColor: darkMode ? '#4a5568' : '#3b82f6',\r\n+          borderRadius: '50%',\r\n+          display: 'flex',\r\n+          justifyContent: 'center',\r\n+          alignItems: 'center',\r\n+          color: 'white'\r\n+        }}>\r\n+          <span style={{ fontSize: '1.8rem' }}>ü§ñ</span>\r\n+        </div>\r\n+      </div>\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+// Chat Modal Component with Gemini API Connection\r\n+const ChatModal = ({ darkMode, onClose }) => {\r\n+  const [messages, setMessages] = useState([\r\n+    { text: \"Hello! I'm UrbanBuddy, your AI assistant. How can I help you with urban services today?\", sender: 'bot' }\r\n+  ]);\r\n+  const [inputValue, setInputValue] = useState('');\r\n+  const [isTyping, setIsTyping] = useState(false);\r\n+  const chatEndRef = useRef(null);\r\n+  const inputRef = useRef(null);\r\n+\r\n+  useEffect(() => {\r\n+    chatEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n+    inputRef.current?.focus();\r\n+  }, [messages]);\r\n+\r\n+  const generateResponse = async (userMessage) => {\r\n+    setIsTyping(true);\r\n+    \r\n+    try {\r\n+      const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent?key=${process.env.REACT_APP_GEMINI_API_KEY}`, {\r\n+        method: \"POST\",\r\n+        headers: { \"Content-Type\": \"application/json\" },\r\n+        body: JSON.stringify({\r\n+          contents: [{\r\n+            parts: [{\r\n+              text: `As UrbanBuddy, a friendly AI assistant for urban services, provide a helpful 1-2 sentence response to this query: ${userMessage}`\r\n+            }]\r\n+          }]\r\n+        })\r\n+      });\r\n+      \r\n+      const data = await response.json();\r\n+      const botResponse = data.candidates?.[0]?.content?.parts?.[0]?.text || \r\n+                         \"I can help with transport, food, and other urban services!\";\r\n+      \r\n+      setMessages(prev => [...prev, { text: botResponse, sender: 'bot' }]);\r\n+    } catch (error) {\r\n+      console.error(\"API error:\", error);\r\n+      setMessages(prev => [...prev, { \r\n+        text: \"Connection issue - please try again later\", \r\n+        sender: 'bot' \r\n+      }]);\r\n+    } finally {\r\n+      setIsTyping(false);\r\n+    }\r\n+  };\r\n+\r\n+  const handleSendMessage = async (e) => {\r\n+    e.preventDefault();\r\n+    if (inputValue.trim() && !isTyping) {\r\n+      const userMessage = inputValue.trim();\r\n+      setMessages(prev => [...prev, { text: userMessage, sender: 'user' }]);\r\n+      setInputValue('');\r\n+      await generateResponse(userMessage);\r\n+    }\r\n+  };\r\n+\r\n+  return (\r\n+    <div style={{\r\n+      position: 'fixed',\r\n+      bottom: '100px',\r\n+      right: '30px',\r\n+      width: '350px',\r\n+      maxWidth: '90%',\r\n+      backgroundColor: darkMode ? '#2d3748' : 'white',\r\n+      borderRadius: '16px',\r\n+      boxShadow: '0 10px 25px rgba(0, 0, 0, 0.2)',\r\n+      zIndex: 1000,\r\n+      overflow: 'hidden',\r\n+      display: 'flex',\r\n+      flexDirection: 'column',\r\n+      maxHeight: '60vh'\r\n+    }}>\r\n+      <div style={{\r\n+        padding: '1rem',\r\n+        backgroundColor: darkMode ? '#4a5568' : '#3b82f6',\r\n+        color: 'white',\r\n+        display: 'flex',\r\n+        justifyContent: 'space-between',\r\n+        alignItems: 'center'\r\n+      }}>\r\n+        <div style={{ display: 'flex', alignItems: 'center', gap: '0.5rem' }}>\r\n+          <span style={{ fontSize: '1.5rem' }}>ü§ñ</span>\r\n+          <h3 style={{ margin: 0 }}>UrbanBuddy</h3>\r\n+          {isTyping && <span style={{ fontSize: '0.8rem', opacity: 0.8 }}>typing...</span>}\r\n+        </div>\r\n+        <button \r\n+          onClick={onClose}\r\n+          style={{\r\n+            background: 'none',\r\n+            border: 'none',\r\n+            color: 'white',\r\n+            fontSize: '1.2rem',\r\n+            cursor: 'pointer'\r\n+          }}\r\n+        >\r\n+          √ó\r\n+        </button>\r\n+      </div>\r\n+      \r\n+      <div style={{\r\n+        flex: 1,\r\n+        padding: '1rem',\r\n+        overflowY: 'auto',\r\n+        display: 'flex',\r\n+        flexDirection: 'column',\r\n+        gap: '0.8rem'\r\n+      }}>\r\n+        {messages.map((msg, index) => (\r\n+          <div \r\n+            key={index}\r\n+            style={{\r\n+              alignSelf: msg.sender === 'user' ? 'flex-end' : 'flex-start',\r\n+              maxWidth: '80%',\r\n+              padding: '0.6rem 1rem',\r\n+              borderRadius: msg.sender === 'user' \r\n+                ? '18px 18px 0 18px' \r\n+                : '18px 18px 18px 0',\r\n+              backgroundColor: msg.sender === 'user'\r\n+                ? (darkMode ? '#4a5568' : '#3b82f6')\r\n+                : (darkMode ? '#4a5568' : '#e2e8f0'),\r\n+              color: msg.sender === 'user' ? 'white' : (darkMode ? 'white' : '#1e293b'),\r\n+            }}\r\n+          >\r\n+            {msg.text}\r\n+          </div>\r\n+        ))}\r\n+        <div ref={chatEndRef} />\r\n+      </div>\r\n+      \r\n+      <form onSubmit={handleSendMessage} style={{\r\n+        padding: '0.8rem',\r\n+        borderTop: darkMode ? '1px solid #4a5568' : '1px solid #e2e8f0',\r\n+        display: 'flex',\r\n+        gap: '0.5rem'\r\n+      }}>\r\n+        <input\r\n+          ref={inputRef}\r\n+          type=\"text\"\r\n+          value={inputValue}\r\n+          onChange={(e) => setInputValue(e.target.value)}\r\n+          placeholder=\"Ask about urban services...\"\r\n+          disabled={isTyping}\r\n+          style={{\r\n+            flex: 1,\r\n+            padding: '0.6rem 1rem',\r\n+            borderRadius: '20px',\r\n+            border: darkMode ? '1px solid #4a5568' : '1px solid #e2e8f0',\r\n+            backgroundColor: darkMode ? '#2d3748' : 'white',\r\n+            color: darkMode ? 'white' : '#1e293b',\r\n+            outline: 'none'\r\n+          }}\r\n+        />\r\n+        <button \r\n+          type=\"submit\"\r\n+          disabled={isTyping}\r\n+          style={{\r\n+            background: isTyping \r\n+              ? (darkMode ? '#4a5568' : '#e2e8f0')\r\n+              : (darkMode ? '#4a5568' : '#3b82f6'),\r\n+            color: 'white',\r\n+            border: 'none',\r\n+            borderRadius: '50%',\r\n+            width: '40px',\r\n+            height: '40px',\r\n+            display: 'flex',\r\n+            alignItems: 'center',\r\n+            justifyContent: 'center',\r\n+            cursor: isTyping ? 'not-allowed' : 'pointer'\r\n+          }}\r\n+        >\r\n+          {isTyping ? '...' : '‚û§'}\r\n+        </button>\r\n+      </form>\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+// Main Home Component\r\n+export default function Home() {\r\n+  const navigate = useNavigate();\r\n+  const [darkMode, setDarkMode] = useState(false);\r\n+  const [showChat, setShowChat] = useState(false);\r\n+  const [searchQuery, setSearchQuery] = useState('');\r\n+  const [selectedService, setSelectedService] = useState(null);\r\n+  const [orderCount, setOrderCount] = useState(0);\r\n+  const [achievements, setAchievements] = useState([]);\r\n+\r\n+  const services = [\r\n+    { \r\n+      name: 'Transport', \r\n+      path: '/transport', \r\n+      icon: 'üöå', \r\n+      desc: 'Plan your multi-modal journey across the city',\r\n+      color: '#3b82f6'\r\n+    },\r\n+    { \r\n+      name: 'Food Delivery', \r\n+      path: '/food', \r\n+      icon: 'üçî', \r\n+      desc: 'Discover local restaurants and cafes',\r\n+      color: '#ef4444'\r\n+    },\r\n+    { \r\n+      name: 'Groceries', \r\n+      path: '/groceries', \r\n+      icon: 'üõí', \r\n+      desc: 'Get groceries delivered in minutes',\r\n+      color: '#10b981'\r\n+    },\r\n+    { \r\n+      name: 'Services', \r\n+      path: '/services', \r\n+      icon: 'üõ†Ô∏è', \r\n+      desc: 'Find urban services near you',\r\n+      color: '#8b5cf6'\r\n+    }\r\n+  ];\r\n+\r\n+  useEffect(() => {\r\n+    if (orderCount === 1) {\r\n+      addAchievement('First Order!', 'üéâ');\r\n+    } else if (orderCount === 5) {\r\n+      addAchievement('Regular Customer!', 'üèÜ');\r\n+    }\r\n+  }, [orderCount]);\r\n+\r\n+  const addAchievement = (title, icon) => {\r\n+    const newAchievement = { title, icon, id: Date.now() };\r\n+    setAchievements(prev => [...prev, newAchievement]);\r\n+    setTimeout(() => {\r\n+      setAchievements(prev => prev.filter(a => a.id !== newAchievement.id));\r\n+    }, 3000);\r\n+  };\r\n+\r\n+  const handleSearch = (e) => {\r\n+    e.preventDefault();\r\n+    if (searchQuery.trim()) {\r\n+      navigate(`/search?q=${encodeURIComponent(searchQuery)}`);\r\n+    }\r\n+  };\r\n+\r\n+  return (\r\n+    <div style={{\r\n+      backgroundColor: darkMode ? '#1a202c' : '#f8fafc',\r\n+      minHeight: '100vh',\r\n+      color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+      transition: 'all 0.3s ease'\r\n+    }}>\r\n+      {/* Header */}\r\n+      <header style={{\r\n+        background: darkMode \r\n+          ? 'linear-gradient(135deg, #2d3748 0%, #1a202c 100%)' \r\n+          : 'linear-gradient(135deg, #6b46c1 0%, #3b82f6 100%)',\r\n+        color: 'white',\r\n+        padding: '3rem 1rem',\r\n+        textAlign: 'center',\r\n+        borderRadius: '0 0 20px 20px',\r\n+        position: 'relative'\r\n+      }}>\r\n+        <h1 style={{ fontSize: '2.5rem', fontWeight: '800', marginBottom: '0.5rem' }}>UrbanFlow</h1>\r\n+        <p style={{ fontSize: '1.1rem', opacity: 0.9 }}>Your urban services companion</p>\r\n+        \r\n+        <form onSubmit={handleSearch} style={{\r\n+          display: 'flex',\r\n+          maxWidth: '600px',\r\n+          margin: '2rem auto 0',\r\n+          borderRadius: '50px',\r\n+          overflow: 'hidden',\r\n+          boxShadow: '0 4px 10px rgba(0, 0, 0, 0.2)',\r\n+        }}>\r\n+          <input\r\n+            type=\"text\"\r\n+            placeholder=\"Search for services...\"\r\n+            value={searchQuery}\r\n+            onChange={(e) => setSearchQuery(e.target.value)}\r\n+            style={{\r\n+              flex: 1,\r\n+              padding: '0.8rem 1.5rem',\r\n+              border: 'none',\r\n+              fontSize: '1rem',\r\n+              outline: 'none'\r\n+            }}\r\n+          />\r\n+          <button type=\"submit\" style={{\r\n+            backgroundColor: darkMode ? '#4a5568' : '#1e40af',\r\n+            color: 'white',\r\n+            border: 'none',\r\n+            padding: '0 1.5rem',\r\n+            cursor: 'pointer'\r\n+          }}>\r\n+            üîç\r\n+          </button>\r\n+        </form>\r\n+      </header>\r\n+\r\n+      {/* Services */}\r\n+      <section style={{ padding: '2rem 1rem', maxWidth: '1200px', margin: '0 auto' }}>\r\n+        <h2 style={{ fontSize: '1.8rem', textAlign: 'center', marginBottom: '2rem' }}>\r\n+          Urban Services\r\n+        </h2>\r\n+        <div style={{\r\n+          display: 'grid',\r\n+          gridTemplateColumns: 'repeat(auto-fit, minmax(250px, 1fr))',\r\n+          gap: '1.5rem'\r\n+        }}>\r\n+          {services.map(service => (\r\n+            <div \r\n+              key={service.name}\r\n+              onClick={() => {\r\n+                setSelectedService(service);\r\n+                setOrderCount(prev => prev + 1);\r\n+              }}\r\n+              style={{\r\n+                padding: '1.5rem',\r\n+                borderRadius: '12px',\r\n+                background: darkMode ? '#2d3748' : 'white',\r\n+                boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',\r\n+                textAlign: 'center',\r\n+                cursor: 'pointer',\r\n+                transition: 'transform 0.2s',\r\n+                ':hover': {\r\n+                  transform: 'translateY(-5px)'\r\n+                }\r\n+              }}\r\n+            >\r\n+              <div style={{ \r\n+                fontSize: '2.5rem',\r\n+                marginBottom: '1rem',\r\n+                color: service.color\r\n+              }}>\r\n+                {service.icon}\r\n+              </div>\r\n+              <h3 style={{ fontSize: '1.3rem', marginBottom: '0.5rem' }}>{service.name}</h3>\r\n+              <p style={{ color: darkMode ? '#a0aec0' : '#64748b' }}>{service.desc}</p>\r\n+            </div>\r\n+          ))}\r\n+        </div>\r\n+      </section>\r\n+\r\n+      {/* Service Modal */}\r\n+      {selectedService && (\r\n+        <div style={{\r\n+          position: 'fixed',\r\n+          top: 0,\r\n+          left: 0,\r\n+          right: 0,\r\n+          bottom: 0,\r\n+          backgroundColor: 'rgba(0, 0, 0, 0.7)',\r\n+          display: 'flex',\r\n+          justifyContent: 'center',\r\n+          alignItems: 'center',\r\n+          zIndex: 1000\r\n+        }} onClick={() => setSelectedService(null)}>\r\n+          <div style={{\r\n+            backgroundColor: darkMode ? '#2d3748' : 'white',\r\n+            borderRadius: '16px',\r\n+            padding: '2rem',\r\n+            maxWidth: '500px',\r\n+            width: '90%',\r\n+            textAlign: 'center'\r\n+          }} onClick={e => e.stopPropagation()}>\r\n+            <div style={{ fontSize: '3rem', marginBottom: '1rem', color: selectedService.color }}>\r\n+              {selectedService.icon}\r\n+            </div>\r\n+            <h3 style={{ fontSize: '1.8rem', marginBottom: '1rem' }}>{selectedService.name}</h3>\r\n+            <p style={{ marginBottom: '2rem', color: darkMode ? '#a0aec0' : '#64748b' }}>\r\n+              {selectedService.desc}\r\n+            </p>\r\n+            <button \r\n+              onClick={() => navigate(selectedService.path)}\r\n+              style={{\r\n+                padding: '0.8rem 1.5rem',\r\n+                backgroundColor: selectedService.color,\r\n+                color: 'white',\r\n+                border: 'none',\r\n+                borderRadius: '8px',\r\n+                cursor: 'pointer',\r\n+                fontSize: '1rem'\r\n+              }}\r\n+            >\r\n+              Explore {selectedService.name}\r\n+            </button>\r\n+          </div>\r\n+        </div>\r\n+      )}\r\n+\r\n+      {/* Achievements */}\r\n+      {achievements.map(achievement => (\r\n+        <div key={achievement.id} style={{\r\n+          position: 'fixed',\r\n+          bottom: '20px',\r\n+          right: '20px',\r\n+          background: darkMode ? '#2d3748' : 'white',\r\n+          color: darkMode ? 'white' : '#1e293b',\r\n+          padding: '1rem',\r\n+          borderRadius: '12px',\r\n+          boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',\r\n+          display: 'flex',\r\n+          alignItems: 'center',\r\n+          gap: '0.5rem',\r\n+          zIndex: 1000\r\n+        }}>\r\n+          <span style={{ fontSize: '1.5rem' }}>{achievement.icon}</span>\r\n+          <span>{achievement.title}</span>\r\n+        </div>\r\n+      ))}\r\n+\r\n+      {/* Theme Toggle */}\r\n+      <button \r\n+        onClick={() => setDarkMode(!darkMode)}\r\n+        style={{\r\n+          position: 'fixed',\r\n+          bottom: '20px',\r\n+          left: '20px',\r\n+          width: '50px',\r\n+          height: '50px',\r\n+          borderRadius: '50%',\r\n+          background: darkMode ? '#4a5568' : '#e2e8f0',\r\n+          border: 'none',\r\n+          cursor: 'pointer',\r\n+          fontSize: '1.5rem',\r\n+          display: 'flex',\r\n+          alignItems: 'center',\r\n+          justifyContent: 'center',\r\n+          zIndex: 100\r\n+        }}\r\n+      >\r\n+        {darkMode ? '‚òÄÔ∏è' : 'üåô'}\r\n+      </button>\r\n+\r\n+      {/* AI Components */}\r\n+      <UrbanBuddy darkMode={darkMode} onChatOpen={() => setShowChat(true)} />\r\n+      {showChat && <ChatModal darkMode={darkMode} onClose={() => setShowChat(false)} />}\r\n+\r\n+      {/* Footer */}\r\n+      <footer style={{\r\n+        textAlign: 'center',\r\n+        padding: '2rem 1rem',\r\n+        marginTop: '2rem',\r\n+        color: darkMode ? '#a0aec0' : '#64748b'\r\n+      }}>\r\n+        <p>¬© {new Date().getFullYear()} UrbanFlow - Urban Services Platform</p>\r\n+      </footer>\r\n+    </div>\r\n+  );\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752653186072,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,831 @@\n+import { useState, useEffect, useRef } from 'react';\r\n+import { useNavigate } from 'react-router-dom';\r\n+\r\n+// UrbanBuddy AI Assistant Component\r\n+const UrbanBuddy = ({ darkMode, onChatOpen }) => {\r\n+  const [position, setPosition] = useState({ x: 20, y: 50 });\r\n+  const [expression, setExpression] = useState('üòä');\r\n+  const [direction, setDirection] = useState(1);\r\n+  const [costume, setCostume] = useState(null);\r\n+  const [isActive, setIsActive] = useState(false);\r\n+  const botRef = useRef(null);\r\n+  const animationRef = useRef(null);\r\n+  const lastInteractionTime = useRef(Date.now());\r\n+\r\n+  // Seasonal costumes\r\n+  useEffect(() => {\r\n+    const today = new Date();\r\n+    const month = today.getMonth() + 1;\r\n+    \r\n+    if (month === 12) setCostume('üéÑ');\r\n+    else if (month === 10) setCostume('üéÉ');\r\n+    else if (month === 2) setCostume('üíù');\r\n+    else if (month === 4) setCostume('üå∏');\r\n+    else setCostume(null);\r\n+  }, []);\r\n+\r\n+  // Make the bot wander with more dynamic movement\r\n+  useEffect(() => {\r\n+    const moveInterval = setInterval(() => {\r\n+      setPosition(prev => {\r\n+        const now = Date.now();\r\n+        const timeSinceLastInteraction = now - lastInteractionTime.current;\r\n+        \r\n+        // More active movement right after interaction\r\n+        const speedMultiplier = timeSinceLastInteraction < 5000 ? 2 : 1;\r\n+        \r\n+        let newX = prev.x + (3 * direction * speedMultiplier);\r\n+        let newY = prev.y + (Math.random() * 6 - 3);\r\n+        \r\n+        // Bounce off edges\r\n+        if (newX > window.innerWidth - 80) {\r\n+          setDirection(-1);\r\n+          triggerAnimation('spin');\r\n+        }\r\n+        if (newX < 20) {\r\n+          setDirection(1);\r\n+          triggerAnimation('spin');\r\n+        }\r\n+        if (newY < 20) newY = 20;\r\n+        if (newY > window.innerHeight - 100) newY = window.innerHeight - 100;\r\n+        \r\n+        return { x: newX, y: newY };\r\n+      });\r\n+    }, 100);\r\n+\r\n+    return () => clearInterval(moveInterval);\r\n+  }, [direction]);\r\n+\r\n+  // Change expressions randomly with more variety\r\n+  useEffect(() => {\r\n+    const expressions = ['üòä', 'ü§î', 'üòÆ', 'üòé', 'üëã', 'ü§ñ', '‚ú®', 'üåü'];\r\n+    const expressionInterval = setInterval(() => {\r\n+      if (!isActive) {\r\n+        setExpression(expressions[Math.floor(Math.random() * expressions.length)]);\r\n+        // Random animations when idle\r\n+        if (Math.random() > 0.8) {\r\n+          triggerAnimation(['bounce', 'spin', 'wobble'][Math.floor(Math.random() * 3)]);\r\n+        }\r\n+      }\r\n+    }, 3000);\r\n+    return () => clearInterval(expressionInterval);\r\n+  }, [isActive]);\r\n+\r\n+  const triggerAnimation = (type) => {\r\n+    if (animationRef.current) {\r\n+      clearTimeout(animationRef.current);\r\n+    }\r\n+    \r\n+    const botElement = botRef.current;\r\n+    if (!botElement) return;\r\n+    \r\n+    botElement.style.animation = 'none';\r\n+    void botElement.offsetWidth; // Trigger reflow\r\n+    \r\n+    switch(type) {\r\n+      case 'spin':\r\n+        botElement.style.animation = 'spin 1s ease';\r\n+        break;\r\n+      case 'bounce':\r\n+        botElement.style.animation = 'bounce 0.5s ease';\r\n+        break;\r\n+      case 'wobble':\r\n+        botElement.style.animation = 'wobble 0.8s ease';\r\n+        break;\r\n+      default:\r\n+        botElement.style.animation = '';\r\n+    }\r\n+    \r\n+    animationRef.current = setTimeout(() => {\r\n+      if (botElement) botElement.style.animation = '';\r\n+    }, 1000);\r\n+  };\r\n+\r\n+  const handleClick = () => {\r\n+    lastInteractionTime.current = Date.now();\r\n+    setIsActive(true);\r\n+    triggerAnimation('bounce');\r\n+    setExpression('üí°');\r\n+    \r\n+    // Trigger chat opening in parent component\r\n+    onChatOpen();\r\n+    \r\n+    // Return to normal after a delay\r\n+    setTimeout(() => {\r\n+      setIsActive(false);\r\n+    }, 3000);\r\n+  };\r\n+\r\n+  // Custom animations\r\n+  const animations = `\r\n+    @keyframes spin {\r\n+      0% { transform: rotate(0deg) scaleX(${direction}); }\r\n+      100% { transform: rotate(360deg) scaleX(${direction}); }\r\n+    }\r\n+    @keyframes bounce {\r\n+      0%, 100% { transform: translateY(0) scaleX(${direction}); }\r\n+      50% { transform: translateY(-20px) scaleX(${direction}); }\r\n+    }\r\n+    @keyframes wobble {\r\n+      0%, 100% { transform: rotate(0deg) scaleX(${direction}); }\r\n+      25% { transform: rotate(5deg) scaleX(${direction}); }\r\n+      75% { transform: rotate(-5deg) scaleX(${direction}); }\r\n+    }\r\n+    @keyframes float {\r\n+      0% { transform: translateY(0px) scaleX(${direction}); }\r\n+      50% { transform: translateY(-10px) scaleX(${direction}); }\r\n+      100% { transform: translateY(0px) scaleX(${direction}); }\r\n+    }\r\n+  `;\r\n+\r\n+  return (\r\n+    <>\r\n+      <style>{animations}</style>\r\n+      <div \r\n+        ref={botRef}\r\n+        onClick={handleClick}\r\n+        style={{\r\n+          position: 'fixed',\r\n+          left: `${position.x}px`,\r\n+          top: `${position.y}px`,\r\n+          fontSize: '2.5rem',\r\n+          cursor: 'pointer',\r\n+          transition: 'all 0.3s ease',\r\n+          transform: `scaleX(${direction})`,\r\n+          zIndex: 100,\r\n+          filter: darkMode \r\n+            ? 'drop-shadow(0 0 8px rgba(255,255,255,0.7))' \r\n+            : 'drop-shadow(0 0 8px rgba(0,0,0,0.3))',\r\n+          userSelect: 'none',\r\n+          animation: 'float 4s ease-in-out infinite'\r\n+        }}\r\n+      >\r\n+        <div style={{ \r\n+          position: 'relative',\r\n+          display: 'flex',\r\n+          flexDirection: 'column',\r\n+          alignItems: 'center'\r\n+        }}>\r\n+          {/* Bot icon with costume */}\r\n+          <div style={{\r\n+            position: 'relative',\r\n+            width: '60px',\r\n+            height: '60px',\r\n+            backgroundColor: darkMode ? '#4a5568' : '#3b82f6',\r\n+            borderRadius: '50%',\r\n+            display: 'flex',\r\n+            justifyContent: 'center',\r\n+            alignItems: 'center',\r\n+            color: 'white'\r\n+          }}>\r\n+            <span style={{ fontSize: '1.8rem' }}>{expression}</span>\r\n+            {costume && (\r\n+              <span style={{\r\n+                position: 'absolute',\r\n+                top: '-15px',\r\n+                right: '-10px',\r\n+                fontSize: '1.5rem',\r\n+                transform: 'rotate(15deg)'\r\n+              }}>\r\n+                {costume}\r\n+              </span>\r\n+            )}\r\n+          </div>\r\n+        </div>\r\n+      </div>\r\n+    </>\r\n+  );\r\n+};\r\n+\r\n+// Chat Modal Component with Direct Gemini API Connection\r\n+const ChatModal = ({ darkMode, onClose }) => {\r\n+  const [messages, setMessages] = useState([\r\n+    { text: \"Hello! I'm UrbanBuddy, your AI assistant powered by Gemini. How can I help you with urban living today?\", sender: 'bot' }\r\n+  ]);\r\n+  const [inputValue, setInputValue] = useState('');\r\n+  const [isTyping, setIsTyping] = useState(false);\r\n+  const chatEndRef = useRef(null);\r\n+  const inputRef = useRef(null);\r\n+\r\n+  // Auto-scroll to bottom and focus input\r\n+  useEffect(() => {\r\n+    chatEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n+    inputRef.current?.focus();\r\n+  }, [messages]);\r\n+\r\n+  // Direct API call to Gemini through a proxy\r\n+  const generateResponse = async (userMessage) => {\r\n+    setIsTyping(true);\r\n+    \r\n+    try {\r\n+      // Using a public AI API gateway (no API key needed)\r\n+      const response = await fetch('https://gemini-proxy.vercel.app/api/generate', {\r\n+        method: \"POST\",\r\n+        headers: { \r\n+          \"Content-Type\": \"application/json\",\r\n+        },\r\n+        body: JSON.stringify({\r\n+          prompt: `You are UrbanBuddy, a friendly AI assistant for urban living. \r\n+          Respond to this query about city life: ${userMessage}\r\n+          Keep responses concise (1-2 sentences) and helpful.`\r\n+        })\r\n+      });\r\n+      \r\n+      const data = await response.json();\r\n+      \r\n+      setMessages(prev => [...prev, { \r\n+        text: data.response || \"I'm here to help with urban living questions!\", \r\n+        sender: 'bot' \r\n+      }]);\r\n+    } catch (error) {\r\n+      console.error(\"API error:\", error);\r\n+      setMessages(prev => [...prev, { \r\n+        text: \"I'm having trouble connecting right now. Try again later!\", \r\n+        sender: 'bot' \r\n+      }]);\r\n+    } finally {\r\n+      setIsTyping(false);\r\n+    }\r\n+  };\r\n+\r\n+  const handleSendMessage = async (e) => {\r\n+    e.preventDefault();\r\n+    if (inputValue.trim() && !isTyping) {\r\n+      // Add user message\r\n+      const userMessage = inputValue.trim();\r\n+      setMessages(prev => [...prev, { text: userMessage, sender: 'user' }]);\r\n+      setInputValue('');\r\n+      \r\n+      // Generate AI response\r\n+      await generateResponse(userMessage);\r\n+    }\r\n+  };\r\n+\r\n+  return (\r\n+    <div style={{\r\n+      position: 'fixed',\r\n+      bottom: '100px',\r\n+      right: '30px',\r\n+      width: '350px',\r\n+      maxWidth: '90%',\r\n+      backgroundColor: darkMode ? '#2d3748' : 'white',\r\n+      borderRadius: '16px',\r\n+      boxShadow: '0 10px 25px rgba(0, 0, 0, 0.2)',\r\n+      border: darkMode ? '1px solid #4a5568' : '1px solid #e2e8f0',\r\n+      zIndex: 1000,\r\n+      overflow: 'hidden',\r\n+      display: 'flex',\r\n+      flexDirection: 'column',\r\n+      maxHeight: '60vh'\r\n+    }}>\r\n+      {/* Chat header */}\r\n+      <div style={{\r\n+        padding: '1rem',\r\n+        backgroundColor: darkMode ? '#4a5568' : '#3b82f6',\r\n+        color: 'white',\r\n+        display: 'flex',\r\n+        justifyContent: 'space-between',\r\n+        alignItems: 'center'\r\n+      }}>\r\n+        <div style={{ display: 'flex', alignItems: 'center', gap: '0.5rem' }}>\r\n+          <span style={{ fontSize: '1.5rem' }}>ü§ñ</span>\r\n+          <h3 style={{ margin: 0 }}>UrbanBuddy AI</h3>\r\n+          {isTyping && (\r\n+            <span style={{ \r\n+              fontSize: '0.8rem',\r\n+              marginLeft: '0.5rem',\r\n+              opacity: 0.8\r\n+            }}>typing...</span>\r\n+          )}\r\n+        </div>\r\n+        <button \r\n+          onClick={onClose}\r\n+          style={{\r\n+            background: 'none',\r\n+            border: 'none',\r\n+            color: 'white',\r\n+            fontSize: '1.2rem',\r\n+            cursor: 'pointer'\r\n+          }}\r\n+        >\r\n+          √ó\r\n+        </button>\r\n+      </div>\r\n+      \r\n+      {/* Chat messages */}\r\n+      <div style={{\r\n+        flex: 1,\r\n+        padding: '1rem',\r\n+        overflowY: 'auto',\r\n+        display: 'flex',\r\n+        flexDirection: 'column',\r\n+        gap: '0.8rem'\r\n+      }}>\r\n+        {messages.map((msg, index) => (\r\n+          <div \r\n+            key={index}\r\n+            style={{\r\n+              alignSelf: msg.sender === 'user' ? 'flex-end' : 'flex-start',\r\n+              maxWidth: '80%',\r\n+              padding: '0.6rem 1rem',\r\n+              borderRadius: msg.sender === 'user' \r\n+                ? '18px 18px 0 18px' \r\n+                : '18px 18px 18px 0',\r\n+              backgroundColor: msg.sender === 'user'\r\n+                ? (darkMode ? '#4a5568' : '#3b82f6')\r\n+                : (darkMode ? '#4a5568' : '#e2e8f0'),\r\n+              color: msg.sender === 'user' ? 'white' : (darkMode ? 'white' : '#1e293b'),\r\n+              animation: msg.sender === 'bot' && index === messages.length - 1 \r\n+                ? 'fadeIn 0.3s ease' \r\n+                : 'none'\r\n+            }}\r\n+          >\r\n+            {msg.text}\r\n+          </div>\r\n+        ))}\r\n+        <div ref={chatEndRef} />\r\n+      </div>\r\n+      \r\n+      {/* Chat input */}\r\n+      <form onSubmit={handleSendMessage} style={{\r\n+        padding: '0.8rem',\r\n+        borderTop: darkMode ? '1px solid #4a5568' : '1px solid #e2e8f0',\r\n+        display: 'flex',\r\n+        gap: '0.5rem'\r\n+      }}>\r\n+        <input\r\n+          ref={inputRef}\r\n+          type=\"text\"\r\n+          value={inputValue}\r\n+          onChange={(e) => setInputValue(e.target.value)}\r\n+          placeholder=\"Ask me about urban living...\"\r\n+          disabled={isTyping}\r\n+          style={{\r\n+            flex: 1,\r\n+            padding: '0.6rem 1rem',\r\n+            borderRadius: '20px',\r\n+            border: darkMode ? '1px solid #4a5568' : '1px solid #e2e8f0',\r\n+            backgroundColor: darkMode ? '#2d3748' : 'white',\r\n+            color: darkMode ? 'white' : '#1e293b',\r\n+            outline: 'none',\r\n+            opacity: isTyping ? 0.7 : 1\r\n+          }}\r\n+        />\r\n+        <button \r\n+          type=\"submit\"\r\n+          disabled={isTyping}\r\n+          style={{\r\n+            background: isTyping \r\n+              ? (darkMode ? '#4a5568' : '#e2e8f0')\r\n+              : (darkMode ? '#4a5568' : '#3b82f6'),\r\n+            color: 'white',\r\n+            border: 'none',\r\n+            borderRadius: '50%',\r\n+            width: '40px',\r\n+            height: '40px',\r\n+            display: 'flex',\r\n+            alignItems: 'center',\r\n+            justifyContent: 'center',\r\n+            cursor: isTyping ? 'not-allowed' : 'pointer'\r\n+          }}\r\n+        >\r\n+          {isTyping ? '...' : '‚û§'}\r\n+        </button>\r\n+      </form>\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+// Main Home Component\r\n+export default function Home() {\r\n+  const navigate = useNavigate();\r\n+  const [searchQuery, setSearchQuery] = useState('');\r\n+  const [darkMode, setDarkMode] = useState(false);\r\n+  const [selectedService, setSelectedService] = useState(null);\r\n+  const [orderCount, setOrderCount] = useState(0);\r\n+  const [achievements, setAchievements] = useState([]);\r\n+  const [showChat, setShowChat] = useState(false);\r\n+\r\n+  const services = [\r\n+    { \r\n+      name: 'Transport', \r\n+      path: '/transport', \r\n+      icon: 'üöå', \r\n+      desc: 'Plan your multi-modal journey across the city',\r\n+      color: '#3b82f6',\r\n+      details: 'Find the best routes combining metro, buses, and bikes. Real-time updates and ticket purchasing available.'\r\n+    },\r\n+    { \r\n+      name: 'Food Delivery', \r\n+      path: '/food', \r\n+      icon: 'üçî', \r\n+      desc: 'Discover local restaurants and cafes',\r\n+      color: '#ef4444',\r\n+      details: 'Order from hundreds of restaurants with special discounts. Track your delivery in real-time.'\r\n+    },\r\n+    { \r\n+      name: 'Groceries', \r\n+      path: '/food', \r\n+      icon: 'üõí', \r\n+      desc: 'Get groceries delivered in minutes',\r\n+      color: '#10b981',\r\n+      details: 'Same-day delivery from local supermarkets. Schedule recurring orders for essentials.'\r\n+    },\r\n+    { \r\n+      name: 'Services', \r\n+      path: '/food', \r\n+      icon: 'üõ†Ô∏è', \r\n+      desc: 'Find urban services near you',\r\n+      color: '#8b5cf6',\r\n+      details: 'Book home services, repairs, and professional help with verified providers.'\r\n+    }\r\n+  ];\r\n+\r\n+  // Check for achievements\r\n+  useEffect(() => {\r\n+    if (orderCount === 1) {\r\n+      addAchievement('First Order!', 'üéâ');\r\n+    } else if (orderCount === 5) {\r\n+      addAchievement('Regular Customer!', 'üèÜ');\r\n+    } else if (orderCount === 10) {\r\n+      addAchievement('Super User!', 'üåü');\r\n+    }\r\n+  }, [orderCount]);\r\n+\r\n+  const addAchievement = (title, icon) => {\r\n+    if (!achievements.some(a => a.title === title)) {\r\n+      const newAchievement = { title, icon, id: Date.now() };\r\n+      setAchievements(prev => [...prev, newAchievement]);\r\n+      \r\n+      // Auto-hide achievement after 3 seconds\r\n+      setTimeout(() => {\r\n+        setAchievements(prev => prev.filter(a => a.id !== newAchievement.id));\r\n+      }, 3000);\r\n+    }\r\n+  };\r\n+\r\n+  const handleSearch = (e) => {\r\n+    e.preventDefault();\r\n+    if (searchQuery.trim()) {\r\n+      navigate(`/food?search=${encodeURIComponent(searchQuery)}`);\r\n+    }\r\n+  };\r\n+\r\n+  const toggleDarkMode = () => {\r\n+    setDarkMode(!darkMode);\r\n+  };\r\n+\r\n+  const openServicePopup = (service) => {\r\n+    setSelectedService(service);\r\n+    setOrderCount(prev => prev + 1);\r\n+  };\r\n+\r\n+  const closePopup = () => {\r\n+    setSelectedService(null);\r\n+  };\r\n+\r\n+  const toggleChat = () => {\r\n+    setShowChat(!showChat);\r\n+  };\r\n+\r\n+  return (\r\n+    <div style={{\r\n+      backgroundColor: darkMode ? '#1a202c' : '#f8fafc',\r\n+      minHeight: '100vh',\r\n+      paddingBottom: '3rem',\r\n+      color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+      transition: 'all 0.3s ease',\r\n+      position: 'relative'\r\n+    }}>\r\n+      {/* Theme Toggle Button */}\r\n+      <button \r\n+        onClick={toggleDarkMode} \r\n+        style={{\r\n+          position: 'fixed',\r\n+          top: '1.5rem',\r\n+          right: '1.5rem',\r\n+          background: darkMode ? '#4a5568' : '#e2e8f0',\r\n+          border: 'none',\r\n+          borderRadius: '50%',\r\n+          width: '40px',\r\n+          height: '40px',\r\n+          display: 'flex',\r\n+          alignItems: 'center',\r\n+          justifyContent: 'center',\r\n+          cursor: 'pointer',\r\n+          transition: 'all 0.3s ease',\r\n+          boxShadow: '0 2px 5px rgba(0, 0, 0, 0.2)',\r\n+          zIndex: 100\r\n+        }}\r\n+        aria-label={darkMode ? 'Switch to light mode' : 'Switch to dark mode'}\r\n+      >\r\n+        {darkMode ? '‚òÄÔ∏è' : 'üåô'}\r\n+      </button>\r\n+      \r\n+      {/* Hero Section with UrbanBuddy */}\r\n+      <section style={{\r\n+        background: darkMode \r\n+          ? 'linear-gradient(135deg, #2d3748 0%, #1a202c 100%)' \r\n+          : 'linear-gradient(135deg, #6b46c1 0%, #3b82f6 100%)',\r\n+        color: 'white',\r\n+        padding: '4rem 1rem',\r\n+        textAlign: 'center',\r\n+        borderRadius: '0 0 20px 20px',\r\n+        boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',\r\n+        position: 'relative',\r\n+        overflow: 'hidden',\r\n+        height: '300px'\r\n+      }}>\r\n+        <div style={{\r\n+          maxWidth: '800px',\r\n+          margin: '0 auto',\r\n+          position: 'relative',\r\n+          zIndex: 2\r\n+        }}>\r\n+          <h1 style={{\r\n+            fontSize: '3.5rem',\r\n+            fontWeight: '800',\r\n+            marginBottom: '0.5rem',\r\n+            textShadow: '2px 2px 4px rgba(0, 0, 0, 0.2)',\r\n+          }}>UrbanFlow</h1>\r\n+          <p style={{\r\n+            fontSize: '1.25rem',\r\n+            marginBottom: '2rem',\r\n+            opacity: 0.9,\r\n+          }}>Your seamless urban living companion</p>\r\n+          \r\n+          <form onSubmit={handleSearch} style={{\r\n+            display: 'flex',\r\n+            maxWidth: '600px',\r\n+            margin: '0 auto',\r\n+            borderRadius: '50px',\r\n+            overflow: 'hidden',\r\n+            boxShadow: '0 4px 10px rgba(0, 0, 0, 0.2)',\r\n+          }}>\r\n+            <input\r\n+              type=\"text\"\r\n+              placeholder=\"Search for restaurants, services...\"\r\n+              value={searchQuery}\r\n+              onChange={(e) => setSearchQuery(e.target.value)}\r\n+              style={{\r\n+                flex: 1,\r\n+                padding: '1rem 1.5rem',\r\n+                border: 'none',\r\n+                fontSize: '1rem',\r\n+                outline: 'none',\r\n+                backgroundColor: darkMode ? '#2d3748' : 'white',\r\n+                color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+              }}\r\n+            />\r\n+            <button type=\"submit\" style={{\r\n+              backgroundColor: darkMode ? '#4a5568' : '#1e40af',\r\n+              color: 'white',\r\n+              border: 'none',\r\n+              padding: '0 1.5rem',\r\n+              cursor: 'pointer',\r\n+              fontSize: '1.25rem',\r\n+              transition: 'background-color 0.2s'\r\n+            }}>\r\n+              <span>üîç</span>\r\n+            </button>\r\n+          </form>\r\n+        </div>\r\n+        <UrbanBuddy darkMode={darkMode} onChatOpen={toggleChat} />\r\n+      </section>\r\n+\r\n+      {/* Services Grid */}\r\n+      <section style={{\r\n+        padding: '2rem 1rem',\r\n+        maxWidth: '1200px',\r\n+        margin: '0 auto',\r\n+      }}>\r\n+        <h2 style={{\r\n+          fontSize: '2rem',\r\n+          fontWeight: '700',\r\n+          marginBottom: '1.5rem',\r\n+          color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+          textAlign: 'center',\r\n+        }}>What do you need today?</h2>\r\n+        <div style={{\r\n+          display: 'grid',\r\n+          gridTemplateColumns: 'repeat(auto-fit, minmax(250px, 1fr))',\r\n+          gap: '1.5rem',\r\n+          marginTop: '1rem',\r\n+        }}>\r\n+          {services.map((service) => (\r\n+            <div \r\n+              key={service.name} \r\n+              style={{ \r\n+                padding: '2rem 1.5rem',\r\n+                borderRadius: '16px',\r\n+                border: `2px solid ${service.color}`,\r\n+                textAlign: 'center',\r\n+                cursor: 'pointer',\r\n+                transition: 'transform 0.3s, box-shadow 0.3s',\r\n+                backgroundColor: darkMode \r\n+                  ? `${service.color}20` \r\n+                  : `${service.color}10`,\r\n+                ':hover': {\r\n+                  transform: 'translateY(-5px)',\r\n+                  boxShadow: '0 10px 20px rgba(0, 0, 0, 0.1)',\r\n+                }\r\n+              }}\r\n+              onClick={() => openServicePopup(service)}\r\n+            >\r\n+              <div style={{ \r\n+                fontSize: '3rem',\r\n+                marginBottom: '1rem',\r\n+                display: 'inline-block',\r\n+                animation: 'float 3s ease-in-out infinite'\r\n+              }}>{service.icon}</div>\r\n+              <h3 style={{fontSize: '1.5rem', fontWeight: '600', marginBottom: '0.5rem'}}>{service.name}</h3>\r\n+              <p style={{color: darkMode ? '#a0aec0' : '#64748b'}}>{service.desc}</p>\r\n+            </div>\r\n+          ))}\r\n+        </div>\r\n+      </section>\r\n+\r\n+      {/* Featured Section */}\r\n+      <section style={{\r\n+        padding: '2rem 1rem',\r\n+        maxWidth: '1200px',\r\n+        margin: '0 auto',\r\n+      }}>\r\n+        <h2 style={{\r\n+          fontSize: '2rem',\r\n+          fontWeight: '700',\r\n+          marginBottom: '1.5rem',\r\n+          color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+          textAlign: 'center',\r\n+        }}>Quick Access</h2>\r\n+        <div style={{\r\n+          display: 'flex',\r\n+          justifyContent: 'center',\r\n+          gap: '1rem',\r\n+          flexWrap: 'wrap',\r\n+        }}>\r\n+          <button \r\n+            onClick={() => navigate('/transport?from=home&to=downtown')}\r\n+            style={{\r\n+              padding: '0.75rem 1.5rem',\r\n+              borderRadius: '50px',\r\n+              border: 'none',\r\n+              backgroundColor: darkMode ? '#2d3748' : '#e2e8f0',\r\n+              color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+              fontWeight: '600',\r\n+              cursor: 'pointer',\r\n+              transition: 'all 0.2s',\r\n+              display: 'flex',\r\n+              alignItems: 'center',\r\n+              gap: '0.5rem',\r\n+              fontSize: '1rem'\r\n+            }}\r\n+          >\r\n+            üöï To Downtown\r\n+          </button>\r\n+          <button \r\n+            onClick={() => navigate('/food?category=fastfood')}\r\n+            style={{\r\n+              padding: '0.75rem 1.5rem',\r\n+              borderRadius: '50px',\r\n+              border: 'none',\r\n+              backgroundColor: darkMode ? '#2d3748' : '#e2e8f0',\r\n+              color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+              fontWeight: '600',\r\n+              cursor: 'pointer',\r\n+              transition: 'all 0.2s',\r\n+              display: 'flex',\r\n+              alignItems: 'center',\r\n+              gap: '0.5rem',\r\n+              fontSize: '1rem'\r\n+            }}\r\n+          >\r\n+            üçü Fast Food\r\n+          </button>\r\n+          <button \r\n+            onClick={() => navigate('/food?category=coffee')}\r\n+            style={{\r\n+              padding: '0.75rem 1.5rem',\r\n+              borderRadius: '50px',\r\n+              border: 'none',\r\n+              backgroundColor: darkMode ? '#2d3748' : '#e2e8f0',\r\n+              color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+              fontWeight: '600',\r\n+              cursor: 'pointer',\r\n+              transition: 'all 0.2s',\r\n+              display: 'flex',\r\n+              alignItems: 'center',\r\n+              gap: '0.5rem',\r\n+              fontSize: '1rem'\r\n+            }}\r\n+          >\r\n+            ‚òï Coffee Shops\r\n+          </button>\r\n+        </div>\r\n+      </section>\r\n+\r\n+      {/* Service Popup */}\r\n+      {selectedService && (\r\n+        <div style={{\r\n+          position: 'fixed',\r\n+          top: 0,\r\n+          left: 0,\r\n+          right: 0,\r\n+          bottom: 0,\r\n+          backgroundColor: 'rgba(0, 0, 0, 0.7)',\r\n+          display: 'flex',\r\n+          justifyContent: 'center',\r\n+          alignItems: 'center',\r\n+          zIndex: 1000,\r\n+        }} onClick={closePopup}>\r\n+          <div style={{\r\n+            backgroundColor: darkMode ? '#2d3748' : 'white',\r\n+            borderRadius: '16px',\r\n+            padding: '2rem',\r\n+            maxWidth: '500px',\r\n+            width: '90%',\r\n+            boxShadow: '0 10px 25px rgba(0, 0, 0, 0.2)',\r\n+            position: 'relative',\r\n+            border: darkMode ? '1px solid #4a5568' : '1px solid #e2e8f0',\r\n+          }} onClick={(e) => e.stopPropagation()}>\r\n+            <button style={{\r\n+              position: 'absolute',\r\n+              top: '1rem',\r\n+              right: '1rem',\r\n+              background: 'none',\r\n+              border: 'none',\r\n+              fontSize: '1.5rem',\r\n+              cursor: 'pointer',\r\n+              color: darkMode ? '#a0aec0' : '#64748b',\r\n+            }} onClick={closePopup}>√ó</button>\r\n+            <div style={{ \r\n+              display: 'flex', \r\n+              alignItems: 'center', \r\n+              gap: '1rem',\r\n+              marginBottom: '1.5rem'\r\n+            }}>\r\n+              <span style={{ fontSize: '2.5rem', animation: 'float 3s ease-in-out infinite' }}>{selectedService.icon}</span>\r\n+              <h3 style={{fontSize: '1.8rem', fontWeight: '700', marginBottom: '1rem', color: darkMode ? '#e2e8f0' : '#1e293b'}}>{selectedService.name}</h3>\r\n+            </div>\r\n+            <p style={{color: darkMode ? '#a0aec0' : '#64748b', fontSize: '1.1rem', lineHeight: '1.6', marginBottom: '2rem'}}>{selectedService.details}</p>\r\n+            <button \r\n+              style={{ \r\n+                padding: '0.75rem 1.5rem',\r\n+                borderRadius: '8px',\r\n+                border: 'none',\r\n+                backgroundColor: selectedService.color,\r\n+                color: 'white',\r\n+                fontWeight: '600',\r\n+                cursor: 'pointer',\r\n+                transition: 'all 0.2s',\r\n+                fontSize: '1rem'\r\n+              }}\r\n+              onClick={() => {\r\n+                navigate(selectedService.path);\r\n+                closePopup();\r\n+              }}\r\n+            >\r\n+              Explore {selectedService.name}\r\n+            </button>\r\n+          </div>\r\n+        </div>\r\n+      )}\r\n+\r\n+      {/* Achievements */}\r\n+      {achievements.map(achievement => (\r\n+        <div key={achievement.id} style={{\r\n+          position: 'fixed',\r\n+          bottom: '20px',\r\n+          right: '20px',\r\n+          background: darkMode ? '#2d3748' : 'white',\r\n+          color: darkMode ? 'white' : '#1e293b',\r\n+          padding: '1rem',\r\n+          borderRadius: '12px',\r\n+          boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',\r\n+          display: 'flex',\r\n+          alignItems: 'center',\r\n+          gap: '0.5rem',\r\n+          zIndex: 1000,\r\n+          animation: 'slideIn 0.5s forwards, fadeOut 0.5s forwards 2.5s'\r\n+        }}>\r\n+          <span style={{fontSize: '1.5rem'}}>{achievement.icon}</span>\r\n+          <span>{achievement.title}</span>\r\n+        </div>\r\n+      ))}\r\n+\r\n+      {/* Chat Modal */}\r\n+      {showChat && <ChatModal darkMode={darkMode} onClose={toggleChat} />}\r\n+\r\n+      {/* Footer with copyright */}\r\n+      <footer style={{\r\n+        textAlign: 'center',\r\n+        padding: '2rem 1rem',\r\n+        color: darkMode ? '#a0aec0' : '#64748b',\r\n+        fontSize: '0.9rem',\r\n+        marginTop: '2rem'\r\n+      }}>\r\n+        <p>¬© {new Date().getFullYear()} UrbanFlow - Created by Nick</p>\r\n+      </footer>\r\n+    </div>\r\n+  );\r\n+};\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752653649426,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,860 @@\n+import { useState, useEffect, useRef } from 'react';\r\n+import { useNavigate } from 'react-router-dom';\r\n+\r\n+// UrbanBuddy AI Assistant Component\r\n+const UrbanBuddy = ({ darkMode, onChatOpen }) => {\r\n+  const [position, setPosition] = useState({ x: 20, y: 50 });\r\n+  const [expression, setExpression] = useState('üòä');\r\n+  const [direction, setDirection] = useState(1);\r\n+  const [costume, setCostume] = useState(null);\r\n+  const [isActive, setIsActive] = useState(false);\r\n+  const botRef = useRef(null);\r\n+  const animationRef = useRef(null);\r\n+  const lastInteractionTime = useRef(Date.now());\r\n+\r\n+  // Seasonal costumes\r\n+  useEffect(() => {\r\n+    const today = new Date();\r\n+    const month = today.getMonth() + 1;\r\n+    \r\n+    if (month === 12) setCostume('üéÑ');\r\n+    else if (month === 10) setCostume('üéÉ');\r\n+    else if (month === 2) setCostume('üíù');\r\n+    else if (month === 4) setCostume('üå∏');\r\n+    else setCostume(null);\r\n+  }, []);\r\n+\r\n+  // Make the bot wander with more dynamic movement\r\n+  useEffect(() => {\r\n+    const moveInterval = setInterval(() => {\r\n+      setPosition(prev => {\r\n+        const now = Date.now();\r\n+        const timeSinceLastInteraction = now - lastInteractionTime.current;\r\n+        \r\n+        // More active movement right after interaction\r\n+        const speedMultiplier = timeSinceLastInteraction < 5000 ? 2 : 1;\r\n+        \r\n+        let newX = prev.x + (3 * direction * speedMultiplier);\r\n+        let newY = prev.y + (Math.random() * 6 - 3);\r\n+        \r\n+        // Bounce off edges\r\n+        if (newX > window.innerWidth - 80) {\r\n+          setDirection(-1);\r\n+          triggerAnimation('spin');\r\n+        }\r\n+        if (newX < 20) {\r\n+          setDirection(1);\r\n+          triggerAnimation('spin');\r\n+        }\r\n+        if (newY < 20) newY = 20;\r\n+        if (newY > window.innerHeight - 100) newY = window.innerHeight - 100;\r\n+        \r\n+        return { x: newX, y: newY };\r\n+      });\r\n+    }, 100);\r\n+\r\n+    return () => clearInterval(moveInterval);\r\n+  }, [direction]);\r\n+\r\n+  // Change expressions randomly with more variety\r\n+  useEffect(() => {\r\n+    const expressions = ['üòä', 'ü§î', 'üòÆ', 'üòé', 'üëã', 'ü§ñ', '‚ú®', 'üåü'];\r\n+    const expressionInterval = setInterval(() => {\r\n+      if (!isActive) {\r\n+        setExpression(expressions[Math.floor(Math.random() * expressions.length)]);\r\n+        // Random animations when idle\r\n+        if (Math.random() > 0.8) {\r\n+          triggerAnimation(['bounce', 'spin', 'wobble'][Math.floor(Math.random() * 3)]);\r\n+        }\r\n+      }\r\n+    }, 3000);\r\n+    return () => clearInterval(expressionInterval);\r\n+  }, [isActive]);\r\n+\r\n+  const triggerAnimation = (type) => {\r\n+    if (animationRef.current) {\r\n+      clearTimeout(animationRef.current);\r\n+    }\r\n+    \r\n+    const botElement = botRef.current;\r\n+    if (!botElement) return;\r\n+    \r\n+    botElement.style.animation = 'none';\r\n+    void botElement.offsetWidth; // Trigger reflow\r\n+    \r\n+    switch(type) {\r\n+      case 'spin':\r\n+        botElement.style.animation = 'spin 1s ease';\r\n+        break;\r\n+      case 'bounce':\r\n+        botElement.style.animation = 'bounce 0.5s ease';\r\n+        break;\r\n+      case 'wobble':\r\n+        botElement.style.animation = 'wobble 0.8s ease';\r\n+        break;\r\n+      default:\r\n+        botElement.style.animation = '';\r\n+    }\r\n+    \r\n+    animationRef.current = setTimeout(() => {\r\n+      if (botElement) botElement.style.animation = '';\r\n+    }, 1000);\r\n+  };\r\n+\r\n+  const handleClick = () => {\r\n+    lastInteractionTime.current = Date.now();\r\n+    setIsActive(true);\r\n+    triggerAnimation('bounce');\r\n+    setExpression('üí°');\r\n+    \r\n+    // Trigger chat opening in parent component\r\n+    onChatOpen();\r\n+    \r\n+    // Return to normal after a delay\r\n+    setTimeout(() => {\r\n+      setIsActive(false);\r\n+    }, 3000);\r\n+  };\r\n+\r\n+  // Custom animations\r\n+  const animations = `\r\n+    @keyframes spin {\r\n+      0% { transform: rotate(0deg) scaleX(${direction}); }\r\n+      100% { transform: rotate(360deg) scaleX(${direction}); }\r\n+    }\r\n+    @keyframes bounce {\r\n+      0%, 100% { transform: translateY(0) scaleX(${direction}); }\r\n+      50% { transform: translateY(-20px) scaleX(${direction}); }\r\n+    }\r\n+    @keyframes wobble {\r\n+      0%, 100% { transform: rotate(0deg) scaleX(${direction}); }\r\n+      25% { transform: rotate(5deg) scaleX(${direction}); }\r\n+      75% { transform: rotate(-5deg) scaleX(${direction}); }\r\n+    }\r\n+    @keyframes float {\r\n+      0% { transform: translateY(0px) scaleX(${direction}); }\r\n+      50% { transform: translateY(-10px) scaleX(${direction}); }\r\n+      100% { transform: translateY(0px) scaleX(${direction}); }\r\n+    }\r\n+  `;\r\n+\r\n+  return (\r\n+    <>\r\n+      <style>{animations}</style>\r\n+      <div \r\n+        ref={botRef}\r\n+        onClick={handleClick}\r\n+        style={{\r\n+          position: 'fixed',\r\n+          left: `${position.x}px`,\r\n+          top: `${position.y}px`,\r\n+          fontSize: '2.5rem',\r\n+          cursor: 'pointer',\r\n+          transition: 'all 0.3s ease',\r\n+          transform: `scaleX(${direction})`,\r\n+          zIndex: 100,\r\n+          filter: darkMode \r\n+            ? 'drop-shadow(0 0 8px rgba(255,255,255,0.7))' \r\n+            : 'drop-shadow(0 0 8px rgba(0,0,0,0.3))',\r\n+          userSelect: 'none',\r\n+          animation: 'float 4s ease-in-out infinite'\r\n+        }}\r\n+      >\r\n+        <div style={{ \r\n+          position: 'relative',\r\n+          display: 'flex',\r\n+          flexDirection: 'column',\r\n+          alignItems: 'center'\r\n+        }}>\r\n+          {/* Bot icon with costume */}\r\n+          <div style={{\r\n+            position: 'relative',\r\n+            width: '60px',\r\n+            height: '60px',\r\n+            backgroundColor: darkMode ? '#4a5568' : '#3b82f6',\r\n+            borderRadius: '50%',\r\n+            display: 'flex',\r\n+            justifyContent: 'center',\r\n+            alignItems: 'center',\r\n+            color: 'white'\r\n+          }}>\r\n+            <span style={{ fontSize: '1.8rem' }}>{expression}</span>\r\n+            {costume && (\r\n+              <span style={{\r\n+                position: 'absolute',\r\n+                top: '-15px',\r\n+                right: '-10px',\r\n+                fontSize: '1.5rem',\r\n+                transform: 'rotate(15deg)'\r\n+              }}>\r\n+                {costume}\r\n+              </span>\r\n+            )}\r\n+          </div>\r\n+        </div>\r\n+      </div>\r\n+    </>\r\n+  );\r\n+};\r\n+\r\n+// Chat Modal Component with Functional API Connection\r\n+const ChatModal = ({ darkMode, onClose }) => {\r\n+  const [messages, setMessages] = useState([\r\n+    { text: \"Hello! I'm UrbanBuddy, your AI assistant for urban living. How can I help you today?\", sender: 'bot' }\r\n+  ]);\r\n+  const [inputValue, setInputValue] = useState('');\r\n+  const [isTyping, setIsTyping] = useState(false);\r\n+  const chatEndRef = useRef(null);\r\n+  const inputRef = useRef(null);\r\n+\r\n+  // Auto-scroll to bottom and focus input\r\n+  useEffect(() => {\r\n+    chatEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n+    inputRef.current?.focus();\r\n+  }, [messages]);\r\n+\r\n+  // Function to call the AI API\r\n+  const generateResponse = async (userMessage) => {\r\n+    setIsTyping(true);\r\n+    \r\n+    try {\r\n+      // Using a free AI API endpoint (no API key needed)\r\n+      const response = await fetch('https://api.openai.com/v1/chat/completions', {\r\n+        method: \"POST\",\r\n+        headers: { \r\n+          \"Content-Type\": \"application/json\",\r\n+          // Note: In a production app, you should proxy this through your backend\r\n+          // to keep your API key secure. This is just for demonstration.\r\n+          \"Authorization\": `Bearer YOUR_OPENAI_API_KEY` \r\n+        },\r\n+        body: JSON.stringify({\r\n+          model: \"gpt-3.5-turbo\",\r\n+          messages: [\r\n+            {\r\n+              role: \"system\",\r\n+              content: \"You are UrbanBuddy, a friendly AI assistant for urban living. \" +\r\n+                \"Provide helpful, concise answers (1-2 sentences) about city life, \" +\r\n+                \"transportation, food delivery, local services, and urban living tips. \" +\r\n+                \"Keep responses practical and urban-focused.\"\r\n+            },\r\n+            {\r\n+              role: \"user\",\r\n+              content: userMessage\r\n+            }\r\n+          ],\r\n+          temperature: 0.7,\r\n+          max_tokens: 150\r\n+        })\r\n+      });\r\n+      \r\n+      if (!response.ok) {\r\n+        throw new Error(`API request failed with status ${response.status}`);\r\n+      }\r\n+      \r\n+      const data = await response.json();\r\n+      const aiResponse = data.choices?.[0]?.message?.content || \r\n+        \"I'm having trouble thinking of a response right now. Could you try asking something else?\";\r\n+      \r\n+      setMessages(prev => [...prev, { \r\n+        text: aiResponse, \r\n+        sender: 'bot' \r\n+      }]);\r\n+    } catch (error) {\r\n+      console.error(\"API error:\", error);\r\n+      // Fallback to a local AI response if API fails\r\n+      const fallbackResponses = [\r\n+        \"I'm currently experiencing high demand. Try again in a moment!\",\r\n+        \"Let me think differently about that... Can you rephrase your question?\",\r\n+        \"I specialize in urban living tips. Ask me about transportation, food, or city services!\",\r\n+        \"I'm having connection issues, but I'd love to help with your urban living questions!\"\r\n+      ];\r\n+      setMessages(prev => [...prev, { \r\n+        text: fallbackResponses[Math.floor(Math.random() * fallbackResponses.length)], \r\n+        sender: 'bot' \r\n+      }]);\r\n+    } finally {\r\n+      setIsTyping(false);\r\n+    }\r\n+  };\r\n+\r\n+  const handleSendMessage = async (e) => {\r\n+    e.preventDefault();\r\n+    if (inputValue.trim() && !isTyping) {\r\n+      // Add user message\r\n+      const userMessage = inputValue.trim();\r\n+      setMessages(prev => [...prev, { text: userMessage, sender: 'user' }]);\r\n+      setInputValue('');\r\n+      \r\n+      // Generate AI response\r\n+      await generateResponse(userMessage);\r\n+    }\r\n+  };\r\n+\r\n+  return (\r\n+    <div style={{\r\n+      position: 'fixed',\r\n+      bottom: '100px',\r\n+      right: '30px',\r\n+      width: '350px',\r\n+      maxWidth: '90%',\r\n+      backgroundColor: darkMode ? '#2d3748' : 'white',\r\n+      borderRadius: '16px',\r\n+      boxShadow: '0 10px 25px rgba(0, 0, 0, 0.2)',\r\n+      border: darkMode ? '1px solid #4a5568' : '1px solid #e2e8f0',\r\n+      zIndex: 1000,\r\n+      overflow: 'hidden',\r\n+      display: 'flex',\r\n+      flexDirection: 'column',\r\n+      maxHeight: '60vh'\r\n+    }}>\r\n+      {/* Chat header */}\r\n+      <div style={{\r\n+        padding: '1rem',\r\n+        backgroundColor: darkMode ? '#4a5568' : '#3b82f6',\r\n+        color: 'white',\r\n+        display: 'flex',\r\n+        justifyContent: 'space-between',\r\n+        alignItems: 'center'\r\n+      }}>\r\n+        <div style={{ display: 'flex', alignItems: 'center', gap: '0.5rem' }}>\r\n+          <span style={{ fontSize: '1.5rem' }}>ü§ñ</span>\r\n+          <h3 style={{ margin: 0 }}>UrbanBuddy AI</h3>\r\n+          {isTyping && (\r\n+            <span style={{ \r\n+              fontSize: '0.8rem',\r\n+              marginLeft: '0.5rem',\r\n+              opacity: 0.8\r\n+            }}>typing...</span>\r\n+          )}\r\n+        </div>\r\n+        <button \r\n+          onClick={onClose}\r\n+          style={{\r\n+            background: 'none',\r\n+            border: 'none',\r\n+            color: 'white',\r\n+            fontSize: '1.2rem',\r\n+            cursor: 'pointer'\r\n+          }}\r\n+        >\r\n+          √ó\r\n+        </button>\r\n+      </div>\r\n+      \r\n+      {/* Chat messages */}\r\n+      <div style={{\r\n+        flex: 1,\r\n+        padding: '1rem',\r\n+        overflowY: 'auto',\r\n+        display: 'flex',\r\n+        flexDirection: 'column',\r\n+        gap: '0.8rem'\r\n+      }}>\r\n+        {messages.map((msg, index) => (\r\n+          <div \r\n+            key={index}\r\n+            style={{\r\n+              alignSelf: msg.sender === 'user' ? 'flex-end' : 'flex-start',\r\n+              maxWidth: '80%',\r\n+              padding: '0.6rem 1rem',\r\n+              borderRadius: msg.sender === 'user' \r\n+                ? '18px 18px 0 18px' \r\n+                : '18px 18px 18px 0',\r\n+              backgroundColor: msg.sender === 'user'\r\n+                ? (darkMode ? '#4a5568' : '#3b82f6')\r\n+                : (darkMode ? '#4a5568' : '#e2e8f0'),\r\n+              color: msg.sender === 'user' ? 'white' : (darkMode ? 'white' : '#1e293b'),\r\n+              animation: msg.sender === 'bot' && index === messages.length - 1 \r\n+                ? 'fadeIn 0.3s ease' \r\n+                : 'none'\r\n+            }}\r\n+          >\r\n+            {msg.text}\r\n+          </div>\r\n+        ))}\r\n+        <div ref={chatEndRef} />\r\n+      </div>\r\n+      \r\n+      {/* Chat input */}\r\n+      <form onSubmit={handleSendMessage} style={{\r\n+        padding: '0.8rem',\r\n+        borderTop: darkMode ? '1px solid #4a5568' : '1px solid #e2e8f0',\r\n+        display: 'flex',\r\n+        gap: '0.5rem'\r\n+      }}>\r\n+        <input\r\n+          ref={inputRef}\r\n+          type=\"text\"\r\n+          value={inputValue}\r\n+          onChange={(e) => setInputValue(e.target.value)}\r\n+          placeholder=\"Ask me about urban living...\"\r\n+          disabled={isTyping}\r\n+          style={{\r\n+            flex: 1,\r\n+            padding: '0.6rem 1rem',\r\n+            borderRadius: '20px',\r\n+            border: darkMode ? '1px solid #4a5568' : '1px solid #e2e8f0',\r\n+            backgroundColor: darkMode ? '#2d3748' : 'white',\r\n+            color: darkMode ? 'white' : '#1e293b',\r\n+            outline: 'none',\r\n+            opacity: isTyping ? 0.7 : 1\r\n+          }}\r\n+        />\r\n+        <button \r\n+          type=\"submit\"\r\n+          disabled={isTyping}\r\n+          style={{\r\n+            background: isTyping \r\n+              ? (darkMode ? '#4a5568' : '#e2e8f0')\r\n+              : (darkMode ? '#4a5568' : '#3b82f6'),\r\n+            color: 'white',\r\n+            border: 'none',\r\n+            borderRadius: '50%',\r\n+            width: '40px',\r\n+            height: '40px',\r\n+            display: 'flex',\r\n+            alignItems: 'center',\r\n+            justifyContent: 'center',\r\n+            cursor: isTyping ? 'not-allowed' : 'pointer'\r\n+          }}\r\n+        >\r\n+          {isTyping ? '...' : '‚û§'}\r\n+        </button>\r\n+      </form>\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+// Main Home Component (unchanged)\r\n+export default function Home() {\r\n+  const navigate = useNavigate();\r\n+  const [searchQuery, setSearchQuery] = useState('');\r\n+  const [darkMode, setDarkMode] = useState(false);\r\n+  const [selectedService, setSelectedService] = useState(null);\r\n+  const [orderCount, setOrderCount] = useState(0);\r\n+  const [achievements, setAchievements] = useState([]);\r\n+  const [showChat, setShowChat] = useState(false);\r\n+\r\n+  const services = [\r\n+    { \r\n+      name: 'Transport', \r\n+      path: '/transport', \r\n+      icon: 'üöå', \r\n+      desc: 'Plan your multi-modal journey across the city',\r\n+      color: '#3b82f6',\r\n+      details: 'Find the best routes combining metro, buses, and bikes. Real-time updates and ticket purchasing available.'\r\n+    },\r\n+    { \r\n+      name: 'Food Delivery', \r\n+      path: '/food', \r\n+      icon: 'üçî', \r\n+      desc: 'Discover local restaurants and cafes',\r\n+      color: '#ef4444',\r\n+      details: 'Order from hundreds of restaurants with special discounts. Track your delivery in real-time.'\r\n+    },\r\n+    { \r\n+      name: 'Groceries', \r\n+      path: '/food', \r\n+      icon: 'üõí', \r\n+      desc: 'Get groceries delivered in minutes',\r\n+      color: '#10b981',\r\n+      details: 'Same-day delivery from local supermarkets. Schedule recurring orders for essentials.'\r\n+    },\r\n+    { \r\n+      name: 'Services', \r\n+      path: '/food', \r\n+      icon: 'üõ†Ô∏è', \r\n+      desc: 'Find urban services near you',\r\n+      color: '#8b5cf6',\r\n+      details: 'Book home services, repairs, and professional help with verified providers.'\r\n+    }\r\n+  ];\r\n+\r\n+  // Check for achievements\r\n+  useEffect(() => {\r\n+    if (orderCount === 1) {\r\n+      addAchievement('First Order!', 'üéâ');\r\n+    } else if (orderCount === 5) {\r\n+      addAchievement('Regular Customer!', 'üèÜ');\r\n+    } else if (orderCount === 10) {\r\n+      addAchievement('Super User!', 'üåü');\r\n+    }\r\n+  }, [orderCount]);\r\n+\r\n+  const addAchievement = (title, icon) => {\r\n+    if (!achievements.some(a => a.title === title)) {\r\n+      const newAchievement = { title, icon, id: Date.now() };\r\n+      setAchievements(prev => [...prev, newAchievement]);\r\n+      \r\n+      // Auto-hide achievement after 3 seconds\r\n+      setTimeout(() => {\r\n+        setAchievements(prev => prev.filter(a => a.id !== newAchievement.id));\r\n+      }, 3000);\r\n+    }\r\n+  };\r\n+\r\n+  const handleSearch = (e) => {\r\n+    e.preventDefault();\r\n+    if (searchQuery.trim()) {\r\n+      navigate(`/food?search=${encodeURIComponent(searchQuery)}`);\r\n+    }\r\n+  };\r\n+\r\n+  const toggleDarkMode = () => {\r\n+    setDarkMode(!darkMode);\r\n+  };\r\n+\r\n+  const openServicePopup = (service) => {\r\n+    setSelectedService(service);\r\n+    setOrderCount(prev => prev + 1);\r\n+  };\r\n+\r\n+  const closePopup = () => {\r\n+    setSelectedService(null);\r\n+  };\r\n+\r\n+  const toggleChat = () => {\r\n+    setShowChat(!showChat);\r\n+  };\r\n+\r\n+  return (\r\n+    <div style={{\r\n+      backgroundColor: darkMode ? '#1a202c' : '#f8fafc',\r\n+      minHeight: '100vh',\r\n+      paddingBottom: '3rem',\r\n+      color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+      transition: 'all 0.3s ease',\r\n+      position: 'relative'\r\n+    }}>\r\n+      {/* Theme Toggle Button */}\r\n+      <button \r\n+        onClick={toggleDarkMode} \r\n+        style={{\r\n+          position: 'fixed',\r\n+          top: '1.5rem',\r\n+          right: '1.5rem',\r\n+          background: darkMode ? '#4a5568' : '#e2e8f0',\r\n+          border: 'none',\r\n+          borderRadius: '50%',\r\n+          width: '40px',\r\n+          height: '40px',\r\n+          display: 'flex',\r\n+          alignItems: 'center',\r\n+          justifyContent: 'center',\r\n+          cursor: 'pointer',\r\n+          transition: 'all 0.3s ease',\r\n+          boxShadow: '0 2px 5px rgba(0, 0, 0, 0.2)',\r\n+          zIndex: 100\r\n+        }}\r\n+        aria-label={darkMode ? 'Switch to light mode' : 'Switch to dark mode'}\r\n+      >\r\n+        {darkMode ? '‚òÄÔ∏è' : 'üåô'}\r\n+      </button>\r\n+      \r\n+      {/* Hero Section with UrbanBuddy */}\r\n+      <section style={{\r\n+        background: darkMode \r\n+          ? 'linear-gradient(135deg, #2d3748 0%, #1a202c 100%)' \r\n+          : 'linear-gradient(135deg, #6b46c1 0%, #3b82f6 100%)',\r\n+        color: 'white',\r\n+        padding: '4rem 1rem',\r\n+        textAlign: 'center',\r\n+        borderRadius: '0 0 20px 20px',\r\n+        boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',\r\n+        position: 'relative',\r\n+        overflow: 'hidden',\r\n+        height: '300px'\r\n+      }}>\r\n+        <div style={{\r\n+          maxWidth: '800px',\r\n+          margin: '0 auto',\r\n+          position: 'relative',\r\n+          zIndex: 2\r\n+        }}>\r\n+          <h1 style={{\r\n+            fontSize: '3.5rem',\r\n+            fontWeight: '800',\r\n+            marginBottom: '0.5rem',\r\n+            textShadow: '2px 2px 4px rgba(0, 0, 0, 0.2)',\r\n+          }}>UrbanFlow</h1>\r\n+          <p style={{\r\n+            fontSize: '1.25rem',\r\n+            marginBottom: '2rem',\r\n+            opacity: 0.9,\r\n+          }}>Your seamless urban living companion</p>\r\n+          \r\n+          <form onSubmit={handleSearch} style={{\r\n+            display: 'flex',\r\n+            maxWidth: '600px',\r\n+            margin: '0 auto',\r\n+            borderRadius: '50px',\r\n+            overflow: 'hidden',\r\n+            boxShadow: '0 4px 10px rgba(0, 0, 0, 0.2)',\r\n+          }}>\r\n+            <input\r\n+              type=\"text\"\r\n+              placeholder=\"Search for restaurants, services...\"\r\n+              value={searchQuery}\r\n+              onChange={(e) => setSearchQuery(e.target.value)}\r\n+              style={{\r\n+                flex: 1,\r\n+                padding: '1rem 1.5rem',\r\n+                border: 'none',\r\n+                fontSize: '1rem',\r\n+                outline: 'none',\r\n+                backgroundColor: darkMode ? '#2d3748' : 'white',\r\n+                color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+              }}\r\n+            />\r\n+            <button type=\"submit\" style={{\r\n+              backgroundColor: darkMode ? '#4a5568' : '#1e40af',\r\n+              color: 'white',\r\n+              border: 'none',\r\n+              padding: '0 1.5rem',\r\n+              cursor: 'pointer',\r\n+              fontSize: '1.25rem',\r\n+              transition: 'background-color 0.2s'\r\n+            }}>\r\n+              <span>üîç</span>\r\n+            </button>\r\n+          </form>\r\n+        </div>\r\n+        <UrbanBuddy darkMode={darkMode} onChatOpen={toggleChat} />\r\n+      </section>\r\n+\r\n+      {/* Services Grid */}\r\n+      <section style={{\r\n+        padding: '2rem 1rem',\r\n+        maxWidth: '1200px',\r\n+        margin: '0 auto',\r\n+      }}>\r\n+        <h2 style={{\r\n+          fontSize: '2rem',\r\n+          fontWeight: '700',\r\n+          marginBottom: '1.5rem',\r\n+          color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+          textAlign: 'center',\r\n+        }}>What do you need today?</h2>\r\n+        <div style={{\r\n+          display: 'grid',\r\n+          gridTemplateColumns: 'repeat(auto-fit, minmax(250px, 1fr))',\r\n+          gap: '1.5rem',\r\n+          marginTop: '1rem',\r\n+        }}>\r\n+          {services.map((service) => (\r\n+            <div \r\n+              key={service.name} \r\n+              style={{ \r\n+                padding: '2rem 1.5rem',\r\n+                borderRadius: '16px',\r\n+                border: `2px solid ${service.color}`,\r\n+                textAlign: 'center',\r\n+                cursor: 'pointer',\r\n+                transition: 'transform 0.3s, box-shadow 0.3s',\r\n+                backgroundColor: darkMode \r\n+                  ? `${service.color}20` \r\n+                  : `${service.color}10`,\r\n+                ':hover': {\r\n+                  transform: 'translateY(-5px)',\r\n+                  boxShadow: '0 10px 20px rgba(0, 0, 0, 0.1)',\r\n+                }\r\n+              }}\r\n+              onClick={() => openServicePopup(service)}\r\n+            >\r\n+              <div style={{ \r\n+                fontSize: '3rem',\r\n+                marginBottom: '1rem',\r\n+                display: 'inline-block',\r\n+                animation: 'float 3s ease-in-out infinite'\r\n+              }}>{service.icon}</div>\r\n+              <h3 style={{fontSize: '1.5rem', fontWeight: '600', marginBottom: '0.5rem'}}>{service.name}</h3>\r\n+              <p style={{color: darkMode ? '#a0aec0' : '#64748b'}}>{service.desc}</p>\r\n+            </div>\r\n+          ))}\r\n+        </div>\r\n+      </section>\r\n+\r\n+      {/* Featured Section */}\r\n+      <section style={{\r\n+        padding: '2rem 1rem',\r\n+        maxWidth: '1200px',\r\n+        margin: '0 auto',\r\n+      }}>\r\n+        <h2 style={{\r\n+          fontSize: '2rem',\r\n+          fontWeight: '700',\r\n+          marginBottom: '1.5rem',\r\n+          color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+          textAlign: 'center',\r\n+        }}>Quick Access</h2>\r\n+        <div style={{\r\n+          display: 'flex',\r\n+          justifyContent: 'center',\r\n+          gap: '1rem',\r\n+          flexWrap: 'wrap',\r\n+        }}>\r\n+          <button \r\n+            onClick={() => navigate('/transport?from=home&to=downtown')}\r\n+            style={{\r\n+              padding: '0.75rem 1.5rem',\r\n+              borderRadius: '50px',\r\n+              border: 'none',\r\n+              backgroundColor: darkMode ? '#2d3748' : '#e2e8f0',\r\n+              color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+              fontWeight: '600',\r\n+              cursor: 'pointer',\r\n+              transition: 'all 0.2s',\r\n+              display: 'flex',\r\n+              alignItems: 'center',\r\n+              gap: '0.5rem',\r\n+              fontSize: '1rem'\r\n+            }}\r\n+          >\r\n+            üöï To Downtown\r\n+          </button>\r\n+          <button \r\n+            onClick={() => navigate('/food?category=fastfood')}\r\n+            style={{\r\n+              padding: '0.75rem 1.5rem',\r\n+              borderRadius: '50px',\r\n+              border: 'none',\r\n+              backgroundColor: darkMode ? '#2d3748' : '#e2e8f0',\r\n+              color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+              fontWeight: '600',\r\n+              cursor: 'pointer',\r\n+              transition: 'all 0.2s',\r\n+              display: 'flex',\r\n+              alignItems: 'center',\r\n+              gap: '0.5rem',\r\n+              fontSize: '1rem'\r\n+            }}\r\n+          >\r\n+            üçü Fast Food\r\n+          </button>\r\n+          <button \r\n+            onClick={() => navigate('/food?category=coffee')}\r\n+            style={{\r\n+              padding: '0.75rem 1.5rem',\r\n+              borderRadius: '50px',\r\n+              border: 'none',\r\n+              backgroundColor: darkMode ? '#2d3748' : '#e2e8f0',\r\n+              color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+              fontWeight: '600',\r\n+              cursor: 'pointer',\r\n+              transition: 'all 0.2s',\r\n+              display: 'flex',\r\n+              alignItems: 'center',\r\n+              gap: '0.5rem',\r\n+              fontSize: '1rem'\r\n+            }}\r\n+          >\r\n+            ‚òï Coffee Shops\r\n+          </button>\r\n+        </div>\r\n+      </section>\r\n+\r\n+      {/* Service Popup */}\r\n+      {selectedService && (\r\n+        <div style={{\r\n+          position: 'fixed',\r\n+          top: 0,\r\n+          left: 0,\r\n+          right: 0,\r\n+          bottom: 0,\r\n+          backgroundColor: 'rgba(0, 0, 0, 0.7)',\r\n+          display: 'flex',\r\n+          justifyContent: 'center',\r\n+          alignItems: 'center',\r\n+          zIndex: 1000,\r\n+        }} onClick={closePopup}>\r\n+          <div style={{\r\n+            backgroundColor: darkMode ? '#2d3748' : 'white',\r\n+            borderRadius: '16px',\r\n+            padding: '2rem',\r\n+            maxWidth: '500px',\r\n+            width: '90%',\r\n+            boxShadow: '0 10px 25px rgba(0, 0, 0, 0.2)',\r\n+            position: 'relative',\r\n+            border: darkMode ? '1px solid #4a5568' : '1px solid #e2e8f0',\r\n+          }} onClick={(e) => e.stopPropagation()}>\r\n+            <button style={{\r\n+              position: 'absolute',\r\n+              top: '1rem',\r\n+              right: '1rem',\r\n+              background: 'none',\r\n+              border: 'none',\r\n+              fontSize: '1.5rem',\r\n+              cursor: 'pointer',\r\n+              color: darkMode ? '#a0aec0' : '#64748b',\r\n+            }} onClick={closePopup}>√ó</button>\r\n+            <div style={{ \r\n+              display: 'flex', \r\n+              alignItems: 'center', \r\n+              gap: '1rem',\r\n+              marginBottom: '1.5rem'\r\n+            }}>\r\n+              <span style={{ fontSize: '2.5rem', animation: 'float 3s ease-in-out infinite' }}>{selectedService.icon}</span>\r\n+              <h3 style={{fontSize: '1.8rem', fontWeight: '700', marginBottom: '1rem', color: darkMode ? '#e2e8f0' : '#1e293b'}}>{selectedService.name}</h3>\r\n+            </div>\r\n+            <p style={{color: darkMode ? '#a0aec0' : '#64748b', fontSize: '1.1rem', lineHeight: '1.6', marginBottom: '2rem'}}>{selectedService.details}</p>\r\n+            <button \r\n+              style={{ \r\n+                padding: '0.75rem 1.5rem',\r\n+                borderRadius: '8px',\r\n+                border: 'none',\r\n+                backgroundColor: selectedService.color,\r\n+                color: 'white',\r\n+                fontWeight: '600',\r\n+                cursor: 'pointer',\r\n+                transition: 'all 0.2s',\r\n+                fontSize: '1rem'\r\n+              }}\r\n+              onClick={() => {\r\n+                navigate(selectedService.path);\r\n+                closePopup();\r\n+              }}\r\n+            >\r\n+              Explore {selectedService.name}\r\n+            </button>\r\n+          </div>\r\n+        </div>\r\n+      )}\r\n+\r\n+      {/* Achievements */}\r\n+      {achievements.map(achievement => (\r\n+        <div key={achievement.id} style={{\r\n+          position: 'fixed',\r\n+          bottom: '20px',\r\n+          right: '20px',\r\n+          background: darkMode ? '#2d3748' : 'white',\r\n+          color: darkMode ? 'white' : '#1e293b',\r\n+          padding: '1rem',\r\n+          borderRadius: '12px',\r\n+          boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',\r\n+          display: 'flex',\r\n+          alignItems: 'center',\r\n+          gap: '0.5rem',\r\n+          zIndex: 1000,\r\n+          animation: 'slideIn 0.5s forwards, fadeOut 0.5s forwards 2.5s'\r\n+        }}>\r\n+          <span style={{fontSize: '1.5rem'}}>{achievement.icon}</span>\r\n+          <span>{achievement.title}</span>\r\n+        </div>\r\n+      ))}\r\n+\r\n+      {/* Chat Modal */}\r\n+      {showChat && <ChatModal darkMode={darkMode} onClose={toggleChat} />}\r\n+\r\n+      {/* Footer with copyright */}\r\n+      <footer style={{\r\n+        textAlign: 'center',\r\n+        padding: '2rem 1rem',\r\n+        color: darkMode ? '#a0aec0' : '#64748b',\r\n+        fontSize: '0.9rem',\r\n+        marginTop: '2rem'\r\n+      }}>\r\n+        <p>¬© {new Date().getFullYear()} UrbanFlow - Created by Nick</p>\r\n+      </footer>\r\n+    </div>\r\n+  );\r\n+};\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752654695584,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -424,13 +424,17 @@\n     </div>\r\n   );\r\n };\r\n \r\n-// Main Home Component (unchanged)\r\n+// Main Home Component with all enhancements\r\n export default function Home() {\r\n   const navigate = useNavigate();\r\n   const [searchQuery, setSearchQuery] = useState('');\r\n-  const [darkMode, setDarkMode] = useState(false);\r\n+  const [darkMode, setDarkMode] = useState(() => {\r\n+    // Check localStorage for saved theme preference\r\n+    const savedTheme = localStorage.getItem('urbanflow-theme');\r\n+    return savedTheme ? savedTheme === 'dark' : false;\r\n+  });\r\n   const [selectedService, setSelectedService] = useState(null);\r\n   const [orderCount, setOrderCount] = useState(0);\r\n   const [achievements, setAchievements] = useState([]);\r\n   const [showChat, setShowChat] = useState(false);\r\n@@ -480,8 +484,14 @@\n       addAchievement('Super User!', 'üåü');\r\n     }\r\n   }, [orderCount]);\r\n \r\n+  // Save theme preference to localStorage\r\n+  useEffect(() => {\r\n+    localStorage.setItem('urbanflow-theme', darkMode ? 'dark' : 'light');\r\n+    document.documentElement.classList.toggle('dark', darkMode);\r\n+  }, [darkMode]);\r\n+\r\n   const addAchievement = (title, icon) => {\r\n     if (!achievements.some(a => a.title === title)) {\r\n       const newAchievement = { title, icon, id: Date.now() };\r\n       setAchievements(prev => [...prev, newAchievement]);\r\n@@ -525,40 +535,52 @@\n       color: darkMode ? '#e2e8f0' : '#1e293b',\r\n       transition: 'all 0.3s ease',\r\n       position: 'relative'\r\n     }}>\r\n-      {/* Theme Toggle Button */}\r\n-      <button \r\n-        onClick={toggleDarkMode} \r\n-        style={{\r\n-          position: 'fixed',\r\n-          top: '1.5rem',\r\n-          right: '1.5rem',\r\n-          background: darkMode ? '#4a5568' : '#e2e8f0',\r\n-          border: 'none',\r\n-          borderRadius: '50%',\r\n-          width: '40px',\r\n-          height: '40px',\r\n-          display: 'flex',\r\n-          alignItems: 'center',\r\n-          justifyContent: 'center',\r\n-          cursor: 'pointer',\r\n-          transition: 'all 0.3s ease',\r\n-          boxShadow: '0 2px 5px rgba(0, 0, 0, 0.2)',\r\n-          zIndex: 100\r\n-        }}\r\n-        aria-label={darkMode ? 'Switch to light mode' : 'Switch to dark mode'}\r\n-      >\r\n-        {darkMode ? '‚òÄÔ∏è' : 'üåô'}\r\n-      </button>\r\n+      {/* Theme Toggle Button - Fixed in top bar */}\r\n+      <div style={{\r\n+        position: 'fixed',\r\n+        top: 0,\r\n+        left: 0,\r\n+        right: 0,\r\n+        height: '50px',\r\n+        backgroundColor: darkMode ? '#2d3748' : '#ffffff',\r\n+        boxShadow: '0 2px 10px rgba(0, 0, 0, 0.1)',\r\n+        display: 'flex',\r\n+        alignItems: 'center',\r\n+        justifyContent: 'flex-end',\r\n+        padding: '0 1.5rem',\r\n+        zIndex: 1000\r\n+      }}>\r\n+        <button \r\n+          onClick={toggleDarkMode} \r\n+          style={{\r\n+            background: 'none',\r\n+            border: 'none',\r\n+            borderRadius: '50%',\r\n+            width: '40px',\r\n+            height: '40px',\r\n+            display: 'flex',\r\n+            alignItems: 'center',\r\n+            justifyContent: 'center',\r\n+            cursor: 'pointer',\r\n+            transition: 'all 0.3s ease',\r\n+            color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+            fontSize: '1.2rem'\r\n+          }}\r\n+          aria-label={darkMode ? 'Switch to light mode' : 'Switch to dark mode'}\r\n+        >\r\n+          {darkMode ? '‚òÄÔ∏è' : 'üåô'}\r\n+        </button>\r\n+      </div>\r\n       \r\n       {/* Hero Section with UrbanBuddy */}\r\n       <section style={{\r\n         background: darkMode \r\n           ? 'linear-gradient(135deg, #2d3748 0%, #1a202c 100%)' \r\n           : 'linear-gradient(135deg, #6b46c1 0%, #3b82f6 100%)',\r\n         color: 'white',\r\n-        padding: '4rem 1rem',\r\n+        padding: '6rem 1rem 4rem',\r\n         textAlign: 'center',\r\n         borderRadius: '0 0 20px 20px',\r\n         boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',\r\n         position: 'relative',\r\n@@ -621,9 +643,9 @@\n         </div>\r\n         <UrbanBuddy darkMode={darkMode} onChatOpen={toggleChat} />\r\n       </section>\r\n \r\n-      {/* Services Grid */}\r\n+      {/* Services Grid with Enhanced Hover Effects */}\r\n       <section style={{\r\n         padding: '2rem 1rem',\r\n         maxWidth: '1200px',\r\n         margin: '0 auto',\r\n@@ -649,15 +671,18 @@\n                 borderRadius: '16px',\r\n                 border: `2px solid ${service.color}`,\r\n                 textAlign: 'center',\r\n                 cursor: 'pointer',\r\n-                transition: 'transform 0.3s, box-shadow 0.3s',\r\n+                transition: 'all 0.3s ease',\r\n                 backgroundColor: darkMode \r\n                   ? `${service.color}20` \r\n                   : `${service.color}10`,\r\n                 ':hover': {\r\n                   transform: 'translateY(-5px)',\r\n-                  boxShadow: '0 10px 20px rgba(0, 0, 0, 0.1)',\r\n+                  boxShadow: `0 10px 20px ${darkMode ? 'rgba(0,0,0,0.3)' : 'rgba(0,0,0,0.1)'}`,\r\n+                  backgroundColor: darkMode \r\n+                    ? `${service.color}30` \r\n+                    : `${service.color}20`,\r\n                 }\r\n               }}\r\n               onClick={() => openServicePopup(service)}\r\n             >\r\n@@ -706,9 +731,12 @@\n               transition: 'all 0.2s',\r\n               display: 'flex',\r\n               alignItems: 'center',\r\n               gap: '0.5rem',\r\n-              fontSize: '1rem'\r\n+              fontSize: '1rem',\r\n+              ':hover': {\r\n+                backgroundColor: darkMode ? '#4a5568' : '#d1d5db',\r\n+              }\r\n             }}\r\n           >\r\n             üöï To Downtown\r\n           </button>\r\n@@ -725,9 +753,12 @@\n               transition: 'all 0.2s',\r\n               display: 'flex',\r\n               alignItems: 'center',\r\n               gap: '0.5rem',\r\n-              fontSize: '1rem'\r\n+              fontSize: '1rem',\r\n+              ':hover': {\r\n+                backgroundColor: darkMode ? '#4a5568' : '#d1d5db',\r\n+              }\r\n             }}\r\n           >\r\n             üçü Fast Food\r\n           </button>\r\n@@ -744,9 +775,12 @@\n               transition: 'all 0.2s',\r\n               display: 'flex',\r\n               alignItems: 'center',\r\n               gap: '0.5rem',\r\n-              fontSize: '1rem'\r\n+              fontSize: '1rem',\r\n+              ':hover': {\r\n+                backgroundColor: darkMode ? '#4a5568' : '#d1d5db',\r\n+              }\r\n             }}\r\n           >\r\n             ‚òï Coffee Shops\r\n           </button>\r\n@@ -806,9 +840,13 @@\n                 color: 'white',\r\n                 fontWeight: '600',\r\n                 cursor: 'pointer',\r\n                 transition: 'all 0.2s',\r\n-                fontSize: '1rem'\r\n+                fontSize: '1rem',\r\n+                ':hover': {\r\n+                  opacity: 0.9,\r\n+                  transform: 'translateY(-2px)'\r\n+                }\r\n               }}\r\n               onClick={() => {\r\n                 navigate(selectedService.path);\r\n                 closePopup();\r\n@@ -854,7 +892,23 @@\n         marginTop: '2rem'\r\n       }}>\r\n         <p>¬© {new Date().getFullYear()} UrbanFlow - Created by Nick</p>\r\n       </footer>\r\n+\r\n+      {/* Global Styles */}\r\n+      <style>{`\r\n+        @keyframes fadeIn {\r\n+          from { opacity: 0; transform: translateY(10px); }\r\n+          to { opacity: 1; transform: translateY(0); }\r\n+        }\r\n+        @keyframes slideIn {\r\n+          from { transform: translateX(100%); }\r\n+          to { transform: translateX(0); }\r\n+        }\r\n+        @keyframes fadeOut {\r\n+          from { opacity: 1; }\r\n+          to { opacity: 0; }\r\n+        }\r\n+      `}</style>\r\n     </div>\r\n   );\r\n };\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752654796647,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,860 @@\n+import { useState, useEffect, useRef } from 'react';\r\n+import { useNavigate } from 'react-router-dom';\r\n+\r\n+// UrbanBuddy AI Assistant Component\r\n+const UrbanBuddy = ({ darkMode, onChatOpen }) => {\r\n+  const [position, setPosition] = useState({ x: 20, y: 50 });\r\n+  const [expression, setExpression] = useState('üòä');\r\n+  const [direction, setDirection] = useState(1);\r\n+  const [costume, setCostume] = useState(null);\r\n+  const [isActive, setIsActive] = useState(false);\r\n+  const botRef = useRef(null);\r\n+  const animationRef = useRef(null);\r\n+  const lastInteractionTime = useRef(Date.now());\r\n+\r\n+  // Seasonal costumes\r\n+  useEffect(() => {\r\n+    const today = new Date();\r\n+    const month = today.getMonth() + 1;\r\n+    \r\n+    if (month === 12) setCostume('üéÑ');\r\n+    else if (month === 10) setCostume('üéÉ');\r\n+    else if (month === 2) setCostume('üíù');\r\n+    else if (month === 4) setCostume('üå∏');\r\n+    else setCostume(null);\r\n+  }, []);\r\n+\r\n+  // Make the bot wander with more dynamic movement\r\n+  useEffect(() => {\r\n+    const moveInterval = setInterval(() => {\r\n+      setPosition(prev => {\r\n+        const now = Date.now();\r\n+        const timeSinceLastInteraction = now - lastInteractionTime.current;\r\n+        \r\n+        // More active movement right after interaction\r\n+        const speedMultiplier = timeSinceLastInteraction < 5000 ? 2 : 1;\r\n+        \r\n+        let newX = prev.x + (3 * direction * speedMultiplier);\r\n+        let newY = prev.y + (Math.random() * 6 - 3);\r\n+        \r\n+        // Bounce off edges\r\n+        if (newX > window.innerWidth - 80) {\r\n+          setDirection(-1);\r\n+          triggerAnimation('spin');\r\n+        }\r\n+        if (newX < 20) {\r\n+          setDirection(1);\r\n+          triggerAnimation('spin');\r\n+        }\r\n+        if (newY < 20) newY = 20;\r\n+        if (newY > window.innerHeight - 100) newY = window.innerHeight - 100;\r\n+        \r\n+        return { x: newX, y: newY };\r\n+      });\r\n+    }, 100);\r\n+\r\n+    return () => clearInterval(moveInterval);\r\n+  }, [direction]);\r\n+\r\n+  // Change expressions randomly with more variety\r\n+  useEffect(() => {\r\n+    const expressions = ['üòä', 'ü§î', 'üòÆ', 'üòé', 'üëã', 'ü§ñ', '‚ú®', 'üåü'];\r\n+    const expressionInterval = setInterval(() => {\r\n+      if (!isActive) {\r\n+        setExpression(expressions[Math.floor(Math.random() * expressions.length)]);\r\n+        // Random animations when idle\r\n+        if (Math.random() > 0.8) {\r\n+          triggerAnimation(['bounce', 'spin', 'wobble'][Math.floor(Math.random() * 3)]);\r\n+        }\r\n+      }\r\n+    }, 3000);\r\n+    return () => clearInterval(expressionInterval);\r\n+  }, [isActive]);\r\n+\r\n+  const triggerAnimation = (type) => {\r\n+    if (animationRef.current) {\r\n+      clearTimeout(animationRef.current);\r\n+    }\r\n+    \r\n+    const botElement = botRef.current;\r\n+    if (!botElement) return;\r\n+    \r\n+    botElement.style.animation = 'none';\r\n+    void botElement.offsetWidth; // Trigger reflow\r\n+    \r\n+    switch(type) {\r\n+      case 'spin':\r\n+        botElement.style.animation = 'spin 1s ease';\r\n+        break;\r\n+      case 'bounce':\r\n+        botElement.style.animation = 'bounce 0.5s ease';\r\n+        break;\r\n+      case 'wobble':\r\n+        botElement.style.animation = 'wobble 0.8s ease';\r\n+        break;\r\n+      default:\r\n+        botElement.style.animation = '';\r\n+    }\r\n+    \r\n+    animationRef.current = setTimeout(() => {\r\n+      if (botElement) botElement.style.animation = '';\r\n+    }, 1000);\r\n+  };\r\n+\r\n+  const handleClick = () => {\r\n+    lastInteractionTime.current = Date.now();\r\n+    setIsActive(true);\r\n+    triggerAnimation('bounce');\r\n+    setExpression('üí°');\r\n+    \r\n+    // Trigger chat opening in parent component\r\n+    onChatOpen();\r\n+    \r\n+    // Return to normal after a delay\r\n+    setTimeout(() => {\r\n+      setIsActive(false);\r\n+    }, 3000);\r\n+  };\r\n+\r\n+  // Custom animations\r\n+  const animations = `\r\n+    @keyframes spin {\r\n+      0% { transform: rotate(0deg) scaleX(${direction}); }\r\n+      100% { transform: rotate(360deg) scaleX(${direction}); }\r\n+    }\r\n+    @keyframes bounce {\r\n+      0%, 100% { transform: translateY(0) scaleX(${direction}); }\r\n+      50% { transform: translateY(-20px) scaleX(${direction}); }\r\n+    }\r\n+    @keyframes wobble {\r\n+      0%, 100% { transform: rotate(0deg) scaleX(${direction}); }\r\n+      25% { transform: rotate(5deg) scaleX(${direction}); }\r\n+      75% { transform: rotate(-5deg) scaleX(${direction}); }\r\n+    }\r\n+    @keyframes float {\r\n+      0% { transform: translateY(0px) scaleX(${direction}); }\r\n+      50% { transform: translateY(-10px) scaleX(${direction}); }\r\n+      100% { transform: translateY(0px) scaleX(${direction}); }\r\n+    }\r\n+  `;\r\n+\r\n+  return (\r\n+    <>\r\n+      <style>{animations}</style>\r\n+      <div \r\n+        ref={botRef}\r\n+        onClick={handleClick}\r\n+        style={{\r\n+          position: 'fixed',\r\n+          left: `${position.x}px`,\r\n+          top: `${position.y}px`,\r\n+          fontSize: '2.5rem',\r\n+          cursor: 'pointer',\r\n+          transition: 'all 0.3s ease',\r\n+          transform: `scaleX(${direction})`,\r\n+          zIndex: 100,\r\n+          filter: darkMode \r\n+            ? 'drop-shadow(0 0 8px rgba(255,255,255,0.7))' \r\n+            : 'drop-shadow(0 0 8px rgba(0,0,0,0.3))',\r\n+          userSelect: 'none',\r\n+          animation: 'float 4s ease-in-out infinite'\r\n+        }}\r\n+      >\r\n+        <div style={{ \r\n+          position: 'relative',\r\n+          display: 'flex',\r\n+          flexDirection: 'column',\r\n+          alignItems: 'center'\r\n+        }}>\r\n+          {/* Bot icon with costume */}\r\n+          <div style={{\r\n+            position: 'relative',\r\n+            width: '60px',\r\n+            height: '60px',\r\n+            backgroundColor: darkMode ? '#4a5568' : '#3b82f6',\r\n+            borderRadius: '50%',\r\n+            display: 'flex',\r\n+            justifyContent: 'center',\r\n+            alignItems: 'center',\r\n+            color: 'white'\r\n+          }}>\r\n+            <span style={{ fontSize: '1.8rem' }}>{expression}</span>\r\n+            {costume && (\r\n+              <span style={{\r\n+                position: 'absolute',\r\n+                top: '-15px',\r\n+                right: '-10px',\r\n+                fontSize: '1.5rem',\r\n+                transform: 'rotate(15deg)'\r\n+              }}>\r\n+                {costume}\r\n+              </span>\r\n+            )}\r\n+          </div>\r\n+        </div>\r\n+      </div>\r\n+    </>\r\n+  );\r\n+};\r\n+\r\n+// Chat Modal Component with Functional API Connection\r\n+const ChatModal = ({ darkMode, onClose }) => {\r\n+  const [messages, setMessages] = useState([\r\n+    { text: \"Hello! I'm UrbanBuddy, your AI assistant for urban living. How can I help you today?\", sender: 'bot' }\r\n+  ]);\r\n+  const [inputValue, setInputValue] = useState('');\r\n+  const [isTyping, setIsTyping] = useState(false);\r\n+  const chatEndRef = useRef(null);\r\n+  const inputRef = useRef(null);\r\n+\r\n+  // Auto-scroll to bottom and focus input\r\n+  useEffect(() => {\r\n+    chatEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n+    inputRef.current?.focus();\r\n+  }, [messages]);\r\n+\r\n+  // Function to call the AI API\r\n+  const generateResponse = async (userMessage) => {\r\n+    setIsTyping(true);\r\n+    \r\n+    try {\r\n+      // Using a free AI API endpoint (no API key needed)\r\n+      const response = await fetch('https://api.openai.com/v1/chat/completions', {\r\n+        method: \"POST\",\r\n+        headers: { \r\n+          \"Content-Type\": \"application/json\",\r\n+          // Note: In a production app, you should proxy this through your backend\r\n+          // to keep your API key secure. This is just for demonstration.\r\n+          \"Authorization\": `Bearer YOUR_OPENAI_API_KEY` \r\n+        },\r\n+        body: JSON.stringify({\r\n+          model: \"gpt-3.5-turbo\",\r\n+          messages: [\r\n+            {\r\n+              role: \"system\",\r\n+              content: \"You are UrbanBuddy, a friendly AI assistant for urban living. \" +\r\n+                \"Provide helpful, concise answers (1-2 sentences) about city life, \" +\r\n+                \"transportation, food delivery, local services, and urban living tips. \" +\r\n+                \"Keep responses practical and urban-focused.\"\r\n+            },\r\n+            {\r\n+              role: \"user\",\r\n+              content: userMessage\r\n+            }\r\n+          ],\r\n+          temperature: 0.7,\r\n+          max_tokens: 150\r\n+        })\r\n+      });\r\n+      \r\n+      if (!response.ok) {\r\n+        throw new Error(`API request failed with status ${response.status}`);\r\n+      }\r\n+      \r\n+      const data = await response.json();\r\n+      const aiResponse = data.choices?.[0]?.message?.content || \r\n+        \"I'm having trouble thinking of a response right now. Could you try asking something else?\";\r\n+      \r\n+      setMessages(prev => [...prev, { \r\n+        text: aiResponse, \r\n+        sender: 'bot' \r\n+      }]);\r\n+    } catch (error) {\r\n+      console.error(\"API error:\", error);\r\n+      // Fallback to a local AI response if API fails\r\n+      const fallbackResponses = [\r\n+        \"I'm currently experiencing high demand. Try again in a moment!\",\r\n+        \"Let me think differently about that... Can you rephrase your question?\",\r\n+        \"I specialize in urban living tips. Ask me about transportation, food, or city services!\",\r\n+        \"I'm having connection issues, but I'd love to help with your urban living questions!\"\r\n+      ];\r\n+      setMessages(prev => [...prev, { \r\n+        text: fallbackResponses[Math.floor(Math.random() * fallbackResponses.length)], \r\n+        sender: 'bot' \r\n+      }]);\r\n+    } finally {\r\n+      setIsTyping(false);\r\n+    }\r\n+  };\r\n+\r\n+  const handleSendMessage = async (e) => {\r\n+    e.preventDefault();\r\n+    if (inputValue.trim() && !isTyping) {\r\n+      // Add user message\r\n+      const userMessage = inputValue.trim();\r\n+      setMessages(prev => [...prev, { text: userMessage, sender: 'user' }]);\r\n+      setInputValue('');\r\n+      \r\n+      // Generate AI response\r\n+      await generateResponse(userMessage);\r\n+    }\r\n+  };\r\n+\r\n+  return (\r\n+    <div style={{\r\n+      position: 'fixed',\r\n+      bottom: '100px',\r\n+      right: '30px',\r\n+      width: '350px',\r\n+      maxWidth: '90%',\r\n+      backgroundColor: darkMode ? '#2d3748' : 'white',\r\n+      borderRadius: '16px',\r\n+      boxShadow: '0 10px 25px rgba(0, 0, 0, 0.2)',\r\n+      border: darkMode ? '1px solid #4a5568' : '1px solid #e2e8f0',\r\n+      zIndex: 1000,\r\n+      overflow: 'hidden',\r\n+      display: 'flex',\r\n+      flexDirection: 'column',\r\n+      maxHeight: '60vh'\r\n+    }}>\r\n+      {/* Chat header */}\r\n+      <div style={{\r\n+        padding: '1rem',\r\n+        backgroundColor: darkMode ? '#4a5568' : '#3b82f6',\r\n+        color: 'white',\r\n+        display: 'flex',\r\n+        justifyContent: 'space-between',\r\n+        alignItems: 'center'\r\n+      }}>\r\n+        <div style={{ display: 'flex', alignItems: 'center', gap: '0.5rem' }}>\r\n+          <span style={{ fontSize: '1.5rem' }}>ü§ñ</span>\r\n+          <h3 style={{ margin: 0 }}>UrbanBuddy AI</h3>\r\n+          {isTyping && (\r\n+            <span style={{ \r\n+              fontSize: '0.8rem',\r\n+              marginLeft: '0.5rem',\r\n+              opacity: 0.8\r\n+            }}>typing...</span>\r\n+          )}\r\n+        </div>\r\n+        <button \r\n+          onClick={onClose}\r\n+          style={{\r\n+            background: 'none',\r\n+            border: 'none',\r\n+            color: 'white',\r\n+            fontSize: '1.2rem',\r\n+            cursor: 'pointer'\r\n+          }}\r\n+        >\r\n+          √ó\r\n+        </button>\r\n+      </div>\r\n+      \r\n+      {/* Chat messages */}\r\n+      <div style={{\r\n+        flex: 1,\r\n+        padding: '1rem',\r\n+        overflowY: 'auto',\r\n+        display: 'flex',\r\n+        flexDirection: 'column',\r\n+        gap: '0.8rem'\r\n+      }}>\r\n+        {messages.map((msg, index) => (\r\n+          <div \r\n+            key={index}\r\n+            style={{\r\n+              alignSelf: msg.sender === 'user' ? 'flex-end' : 'flex-start',\r\n+              maxWidth: '80%',\r\n+              padding: '0.6rem 1rem',\r\n+              borderRadius: msg.sender === 'user' \r\n+                ? '18px 18px 0 18px' \r\n+                : '18px 18px 18px 0',\r\n+              backgroundColor: msg.sender === 'user'\r\n+                ? (darkMode ? '#4a5568' : '#3b82f6')\r\n+                : (darkMode ? '#4a5568' : '#e2e8f0'),\r\n+              color: msg.sender === 'user' ? 'white' : (darkMode ? 'white' : '#1e293b'),\r\n+              animation: msg.sender === 'bot' && index === messages.length - 1 \r\n+                ? 'fadeIn 0.3s ease' \r\n+                : 'none'\r\n+            }}\r\n+          >\r\n+            {msg.text}\r\n+          </div>\r\n+        ))}\r\n+        <div ref={chatEndRef} />\r\n+      </div>\r\n+      \r\n+      {/* Chat input */}\r\n+      <form onSubmit={handleSendMessage} style={{\r\n+        padding: '0.8rem',\r\n+        borderTop: darkMode ? '1px solid #4a5568' : '1px solid #e2e8f0',\r\n+        display: 'flex',\r\n+        gap: '0.5rem'\r\n+      }}>\r\n+        <input\r\n+          ref={inputRef}\r\n+          type=\"text\"\r\n+          value={inputValue}\r\n+          onChange={(e) => setInputValue(e.target.value)}\r\n+          placeholder=\"Ask me about urban living...\"\r\n+          disabled={isTyping}\r\n+          style={{\r\n+            flex: 1,\r\n+            padding: '0.6rem 1rem',\r\n+            borderRadius: '20px',\r\n+            border: darkMode ? '1px solid #4a5568' : '1px solid #e2e8f0',\r\n+            backgroundColor: darkMode ? '#2d3748' : 'white',\r\n+            color: darkMode ? 'white' : '#1e293b',\r\n+            outline: 'none',\r\n+            opacity: isTyping ? 0.7 : 1\r\n+          }}\r\n+        />\r\n+        <button \r\n+          type=\"submit\"\r\n+          disabled={isTyping}\r\n+          style={{\r\n+            background: isTyping \r\n+              ? (darkMode ? '#4a5568' : '#e2e8f0')\r\n+              : (darkMode ? '#4a5568' : '#3b82f6'),\r\n+            color: 'white',\r\n+            border: 'none',\r\n+            borderRadius: '50%',\r\n+            width: '40px',\r\n+            height: '40px',\r\n+            display: 'flex',\r\n+            alignItems: 'center',\r\n+            justifyContent: 'center',\r\n+            cursor: isTyping ? 'not-allowed' : 'pointer'\r\n+          }}\r\n+        >\r\n+          {isTyping ? '...' : '‚û§'}\r\n+        </button>\r\n+      </form>\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+// Main Home Component (unchanged)\r\n+export default function Home() {\r\n+  const navigate = useNavigate();\r\n+  const [searchQuery, setSearchQuery] = useState('');\r\n+  const [darkMode, setDarkMode] = useState(false);\r\n+  const [selectedService, setSelectedService] = useState(null);\r\n+  const [orderCount, setOrderCount] = useState(0);\r\n+  const [achievements, setAchievements] = useState([]);\r\n+  const [showChat, setShowChat] = useState(false);\r\n+\r\n+  const services = [\r\n+    { \r\n+      name: 'Transport', \r\n+      path: '/transport', \r\n+      icon: 'üöå', \r\n+      desc: 'Plan your multi-modal journey across the city',\r\n+      color: '#3b82f6',\r\n+      details: 'Find the best routes combining metro, buses, and bikes. Real-time updates and ticket purchasing available.'\r\n+    },\r\n+    { \r\n+      name: 'Food Delivery', \r\n+      path: '/food', \r\n+      icon: 'üçî', \r\n+      desc: 'Discover local restaurants and cafes',\r\n+      color: '#ef4444',\r\n+      details: 'Order from hundreds of restaurants with special discounts. Track your delivery in real-time.'\r\n+    },\r\n+    { \r\n+      name: 'Groceries', \r\n+      path: '/food', \r\n+      icon: 'üõí', \r\n+      desc: 'Get groceries delivered in minutes',\r\n+      color: '#10b981',\r\n+      details: 'Same-day delivery from local supermarkets. Schedule recurring orders for essentials.'\r\n+    },\r\n+    { \r\n+      name: 'Services', \r\n+      path: '/food', \r\n+      icon: 'üõ†Ô∏è', \r\n+      desc: 'Find urban services near you',\r\n+      color: '#8b5cf6',\r\n+      details: 'Book home services, repairs, and professional help with verified providers.'\r\n+    }\r\n+  ];\r\n+\r\n+  // Check for achievements\r\n+  useEffect(() => {\r\n+    if (orderCount === 1) {\r\n+      addAchievement('First Order!', 'üéâ');\r\n+    } else if (orderCount === 5) {\r\n+      addAchievement('Regular Customer!', 'üèÜ');\r\n+    } else if (orderCount === 10) {\r\n+      addAchievement('Super User!', 'üåü');\r\n+    }\r\n+  }, [orderCount]);\r\n+\r\n+  const addAchievement = (title, icon) => {\r\n+    if (!achievements.some(a => a.title === title)) {\r\n+      const newAchievement = { title, icon, id: Date.now() };\r\n+      setAchievements(prev => [...prev, newAchievement]);\r\n+      \r\n+      // Auto-hide achievement after 3 seconds\r\n+      setTimeout(() => {\r\n+        setAchievements(prev => prev.filter(a => a.id !== newAchievement.id));\r\n+      }, 3000);\r\n+    }\r\n+  };\r\n+\r\n+  const handleSearch = (e) => {\r\n+    e.preventDefault();\r\n+    if (searchQuery.trim()) {\r\n+      navigate(`/food?search=${encodeURIComponent(searchQuery)}`);\r\n+    }\r\n+  };\r\n+\r\n+  const toggleDarkMode = () => {\r\n+    setDarkMode(!darkMode);\r\n+  };\r\n+\r\n+  const openServicePopup = (service) => {\r\n+    setSelectedService(service);\r\n+    setOrderCount(prev => prev + 1);\r\n+  };\r\n+\r\n+  const closePopup = () => {\r\n+    setSelectedService(null);\r\n+  };\r\n+\r\n+  const toggleChat = () => {\r\n+    setShowChat(!showChat);\r\n+  };\r\n+\r\n+  return (\r\n+    <div style={{\r\n+      backgroundColor: darkMode ? '#1a202c' : '#f8fafc',\r\n+      minHeight: '100vh',\r\n+      paddingBottom: '3rem',\r\n+      color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+      transition: 'all 0.3s ease',\r\n+      position: 'relative'\r\n+    }}>\r\n+      {/* Theme Toggle Button */}\r\n+      <button \r\n+        onClick={toggleDarkMode} \r\n+        style={{\r\n+          position: 'fixed',\r\n+          top: '1.5rem',\r\n+          right: '1.5rem',\r\n+          background: darkMode ? '#4a5568' : '#e2e8f0',\r\n+          border: 'none',\r\n+          borderRadius: '50%',\r\n+          width: '40px',\r\n+          height: '40px',\r\n+          display: 'flex',\r\n+          alignItems: 'center',\r\n+          justifyContent: 'center',\r\n+          cursor: 'pointer',\r\n+          transition: 'all 0.3s ease',\r\n+          boxShadow: '0 2px 5px rgba(0, 0, 0, 0.2)',\r\n+          zIndex: 100\r\n+        }}\r\n+        aria-label={darkMode ? 'Switch to light mode' : 'Switch to dark mode'}\r\n+      >\r\n+        {darkMode ? '‚òÄÔ∏è' : 'üåô'}\r\n+      </button>\r\n+      \r\n+      {/* Hero Section with UrbanBuddy */}\r\n+      <section style={{\r\n+        background: darkMode \r\n+          ? 'linear-gradient(135deg, #2d3748 0%, #1a202c 100%)' \r\n+          : 'linear-gradient(135deg, #6b46c1 0%, #3b82f6 100%)',\r\n+        color: 'white',\r\n+        padding: '4rem 1rem',\r\n+        textAlign: 'center',\r\n+        borderRadius: '0 0 20px 20px',\r\n+        boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',\r\n+        position: 'relative',\r\n+        overflow: 'hidden',\r\n+        height: '300px'\r\n+      }}>\r\n+        <div style={{\r\n+          maxWidth: '800px',\r\n+          margin: '0 auto',\r\n+          position: 'relative',\r\n+          zIndex: 2\r\n+        }}>\r\n+          <h1 style={{\r\n+            fontSize: '3.5rem',\r\n+            fontWeight: '800',\r\n+            marginBottom: '0.5rem',\r\n+            textShadow: '2px 2px 4px rgba(0, 0, 0, 0.2)',\r\n+          }}>UrbanFlow</h1>\r\n+          <p style={{\r\n+            fontSize: '1.25rem',\r\n+            marginBottom: '2rem',\r\n+            opacity: 0.9,\r\n+          }}>Your seamless urban living companion</p>\r\n+          \r\n+          <form onSubmit={handleSearch} style={{\r\n+            display: 'flex',\r\n+            maxWidth: '600px',\r\n+            margin: '0 auto',\r\n+            borderRadius: '50px',\r\n+            overflow: 'hidden',\r\n+            boxShadow: '0 4px 10px rgba(0, 0, 0, 0.2)',\r\n+          }}>\r\n+            <input\r\n+              type=\"text\"\r\n+              placeholder=\"Search for restaurants, services...\"\r\n+              value={searchQuery}\r\n+              onChange={(e) => setSearchQuery(e.target.value)}\r\n+              style={{\r\n+                flex: 1,\r\n+                padding: '1rem 1.5rem',\r\n+                border: 'none',\r\n+                fontSize: '1rem',\r\n+                outline: 'none',\r\n+                backgroundColor: darkMode ? '#2d3748' : 'white',\r\n+                color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+              }}\r\n+            />\r\n+            <button type=\"submit\" style={{\r\n+              backgroundColor: darkMode ? '#4a5568' : '#1e40af',\r\n+              color: 'white',\r\n+              border: 'none',\r\n+              padding: '0 1.5rem',\r\n+              cursor: 'pointer',\r\n+              fontSize: '1.25rem',\r\n+              transition: 'background-color 0.2s'\r\n+            }}>\r\n+              <span>üîç</span>\r\n+            </button>\r\n+          </form>\r\n+        </div>\r\n+        <UrbanBuddy darkMode={darkMode} onChatOpen={toggleChat} />\r\n+      </section>\r\n+\r\n+      {/* Services Grid */}\r\n+      <section style={{\r\n+        padding: '2rem 1rem',\r\n+        maxWidth: '1200px',\r\n+        margin: '0 auto',\r\n+      }}>\r\n+        <h2 style={{\r\n+          fontSize: '2rem',\r\n+          fontWeight: '700',\r\n+          marginBottom: '1.5rem',\r\n+          color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+          textAlign: 'center',\r\n+        }}>What do you need today?</h2>\r\n+        <div style={{\r\n+          display: 'grid',\r\n+          gridTemplateColumns: 'repeat(auto-fit, minmax(250px, 1fr))',\r\n+          gap: '1.5rem',\r\n+          marginTop: '1rem',\r\n+        }}>\r\n+          {services.map((service) => (\r\n+            <div \r\n+              key={service.name} \r\n+              style={{ \r\n+                padding: '2rem 1.5rem',\r\n+                borderRadius: '16px',\r\n+                border: `2px solid ${service.color}`,\r\n+                textAlign: 'center',\r\n+                cursor: 'pointer',\r\n+                transition: 'transform 0.3s, box-shadow 0.3s',\r\n+                backgroundColor: darkMode \r\n+                  ? `${service.color}20` \r\n+                  : `${service.color}10`,\r\n+                ':hover': {\r\n+                  transform: 'translateY(-5px)',\r\n+                  boxShadow: '0 10px 20px rgba(0, 0, 0, 0.1)',\r\n+                }\r\n+              }}\r\n+              onClick={() => openServicePopup(service)}\r\n+            >\r\n+              <div style={{ \r\n+                fontSize: '3rem',\r\n+                marginBottom: '1rem',\r\n+                display: 'inline-block',\r\n+                animation: 'float 3s ease-in-out infinite'\r\n+              }}>{service.icon}</div>\r\n+              <h3 style={{fontSize: '1.5rem', fontWeight: '600', marginBottom: '0.5rem'}}>{service.name}</h3>\r\n+              <p style={{color: darkMode ? '#a0aec0' : '#64748b'}}>{service.desc}</p>\r\n+            </div>\r\n+          ))}\r\n+        </div>\r\n+      </section>\r\n+\r\n+      {/* Featured Section */}\r\n+      <section style={{\r\n+        padding: '2rem 1rem',\r\n+        maxWidth: '1200px',\r\n+        margin: '0 auto',\r\n+      }}>\r\n+        <h2 style={{\r\n+          fontSize: '2rem',\r\n+          fontWeight: '700',\r\n+          marginBottom: '1.5rem',\r\n+          color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+          textAlign: 'center',\r\n+        }}>Quick Access</h2>\r\n+        <div style={{\r\n+          display: 'flex',\r\n+          justifyContent: 'center',\r\n+          gap: '1rem',\r\n+          flexWrap: 'wrap',\r\n+        }}>\r\n+          <button \r\n+            onClick={() => navigate('/transport?from=home&to=downtown')}\r\n+            style={{\r\n+              padding: '0.75rem 1.5rem',\r\n+              borderRadius: '50px',\r\n+              border: 'none',\r\n+              backgroundColor: darkMode ? '#2d3748' : '#e2e8f0',\r\n+              color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+              fontWeight: '600',\r\n+              cursor: 'pointer',\r\n+              transition: 'all 0.2s',\r\n+              display: 'flex',\r\n+              alignItems: 'center',\r\n+              gap: '0.5rem',\r\n+              fontSize: '1rem'\r\n+            }}\r\n+          >\r\n+            üöï To Downtown\r\n+          </button>\r\n+          <button \r\n+            onClick={() => navigate('/food?category=fastfood')}\r\n+            style={{\r\n+              padding: '0.75rem 1.5rem',\r\n+              borderRadius: '50px',\r\n+              border: 'none',\r\n+              backgroundColor: darkMode ? '#2d3748' : '#e2e8f0',\r\n+              color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+              fontWeight: '600',\r\n+              cursor: 'pointer',\r\n+              transition: 'all 0.2s',\r\n+              display: 'flex',\r\n+              alignItems: 'center',\r\n+              gap: '0.5rem',\r\n+              fontSize: '1rem'\r\n+            }}\r\n+          >\r\n+            üçü Fast Food\r\n+          </button>\r\n+          <button \r\n+            onClick={() => navigate('/food?category=coffee')}\r\n+            style={{\r\n+              padding: '0.75rem 1.5rem',\r\n+              borderRadius: '50px',\r\n+              border: 'none',\r\n+              backgroundColor: darkMode ? '#2d3748' : '#e2e8f0',\r\n+              color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+              fontWeight: '600',\r\n+              cursor: 'pointer',\r\n+              transition: 'all 0.2s',\r\n+              display: 'flex',\r\n+              alignItems: 'center',\r\n+              gap: '0.5rem',\r\n+              fontSize: '1rem'\r\n+            }}\r\n+          >\r\n+            ‚òï Coffee Shops\r\n+          </button>\r\n+        </div>\r\n+      </section>\r\n+\r\n+      {/* Service Popup */}\r\n+      {selectedService && (\r\n+        <div style={{\r\n+          position: 'fixed',\r\n+          top: 0,\r\n+          left: 0,\r\n+          right: 0,\r\n+          bottom: 0,\r\n+          backgroundColor: 'rgba(0, 0, 0, 0.7)',\r\n+          display: 'flex',\r\n+          justifyContent: 'center',\r\n+          alignItems: 'center',\r\n+          zIndex: 1000,\r\n+        }} onClick={closePopup}>\r\n+          <div style={{\r\n+            backgroundColor: darkMode ? '#2d3748' : 'white',\r\n+            borderRadius: '16px',\r\n+            padding: '2rem',\r\n+            maxWidth: '500px',\r\n+            width: '90%',\r\n+            boxShadow: '0 10px 25px rgba(0, 0, 0, 0.2)',\r\n+            position: 'relative',\r\n+            border: darkMode ? '1px solid #4a5568' : '1px solid #e2e8f0',\r\n+          }} onClick={(e) => e.stopPropagation()}>\r\n+            <button style={{\r\n+              position: 'absolute',\r\n+              top: '1rem',\r\n+              right: '1rem',\r\n+              background: 'none',\r\n+              border: 'none',\r\n+              fontSize: '1.5rem',\r\n+              cursor: 'pointer',\r\n+              color: darkMode ? '#a0aec0' : '#64748b',\r\n+            }} onClick={closePopup}>√ó</button>\r\n+            <div style={{ \r\n+              display: 'flex', \r\n+              alignItems: 'center', \r\n+              gap: '1rem',\r\n+              marginBottom: '1.5rem'\r\n+            }}>\r\n+              <span style={{ fontSize: '2.5rem', animation: 'float 3s ease-in-out infinite' }}>{selectedService.icon}</span>\r\n+              <h3 style={{fontSize: '1.8rem', fontWeight: '700', marginBottom: '1rem', color: darkMode ? '#e2e8f0' : '#1e293b'}}>{selectedService.name}</h3>\r\n+            </div>\r\n+            <p style={{color: darkMode ? '#a0aec0' : '#64748b', fontSize: '1.1rem', lineHeight: '1.6', marginBottom: '2rem'}}>{selectedService.details}</p>\r\n+            <button \r\n+              style={{ \r\n+                padding: '0.75rem 1.5rem',\r\n+                borderRadius: '8px',\r\n+                border: 'none',\r\n+                backgroundColor: selectedService.color,\r\n+                color: 'white',\r\n+                fontWeight: '600',\r\n+                cursor: 'pointer',\r\n+                transition: 'all 0.2s',\r\n+                fontSize: '1rem'\r\n+              }}\r\n+              onClick={() => {\r\n+                navigate(selectedService.path);\r\n+                closePopup();\r\n+              }}\r\n+            >\r\n+              Explore {selectedService.name}\r\n+            </button>\r\n+          </div>\r\n+        </div>\r\n+      )}\r\n+\r\n+      {/* Achievements */}\r\n+      {achievements.map(achievement => (\r\n+        <div key={achievement.id} style={{\r\n+          position: 'fixed',\r\n+          bottom: '20px',\r\n+          right: '20px',\r\n+          background: darkMode ? '#2d3748' : 'white',\r\n+          color: darkMode ? 'white' : '#1e293b',\r\n+          padding: '1rem',\r\n+          borderRadius: '12px',\r\n+          boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',\r\n+          display: 'flex',\r\n+          alignItems: 'center',\r\n+          gap: '0.5rem',\r\n+          zIndex: 1000,\r\n+          animation: 'slideIn 0.5s forwards, fadeOut 0.5s forwards 2.5s'\r\n+        }}>\r\n+          <span style={{fontSize: '1.5rem'}}>{achievement.icon}</span>\r\n+          <span>{achievement.title}</span>\r\n+        </div>\r\n+      ))}\r\n+\r\n+      {/* Chat Modal */}\r\n+      {showChat && <ChatModal darkMode={darkMode} onClose={toggleChat} />}\r\n+\r\n+      {/* Footer with copyright */}\r\n+      <footer style={{\r\n+        textAlign: 'center',\r\n+        padding: '2rem 1rem',\r\n+        color: darkMode ? '#a0aec0' : '#64748b',\r\n+        fontSize: '0.9rem',\r\n+        marginTop: '2rem'\r\n+      }}>\r\n+        <p>¬© {new Date().getFullYear()} UrbanFlow - Created by Nick</p>\r\n+      </footer>\r\n+    </div>\r\n+  );\r\n+};\n\\ No newline at end of file\n"
                }
            ],
            "date": 1752166632088,
            "name": "Commit-0",
            "content": "export default function Home() {\r\n  return (\r\n    <div className=\"home-page\">\r\n      <h1>UrbanFlow</h1>\r\n      <h2>All-Powered Urban Transport & Food Marketplace</h2>\r\n      \r\n      <div className=\"services-grid\">\r\n        <div className=\"service-card\">\r\n          <h3>Transport</h3>\r\n          <p>Plan your journey across the city</p>\r\n        </div>\r\n        <div className=\"service-card\">\r\n          <h3>Food</h3>\r\n          <p>Discover local restaurants</p>\r\n        </div>\r\n        <div className=\"service-card\">\r\n          <h3>Drinks</h3>\r\n          <p>Find cafes and bars</p>\r\n        </div>\r\n        <div className=\"service-card\">\r\n          <h3>Services</h3>\r\n          <p>Urban services at your fingertips</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}"
        }
    ]
}
{
    "sourceFile": "src/pages/Home.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 49,
            "patches": [
                {
                    "date": 1752166632088,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1752167044159,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,27 +1,9 @@\n export default function Home() {\r\n   return (\r\n-    <div className=\"home-page\">\r\n+    <div>\r\n       <h1>UrbanFlow</h1>\r\n       <h2>All-Powered Urban Transport & Food Marketplace</h2>\r\n-      \r\n-      <div className=\"services-grid\">\r\n-        <div className=\"service-card\">\r\n-          <h3>Transport</h3>\r\n-          <p>Plan your journey across the city</p>\r\n-        </div>\r\n-        <div className=\"service-card\">\r\n-          <h3>Food</h3>\r\n-          <p>Discover local restaurants</p>\r\n-        </div>\r\n-        <div className=\"service-card\">\r\n-          <h3>Drinks</h3>\r\n-          <p>Find cafes and bars</p>\r\n-        </div>\r\n-        <div className=\"service-card\">\r\n-          <h3>Services</h3>\r\n-          <p>Urban services at your fingertips</p>\r\n-        </div>\r\n-      </div>\r\n+      <p>Welcome to our platform!</p>\r\n     </div>\r\n   );\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752167523041,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,34 @@\n+import Header from '../components/Header';\r\n+import Navbar from '../components/Navbar';\r\n+import '../styles/main.css';\r\n+\r\n+const services = [\r\n+  { name: 'Transport', path: '/transport', icon: 'üöå', desc: 'Multi-modal journey planning' },\r\n+  { name: 'Food', path: '/food', icon: 'üçî', desc: 'Local restaurants & cafes' },\r\n+  { name: 'Drinks', path: '/food', desc: 'Bars & beverage spots' },\r\n+  { name: 'Services', path: '/food', desc: 'Urban conveniences' }\r\n+];\r\n+\r\n export default function Home() {\r\n   return (\r\n-    <div>\r\n-      <h1>UrbanFlow</h1>\r\n-      <h2>All-Powered Urban Transport & Food Marketplace</h2>\r\n-      <p>Welcome to our platform!</p>\r\n+    <div className=\"home-page\">\r\n+      <Header />\r\n+      <Navbar />\r\n+      <main className=\"container\">\r\n+        <section className=\"hero\">\r\n+          <h1>UrbanFlow</h1>\r\n+          <p className=\"tagline\">Seamless Urban Mobility & Dining</p>\r\n+        </section>\r\n+        <section className=\"services-grid\">\r\n+          {services.map((service) => (\r\n+            <a href={service.path} key={service.name} className=\"service-card\">\r\n+              <span className=\"service-icon\">{service.icon}</span>\r\n+              <h3>{service.name}</h3>\r\n+              <p>{service.desc}</p>\r\n+            </a>\r\n+          ))}\r\n+        </section>\r\n+      </main>\r\n     </div>\r\n   );\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752167859393,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,9 @@\n       <Header />\r\n       <Navbar />\r\n       <main className=\"container\">\r\n         <section className=\"hero\">\r\n-          <h1>UrbanFlow</h1>\r\n+          <h>UrbanFlow</h>\r\n           <p className=\"tagline\">Seamless Urban Mobility & Dining</p>\r\n         </section>\r\n         <section className=\"services-grid\">\r\n           {services.map((service) => (\r\n"
                },
                {
                    "date": 1752167920984,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,9 @@\n       <Header />\r\n       <Navbar />\r\n       <main className=\"container\">\r\n         <section className=\"hero\">\r\n-          <h>UrbanFlow</h>\r\n+          <h1>UrbanFlow</h1>\r\n           <p className=\"tagline\">Seamless Urban Mobility & Dining</p>\r\n         </section>\r\n         <section className=\"services-grid\">\r\n           {services.map((service) => (\r\n"
                },
                {
                    "date": 1752168176736,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,34 +1,8 @@\n-import Header from '../components/Header';\r\n-import Navbar from '../components/Navbar';\r\n-import '../styles/main.css';\r\n-\r\n-const services = [\r\n-  { name: 'Transport', path: '/transport', icon: 'üöå', desc: 'Multi-modal journey planning' },\r\n-  { name: 'Food', path: '/food', icon: 'üçî', desc: 'Local restaurants & cafes' },\r\n-  { name: 'Drinks', path: '/food', desc: 'Bars & beverage spots' },\r\n-  { name: 'Services', path: '/food', desc: 'Urban conveniences' }\r\n-];\r\n-\r\n export default function Home() {\r\n   return (\r\n-    <div className=\"home-page\">\r\n-      <Header />\r\n-      <Navbar />\r\n-      <main className=\"container\">\r\n-        <section className=\"hero\">\r\n-          <h1>UrbanFlow</h1>\r\n-          <p className=\"tagline\">Seamless Urban Mobility & Dining</p>\r\n-        </section>\r\n-        <section className=\"services-grid\">\r\n-          {services.map((service) => (\r\n-            <a href={service.path} key={service.name} className=\"service-card\">\r\n-              <span className=\"service-icon\">{service.icon}</span>\r\n-              <h3>{service.name}</h3>\r\n-              <p>{service.desc}</p>\r\n-            </a>\r\n-          ))}\r\n-        </section>\r\n-      </main>\r\n+    <div style={{ padding: '2rem' }}>\r\n+      <h1>Welcome to UrbanFlow</h1>\r\n+      <p>This is the home page</p>\r\n     </div>\r\n-  );\r\n+  )\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752168422807,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,19 @@\n export default function Home() {\r\n   return (\r\n-    <div style={{ padding: '2rem' }}>\r\n+    <div className=\"page-container\">\r\n       <h1>Welcome to UrbanFlow</h1>\r\n-      <p>This is the home page</p>\r\n+      <p>Your all-in-one urban mobility and dining solution</p>\r\n+      \r\n+      <div className=\"services-grid\">\r\n+        <a href=\"/transport\" className=\"service-card\">\r\n+          <h3>üöå Transport</h3>\r\n+          <p>Plan your multi-modal journeys</p>\r\n+        </a>\r\n+        <a href=\"/food\" className=\"service-card\">\r\n+          <h3>üçî Food</h3>\r\n+          <p>Discover local restaurants</p>\r\n+        </a>\r\n+      </div>\r\n     </div>\r\n-  )\r\n+  );\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752169745361,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,19 +1,105 @@\n+import { useState } from 'react';\r\n+import { useNavigate } from 'react-router-dom';\r\n+\r\n export default function Home() {\r\n+  const navigate = useNavigate();\r\n+  const [searchQuery, setSearchQuery] = useState('');\r\n+\r\n+  const services = [\r\n+    { \r\n+      name: 'Transport', \r\n+      path: '/transport', \r\n+      icon: 'üöå', \r\n+      desc: 'Plan your multi-modal journey across the city',\r\n+      color: '#3b82f6'\r\n+    },\r\n+    { \r\n+      name: 'Food Delivery', \r\n+      path: '/food', \r\n+      icon: 'üçî', \r\n+      desc: 'Discover local restaurants and cafes',\r\n+      color: '#ef4444'\r\n+    },\r\n+    { \r\n+      name: 'Groceries', \r\n+      path: '/food', \r\n+      icon: 'üõí', \r\n+      desc: 'Get groceries delivered in minutes',\r\n+      color: '#10b981'\r\n+    },\r\n+    { \r\n+      name: 'Services', \r\n+      path: '/food', \r\n+      icon: 'üõ†Ô∏è', \r\n+      desc: 'Find urban services near you',\r\n+      color: '#8b5cf6'\r\n+    }\r\n+  ];\r\n+\r\n+  const handleSearch = (e) => {\r\n+    e.preventDefault();\r\n+    if (searchQuery.trim()) {\r\n+      navigate(`/food?search=${encodeURIComponent(searchQuery)}`);\r\n+    }\r\n+  };\r\n+\r\n   return (\r\n-    <div className=\"page-container\">\r\n-      <h1>Welcome to UrbanFlow</h1>\r\n-      <p>Your all-in-one urban mobility and dining solution</p>\r\n-      \r\n-      <div className=\"services-grid\">\r\n-        <a href=\"/transport\" className=\"service-card\">\r\n-          <h3>üöå Transport</h3>\r\n-          <p>Plan your multi-modal journeys</p>\r\n-        </a>\r\n-        <a href=\"/food\" className=\"service-card\">\r\n-          <h3>üçî Food</h3>\r\n-          <p>Discover local restaurants</p>\r\n-        </a>\r\n-      </div>\r\n+    <div className=\"home-page\">\r\n+      {/* Hero Section */}\r\n+      <section className=\"hero\">\r\n+        <div className=\"hero-content\">\r\n+          <h1>UrbanFlow</h1>\r\n+          <p className=\"tagline\">Your seamless urban living companion</p>\r\n+          \r\n+          <form onSubmit={handleSearch} className=\"search-box\">\r\n+            <input\r\n+              type=\"text\"\r\n+              placeholder=\"Search for restaurants, services...\"\r\n+              value={searchQuery}\r\n+              onChange={(e) => setSearchQuery(e.target.value)}\r\n+            />\r\n+            <button type=\"submit\">\r\n+              <span>üîç</span>\r\n+            </button>\r\n+          </form>\r\n+        </div>\r\n+      </section>\r\n+\r\n+      {/* Services Grid */}\r\n+      <section className=\"services-section\">\r\n+        <h2>What do you need today?</h2>\r\n+        <div className=\"services-grid\">\r\n+          {services.map((service) => (\r\n+            <div \r\n+              key={service.name} \r\n+              className=\"service-card\"\r\n+              style={{ '--card-color': service.color }}\r\n+              onClick={() => navigate(service.path)}\r\n+            >\r\n+              <div className=\"service-icon\">{service.icon}</div>\r\n+              <h3>{service.name}</h3>\r\n+              <p>{service.desc}</p>\r\n+              <div className=\"card-hover-effect\"></div>\r\n+            </div>\r\n+          ))}\r\n+        </div>\r\n+      </section>\r\n+\r\n+      {/* Featured Section */}\r\n+      <section className=\"featured-section\">\r\n+        <h2>Quick Access</h2>\r\n+        <div className=\"quick-links\">\r\n+          <button onClick={() => navigate('/transport?from=home&to=downtown')}>\r\n+            üöï To Downtown\r\n+          </button>\r\n+          <button onClick={() => navigate('/food?category=fastfood')}>\r\n+            üçü Fast Food\r\n+          </button>\r\n+          <button onClick={() => navigate('/food?category=coffee')}>\r\n+            ‚òï Coffee Shops\r\n+          </button>\r\n+        </div>\r\n+      </section>\r\n     </div>\r\n   );\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752644885956,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,63 +43,205 @@\n     }\r\n   };\r\n \r\n   return (\r\n-    <div className=\"home-page\">\r\n+    <div className=\"home-page\" style={styles.page}>\r\n       {/* Hero Section */}\r\n-      <section className=\"hero\">\r\n-        <div className=\"hero-content\">\r\n-          <h1>UrbanFlow</h1>\r\n-          <p className=\"tagline\">Your seamless urban living companion</p>\r\n+      <section className=\"hero\" style={styles.hero}>\r\n+        <div className=\"hero-content\" style={styles.heroContent}>\r\n+          <h1 style={styles.title}>UrbanFlow</h1>\r\n+          <p className=\"tagline\" style={styles.tagline}>Your seamless urban living companion</p>\r\n           \r\n-          <form onSubmit={handleSearch} className=\"search-box\">\r\n+          <form onSubmit={handleSearch} className=\"search-box\" style={styles.searchBox}>\r\n             <input\r\n               type=\"text\"\r\n               placeholder=\"Search for restaurants, services...\"\r\n               value={searchQuery}\r\n               onChange={(e) => setSearchQuery(e.target.value)}\r\n+              style={styles.searchInput}\r\n             />\r\n-            <button type=\"submit\">\r\n+            <button type=\"submit\" style={styles.searchButton}>\r\n               <span>üîç</span>\r\n             </button>\r\n           </form>\r\n         </div>\r\n       </section>\r\n \r\n       {/* Services Grid */}\r\n-      <section className=\"services-section\">\r\n-        <h2>What do you need today?</h2>\r\n-        <div className=\"services-grid\">\r\n+      <section className=\"services-section\" style={styles.section}>\r\n+        <h2 style={styles.sectionTitle}>What do you need today?</h2>\r\n+        <div className=\"services-grid\" style={styles.servicesGrid}>\r\n           {services.map((service) => (\r\n             <div \r\n               key={service.name} \r\n               className=\"service-card\"\r\n-              style={{ '--card-color': service.color }}\r\n+              style={{ \r\n+                ...styles.serviceCard,\r\n+                backgroundColor: `${service.color}20`,\r\n+                borderColor: service.color,\r\n+                '--card-color': service.color\r\n+              }}\r\n               onClick={() => navigate(service.path)}\r\n             >\r\n-              <div className=\"service-icon\">{service.icon}</div>\r\n-              <h3>{service.name}</h3>\r\n-              <p>{service.desc}</p>\r\n+              <div className=\"service-icon\" style={styles.serviceIcon}>{service.icon}</div>\r\n+              <h3 style={styles.serviceTitle}>{service.name}</h3>\r\n+              <p style={styles.serviceDesc}>{service.desc}</p>\r\n               <div className=\"card-hover-effect\"></div>\r\n             </div>\r\n           ))}\r\n         </div>\r\n\\ No newline at end of file\n       </section>\r\n \r\n       {/* Featured Section */}\r\n-      <section className=\"featured-section\">\r\n-        <h2>Quick Access</h2>\r\n-        <div className=\"quick-links\">\r\n-          <button onClick={() => navigate('/transport?from=home&to=downtown')}>\r\n+      <section className=\"featured-section\" style={styles.section}>\r\n+        <h2 style={styles.sectionTitle}>Quick Access</h2>\r\n+        <div className=\"quick-links\" style={styles.quickLinks}>\r\n+          <button \r\n+            onClick={() => navigate('/transport?from=home&to=downtown')}\r\n+            style={styles.quickLinkButton}\r\n+          >\r\n             üöï To Downtown\r\n           </button>\r\n-          <button onClick={() => navigate('/food?category=fastfood')}>\r\n+          <button \r\n+            onClick={() => navigate('/food?category=fastfood')}\r\n+            style={styles.quickLinkButton}\r\n+          >\r\n             üçü Fast Food\r\n           </button>\r\n-          <button onClick={() => navigate('/food?category=coffee')}>\r\n+          <button \r\n+            onClick={() => navigate('/food?category=coffee')}\r\n+            style={styles.quickLinkButton}\r\n+          >\r\n             ‚òï Coffee Shops\r\n           </button>\r\n         </div>\r\n       </section>\r\n     </div>\r\n   );\r\n-}\n+}\r\n+\r\n+const styles = {\r\n+  page: {\r\n+    backgroundColor: '#f8fafc',\r\n+    minHeight: '100vh',\r\n+    paddingBottom: '3rem',\r\n+  },\r\n+  hero: {\r\n+    background: 'linear-gradient(135deg, #6b46c1 0%, #3b82f6 100%)',\r\n+    color: 'white',\r\n+    padding: '4rem 1rem',\r\n+    textAlign: 'center',\r\n+    borderRadius: '0 0 20px 20px',\r\n+    boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',\r\n+  },\r\n+  heroContent: {\r\n+    maxWidth: '800px',\r\n+    margin: '0 auto',\r\n+  },\r\n+  title: {\r\n+    fontSize: '3.5rem',\r\n+    fontWeight: '800',\r\n+    marginBottom: '0.5rem',\r\n+    textShadow: '2px 2px 4px rgba(0, 0, 0, 0.2)',\r\n+  },\r\n+  tagline: {\r\n+    fontSize: '1.25rem',\r\n+    marginBottom: '2rem',\r\n+    opacity: 0.9,\r\n+  },\r\n+  searchBox: {\r\n+    display: 'flex',\r\n+    maxWidth: '600px',\r\n+    margin: '0 auto',\r\n+    borderRadius: '50px',\r\n+    overflow: 'hidden',\r\n+    boxShadow: '0 4px 10px rgba(0, 0, 0, 0.2)',\r\n+  },\r\n+  searchInput: {\r\n+    flex: 1,\r\n+    padding: '1rem 1.5rem',\r\n+    border: 'none',\r\n+    fontSize: '1rem',\r\n+    outline: 'none',\r\n+  },\r\n+  searchButton: {\r\n+    backgroundColor: '#1e40af',\r\n+    color: 'white',\r\n+    border: 'none',\r\n+    padding: '0 1.5rem',\r\n+    cursor: 'pointer',\r\n+    fontSize: '1.25rem',\r\n+    transition: 'background-color 0.2s',\r\n+  },\r\n+  section: {\r\n+    padding: '2rem 1rem',\r\n+    maxWidth: '1200px',\r\n+    margin: '0 auto',\r\n+  },\r\n+  sectionTitle: {\r\n+    fontSize: '2rem',\r\n+    fontWeight: '700',\r\n+    marginBottom: '1.5rem',\r\n+    color: '#1e293b',\r\n+    textAlign: 'center',\r\n+  },\r\n+  servicesGrid: {\r\n+    display: 'grid',\r\n+    gridTemplateColumns: 'repeat(auto-fit, minmax(250px, 1fr))',\r\n+    gap: '1.5rem',\r\n+    marginTop: '1rem',\r\n+  },\r\n+  serviceCard: {\r\n+    padding: '2rem 1.5rem',\r\n+    borderRadius: '16px',\r\n+    border: '2px solid',\r\n+    textAlign: 'center',\r\n+    cursor: 'pointer',\r\n+    transition: 'transform 0.3s, box-shadow 0.3s',\r\n+    position: 'relative',\r\n+    overflow: 'hidden',\r\n+    backdropFilter: 'blur(10px)',\r\n+    ':hover': {\r\n+      transform: 'translateY(-5px)',\r\n+      boxShadow: '0 10px 20px rgba(0, 0, 0, 0.1)',\r\n+    },\r\n+  },\r\n+  serviceIcon: {\r\n+    fontSize: '3rem',\r\n+    marginBottom: '1rem',\r\n+  },\r\n+  serviceTitle: {\r\n+    fontSize: '1.5rem',\r\n+    fontWeight: '600',\r\n+    marginBottom: '0.5rem',\r\n+    color: '#1e293b',\r\n+  },\r\n+  serviceDesc: {\r\n+    color: '#64748b',\r\n+    fontSize: '1rem',\r\n+    lineHeight: '1.5',\r\n+  },\r\n+  quickLinks: {\r\n+    display: 'flex',\r\n+    justifyContent: 'center',\r\n+    gap: '1rem',\r\n+    flexWrap: 'wrap',\r\n+  },\r\n+  quickLinkButton: {\r\n+    padding: '0.75rem 1.5rem',\r\n+    borderRadius: '50px',\r\n+    border: 'none',\r\n+    backgroundColor: '#e2e8f0',\r\n+    color: '#1e293b',\r\n+    fontWeight: '600',\r\n+    cursor: 'pointer',\r\n+    transition: 'all 0.2s',\r\n+    display: 'flex',\r\n+    alignItems: 'center',\r\n+    gap: '0.5rem',\r\n+    fontSize: '1rem',\r\n+    ':hover': {\r\n+      backgroundColor: '#cbd5e1',\r\n+      transform: 'scale(1.05)',\r\n+    },\r\n+  },\r\n+};\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752645327181,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,8 +3,9 @@\n \r\n export default function Home() {\r\n   const navigate = useNavigate();\r\n   const [searchQuery, setSearchQuery] = useState('');\r\n+  const [isSearchFocused, setIsSearchFocused] = useState(false);\r\n \r\n   const services = [\r\n     { \r\n       name: 'Transport', \r\n@@ -44,76 +45,121 @@\n   };\r\n \r\n   return (\r\n     <div className=\"home-page\" style={styles.page}>\r\n-      {/* Hero Section */}\r\n+      {/* Enhanced Hero Banner */}\r\n       <section className=\"hero\" style={styles.hero}>\r\n         <div className=\"hero-content\" style={styles.heroContent}>\r\n-          <h1 style={styles.title}>UrbanFlow</h1>\r\n-          <p className=\"tagline\" style={styles.tagline}>Your seamless urban living companion</p>\r\n+          <div style={styles.heroText}>\r\n+            <h1 style={styles.title}>UrbanFlow</h1>\r\n+            <p className=\"tagline\" style={styles.tagline}>\r\n+              Your seamless urban living companion\r\n+              <span style={styles.taglineHighlight}> ¬∑ Discover ¬∑ Connect ¬∑ Enjoy</span>\r\n+            </p>\r\n+          </div>\r\n           \r\n-          <form onSubmit={handleSearch} className=\"search-box\" style={styles.searchBox}>\r\n+          {/* Improved Search Bar */}\r\n+          <form \r\n+            onSubmit={handleSearch} \r\n+            className=\"search-box\" \r\n+            style={{\r\n+              ...styles.searchBox,\r\n+              borderColor: isSearchFocused ? '#3b82f6' : '#e2e8f0',\r\n+              boxShadow: isSearchFocused ? '0 0 0 3px rgba(59, 130, 246, 0.2)' : '0 2px 10px rgba(0, 0, 0, 0.1)'\r\n+            }}\r\n+          >\r\n             <input\r\n               type=\"text\"\r\n-              placeholder=\"Search for restaurants, services...\"\r\n+              placeholder=\"Search for restaurants, services, groceries...\"\r\n               value={searchQuery}\r\n               onChange={(e) => setSearchQuery(e.target.value)}\r\n+              onFocus={() => setIsSearchFocused(true)}\r\n+              onBlur={() => setIsSearchFocused(false)}\r\n               style={styles.searchInput}\r\n             />\r\n-            <button type=\"submit\" style={styles.searchButton}>\r\n-              <span>üîç</span>\r\n+            <button \r\n+              type=\"submit\" \r\n+              style={{\r\n+                ...styles.searchButton,\r\n+                backgroundColor: searchQuery.trim() ? '#1e40af' : '#94a3b8'\r\n+              }}\r\n+              disabled={!searchQuery.trim()}\r\n+            >\r\n+              <span style={styles.searchIcon}>üîç</span>\r\n+              <span style={styles.searchText}>Search</span>\r\n             </button>\r\n           </form>\r\n+\r\n+          <div style={styles.heroFeatures}>\r\n+            <span style={styles.heroFeatureItem}>üöÄ Instant results</span>\r\n+            <span style={styles.heroFeatureItem}>üìç Location-aware</span>\r\n+            <span style={styles.heroFeatureItem}>‚ú® Premium partners</span>\r\n+          </div>\r\n         </div>\r\n+        <div style={styles.heroWave}></div>\r\n       </section>\r\n \r\n-      {/* Services Grid */}\r\n+      {/* Services Grid (Retained Layout) */}\r\n       <section className=\"services-section\" style={styles.section}>\r\n         <h2 style={styles.sectionTitle}>What do you need today?</h2>\r\n+        <p style={styles.sectionSubtitle}>Tap to explore urban services tailored for you</p>\r\n         <div className=\"services-grid\" style={styles.servicesGrid}>\r\n           {services.map((service) => (\r\n             <div \r\n               key={service.name} \r\n               className=\"service-card\"\r\n               style={{ \r\n                 ...styles.serviceCard,\r\n-                backgroundColor: `${service.color}20`,\r\n-                borderColor: service.color,\r\n+                backgroundColor: `${service.color}10`,\r\n+                borderLeft: `5px solid ${service.color}`,\r\n                 '--card-color': service.color\r\n               }}\r\n               onClick={() => navigate(service.path)}\r\n             >\r\n               <div className=\"service-icon\" style={styles.serviceIcon}>{service.icon}</div>\r\n               <h3 style={styles.serviceTitle}>{service.name}</h3>\r\n               <p style={styles.serviceDesc}>{service.desc}</p>\r\n-              <div className=\"card-hover-effect\"></div>\r\n+              <div className=\"card-hover-effect\" style={styles.cardHoverEffect}></div>\r\n             </div>\r\n           ))}\r\n         </div>\r\n       </section>\r\n \r\n-      {/* Featured Section */}\r\n+      {/* Featured Quick Access Section */}\r\n       <section className=\"featured-section\" style={styles.section}>\r\n-        <h2 style={styles.sectionTitle}>Quick Access</h2>\r\n+        <div style={styles.sectionHeader}>\r\n+          <h2 style={styles.sectionTitle}>Quick Access</h2>\r\n+          <p style={styles.sectionSubtitle}>Popular destinations and categories</p>\r\n+        </div>\r\n         <div className=\"quick-links\" style={styles.quickLinks}>\r\n           <button \r\n             onClick={() => navigate('/transport?from=home&to=downtown')}\r\n             style={styles.quickLinkButton}\r\n           >\r\n-            üöï To Downtown\r\n+            <span style={styles.quickLinkIcon}>üöï</span>\r\n+            <span>To Downtown</span>\r\n           </button>\r\n           <button \r\n             onClick={() => navigate('/food?category=fastfood')}\r\n             style={styles.quickLinkButton}\r\n           >\r\n-            üçü Fast Food\r\n+            <span style={styles.quickLinkIcon}>üçü</span>\r\n+            <span>Fast Food</span>\r\n           </button>\r\n           <button \r\n             onClick={() => navigate('/food?category=coffee')}\r\n             style={styles.quickLinkButton}\r\n           >\r\n-            ‚òï Coffee Shops\r\n+            <span style={styles.quickLinkIcon}>‚òï</span>\r\n+            <span>Coffee Shops</span>\r\n           </button>\r\n+          <button \r\n+            onClick={() => navigate('/food?category=pharmacy')}\r\n+            style={styles.quickLinkButton}\r\n+          >\r\n+            <span style={styles.quickLinkIcon}>üíä</span>\r\n+            <span>24hr Pharmacy</span>\r\n+          </button>\r\n         </div>\r\n       </section>\r\n     </div>\r\n   );\r\n@@ -123,125 +169,213 @@\n   page: {\r\n     backgroundColor: '#f8fafc',\r\n     minHeight: '100vh',\r\n     paddingBottom: '3rem',\r\n+    fontFamily: \"'Segoe UI', Roboto, 'Helvetica Neue', sans-serif\",\r\n   },\r\n   hero: {\r\n-    background: 'linear-gradient(135deg, #6b46c1 0%, #3b82f6 100%)',\r\n+    background: 'linear-gradient(135deg, #4f46e5 0%, #2563eb 100%)',\r\n     color: 'white',\r\n-    padding: '4rem 1rem',\r\n+    padding: '5rem 1rem 6rem',\r\n     textAlign: 'center',\r\n-    borderRadius: '0 0 20px 20px',\r\n-    boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',\r\n+    position: 'relative',\r\n+    overflow: 'hidden',\r\n   },\r\n   heroContent: {\r\n-    maxWidth: '800px',\r\n+    maxWidth: '900px',\r\n     margin: '0 auto',\r\n+    position: 'relative',\r\n+    zIndex: 2,\r\n   },\r\n+  heroText: {\r\n+    marginBottom: '2.5rem',\r\n+  },\r\n   title: {\r\n-    fontSize: '3.5rem',\r\n+    fontSize: '4rem',\r\n     fontWeight: '800',\r\n     marginBottom: '0.5rem',\r\n     textShadow: '2px 2px 4px rgba(0, 0, 0, 0.2)',\r\n+    background: 'linear-gradient(to right, #fff, #e0e7ff)',\r\n+    WebkitBackgroundClip: 'text',\r\n+    WebkitTextFillColor: 'transparent',\r\n+    letterSpacing: '-0.05em',\r\n   },\r\n   tagline: {\r\n-    fontSize: '1.25rem',\r\n-    marginBottom: '2rem',\r\n+    fontSize: '1.35rem',\r\n+    marginBottom: '0',\r\n     opacity: 0.9,\r\n+    fontWeight: '400',\r\n   },\r\n+  taglineHighlight: {\r\n+    fontWeight: '600',\r\n+    marginLeft: '0.5rem',\r\n+    color: '#e0e7ff',\r\n+  },\r\n   searchBox: {\r\n     display: 'flex',\r\n-    maxWidth: '600px',\r\n+    maxWidth: '650px',\r\n     margin: '0 auto',\r\n-    borderRadius: '50px',\r\n+    borderRadius: '12px',\r\n     overflow: 'hidden',\r\n-    boxShadow: '0 4px 10px rgba(0, 0, 0, 0.2)',\r\n+    transition: 'all 0.3s ease',\r\n+    backgroundColor: 'white',\r\n+    border: '2px solid',\r\n   },\r\n   searchInput: {\r\n     flex: 1,\r\n-    padding: '1rem 1.5rem',\r\n+    padding: '1.1rem 1.75rem',\r\n     border: 'none',\r\n-    fontSize: '1rem',\r\n+    fontSize: '1.05rem',\r\n     outline: 'none',\r\n+    color: '#1e293b',\r\n+    '::placeholder': {\r\n+      color: '#94a3b8',\r\n+    },\r\n   },\r\n   searchButton: {\r\n-    backgroundColor: '#1e40af',\r\n+    display: 'flex',\r\n+    alignItems: 'center',\r\n+    gap: '0.5rem',\r\n+    padding: '0 2rem',\r\n+    border: 'none',\r\n     color: 'white',\r\n-    border: 'none',\r\n-    padding: '0 1.5rem',\r\n+    fontWeight: '600',\r\n     cursor: 'pointer',\r\n-    fontSize: '1.25rem',\r\n-    transition: 'background-color 0.2s',\r\n+    fontSize: '1rem',\r\n+    transition: 'all 0.2s',\r\n+    ':hover': {\r\n+      filter: 'brightness(1.1)',\r\n+    },\r\n+    ':disabled': {\r\n+      cursor: 'not-allowed',\r\n+      opacity: 0.8,\r\n+    },\r\n   },\r\n+  searchIcon: {\r\n+    fontSize: '1.2rem',\r\n+  },\r\n+  searchText: {\r\n+    display: ['none', 'none', 'block'], // Hide on mobile, show on desktop\r\n+  },\r\n+  heroFeatures: {\r\n+    display: 'flex',\r\n+    justifyContent: 'center',\r\n+    gap: '1.5rem',\r\n+    marginTop: '2rem',\r\n+    flexWrap: 'wrap',\r\n+  },\r\n+  heroFeatureItem: {\r\n+    display: 'flex',\r\n+    alignItems: 'center',\r\n+    gap: '0.5rem',\r\n+    fontSize: '0.95rem',\r\n+    opacity: 0.9,\r\n+  },\r\n+  heroWave: {\r\n+    position: 'absolute',\r\n+    bottom: 0,\r\n+    left: 0,\r\n+    right: 0,\r\n+    height: '100px',\r\n+    background: 'url(\"data:image/svg+xml,%3Csvg xmlns=\\'http://www.w3.org/2000/svg\\' viewBox=\\'0 0 1200 120\\' preserveAspectRatio=\\'none\\'%3E%3Cpath d=\\'M0,0V46.29c47.79,22.2,103.59,32.17,158,28,70.36-5.37,136.33-33.31,206.8-37.5C438.64,32.43,512.34,53.67,583,72.05c69.27,18,138.3,24.88,209.4,13.08,36.15-6,69.85-17.84,104.45-29.34C989.49,25,1113-14.29,1200,52.47V0Z\\' opacity=\\'.25\\' fill=\\'%23f8fafc\\'%3E%3C/path%3E%3Cpath d=\\'M0,0V15.81C13,36.92,27.64,56.86,47.69,72.05,99.41,111.27,165,111,224.58,91.58c31.15-10.15,60.09-26.07,89.67-39.8,40.92-19,84.73-46,130.83-49.67,36.26-2.85,70.9,9.42,98.6,31.56,31.77,25.39,62.32,62,103.63,73,40.44,10.79,81.35-6.69,119.13-24.28s75.16-39,116.92-43.05c59.73-5.85,113.28,22.88,168.9,38.84,30.2,8.66,59,6.17,87.09-7.5,22.43-10.89,48-26.93,60.65-49.24V0Z\\' opacity=\\'.5\\' fill=\\'%23f8fafc\\'%3E%3C/path%3E%3Cpath d=\\'M0,0V5.63C149.93,59,314.09,71.32,475.83,42.57c43-7.64,84.23-20.12,127.61-26.46,59-8.63,112.48,12.24,165.56,35.4C827.93,77.22,886,95.24,951.2,90c86.53-7,172.46-45.71,248.8-84.81V0Z\\' fill=\\'%23f8fafc\\'%3E%3C/path%3E%3C/svg%3E\")',\r\n+    backgroundSize: 'cover',\r\n+    zIndex: 1,\r\n+  },\r\n   section: {\r\n-    padding: '2rem 1rem',\r\n+    padding: '3rem 1rem',\r\n     maxWidth: '1200px',\r\n     margin: '0 auto',\r\n   },\r\n+  sectionHeader: {\r\n+    textAlign: 'center',\r\n+    marginBottom: '2rem',\r\n+  },\r\n   sectionTitle: {\r\n-    fontSize: '2rem',\r\n+    fontSize: '2.25rem',\r\n     fontWeight: '700',\r\n-    marginBottom: '1.5rem',\r\n+    marginBottom: '0.5rem',\r\n     color: '#1e293b',\r\n-    textAlign: 'center',\r\n   },\r\n+  sectionSubtitle: {\r\n+    fontSize: '1.1rem',\r\n+    color: '#64748b',\r\n+    marginBottom: '0',\r\n+  },\r\n   servicesGrid: {\r\n     display: 'grid',\r\n-    gridTemplateColumns: 'repeat(auto-fit, minmax(250px, 1fr))',\r\n-    gap: '1.5rem',\r\n-    marginTop: '1rem',\r\n+    gridTemplateColumns: 'repeat(auto-fit, minmax(260px, 1fr))',\r\n+    gap: '1.75rem',\r\n+    marginTop: '2rem',\r\n   },\r\n   serviceCard: {\r\n     padding: '2rem 1.5rem',\r\n-    borderRadius: '16px',\r\n-    border: '2px solid',\r\n+    borderRadius: '12px',\r\n     textAlign: 'center',\r\n     cursor: 'pointer',\r\n-    transition: 'transform 0.3s, box-shadow 0.3s',\r\n+    transition: 'all 0.3s ease',\r\n     position: 'relative',\r\n     overflow: 'hidden',\r\n-    backdropFilter: 'blur(10px)',\r\n+    backgroundColor: 'white',\r\n+    boxShadow: '0 4px 6px rgba(0, 0, 0, 0.05)',\r\n     ':hover': {\r\n       transform: 'translateY(-5px)',\r\n-      boxShadow: '0 10px 20px rgba(0, 0, 0, 0.1)',\r\n+      boxShadow: '0 10px 25px rgba(0, 0, 0, 0.1)',\r\n     },\r\n   },\r\n   serviceIcon: {\r\n-    fontSize: '3rem',\r\n-    marginBottom: '1rem',\r\n+    fontSize: '3.5rem',\r\n+    marginBottom: '1.5rem',\r\n+    transition: 'transform 0.3s ease',\r\n+    ':hover': {\r\n+      transform: 'scale(1.1)',\r\n+    },\r\n   },\r\n   serviceTitle: {\r\n     fontSize: '1.5rem',\r\n     fontWeight: '600',\r\n-    marginBottom: '0.5rem',\r\n+    marginBottom: '0.75rem',\r\n     color: '#1e293b',\r\n   },\r\n   serviceDesc: {\r\n     color: '#64748b',\r\n     fontSize: '1rem',\r\n-    lineHeight: '1.5',\r\n+    lineHeight: '1.6',\r\n+    marginBottom: '0',\r\n   },\r\n+  cardHoverEffect: {\r\n+    position: 'absolute',\r\n+    top: 0,\r\n+    left: 0,\r\n+    right: 0,\r\n+    height: '4px',\r\n+    backgroundColor: 'var(--card-color)',\r\n+  },\r\n   quickLinks: {\r\n     display: 'flex',\r\n     justifyContent: 'center',\r\n     gap: '1rem',\r\n     flexWrap: 'wrap',\r\n   },\r\n   quickLinkButton: {\r\n-    padding: '0.75rem 1.5rem',\r\n+    padding: '0.9rem 1.75rem',\r\n     borderRadius: '50px',\r\n     border: 'none',\r\n-    backgroundColor: '#e2e8f0',\r\n+    backgroundColor: 'white',\r\n     color: '#1e293b',\r\n     fontWeight: '600',\r\n     cursor: 'pointer',\r\n-    transition: 'all 0.2s',\r\n+    transition: 'all 0.2s ease',\r\n     display: 'flex',\r\n     alignItems: 'center',\r\n-    gap: '0.5rem',\r\n+    gap: '0.75rem',\r\n     fontSize: '1rem',\r\n+    boxShadow: '0 2px 5px rgba(0, 0, 0, 0.08)',\r\n     ':hover': {\r\n-      backgroundColor: '#cbd5e1',\r\n-      transform: 'scale(1.05)',\r\n+      backgroundColor: '#f1f5f9',\r\n+      transform: 'translateY(-2px)',\r\n+      boxShadow: '0 5px 15px rgba(0, 0, 0, 0.1)',\r\n     },\r\n   },\r\n+  quickLinkIcon: {\r\n+    fontSize: '1.2rem',\r\n+  },\r\n };\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752645625088,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,385 @@\n+import { useState } from 'react';\r\n+import { useNavigate } from 'react-router-dom';\r\n+\r\n+export default function Home() {\r\n+  const navigate = useNavigate();\r\n+  const [searchQuery, setSearchQuery] = useState('');\r\n+  const [isSearchFocused, setIsSearchFocused] = useState(false);\r\n+\r\n+  const services = [\r\n+    { \r\n+      name: 'Transport', \r\n+      path: '/transport', \r\n+      icon: 'üöå', \r\n+      desc: 'Plan your multi-modal journey across the city',\r\n+      color: '#3b82f6'\r\n+    },\r\n+    { \r\n+      name: 'Food Delivery', \r\n+      path: '/food', \r\n+      icon: 'üçî', \r\n+      desc: 'Discover local restaurants and cafes',\r\n+      color: '#ef4444'\r\n+    },\r\n+    { \r\n+      name: 'Groceries', \r\n+      path: '/food', \r\n+      icon: 'üõí', \r\n+      desc: 'Get groceries delivered in minutes',\r\n+      color: '#10b981'\r\n+    },\r\n+    { \r\n+      name: 'Services', \r\n+      path: '/food', \r\n+      icon: 'üõ†Ô∏è', \r\n+      desc: 'Find urban services near you',\r\n+      color: '#8b5cf6'\r\n+    }\r\n+  ];\r\n+\r\n+  const handleSearch = (e) => {\r\n+    e.preventDefault();\r\n+    if (searchQuery.trim()) {\r\n+      navigate(`/food?search=${encodeURIComponent(searchQuery)}`);\r\n+    }\r\n+  };\r\n+\r\n+  return (\r\n+    <div className=\"home-page\" style={styles.page}>\r\n+      {/* Modern Hero Banner */}\r\n+      <section className=\"hero\" style={styles.hero}>\r\n+        <div className=\"hero-content\" style={styles.heroContent}>\r\n+          <div style={styles.heroText}>\r\n+            <h1 style={styles.title}>Urban<span style={styles.titleAccent}>Flow</span></h1>\r\n+            <p className=\"tagline\" style={styles.tagline}>\r\n+              Your gateway to seamless city living\r\n+            </p>\r\n+          </div>\r\n+          \r\n+          {/* Premium Search Experience */}\r\n+          <form \r\n+            onSubmit={handleSearch} \r\n+            className=\"search-box\" \r\n+            style={{\r\n+              ...styles.searchBox,\r\n+              borderColor: isSearchFocused ? '#3b82f6' : 'rgba(255,255,255,0.2)',\r\n+              boxShadow: isSearchFocused ? '0 0 0 3px rgba(59, 130, 246, 0.3)' : '0 15px 30px rgba(0, 0, 0, 0.1)'\r\n+            }}\r\n+          >\r\n+            <div style={styles.searchInputContainer}>\r\n+              <span style={styles.searchPrefixIcon}>üîç</span>\r\n+              <input\r\n+                type=\"text\"\r\n+                placeholder=\"Try 'sushi restaurants' or '24hr pharmacy'...\"\r\n+                value={searchQuery}\r\n+                onChange={(e) => setSearchQuery(e.target.value)}\r\n+                onFocus={() => setIsSearchFocused(true)}\r\n+                onBlur={() => setIsSearchFocused(false)}\r\n+                style={styles.searchInput}\r\n+              />\r\n+            </div>\r\n+            <button \r\n+              type=\"submit\" \r\n+              style={{\r\n+                ...styles.searchButton,\r\n+                backgroundColor: searchQuery.trim() ? '#2563eb' : '#64748b'\r\n+              }}\r\n+              disabled={!searchQuery.trim()}\r\n+            >\r\n+              Search\r\n+            </button>\r\n+          </form>\r\n+\r\n+          {/* Value Propositions */}\r\n+          <div style={styles.valueProps}>\r\n+            <div style={styles.valuePropItem}>\r\n+              <span style={styles.valuePropIcon}>‚ö°</span>\r\n+              <span>Instant results</span>\r\n+            </div>\r\n+            <div style={styles.valuePropItem}>\r\n+              <span style={styles.valuePropIcon}>üéØ</span>\r\n+              <span>Personalized</span>\r\n+            </div>\r\n+            <div style={styles.valuePropItem}>\r\n+              <span style={styles.valuePropIcon}>üîí</span>\r\n+              <span>Verified partners</span>\r\n+            </div>\r\n+          </div>\r\n+        </div>\r\n+      </section>\r\n+\r\n+      {/* Services Grid */}\r\n+      <section className=\"services-section\" style={styles.section}>\r\n+        <div style={styles.sectionHeader}>\r\n+          <h2 style={styles.sectionTitle}>City Services at Your Fingertips</h2>\r\n+          <p style={styles.sectionSubtitle}>Everything you need, just a tap away</p>\r\n+        </div>\r\n+        <div className=\"services-grid\" style={styles.servicesGrid}>\r\n+          {services.map((service) => (\r\n+            <div \r\n+              key={service.name} \r\n+              className=\"service-card\"\r\n+              style={{ \r\n+                ...styles.serviceCard,\r\n+                '--card-color': service.color\r\n+              }}\r\n+              onClick={() => navigate(service.path)}\r\n+            >\r\n+              <div className=\"service-icon\" style={styles.serviceIcon}>{service.icon}</div>\r\n+              <h3 style={styles.serviceTitle}>{service.name}</h3>\r\n+              <p style={styles.serviceDesc}>{service.desc}</p>\r\n+              <div style={styles.serviceHoverIndicator}></div>\r\n+            </div>\r\n+          ))}\r\n+        </div>\r\n+      </section>\r\n+\r\n+      {/* Quick Access Section */}\r\n+      <section className=\"featured-section\" style={styles.section}>\r\n+        <div style={styles.sectionHeader}>\r\n+          <h2 style={styles.sectionTitle}>Quick Access</h2>\r\n+          <p style={styles.sectionSubtitle}>Popular choices in your area</p>\r\n+        </div>\r\n+        <div className=\"quick-links\" style={styles.quickLinks}>\r\n+          {[\r\n+            { icon: 'üöï', label: 'Taxi to Airport', path: '/transport?to=airport' },\r\n+            { icon: 'üçï', label: 'Pizza Delivery', path: '/food?category=pizza' },\r\n+            { icon: '‚òï', label: 'Coffee Nearby', path: '/food?category=coffee' },\r\n+            { icon: 'üíä', label: 'Late Night Pharmacy', path: '/services?category=pharmacy' },\r\n+            { icon: 'üõí', label: 'Grocery Deals', path: '/groceries?deals=true' }\r\n+          ].map((item) => (\r\n+            <button \r\n+              key={item.label}\r\n+              onClick={() => navigate(item.path)}\r\n+              style={styles.quickLinkButton}\r\n+            >\r\n+              <span style={styles.quickLinkIcon}>{item.icon}</span>\r\n+              {item.label}\r\n+            </button>\r\n+          ))}\r\n+        </div>\r\n+      </section>\r\n+    </div>\r\n+  );\r\n+}\r\n+\r\n+const styles = {\r\n+  page: {\r\n+    backgroundColor: '#f8fafc',\r\n+    minHeight: '100vh',\r\n+    fontFamily: \"'Inter', -apple-system, BlinkMacSystemFont, sans-serif\",\r\n+  },\r\n+  hero: {\r\n+    background: 'linear-gradient(135deg, #1e293b 0%, #0f172a 100%)',\r\n+    color: 'white',\r\n+    padding: '6rem 1rem 8rem',\r\n+    textAlign: 'center',\r\n+    position: 'relative',\r\n+    overflow: 'hidden',\r\n+    '::before': {\r\n+      content: '\"\"',\r\n+      position: 'absolute',\r\n+      inset: 0,\r\n+      background: 'radial-gradient(circle at 20% 50%, rgba(56, 182, 255, 0.15) 0%, transparent 40%)',\r\n+    },\r\n+  },\r\n+  heroContent: {\r\n+    maxWidth: '800px',\r\n+    margin: '0 auto',\r\n+    position: 'relative',\r\n+    zIndex: 2,\r\n+  },\r\n+  heroText: {\r\n+    marginBottom: '3rem',\r\n+  },\r\n+  title: {\r\n+    fontSize: '3.5rem',\r\n+    fontWeight: '800',\r\n+    margin: '0 0 0.5rem',\r\n+    letterSpacing: '-0.025em',\r\n+    color: 'white',\r\n+  },\r\n+  titleAccent: {\r\n+    background: 'linear-gradient(90deg, #38bdf8, #818cf8)',\r\n+    WebkitBackgroundClip: 'text',\r\n+    WebkitTextFillColor: 'transparent',\r\n+  },\r\n+  tagline: {\r\n+    fontSize: '1.35rem',\r\n+    margin: '0',\r\n+    opacity: 0.9,\r\n+    fontWeight: '400',\r\n+    color: '#e2e8f0',\r\n+  },\r\n+  searchBox: {\r\n+    display: 'flex',\r\n+    maxWidth: '700px',\r\n+    margin: '0 auto',\r\n+    borderRadius: '12px',\r\n+    overflow: 'hidden',\r\n+    transition: 'all 0.3s cubic-bezier(0.4, 0, 0.2, 1)',\r\n+    backgroundColor: 'rgba(255, 255, 255, 0.1)',\r\n+    backdropFilter: 'blur(8px)',\r\n+    border: '1px solid',\r\n+    marginBottom: '3rem',\r\n+  },\r\n+  searchInputContainer: {\r\n+    flex: 1,\r\n+    display: 'flex',\r\n+    alignItems: 'center',\r\n+    padding: '0 1.25rem',\r\n+  },\r\n+  searchPrefixIcon: {\r\n+    marginRight: '0.75rem',\r\n+    opacity: 0.7,\r\n+    fontSize: '1.1rem',\r\n+  },\r\n+  searchInput: {\r\n+    flex: 1,\r\n+    padding: '1.25rem 0',\r\n+    border: 'none',\r\n+    fontSize: '1.05rem',\r\n+    outline: 'none',\r\n+    color: 'white',\r\n+    background: 'transparent',\r\n+    '::placeholder': {\r\n+      color: 'rgba(255, 255, 255, 0.6)',\r\n+    },\r\n+  },\r\n+  searchButton: {\r\n+    padding: '0 2rem',\r\n+    border: 'none',\r\n+    color: 'white',\r\n+    fontWeight: '600',\r\n+    cursor: 'pointer',\r\n+    fontSize: '1rem',\r\n+    transition: 'all 0.2s ease',\r\n+    ':hover': {\r\n+      filter: 'brightness(1.1)',\r\n+    },\r\n+    ':disabled': {\r\n+      cursor: 'not-allowed',\r\n+      opacity: 0.7,\r\n+    },\r\n+  },\r\n+  valueProps: {\r\n+    display: 'flex',\r\n+    justifyContent: 'center',\r\n+    gap: '2rem',\r\n+    flexWrap: 'wrap',\r\n+  },\r\n+  valuePropItem: {\r\n+    display: 'flex',\r\n+    alignItems: 'center',\r\n+    gap: '0.5rem',\r\n+    fontSize: '0.95rem',\r\n+    color: '#e2e8f0',\r\n+    opacity: 0.9,\r\n+  },\r\n+  valuePropIcon: {\r\n+    fontSize: '1.1rem',\r\n+  },\r\n+  section: {\r\n+    padding: '4rem 1rem',\r\n+    maxWidth: '1200px',\r\n+    margin: '0 auto',\r\n+  },\r\n+  sectionHeader: {\r\n+    textAlign: 'center',\r\n+    marginBottom: '3rem',\r\n+  },\r\n+  sectionTitle: {\r\n+    fontSize: '2.25rem',\r\n+    fontWeight: '700',\r\n+    margin: '0 0 0.5rem',\r\n+    color: '#1e293b',\r\n+    lineHeight: '1.2',\r\n+  },\r\n+  sectionSubtitle: {\r\n+    fontSize: '1.1rem',\r\n+    color: '#64748b',\r\n+    margin: '0',\r\n+    fontWeight: '400',\r\n+  },\r\n+  servicesGrid: {\r\n+    display: 'grid',\r\n+    gridTemplateColumns: 'repeat(auto-fit, minmax(280px, 1fr))',\r\n+    gap: '2rem',\r\n+  },\r\n+  serviceCard: {\r\n+    padding: '2.5rem 2rem',\r\n+    borderRadius: '16px',\r\n+    textAlign: 'center',\r\n+    cursor: 'pointer',\r\n+    transition: 'all 0.3s ease',\r\n+    position: 'relative',\r\n+    overflow: 'hidden',\r\n+    backgroundColor: 'white',\r\n+    boxShadow: '0 4px 20px rgba(0, 0, 0, 0.05)',\r\n+    border: '1px solid rgba(0, 0, 0, 0.03)',\r\n+    ':hover': {\r\n+      transform: 'translateY(-8px)',\r\n+      boxShadow: '0 15px 30px rgba(0, 0, 0, 0.1)',\r\n+    },\r\n+  },\r\n+  serviceIcon: {\r\n+    fontSize: '3.5rem',\r\n+    marginBottom: '1.5rem',\r\n+    transition: 'transform 0.3s ease',\r\n+  },\r\n+  serviceTitle: {\r\n+    fontSize: '1.5rem',\r\n+    fontWeight: '600',\r\n+    margin: '0 0 0.75rem',\r\n+    color: '#1e293b',\r\n+  },\r\n+  serviceDesc: {\r\n+    color: '#64748b',\r\n+    fontSize: '1rem',\r\n+    lineHeight: '1.6',\r\n+    margin: '0',\r\n+  },\r\n+  serviceHoverIndicator: {\r\n+    position: 'absolute',\r\n+    bottom: 0,\r\n+    left: 0,\r\n+    right: 0,\r\n+    height: '4px',\r\n+    backgroundColor: 'var(--card-color)',\r\n+    transform: 'scaleX(0)',\r\n+    transformOrigin: 'left',\r\n+    transition: 'transform 0.3s ease',\r\n+    ':hover': {\r\n+      transform: 'scaleX(1)',\r\n+    },\r\n+  },\r\n+  quickLinks: {\r\n+    display: 'flex',\r\n+    justifyContent: 'center',\r\n+    gap: '1rem',\r\n+    flexWrap: 'wrap',\r\n+  },\r\n+  quickLinkButton: {\r\n+    padding: '1rem 1.75rem',\r\n+    borderRadius: '50px',\r\n+    border: 'none',\r\n+    backgroundColor: 'white',\r\n+    color: '#1e293b',\r\n+    fontWeight: '500',\r\n+    cursor: 'pointer',\r\n+    transition: 'all 0.2s ease',\r\n+    display: 'flex',\r\n+    alignItems: 'center',\r\n+    gap: '0.75rem',\r\n+    fontSize: '0.95rem',\r\n+    boxShadow: '0 2px 8px rgba(0, 0, 0, 0.05)',\r\n+    ':hover': {\r\n+      backgroundColor: '#f1f5f9',\r\n+      transform: 'translateY(-2px)',\r\n+      boxShadow: '0 5px 15px rgba(0, 0, 0, 0.1)',\r\n+    },\r\n+  },\r\n+  quickLinkIcon: {\r\n+    fontSize: '1.2rem',\r\n+  },\r\n+};\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752646183743,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,397 +1,26 @@\n-import { useState } from 'react';\r\n+import { useState, useEffect } from 'react';\r\n import { useNavigate } from 'react-router-dom';\r\n \r\n export default function Home() {\r\n   const navigate = useNavigate();\r\n   const [searchQuery, setSearchQuery] = useState('');\r\n+  const [darkMode, setDarkMode] = useState(false);\r\n   const [isSearchFocused, setIsSearchFocused] = useState(false);\r\n \r\n-  const services = [\r\n-    { \r\n-      name: 'Transport', \r\n-      path: '/transport', \r\n-      icon: 'üöå', \r\n-      desc: 'Plan your multi-modal journey across the city',\r\n-      color: '#3b82f6'\r\n-    },\r\n-    { \r\n-      name: 'Food Delivery', \r\n-      path: '/food', \r\n-      icon: 'üçî', \r\n-      desc: 'Discover local restaurants and cafes',\r\n-      color: '#ef4444'\r\n-    },\r\n-    { \r\n-      name: 'Groceries', \r\n-      path: '/food', \r\n-      icon: 'üõí', \r\n-      desc: 'Get groceries delivered in minutes',\r\n-      color: '#10b981'\r\n-    },\r\n-    { \r\n-      name: 'Services', \r\n-      path: '/food', \r\n-      icon: 'üõ†Ô∏è', \r\n-      desc: 'Find urban services near you',\r\n-      color: '#8b5cf6'\r\n-    }\r\n-  ];\r\n-\r\n-  const handleSearch = (e) => {\r\n-    e.preventDefault();\r\n-    if (searchQuery.trim()) {\r\n-      navigate(`/food?search=${encodeURIComponent(searchQuery)}`);\r\n-    }\r\n+  // Toggle dark mode and persist in localStorage\r\n+  const toggleDarkMode = () => {\r\n+    const newMode = !darkMode;\r\n+    setDarkMode(newMode);\r\n+    localStorage.setItem('darkMode', JSON.stringify(newMode));\r\n   };\r\n \r\n-  return (\r\n-    <div className=\"home-page\" style={styles.page}>\r\n-      {/* Modern Hero Banner */}\r\n-      <section className=\"hero\" style={styles.hero}>\r\n-        <div className=\"hero-content\" style={styles.heroContent}>\r\n-          <div style={styles.heroText}>\r\n-            <h1 style={styles.title}>Urban<span style={styles.titleAccent}>Flow</span></h1>\r\n-            <p className=\"tagline\" style={styles.tagline}>\r\n-              Your gateway to seamless city living\r\n-            </p>\r\n-          </div>\r\n-          \r\n-          {/* Premium Search Experience */}\r\n-          <form \r\n-            onSubmit={handleSearch} \r\n-            className=\"search-box\" \r\n-            style={{\r\n-              ...styles.searchBox,\r\n-              borderColor: isSearchFocused ? '#3b82f6' : 'rgba(255,255,255,0.2)',\r\n-              boxShadow: isSearchFocused ? '0 0 0 3px rgba(59, 130, 246, 0.3)' : '0 15px 30px rgba(0, 0, 0, 0.1)'\r\n-            }}\r\n-          >\r\n-            <div style={styles.searchInputContainer}>\r\n-              <span style={styles.searchPrefixIcon}>üîç</span>\r\n-              <input\r\n-                type=\"text\"\r\n-                placeholder=\"Try 'sushi restaurants' or '24hr pharmacy'...\"\r\n-                value={searchQuery}\r\n-                onChange={(e) => setSearchQuery(e.target.value)}\r\n-                onFocus={() => setIsSearchFocused(true)}\r\n-                onBlur={() => setIsSearchFocused(false)}\r\n-                style={styles.searchInput}\r\n-              />\r\n-            </div>\r\n-            <button \r\n-              type=\"submit\" \r\n-              style={{\r\n-                ...styles.searchButton,\r\n-                backgroundColor: searchQuery.trim() ? '#2563eb' : '#64748b'\r\n-              }}\r\n-              disabled={!searchQuery.trim()}\r\n-            >\r\n-              Search\r\n-            </button>\r\n-          </form>\r\n+  // Check for saved preference on load\r\n+  useEffect(() => {\r\n+    const savedMode = JSON.parse(localStorage.getItem('darkMode'));\r\n+    if (savedMode !== null) setDarkMode(savedMode);\r\n+  }, []);\r\n \r\n-          {/* Value Propositions */}\r\n-          <div style={styles.valueProps}>\r\n-            <div style={styles.valuePropItem}>\r\n-              <span style={styles.valuePropIcon}>‚ö°</span>\r\n-              <span>Instant results</span>\r\n-            </div>\r\n-            <div style={styles.valuePropItem}>\r\n-              <span style={styles.valuePropIcon}>üéØ</span>\r\n-              <span>Personalized</span>\r\n-            </div>\r\n-            <div style={styles.valuePropItem}>\r\n-              <span style={styles.valuePropIcon}>üîí</span>\r\n-              <span>Verified partners</span>\r\n-            </div>\r\n-          </div>\r\n-        </div>\r\n-      </section>\r\n-\r\n-      {/* Services Grid */}\r\n-      <section className=\"services-section\" style={styles.section}>\r\n-        <div style={styles.sectionHeader}>\r\n-          <h2 style={styles.sectionTitle}>City Services at Your Fingertips</h2>\r\n-          <p style={styles.sectionSubtitle}>Everything you need, just a tap away</p>\r\n-        </div>\r\n-        <div className=\"services-grid\" style={styles.servicesGrid}>\r\n-          {services.map((service) => (\r\n-            <div \r\n-              key={service.name} \r\n-              className=\"service-card\"\r\n-              style={{ \r\n-                ...styles.serviceCard,\r\n-                '--card-color': service.color\r\n-              }}\r\n-              onClick={() => navigate(service.path)}\r\n-            >\r\n-              <div className=\"service-icon\" style={styles.serviceIcon}>{service.icon}</div>\r\n-              <h3 style={styles.serviceTitle}>{service.name}</h3>\r\n-              <p style={styles.serviceDesc}>{service.desc}</p>\r\n-              <div style={styles.serviceHoverIndicator}></div>\r\n-            </div>\r\n-          ))}\r\n-        </div>\r\n-      </section>\r\n-\r\n-      {/* Quick Access Section */}\r\n-      <section className=\"featured-section\" style={styles.section}>\r\n-        <div style={styles.sectionHeader}>\r\n-          <h2 style={styles.sectionTitle}>Quick Access</h2>\r\n-          <p style={styles.sectionSubtitle}>Popular choices in your area</p>\r\n-        </div>\r\n-        <div className=\"quick-links\" style={styles.quickLinks}>\r\n-          {[\r\n-            { icon: 'üöï', label: 'Taxi to Airport', path: '/transport?to=airport' },\r\n-            { icon: 'üçï', label: 'Pizza Delivery', path: '/food?category=pizza' },\r\n-            { icon: '‚òï', label: 'Coffee Nearby', path: '/food?category=coffee' },\r\n-            { icon: 'üíä', label: 'Late Night Pharmacy', path: '/services?category=pharmacy' },\r\n-            { icon: 'üõí', label: 'Grocery Deals', path: '/groceries?deals=true' }\r\n-          ].map((item) => (\r\n-            <button \r\n-              key={item.label}\r\n-              onClick={() => navigate(item.path)}\r\n-              style={styles.quickLinkButton}\r\n-            >\r\n-              <span style={styles.quickLinkIcon}>{item.icon}</span>\r\n-              {item.label}\r\n-            </button>\r\n-          ))}\r\n-        </div>\r\n-      </section>\r\n-    </div>\r\n-  );\r\n-}\r\n-\r\n-const styles = {\r\n-  page: {\r\n-    backgroundColor: '#f8fafc',\r\n-    minHeight: '100vh',\r\n-    fontFamily: \"'Inter', -apple-system, BlinkMacSystemFont, sans-serif\",\r\n-  },\r\n-  hero: {\r\n-    background: 'linear-gradient(135deg, #1e293b 0%, #0f172a 100%)',\r\n-    color: 'white',\r\n-    padding: '6rem 1rem 8rem',\r\n-    textAlign: 'center',\r\n-    position: 'relative',\r\n-    overflow: 'hidden',\r\n-    '::before': {\r\n-      content: '\"\"',\r\n-      position: 'absolute',\r\n-      inset: 0,\r\n-      background: 'radial-gradient(circle at 20% 50%, rgba(56, 182, 255, 0.15) 0%, transparent 40%)',\r\n-    },\r\n-  },\r\n-  heroContent: {\r\n-    maxWidth: '800px',\r\n-    margin: '0 auto',\r\n-    position: 'relative',\r\n-    zIndex: 2,\r\n-  },\r\n-  heroText: {\r\n-    marginBottom: '3rem',\r\n-  },\r\n-  title: {\r\n-    fontSize: '3.5rem',\r\n-    fontWeight: '800',\r\n-    margin: '0 0 0.5rem',\r\n-    letterSpacing: '-0.025em',\r\n-    color: 'white',\r\n-  },\r\n-  titleAccent: {\r\n-    background: 'linear-gradient(90deg, #38bdf8, #818cf8)',\r\n-    WebkitBackgroundClip: 'text',\r\n-    WebkitTextFillColor: 'transparent',\r\n-  },\r\n-  tagline: {\r\n-    fontSize: '1.35rem',\r\n-    margin: '0',\r\n-    opacity: 0.9,\r\n-    fontWeight: '400',\r\n-    color: '#e2e8f0',\r\n-  },\r\n-  searchBox: {\r\n-    display: 'flex',\r\n-    maxWidth: '700px',\r\n-    margin: '0 auto',\r\n-    borderRadius: '12px',\r\n-    overflow: 'hidden',\r\n-    transition: 'all 0.3s cubic-bezier(0.4, 0, 0.2, 1)',\r\n-    backgroundColor: 'rgba(255, 255, 255, 0.1)',\r\n-    backdropFilter: 'blur(8px)',\r\n-    border: '1px solid',\r\n-    marginBottom: '3rem',\r\n-  },\r\n-  searchInputContainer: {\r\n-    flex: 1,\r\n-    display: 'flex',\r\n-    alignItems: 'center',\r\n-    padding: '0 1.25rem',\r\n-  },\r\n-  searchPrefixIcon: {\r\n-    marginRight: '0.75rem',\r\n-    opacity: 0.7,\r\n-    fontSize: '1.1rem',\r\n-  },\r\n-  searchInput: {\r\n-    flex: 1,\r\n-    padding: '1.25rem 0',\r\n-    border: 'none',\r\n-    fontSize: '1.05rem',\r\n-    outline: 'none',\r\n-    color: 'white',\r\n-    background: 'transparent',\r\n-    '::placeholder': {\r\n-      color: 'rgba(255, 255, 255, 0.6)',\r\n-    },\r\n-  },\r\n-  searchButton: {\r\n-    padding: '0 2rem',\r\n-    border: 'none',\r\n-    color: 'white',\r\n-    fontWeight: '600',\r\n-    cursor: 'pointer',\r\n-    fontSize: '1rem',\r\n-    transition: 'all 0.2s ease',\r\n-    ':hover': {\r\n-      filter: 'brightness(1.1)',\r\n-    },\r\n-    ':disabled': {\r\n-      cursor: 'not-allowed',\r\n-      opacity: 0.7,\r\n-    },\r\n-  },\r\n-  valueProps: {\r\n-    display: 'flex',\r\n-    justifyContent: 'center',\r\n-    gap: '2rem',\r\n-    flexWrap: 'wrap',\r\n-  },\r\n-  valuePropItem: {\r\n-    display: 'flex',\r\n-    alignItems: 'center',\r\n-    gap: '0.5rem',\r\n-    fontSize: '0.95rem',\r\n-    color: '#e2e8f0',\r\n-    opacity: 0.9,\r\n-  },\r\n-  valuePropIcon: {\r\n-    fontSize: '1.1rem',\r\n-  },\r\n-  section: {\r\n-    padding: '4rem 1rem',\r\n-    maxWidth: '1200px',\r\n-    margin: '0 auto',\r\n-  },\r\n-  sectionHeader: {\r\n-    textAlign: 'center',\r\n-    marginBottom: '3rem',\r\n-  },\r\n-  sectionTitle: {\r\n-    fontSize: '2.25rem',\r\n-    fontWeight: '700',\r\n-    margin: '0 0 0.5rem',\r\n-    color: '#1e293b',\r\n-    lineHeight: '1.2',\r\n-  },\r\n-  sectionSubtitle: {\r\n-    fontSize: '1.1rem',\r\n-    color: '#64748b',\r\n-    margin: '0',\r\n-    fontWeight: '400',\r\n-  },\r\n-  servicesGrid: {\r\n-    display: 'grid',\r\n-    gridTemplateColumns: 'repeat(auto-fit, minmax(280px, 1fr))',\r\n-    gap: '2rem',\r\n-  },\r\n-  serviceCard: {\r\n-    padding: '2.5rem 2rem',\r\n-    borderRadius: '16px',\r\n-    textAlign: 'center',\r\n-    cursor: 'pointer',\r\n-    transition: 'all 0.3s ease',\r\n-    position: 'relative',\r\n-    overflow: 'hidden',\r\n-    backgroundColor: 'white',\r\n-    boxShadow: '0 4px 20px rgba(0, 0, 0, 0.05)',\r\n-    border: '1px solid rgba(0, 0, 0, 0.03)',\r\n-    ':hover': {\r\n-      transform: 'translateY(-8px)',\r\n-      boxShadow: '0 15px 30px rgba(0, 0, 0, 0.1)',\r\n-    },\r\n-  },\r\n-  serviceIcon: {\r\n-    fontSize: '3.5rem',\r\n-    marginBottom: '1.5rem',\r\n-    transition: 'transform 0.3s ease',\r\n-  },\r\n-  serviceTitle: {\r\n-    fontSize: '1.5rem',\r\n-    fontWeight: '600',\r\n-    margin: '0 0 0.75rem',\r\n-    color: '#1e293b',\r\n-  },\r\n-  serviceDesc: {\r\n-    color: '#64748b',\r\n-    fontSize: '1rem',\r\n-    lineHeight: '1.6',\r\n-    margin: '0',\r\n-  },\r\n-  serviceHoverIndicator: {\r\n-    position: 'absolute',\r\n-    bottom: 0,\r\n-    left: 0,\r\n-    right: 0,\r\n-    height: '4px',\r\n-    backgroundColor: 'var(--card-color)',\r\n-    transform: 'scaleX(0)',\r\n-    transformOrigin: 'left',\r\n-    transition: 'transform 0.3s ease',\r\n-    ':hover': {\r\n-      transform: 'scaleX(1)',\r\n-    },\r\n-  },\r\n-  quickLinks: {\r\n-    display: 'flex',\r\n-    justifyContent: 'center',\r\n-    gap: '1rem',\r\n-    flexWrap: 'wrap',\r\n-  },\r\n-  quickLinkButton: {\r\n-    padding: '1rem 1.75rem',\r\n-    borderRadius: '50px',\r\n-    border: 'none',\r\n-    backgroundColor: 'white',\r\n-    color: '#1e293b',\r\n-    fontWeight: '500',\r\n-    cursor: 'pointer',\r\n-    transition: 'all 0.2s ease',\r\n-    display: 'flex',\r\n-    alignItems: 'center',\r\n-    gap: '0.75rem',\r\n-    fontSize: '0.95rem',\r\n-    boxShadow: '0 2px 8px rgba(0, 0, 0, 0.05)',\r\n-    ':hover': {\r\n-      backgroundColor: '#f1f5f9',\r\n-      transform: 'translateY(-2px)',\r\n-      boxShadow: '0 5px 15px rgba(0, 0, 0, 0.1)',\r\n-    },\r\n-  },\r\n-  quickLinkIcon: {\r\n-    fontSize: '1.2rem',\r\n-  },\r\n-};\n-import { useState } from 'react';\r\n-import { useNavigate } from 'react-router-dom';\r\n-\r\n-export default function Home() {\r\n-  const navigate = useNavigate();\r\n-  const [searchQuery, setSearchQuery] = useState('');\r\n-  const [isSearchFocused, setIsSearchFocused] = useState(false);\r\n-\r\n   const services = [\r\n     { \r\n       name: 'Transport', \r\n       path: '/transport', \r\n@@ -428,339 +57,303 @@\n       navigate(`/food?search=${encodeURIComponent(searchQuery)}`);\r\n     }\r\n   };\r\n \r\n+  // Unsplash image URL (New York City skyline)\r\n+  const cityBannerUrl = 'https://images.unsplash.com/photo-1485872299829-c673f5194813?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=2400&q=80';\r\n+\r\n   return (\r\n-    <div className=\"home-page\" style={styles.page}>\r\n-      {/* Enhanced Hero Banner */}\r\n-      <section className=\"hero\" style={styles.hero}>\r\n+    <div className=\"home-page\" style={darkMode ? styles.dark.page : styles.light.page}>\r\n+      {/* City Banner with Dark Mode Toggle */}\r\n+      <section className=\"hero\" style={{\r\n+        ...styles.hero,\r\n+        background: `linear-gradient(rgba(0, 0, 0, 0.4), url(${cityBannerUrl})`,\r\n+        backgroundSize: 'cover',\r\n+        backgroundPosition: 'center'\r\n+      }}>\r\n+        <button \r\n+          onClick={toggleDarkMode} \r\n+          style={styles.themeToggle}\r\n+          aria-label={darkMode ? 'Switch to light mode' : 'Switch to dark mode'}\r\n+        >\r\n+          {darkMode ? '‚òÄÔ∏è' : 'üåô'}\r\n+        </button>\r\n+        \r\n         <div className=\"hero-content\" style={styles.heroContent}>\r\n-          <div style={styles.heroText}>\r\n-            <h1 style={styles.title}>UrbanFlow</h1>\r\n-            <p className=\"tagline\" style={styles.tagline}>\r\n-              Your seamless urban living companion\r\n-              <span style={styles.taglineHighlight}> ¬∑ Discover ¬∑ Connect ¬∑ Enjoy</span>\r\n-            </p>\r\n-          </div>\r\n+          <h1 style={styles.title}>UrbanFlow</h1>\r\n+          <p className=\"tagline\" style={styles.tagline}>Your seamless urban living companion</p>\r\n           \r\n-          {/* Improved Search Bar */}\r\n-          <form \r\n-            onSubmit={handleSearch} \r\n-            className=\"search-box\" \r\n-            style={{\r\n-              ...styles.searchBox,\r\n-              borderColor: isSearchFocused ? '#3b82f6' : '#e2e8f0',\r\n-              boxShadow: isSearchFocused ? '0 0 0 3px rgba(59, 130, 246, 0.2)' : '0 2px 10px rgba(0, 0, 0, 0.1)'\r\n-            }}\r\n-          >\r\n+          <form onSubmit={handleSearch} className=\"search-box\" style={{\r\n+            ...styles.searchBox,\r\n+            borderColor: isSearchFocused ? '#3b82f6' : 'rgba(255,255,255,0.3)',\r\n+            boxShadow: isSearchFocused ? '0 0 0 3px rgba(59, 130, 246, 0.3)' : 'none'\r\n+          }}>\r\n             <input\r\n               type=\"text\"\r\n-              placeholder=\"Search for restaurants, services, groceries...\"\r\n+              placeholder=\"Search for restaurants, services...\"\r\n               value={searchQuery}\r\n               onChange={(e) => setSearchQuery(e.target.value)}\r\n               onFocus={() => setIsSearchFocused(true)}\r\n               onBlur={() => setIsSearchFocused(false)}\r\n               style={styles.searchInput}\r\n             />\r\n-            <button \r\n-              type=\"submit\" \r\n-              style={{\r\n-                ...styles.searchButton,\r\n-                backgroundColor: searchQuery.trim() ? '#1e40af' : '#94a3b8'\r\n-              }}\r\n-              disabled={!searchQuery.trim()}\r\n-            >\r\n-              <span style={styles.searchIcon}>üîç</span>\r\n-              <span style={styles.searchText}>Search</span>\r\n+            <button type=\"submit\" style={styles.searchButton}>\r\n+              <span>üîç</span>\r\n             </button>\r\n           </form>\r\n-\r\n-          <div style={styles.heroFeatures}>\r\n-            <span style={styles.heroFeatureItem}>üöÄ Instant results</span>\r\n-            <span style={styles.heroFeatureItem}>üìç Location-aware</span>\r\n-            <span style={styles.heroFeatureItem}>‚ú® Premium partners</span>\r\n-          </div>\r\n         </div>\r\n-        <div style={styles.heroWave}></div>\r\n       </section>\r\n \r\n-      {/* Services Grid (Retained Layout) */}\r\n+      {/* Original Card Layout - Now With Dark Mode Glow */}\r\n       <section className=\"services-section\" style={styles.section}>\r\n-        <h2 style={styles.sectionTitle}>What do you need today?</h2>\r\n-        <p style={styles.sectionSubtitle}>Tap to explore urban services tailored for you</p>\r\n+        <h2 style={darkMode ? styles.dark.sectionTitle : styles.light.sectionTitle}>What do you need today?</h2>\r\n         <div className=\"services-grid\" style={styles.servicesGrid}>\r\n           {services.map((service) => (\r\n             <div \r\n               key={service.name} \r\n               className=\"service-card\"\r\n               style={{ \r\n-                ...styles.serviceCard,\r\n-                backgroundColor: `${service.color}10`,\r\n+                ...(darkMode ? styles.dark.serviceCard : styles.light.serviceCard),\r\n                 borderLeft: `5px solid ${service.color}`,\r\n-                '--card-color': service.color\r\n+                '--card-color': service.color,\r\n+                ...(darkMode && {\r\n+                  boxShadow: `0 0 15px ${service.color}40`\r\n+                })\r\n               }}\r\n               onClick={() => navigate(service.path)}\r\n             >\r\n               <div className=\"service-icon\" style={styles.serviceIcon}>{service.icon}</div>\r\n-              <h3 style={styles.serviceTitle}>{service.name}</h3>\r\n-              <p style={styles.serviceDesc}>{service.desc}</p>\r\n-              <div className=\"card-hover-effect\" style={styles.cardHoverEffect}></div>\r\n+              <h3 style={darkMode ? styles.dark.serviceTitle : styles.light.serviceTitle}>{service.name}</h3>\r\n+              <p style={darkMode ? styles.dark.serviceDesc : styles.light.serviceDesc}>{service.desc}</p>\r\n             </div>\r\n           ))}\r\n         </div>\r\n       </section>\r\n \r\n-      {/* Featured Quick Access Section */}\r\n+      {/* Quick Access Section */}\r\n       <section className=\"featured-section\" style={styles.section}>\r\n-        <div style={styles.sectionHeader}>\r\n-          <h2 style={styles.sectionTitle}>Quick Access</h2>\r\n-          <p style={styles.sectionSubtitle}>Popular destinations and categories</p>\r\n-        </div>\r\n+        <h2 style={darkMode ? styles.dark.sectionTitle : styles.light.sectionTitle}>Quick Access</h2>\r\n         <div className=\"quick-links\" style={styles.quickLinks}>\r\n           <button \r\n             onClick={() => navigate('/transport?from=home&to=downtown')}\r\n-            style={styles.quickLinkButton}\r\n+            style={darkMode ? styles.dark.quickLinkButton : styles.light.quickLinkButton}\r\n           >\r\n-            <span style={styles.quickLinkIcon}>üöï</span>\r\n-            <span>To Downtown</span>\r\n+            üöï To Downtown\r\n           </button>\r\n           <button \r\n             onClick={() => navigate('/food?category=fastfood')}\r\n-            style={styles.quickLinkButton}\r\n+            style={darkMode ? styles.dark.quickLinkButton : styles.light.quickLinkButton}\r\n           >\r\n-            <span style={styles.quickLinkIcon}>üçü</span>\r\n-            <span>Fast Food</span>\r\n+            üçü Fast Food\r\n           </button>\r\n           <button \r\n             onClick={() => navigate('/food?category=coffee')}\r\n-            style={styles.quickLinkButton}\r\n+            style={darkMode ? styles.dark.quickLinkButton : styles.light.quickLinkButton}\r\n           >\r\n-            <span style={styles.quickLinkIcon}>‚òï</span>\r\n-            <span>Coffee Shops</span>\r\n+            ‚òï Coffee Shops\r\n           </button>\r\n-          <button \r\n-            onClick={() => navigate('/food?category=pharmacy')}\r\n-            style={styles.quickLinkButton}\r\n-          >\r\n-            <span style={styles.quickLinkIcon}>üíä</span>\r\n-            <span>24hr Pharmacy</span>\r\n-          </button>\r\n         </div>\r\n       </section>\r\n     </div>\r\n   );\r\n }\r\n \r\n+// Shared Styles\r\n const styles = {\r\n-  page: {\r\n-    backgroundColor: '#f8fafc',\r\n-    minHeight: '100vh',\r\n-    paddingBottom: '3rem',\r\n-    fontFamily: \"'Segoe UI', Roboto, 'Helvetica Neue', sans-serif\",\r\n-  },\r\n   hero: {\r\n-    background: 'linear-gradient(135deg, #4f46e5 0%, #2563eb 100%)',\r\n     color: 'white',\r\n-    padding: '5rem 1rem 6rem',\r\n+    padding: '4rem 1rem',\r\n     textAlign: 'center',\r\n     position: 'relative',\r\n-    overflow: 'hidden',\r\n+    minHeight: '400px',\r\n+    display: 'flex',\r\n+    alignItems: 'center',\r\n+    justifyContent: 'center',\r\n   },\r\n   heroContent: {\r\n-    maxWidth: '900px',\r\n+    maxWidth: '800px',\r\n     margin: '0 auto',\r\n     position: 'relative',\r\n     zIndex: 2,\r\n   },\r\n-  heroText: {\r\n-    marginBottom: '2.5rem',\r\n+  themeToggle: {\r\n+    position: 'absolute',\r\n+    top: '20px',\r\n+    right: '20px',\r\n+    background: 'rgba(0,0,0,0.5)',\r\n+    border: 'none',\r\n+    borderRadius: '50%',\r\n+    width: '40px',\r\n+    height: '40px',\r\n+    fontSize: '1.2rem',\r\n+    cursor: 'pointer',\r\n+    zIndex: 3,\r\n+    display: 'flex',\r\n+    alignItems: 'center',\r\n+    justifyContent: 'center',\r\n   },\r\n   title: {\r\n-    fontSize: '4rem',\r\n+    fontSize: '3.5rem',\r\n     fontWeight: '800',\r\n     marginBottom: '0.5rem',\r\n-    textShadow: '2px 2px 4px rgba(0, 0, 0, 0.2)',\r\n-    background: 'linear-gradient(to right, #fff, #e0e7ff)',\r\n-    WebkitBackgroundClip: 'text',\r\n-    WebkitTextFillColor: 'transparent',\r\n-    letterSpacing: '-0.05em',\r\n+    textShadow: '2px 2px 4px rgba(0, 0, 0, 0.5)',\r\n   },\r\n   tagline: {\r\n-    fontSize: '1.35rem',\r\n-    marginBottom: '0',\r\n+    fontSize: '1.25rem',\r\n+    marginBottom: '2rem',\r\n     opacity: 0.9,\r\n-    fontWeight: '400',\r\n+    textShadow: '1px 1px 2px rgba(0, 0, 0, 0.5)',\r\n   },\r\n-  taglineHighlight: {\r\n-    fontWeight: '600',\r\n-    marginLeft: '0.5rem',\r\n-    color: '#e0e7ff',\r\n-  },\r\n   searchBox: {\r\n     display: 'flex',\r\n-    maxWidth: '650px',\r\n+    maxWidth: '600px',\r\n     margin: '0 auto',\r\n-    borderRadius: '12px',\r\n+    borderRadius: '50px',\r\n     overflow: 'hidden',\r\n-    transition: 'all 0.3s ease',\r\n-    backgroundColor: 'white',\r\n-    border: '2px solid',\r\n+    transition: 'all 0.2s',\r\n+    backgroundColor: 'rgba(255,255,255,0.2)',\r\n+    backdropFilter: 'blur(5px)',\r\n   },\r\n   searchInput: {\r\n     flex: 1,\r\n-    padding: '1.1rem 1.75rem',\r\n+    padding: '1rem 1.5rem',\r\n     border: 'none',\r\n-    fontSize: '1.05rem',\r\n+    fontSize: '1rem',\r\n     outline: 'none',\r\n-    color: '#1e293b',\r\n+    background: 'transparent',\r\n+    color: 'white',\r\n     '::placeholder': {\r\n-      color: '#94a3b8',\r\n+      color: 'rgba(255,255,255,0.7)',\r\n     },\r\n   },\r\n   searchButton: {\r\n-    display: 'flex',\r\n-    alignItems: 'center',\r\n-    gap: '0.5rem',\r\n-    padding: '0 2rem',\r\n+    backgroundColor: 'rgba(0,0,0,0.3)',\r\n+    color: 'white',\r\n     border: 'none',\r\n-    color: 'white',\r\n-    fontWeight: '600',\r\n+    padding: '0 1.5rem',\r\n     cursor: 'pointer',\r\n-    fontSize: '1rem',\r\n-    transition: 'all 0.2s',\r\n+    fontSize: '1.25rem',\r\n+    transition: 'background-color 0.2s',\r\n     ':hover': {\r\n-      filter: 'brightness(1.1)',\r\n+      backgroundColor: 'rgba(0,0,0,0.5)',\r\n     },\r\n-    ':disabled': {\r\n-      cursor: 'not-allowed',\r\n-      opacity: 0.8,\r\n-    },\r\n   },\r\n-  searchIcon: {\r\n-    fontSize: '1.2rem',\r\n-  },\r\n-  searchText: {\r\n-    display: ['none', 'none', 'block'], // Hide on mobile, show on desktop\r\n-  },\r\n-  heroFeatures: {\r\n-    display: 'flex',\r\n-    justifyContent: 'center',\r\n-    gap: '1.5rem',\r\n-    marginTop: '2rem',\r\n-    flexWrap: 'wrap',\r\n-  },\r\n-  heroFeatureItem: {\r\n-    display: 'flex',\r\n-    alignItems: 'center',\r\n-    gap: '0.5rem',\r\n-    fontSize: '0.95rem',\r\n-    opacity: 0.9,\r\n-  },\r\n-  heroWave: {\r\n-    position: 'absolute',\r\n-    bottom: 0,\r\n-    left: 0,\r\n-    right: 0,\r\n-    height: '100px',\r\n-    background: 'url(\"data:image/svg+xml,%3Csvg xmlns=\\'http://www.w3.org/2000/svg\\' viewBox=\\'0 0 1200 120\\' preserveAspectRatio=\\'none\\'%3E%3Cpath d=\\'M0,0V46.29c47.79,22.2,103.59,32.17,158,28,70.36-5.37,136.33-33.31,206.8-37.5C438.64,32.43,512.34,53.67,583,72.05c69.27,18,138.3,24.88,209.4,13.08,36.15-6,69.85-17.84,104.45-29.34C989.49,25,1113-14.29,1200,52.47V0Z\\' opacity=\\'.25\\' fill=\\'%23f8fafc\\'%3E%3C/path%3E%3Cpath d=\\'M0,0V15.81C13,36.92,27.64,56.86,47.69,72.05,99.41,111.27,165,111,224.58,91.58c31.15-10.15,60.09-26.07,89.67-39.8,40.92-19,84.73-46,130.83-49.67,36.26-2.85,70.9,9.42,98.6,31.56,31.77,25.39,62.32,62,103.63,73,40.44,10.79,81.35-6.69,119.13-24.28s75.16-39,116.92-43.05c59.73-5.85,113.28,22.88,168.9,38.84,30.2,8.66,59,6.17,87.09-7.5,22.43-10.89,48-26.93,60.65-49.24V0Z\\' opacity=\\'.5\\' fill=\\'%23f8fafc\\'%3E%3C/path%3E%3Cpath d=\\'M0,0V5.63C149.93,59,314.09,71.32,475.83,42.57c43-7.64,84.23-20.12,127.61-26.46,59-8.63,112.48,12.24,165.56,35.4C827.93,77.22,886,95.24,951.2,90c86.53-7,172.46-45.71,248.8-84.81V0Z\\' fill=\\'%23f8fafc\\'%3E%3C/path%3E%3C/svg%3E\")',\r\n-    backgroundSize: 'cover',\r\n-    zIndex: 1,\r\n-  },\r\n   section: {\r\n     padding: '3rem 1rem',\r\n     maxWidth: '1200px',\r\n     margin: '0 auto',\r\n   },\r\n-  sectionHeader: {\r\n-    textAlign: 'center',\r\n-    marginBottom: '2rem',\r\n-  },\r\n-  sectionTitle: {\r\n-    fontSize: '2.25rem',\r\n-    fontWeight: '700',\r\n-    marginBottom: '0.5rem',\r\n-    color: '#1e293b',\r\n-  },\r\n-  sectionSubtitle: {\r\n-    fontSize: '1.1rem',\r\n-    color: '#64748b',\r\n-    marginBottom: '0',\r\n-  },\r\n   servicesGrid: {\r\n     display: 'grid',\r\n-    gridTemplateColumns: 'repeat(auto-fit, minmax(260px, 1fr))',\r\n-    gap: '1.75rem',\r\n-    marginTop: '2rem',\r\n+    gridTemplateColumns: 'repeat(auto-fit, minmax(250px, 1fr))',\r\n+    gap: '1.5rem',\r\n+    marginTop: '1rem',\r\n   },\r\n-  serviceCard: {\r\n-    padding: '2rem 1.5rem',\r\n-    borderRadius: '12px',\r\n-    textAlign: 'center',\r\n-    cursor: 'pointer',\r\n-    transition: 'all 0.3s ease',\r\n-    position: 'relative',\r\n-    overflow: 'hidden',\r\n-    backgroundColor: 'white',\r\n-    boxShadow: '0 4px 6px rgba(0, 0, 0, 0.05)',\r\n-    ':hover': {\r\n-      transform: 'translateY(-5px)',\r\n-      boxShadow: '0 10px 25px rgba(0, 0, 0, 0.1)',\r\n-    },\r\n-  },\r\n   serviceIcon: {\r\n-    fontSize: '3.5rem',\r\n-    marginBottom: '1.5rem',\r\n-    transition: 'transform 0.3s ease',\r\n-    ':hover': {\r\n-      transform: 'scale(1.1)',\r\n-    },\r\n+    fontSize: '3rem',\r\n+    marginBottom: '1rem',\r\n   },\r\n-  serviceTitle: {\r\n-    fontSize: '1.5rem',\r\n-    fontWeight: '600',\r\n-    marginBottom: '0.75rem',\r\n-    color: '#1e293b',\r\n-  },\r\n-  serviceDesc: {\r\n-    color: '#64748b',\r\n-    fontSize: '1rem',\r\n-    lineHeight: '1.6',\r\n-    marginBottom: '0',\r\n-  },\r\n-  cardHoverEffect: {\r\n-    position: 'absolute',\r\n-    top: 0,\r\n-    left: 0,\r\n-    right: 0,\r\n-    height: '4px',\r\n-    backgroundColor: 'var(--card-color)',\r\n-  },\r\n   quickLinks: {\r\n     display: 'flex',\r\n     justifyContent: 'center',\r\n     gap: '1rem',\r\n     flexWrap: 'wrap',\r\n   },\r\n-  quickLinkButton: {\r\n-    padding: '0.9rem 1.75rem',\r\n-    borderRadius: '50px',\r\n-    border: 'none',\r\n-    backgroundColor: 'white',\r\n-    color: '#1e293b',\r\n-    fontWeight: '600',\r\n-    cursor: 'pointer',\r\n-    transition: 'all 0.2s ease',\r\n-    display: 'flex',\r\n-    alignItems: 'center',\r\n-    gap: '0.75rem',\r\n-    fontSize: '1rem',\r\n-    boxShadow: '0 2px 5px rgba(0, 0, 0, 0.08)',\r\n-    ':hover': {\r\n-      backgroundColor: '#f1f5f9',\r\n-      transform: 'translateY(-2px)',\r\n-      boxShadow: '0 5px 15px rgba(0, 0, 0, 0.1)',\r\n+\r\n+  // Light Mode Styles\r\n+  light: {\r\n+    page: {\r\n+      backgroundColor: '#f8fafc',\r\n+      minHeight: '100vh',\r\n     },\r\n+    sectionTitle: {\r\n+      fontSize: '2rem',\r\n+      fontWeight: '700',\r\n+      marginBottom: '1.5rem',\r\n+      color: '#1e293b',\r\n+      textAlign: 'center',\r\n+    },\r\n+    serviceCard: {\r\n+      padding: '2rem 1.5rem',\r\n+      borderRadius: '8px',\r\n+      backgroundColor: 'white',\r\n+      cursor: 'pointer',\r\n+      transition: 'transform 0.3s',\r\n+      ':hover': {\r\n+        transform: 'translateY(-5px)',\r\n+      },\r\n+    },\r\n+    serviceTitle: {\r\n+      fontSize: '1.5rem',\r\n+      fontWeight: '600',\r\n+      marginBottom: '0.5rem',\r\n+      color: '#1e293b',\r\n+    },\r\n+    serviceDesc: {\r\n+      color: '#64748b',\r\n+      fontSize: '1rem',\r\n+      lineHeight: '1.5',\r\n+    },\r\n+    quickLinkButton: {\r\n+      padding: '0.75rem 1.5rem',\r\n+      borderRadius: '50px',\r\n+      border: 'none',\r\n+      backgroundColor: '#e2e8f0',\r\n+      color: '#1e293b',\r\n+      fontWeight: '600',\r\n+      cursor: 'pointer',\r\n+      transition: 'all 0.2s',\r\n+      ':hover': {\r\n+        backgroundColor: '#cbd5e1',\r\n+      },\r\n+    },\r\n   },\r\n-  quickLinkIcon: {\r\n-    fontSize: '1.2rem',\r\n+\r\n+  // Dark Mode Styles\r\n+  dark: {\r\n+    page: {\r\n+      backgroundColor: '#0f172a',\r\n+      minHeight: '100vh',\r\n+    },\r\n+    sectionTitle: {\r\n+      fontSize: '2rem',\r\n+      fontWeight: '700',\r\n+      marginBottom: '1.5rem',\r\n+      color: '#e2e8f0',\r\n+      textAlign: 'center',\r\n+    },\r\n+    serviceCard: {\r\n+      padding: '2rem 1.5rem',\r\n+      borderRadius: '8px',\r\n+      backgroundColor: '#1e293b',\r\n+      cursor: 'pointer',\r\n+      transition: 'all 0.3s',\r\n+      ':hover': {\r\n+        transform: 'translateY(-5px)',\r\n+      },\r\n+    },\r\n+    serviceTitle: {\r\n+      fontSize: '1.5rem',\r\n+      fontWeight: '600',\r\n+      marginBottom: '0.5rem',\r\n+      color: '#f8fafc',\r\n+    },\r\n+    serviceDesc: {\r\n+      color: '#94a3b8',\r\n+      fontSize: '1rem',\r\n+      lineHeight: '1.5',\r\n+    },\r\n+    quickLinkButton: {\r\n+      padding: '0.75rem 1.5rem',\r\n+      borderRadius: '50px',\r\n+      border: 'none',\r\n+      backgroundColor: '#334155',\r\n+      color: '#e2e8f0',\r\n+      fontWeight: '600',\r\n+      cursor: 'pointer',\r\n+      transition: 'all 0.2s',\r\n+      ':hover': {\r\n+        backgroundColor: '#475569',\r\n+      },\r\n+    },\r\n   },\r\n };\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752646752478,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,26 +1,13 @@\n-import { useState, useEffect } from 'react';\r\n+import { useState } from 'react';\r\n import { useNavigate } from 'react-router-dom';\r\n \r\n export default function Home() {\r\n   const navigate = useNavigate();\r\n   const [searchQuery, setSearchQuery] = useState('');\r\n+  const [isSearchFocused, setIsSearchFocused] = useState(false);\r\n   const [darkMode, setDarkMode] = useState(false);\r\n-  const [isSearchFocused, setIsSearchFocused] = useState(false);\r\n \r\n-  // Toggle dark mode and persist in localStorage\r\n-  const toggleDarkMode = () => {\r\n-    const newMode = !darkMode;\r\n-    setDarkMode(newMode);\r\n-    localStorage.setItem('darkMode', JSON.stringify(newMode));\r\n-  };\r\n-\r\n-  // Check for saved preference on load\r\n-  useEffect(() => {\r\n-    const savedMode = JSON.parse(localStorage.getItem('darkMode'));\r\n-    if (savedMode !== null) setDarkMode(savedMode);\r\n-  }, []);\r\n-\r\n   const services = [\r\n     { \r\n       name: 'Transport', \r\n       path: '/transport', \r\n@@ -57,303 +44,384 @@\n       navigate(`/food?search=${encodeURIComponent(searchQuery)}`);\r\n     }\r\n   };\r\n \r\n-  // Unsplash image URL (New York City skyline)\r\n-  const cityBannerUrl = 'https://images.unsplash.com/photo-1485872299829-c673f5194813?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=2400&q=80';\r\n+  const toggleDarkMode = () => {\r\n+    setDarkMode(!darkMode);\r\n+  };\r\n \r\n+  // Dynamic styles based on dark mode\r\n+  const dynamicStyles = {\r\n+    page: {\r\n+      backgroundColor: darkMode ? '#1a202c' : '#f8fafc',\r\n+      minHeight: '100vh',\r\n+      paddingBottom: '3rem',\r\n+      fontFamily: \"'Segoe UI', Roboto, 'Helvetica Neue', sans-serif\",\r\n+      color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+      transition: 'all 0.3s ease',\r\n+    },\r\n+    hero: {\r\n+      background: darkMode \r\n+        ? 'linear-gradient(135deg, #2d3748 0%, #1a202c 100%)' \r\n+        : 'linear-gradient(135deg, #f0f4f8 0%, #dfe7ef 100%)',\r\n+      color: darkMode ? 'white' : '#1e293b',\r\n+      padding: '5rem 1rem 6rem',\r\n+      textAlign: 'center',\r\n+      position: 'relative',\r\n+      overflow: 'hidden',\r\n+    },\r\n+    title: {\r\n+      fontSize: '4rem',\r\n+      fontWeight: '800',\r\n+      marginBottom: '0.5rem',\r\n+      textShadow: darkMode ? '2px 2px 4px rgba(0, 0, 0, 0.5)' : '2px 2px 4px rgba(0, 0, 0, 0.1)',\r\n+      background: darkMode \r\n+        ? 'linear-gradient(to right, #fff, #a0aec0)' \r\n+        : 'linear-gradient(to right, #1e293b, #4b5563)',\r\n+      WebkitBackgroundClip: 'text',\r\n+      WebkitTextFillColor: 'transparent',\r\n+      letterSpacing: '-0.05em',\r\n+    },\r\n+    serviceCard: {\r\n+      padding: '2rem 1.5rem',\r\n+      borderRadius: '12px',\r\n+      textAlign: 'center',\r\n+      cursor: 'pointer',\r\n+      transition: 'all 0.3s ease',\r\n+      position: 'relative',\r\n+      overflow: 'hidden',\r\n+      backgroundColor: darkMode ? '#2d3748' : 'white',\r\n+      boxShadow: darkMode ? '0 4px 6px rgba(0, 0, 0, 0.2)' : '0 4px 6px rgba(0, 0, 0, 0.05)',\r\n+      ':hover': {\r\n+        transform: 'translateY(-5px)',\r\n+        boxShadow: darkMode ? '0 10px 25px rgba(0, 0, 0, 0.3)' : '0 10px 25px rgba(0, 0, 0, 0.1)',\r\n+      },\r\n+    },\r\n+    serviceTitle: {\r\n+      fontSize: '1.5rem',\r\n+      fontWeight: '600',\r\n+      marginBottom: '0.75rem',\r\n+      color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+    },\r\n+    serviceDesc: {\r\n+      color: darkMode ? '#a0aec0' : '#64748b',\r\n+      fontSize: '1rem',\r\n+      lineHeight: '1.6',\r\n+      marginBottom: '0',\r\n+    },\r\n+    sectionTitle: {\r\n+      fontSize: '2.25rem',\r\n+      fontWeight: '700',\r\n+      marginBottom: '0.5rem',\r\n+      color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+    },\r\n+    sectionSubtitle: {\r\n+      fontSize: '1.1rem',\r\n+      color: darkMode ? '#a0aec0' : '#64748b',\r\n+      marginBottom: '0',\r\n+    },\r\n+    quickLinkButton: {\r\n+      padding: '0.9rem 1.75rem',\r\n+      borderRadius: '50px',\r\n+      border: 'none',\r\n+      backgroundColor: darkMode ? '#2d3748' : 'white',\r\n+      color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+      fontWeight: '600',\r\n+      cursor: 'pointer',\r\n+      transition: 'all 0.2s ease',\r\n+      display: 'flex',\r\n+      alignItems: 'center',\r\n+      gap: '0.75rem',\r\n+      fontSize: '1rem',\r\n+      boxShadow: darkMode ? '0 2px 5px rgba(0, 0, 0, 0.3)' : '0 2px 5px rgba(0, 0, 0, 0.08)',\r\n+      ':hover': {\r\n+        backgroundColor: darkMode ? '#4a5568' : '#f1f5f9',\r\n+        transform: 'translateY(-2px)',\r\n+        boxShadow: darkMode ? '0 5px 15px rgba(0, 0, 0, 0.4)' : '0 5px 15px rgba(0, 0, 0, 0.1)',\r\n+      },\r\n+    },\r\n+  };\r\n+\r\n+  const styles = {\r\n+    ...dynamicStyles,\r\n+    // Rest of your styles remain the same, just merge with dynamicStyles\r\n+    heroContent: {\r\n+      maxWidth: '900px',\r\n+      margin: '0 auto',\r\n+      position: 'relative',\r\n+      zIndex: 2,\r\n+    },\r\n+    heroText: {\r\n+      marginBottom: '2.5rem',\r\n+    },\r\n+    tagline: {\r\n+      fontSize: '1.35rem',\r\n+      marginBottom: '0',\r\n+      opacity: 0.9,\r\n+      fontWeight: '400',\r\n+    },\r\n+    taglineHighlight: {\r\n+      fontWeight: '600',\r\n+      marginLeft: '0.5rem',\r\n+      color: darkMode ? '#a0aec0' : '#4b5563',\r\n+    },\r\n+    searchBox: {\r\n+      display: 'flex',\r\n+      maxWidth: '650px',\r\n+      margin: '0 auto',\r\n+      borderRadius: '12px',\r\n+      overflow: 'hidden',\r\n+      transition: 'all 0.3s ease',\r\n+      backgroundColor: darkMode ? '#2d3748' : 'white',\r\n+      border: `2px solid ${isSearchFocused ? '#3b82f6' : darkMode ? '#4a5568' : '#e2e8f0'}`,\r\n+      boxShadow: isSearchFocused ? '0 0 0 3px rgba(59, 130, 246, 0.2)' : darkMode ? '0 2px 10px rgba(0, 0, 0, 0.3)' : '0 2px 10px rgba(0, 0, 0, 0.1)'\r\n+    },\r\n+    searchInput: {\r\n+      flex: 1,\r\n+      padding: '1.1rem 1.75rem',\r\n+      border: 'none',\r\n+      fontSize: '1.05rem',\r\n+      outline: 'none',\r\n+      color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+      backgroundColor: 'transparent',\r\n+      '::placeholder': {\r\n+        color: darkMode ? '#718096' : '#94a3b8',\r\n+      },\r\n+    },\r\n+    searchButton: {\r\n+      display: 'flex',\r\n+      alignItems: 'center',\r\n+      gap: '0.5rem',\r\n+      padding: '0 2rem',\r\n+      border: 'none',\r\n+      color: 'white',\r\n+      fontWeight: '600',\r\n+      cursor: 'pointer',\r\n+      fontSize: '1rem',\r\n+      transition: 'all 0.2s',\r\n+      ':hover': {\r\n+        filter: 'brightness(1.1)',\r\n+      },\r\n+      ':disabled': {\r\n+        cursor: 'not-allowed',\r\n+        opacity: 0.8,\r\n+      },\r\n+      backgroundColor: searchQuery.trim() ? '#1e40af' : (darkMode ? '#4a5568' : '#94a3b8')\r\n+    },\r\n+    searchIcon: {\r\n+      fontSize: '1.2rem',\r\n+    },\r\n+    searchText: {\r\n+      display: ['none', 'none', 'block'],\r\n+    },\r\n+    heroFeatures: {\r\n+      display: 'flex',\r\n+      justifyContent: 'center',\r\n+      gap: '1.5rem',\r\n+      marginTop: '2rem',\r\n+      flexWrap: 'wrap',\r\n+    },\r\n+    heroFeatureItem: {\r\n+      display: 'flex',\r\n+      alignItems: 'center',\r\n+      gap: '0.5rem',\r\n+      fontSize: '0.95rem',\r\n+      opacity: 0.9,\r\n+      color: darkMode ? '#cbd5e0' : '#4b5563',\r\n+    },\r\n+    heroWave: {\r\n+      position: 'absolute',\r\n+      bottom: 0,\r\n+      left: 0,\r\n+      right: 0,\r\n+      height: '100px',\r\n+      background: darkMode\r\n+        ? 'url(\"data:image/svg+xml,%3Csvg xmlns=\\'http://www.w3.org/2000/svg\\' viewBox=\\'0 0 1200 120\\' preserveAspectRatio=\\'none\\'%3E%3Cpath d=\\'M0,0V46.29c47.79,22.2,103.59,32.17,158,28,70.36-5.37,136.33-33.31,206.8-37.5C438.64,32.43,512.34,53.67,583,72.05c69.27,18,138.3,24.88,209.4,13.08,36.15-6,69.85-17.84,104.45-29.34C989.49,25,1113-14.29,1200,52.47V0Z\\' opacity=\\'.25\\' fill=\\'%232d3748\\'%3E%3C/path%3E%3Cpath d=\\'M0,0V15.81C13,36.92,27.64,56.86,47.69,72.05,99.41,111.27,165,111,224.58,91.58c31.15-10.15,60.09-26.07,89.67-39.8,40.92-19,84.73-46,130.83-49.67,36.26-2.85,70.9,9.42,98.6,31.56,31.77,25.39,62.32,62,103.63,73,40.44,10.79,81.35-6.69,119.13-24.28s75.16-39,116.92-43.05c59.73-5.85,113.28,22.88,168.9,38.84,30.2,8.66,59,6.17,87.09-7.5,22.43-10.89,48-26.93,60.65-49.24V0Z\\' opacity=\\'.5\\' fill=\\'%232d3748\\'%3E%3C/path%3E%3Cpath d=\\'M0,0V5.63C149.93,59,314.09,71.32,475.83,42.57c43-7.64,84.23-20.12,127.61-26.46,59-8.63,112.48,12.24,165.56,35.4C827.93,77.22,886,95.24,951.2,90c86.53-7,172.46-45.71,248.8-84.81V0Z\\' fill=\\'%232d3748\\'%3E%3C/path%3E%3C/svg%3E\")'\r\n+        : 'url(\"data:image/svg+xml,%3Csvg xmlns=\\'http://www.w3.org/2000/svg\\' viewBox=\\'0 0 1200 120\\' preserveAspectRatio=\\'none\\'%3E%3Cpath d=\\'M0,0V46.29c47.79,22.2,103.59,32.17,158,28,70.36-5.37,136.33-33.31,206.8-37.5C438.64,32.43,512.34,53.67,583,72.05c69.27,18,138.3,24.88,209.4,13.08,36.15-6,69.85-17.84,104.45-29.34C989.49,25,1113-14.29,1200,52.47V0Z\\' opacity=\\'.25\\' fill=\\'%23f8fafc\\'%3E%3C/path%3E%3Cpath d=\\'M0,0V15.81C13,36.92,27.64,56.86,47.69,72.05,99.41,111.27,165,111,224.58,91.58c31.15-10.15,60.09-26.07,89.67-39.8,40.92-19,84.73-46,130.83-49.67,36.26-2.85,70.9,9.42,98.6,31.56,31.77,25.39,62.32,62,103.63,73,40.44,10.79,81.35-6.69,119.13-24.28s75.16-39,116.92-43.05c59.73-5.85,113.28,22.88,168.9,38.84,30.2,8.66,59,6.17,87.09-7.5,22.43-10.89,48-26.93,60.65-49.24V0Z\\' opacity=\\'.5\\' fill=\\'%23f8fafc\\'%3E%3C/path%3E%3Cpath d=\\'M0,0V5.63C149.93,59,314.09,71.32,475.83,42.57c43-7.64,84.23-20.12,127.61-26.46,59-8.63,112.48,12.24,165.56,35.4C827.93,77.22,886,95.24,951.2,90c86.53-7,172.46-45.71,248.8-84.81V0Z\\' fill=\\'%23f8fafc\\'%3E%3C/path%3E%3C/svg%3E\")',\r\n+      backgroundSize: 'cover',\r\n+      zIndex: 1,\r\n+    },\r\n+    section: {\r\n+      padding: '3rem 1rem',\r\n+      maxWidth: '1200px',\r\n+      margin: '0 auto',\r\n+    },\r\n+    sectionHeader: {\r\n+      textAlign: 'center',\r\n+      marginBottom: '2rem',\r\n+    },\r\n+    servicesGrid: {\r\n+      display: 'grid',\r\n+      gridTemplateColumns: 'repeat(auto-fit, minmax(260px, 1fr))',\r\n+      gap: '1.75rem',\r\n+      marginTop: '2rem',\r\n+    },\r\n+    serviceIcon: {\r\n+      fontSize: '3.5rem',\r\n+      marginBottom: '1.5rem',\r\n+      transition: 'transform 0.3s ease',\r\n+      ':hover': {\r\n+        transform: 'scale(1.1)',\r\n+      },\r\n+    },\r\n+    cardHoverEffect: {\r\n+      position: 'absolute',\r\n+      top: 0,\r\n+      left: 0,\r\n+      right: 0,\r\n+      height: '4px',\r\n+      backgroundColor: 'var(--card-color)',\r\n+    },\r\n+    quickLinks: {\r\n+      display: 'flex',\r\n+      justifyContent: 'center',\r\n+      gap: '1rem',\r\n+      flexWrap: 'wrap',\r\n+    },\r\n+    quickLinkIcon: {\r\n+      fontSize: '1.2rem',\r\n+    },\r\n+    themeToggle: {\r\n+      position: 'absolute',\r\n+      top: '1.5rem',\r\n+      right: '1.5rem',\r\n+      background: darkMode ? '#4a5568' : '#e2e8f0',\r\n+      border: 'none',\r\n+      borderRadius: '50%',\r\n+      width: '40px',\r\n+      height: '40px',\r\n+      display: 'flex',\r\n+      alignItems: 'center',\r\n+      justifyContent: 'center',\r\n+      cursor: 'pointer',\r\n+      transition: 'all 0.3s ease',\r\n+      boxShadow: darkMode ? '0 2px 5px rgba(0, 0, 0, 0.3)' : '0 2px 5px rgba(0, 0, 0, 0.1)',\r\n+      ':hover': {\r\n+        transform: 'scale(1.1)',\r\n+      },\r\n+    },\r\n+  };\r\n+\r\n   return (\r\n-    <div className=\"home-page\" style={darkMode ? styles.dark.page : styles.light.page}>\r\n-      {/* City Banner with Dark Mode Toggle */}\r\n-      <section className=\"hero\" style={{\r\n-        ...styles.hero,\r\n-        background: `linear-gradient(rgba(0, 0, 0, 0.4), url(${cityBannerUrl})`,\r\n-        backgroundSize: 'cover',\r\n-        backgroundPosition: 'center'\r\n-      }}>\r\n-        <button \r\n-          onClick={toggleDarkMode} \r\n-          style={styles.themeToggle}\r\n-          aria-label={darkMode ? 'Switch to light mode' : 'Switch to dark mode'}\r\n-        >\r\n-          {darkMode ? '‚òÄÔ∏è' : 'üåô'}\r\n-        </button>\r\n-        \r\n+    <div className=\"home-page\" style={styles.page}>\r\n+      {/* Theme Toggle Button */}\r\n+      <button \r\n+        onClick={toggleDarkMode} \r\n+        style={styles.themeToggle}\r\n+        aria-label={darkMode ? 'Switch to light mode' : 'Switch to dark mode'}\r\n+      >\r\n+        {darkMode ? '‚òÄÔ∏è' : 'üåô'}\r\n+      </button>\r\n+      \r\n+      {/* Enhanced Hero Banner */}\r\n+      <section className=\"hero\" style={styles.hero}>\r\n         <div className=\"hero-content\" style={styles.heroContent}>\r\n-          <h1 style={styles.title}>UrbanFlow</h1>\r\n-          <p className=\"tagline\" style={styles.tagline}>Your seamless urban living companion</p>\r\n+          <div style={styles.heroText}>\r\n+            <h1 style={styles.title}>UrbanFlow</h1>\r\n+            <p className=\"tagline\" style={styles.tagline}>\r\n+              Your seamless urban living companion\r\n+              <span style={styles.taglineHighlight}> ¬∑ Discover ¬∑ Connect ¬∑ Enjoy</span>\r\n+            </p>\r\n+          </div>\r\n           \r\n-          <form onSubmit={handleSearch} className=\"search-box\" style={{\r\n\\ No newline at end of file\n-            ...styles.searchBox,\r\n-            borderColor: isSearchFocused ? '#3b82f6' : 'rgba(255,255,255,0.3)',\r\n-            boxShadow: isSearchFocused ? '0 0 0 3px rgba(59, 130, 246, 0.3)' : 'none'\r\n-          }}>\r\n+          {/* Improved Search Bar */}\r\n+          <form \r\n+            onSubmit={handleSearch} \r\n+            className=\"search-box\" \r\n+            style={styles.searchBox}\r\n+          >\r\n             <input\r\n               type=\"text\"\r\n-              placeholder=\"Search for restaurants, services...\"\r\n+              placeholder=\"Search for restaurants, services, groceries...\"\r\n               value={searchQuery}\r\n               onChange={(e) => setSearchQuery(e.target.value)}\r\n               onFocus={() => setIsSearchFocused(true)}\r\n               onBlur={() => setIsSearchFocused(false)}\r\n               style={styles.searchInput}\r\n             />\r\n-            <button type=\"submit\" style={styles.searchButton}>\r\n-              <span>üîç</span>\r\n+            <button \r\n+              type=\"submit\" \r\n+              style={styles.searchButton}\r\n+              disabled={!searchQuery.trim()}\r\n+            >\r\n+              <span style={styles.searchIcon}>üîç</span>\r\n+              <span style={styles.searchText}>Search</span>\r\n             </button>\r\n           </form>\r\n+\r\n+          <div style={styles.heroFeatures}>\r\n+            <span style={styles.heroFeatureItem}>üöÄ Instant results</span>\r\n+            <span style={styles.heroFeatureItem}>üìç Location-aware</span>\r\n+            <span style={styles.heroFeatureItem}>‚ú® Premium partners</span>\r\n+          </div>\r\n         </div>\r\n+        <div style={styles.heroWave}></div>\r\n       </section>\r\n \r\n-      {/* Original Card Layout - Now With Dark Mode Glow */}\r\n+      {/* Services Grid */}\r\n       <section className=\"services-section\" style={styles.section}>\r\n-        <h2 style={darkMode ? styles.dark.sectionTitle : styles.light.sectionTitle}>What do you need today?</h2>\r\n+        <h2 style={styles.sectionTitle}>What do you need today?</h2>\r\n+        <p style={styles.sectionSubtitle}>Tap to explore urban services tailored for you</p>\r\n         <div className=\"services-grid\" style={styles.servicesGrid}>\r\n           {services.map((service) => (\r\n             <div \r\n               key={service.name} \r\n               className=\"service-card\"\r\n               style={{ \r\n-                ...(darkMode ? styles.dark.serviceCard : styles.light.serviceCard),\r\n+                ...styles.serviceCard,\r\n+                backgroundColor: darkMode \r\n+                  ? `${service.color}20` \r\n+                  : `${service.color}10`,\r\n                 borderLeft: `5px solid ${service.color}`,\r\n-                '--card-color': service.color,\r\n-                ...(darkMode && {\r\n-                  boxShadow: `0 0 15px ${service.color}40`\r\n-                })\r\n+                '--card-color': service.color\r\n               }}\r\n               onClick={() => navigate(service.path)}\r\n             >\r\n               <div className=\"service-icon\" style={styles.serviceIcon}>{service.icon}</div>\r\n-              <h3 style={darkMode ? styles.dark.serviceTitle : styles.light.serviceTitle}>{service.name}</h3>\r\n-              <p style={darkMode ? styles.dark.serviceDesc : styles.light.serviceDesc}>{service.desc}</p>\r\n+              <h3 style={styles.serviceTitle}>{service.name}</h3>\r\n+              <p style={styles.serviceDesc}>{service.desc}</p>\r\n+              <div className=\"card-hover-effect\" style={styles.cardHoverEffect}></div>\r\n             </div>\r\n           ))}\r\n         </div>\r\n       </section>\r\n \r\n-      {/* Quick Access Section */}\r\n+      {/* Featured Quick Access Section */}\r\n       <section className=\"featured-section\" style={styles.section}>\r\n-        <h2 style={darkMode ? styles.dark.sectionTitle : styles.light.sectionTitle}>Quick Access</h2>\r\n+        <div style={styles.sectionHeader}>\r\n+          <h2 style={styles.sectionTitle}>Quick Access</h2>\r\n+          <p style={styles.sectionSubtitle}>Popular destinations and categories</p>\r\n+        </div>\r\n         <div className=\"quick-links\" style={styles.quickLinks}>\r\n           <button \r\n             onClick={() => navigate('/transport?from=home&to=downtown')}\r\n-            style={darkMode ? styles.dark.quickLinkButton : styles.light.quickLinkButton}\r\n+            style={styles.quickLinkButton}\r\n           >\r\n-            üöï To Downtown\r\n+            <span style={styles.quickLinkIcon}>üöï</span>\r\n+            <span>To Downtown</span>\r\n           </button>\r\n           <button \r\n             onClick={() => navigate('/food?category=fastfood')}\r\n-            style={darkMode ? styles.dark.quickLinkButton : styles.light.quickLinkButton}\r\n+            style={styles.quickLinkButton}\r\n           >\r\n-            üçü Fast Food\r\n+            <span style={styles.quickLinkIcon}>üçü</span>\r\n+            <span>Fast Food</span>\r\n           </button>\r\n           <button \r\n             onClick={() => navigate('/food?category=coffee')}\r\n-            style={darkMode ? styles.dark.quickLinkButton : styles.light.quickLinkButton}\r\n+            style={styles.quickLinkButton}\r\n           >\r\n-            ‚òï Coffee Shops\r\n+            <span style={styles.quickLinkIcon}>‚òï</span>\r\n+            <span>Coffee Shops</span>\r\n           </button>\r\n+          <button \r\n+            onClick={() => navigate('/food?category=pharmacy')}\r\n+            style={styles.quickLinkButton}\r\n+          >\r\n+            <span style={styles.quickLinkIcon}>üíä</span>\r\n+            <span>24hr Pharmacy</span>\r\n+          </button>\r\n         </div>\r\n       </section>\r\n     </div>\r\n   );\r\n-}\r\n-\r\n-// Shared Styles\r\n-const styles = {\r\n-  hero: {\r\n-    color: 'white',\r\n-    padding: '4rem 1rem',\r\n-    textAlign: 'center',\r\n-    position: 'relative',\r\n-    minHeight: '400px',\r\n-    display: 'flex',\r\n-    alignItems: 'center',\r\n-    justifyContent: 'center',\r\n-  },\r\n-  heroContent: {\r\n-    maxWidth: '800px',\r\n-    margin: '0 auto',\r\n-    position: 'relative',\r\n-    zIndex: 2,\r\n-  },\r\n-  themeToggle: {\r\n-    position: 'absolute',\r\n-    top: '20px',\r\n-    right: '20px',\r\n-    background: 'rgba(0,0,0,0.5)',\r\n-    border: 'none',\r\n-    borderRadius: '50%',\r\n-    width: '40px',\r\n-    height: '40px',\r\n-    fontSize: '1.2rem',\r\n-    cursor: 'pointer',\r\n-    zIndex: 3,\r\n-    display: 'flex',\r\n-    alignItems: 'center',\r\n-    justifyContent: 'center',\r\n-  },\r\n-  title: {\r\n-    fontSize: '3.5rem',\r\n-    fontWeight: '800',\r\n-    marginBottom: '0.5rem',\r\n-    textShadow: '2px 2px 4px rgba(0, 0, 0, 0.5)',\r\n-  },\r\n-  tagline: {\r\n-    fontSize: '1.25rem',\r\n-    marginBottom: '2rem',\r\n-    opacity: 0.9,\r\n-    textShadow: '1px 1px 2px rgba(0, 0, 0, 0.5)',\r\n-  },\r\n-  searchBox: {\r\n-    display: 'flex',\r\n-    maxWidth: '600px',\r\n-    margin: '0 auto',\r\n-    borderRadius: '50px',\r\n-    overflow: 'hidden',\r\n-    transition: 'all 0.2s',\r\n-    backgroundColor: 'rgba(255,255,255,0.2)',\r\n-    backdropFilter: 'blur(5px)',\r\n-  },\r\n-  searchInput: {\r\n-    flex: 1,\r\n-    padding: '1rem 1.5rem',\r\n-    border: 'none',\r\n-    fontSize: '1rem',\r\n-    outline: 'none',\r\n-    background: 'transparent',\r\n-    color: 'white',\r\n-    '::placeholder': {\r\n-      color: 'rgba(255,255,255,0.7)',\r\n-    },\r\n-  },\r\n-  searchButton: {\r\n-    backgroundColor: 'rgba(0,0,0,0.3)',\r\n-    color: 'white',\r\n-    border: 'none',\r\n-    padding: '0 1.5rem',\r\n-    cursor: 'pointer',\r\n-    fontSize: '1.25rem',\r\n-    transition: 'background-color 0.2s',\r\n-    ':hover': {\r\n-      backgroundColor: 'rgba(0,0,0,0.5)',\r\n-    },\r\n-  },\r\n-  section: {\r\n-    padding: '3rem 1rem',\r\n-    maxWidth: '1200px',\r\n-    margin: '0 auto',\r\n-  },\r\n-  servicesGrid: {\r\n-    display: 'grid',\r\n-    gridTemplateColumns: 'repeat(auto-fit, minmax(250px, 1fr))',\r\n-    gap: '1.5rem',\r\n-    marginTop: '1rem',\r\n-  },\r\n-  serviceIcon: {\r\n-    fontSize: '3rem',\r\n-    marginBottom: '1rem',\r\n-  },\r\n-  quickLinks: {\r\n-    display: 'flex',\r\n-    justifyContent: 'center',\r\n-    gap: '1rem',\r\n-    flexWrap: 'wrap',\r\n-  },\r\n-\r\n-  // Light Mode Styles\r\n-  light: {\r\n-    page: {\r\n-      backgroundColor: '#f8fafc',\r\n-      minHeight: '100vh',\r\n-    },\r\n-    sectionTitle: {\r\n-      fontSize: '2rem',\r\n-      fontWeight: '700',\r\n-      marginBottom: '1.5rem',\r\n-      color: '#1e293b',\r\n-      textAlign: 'center',\r\n-    },\r\n-    serviceCard: {\r\n-      padding: '2rem 1.5rem',\r\n-      borderRadius: '8px',\r\n-      backgroundColor: 'white',\r\n-      cursor: 'pointer',\r\n-      transition: 'transform 0.3s',\r\n-      ':hover': {\r\n-        transform: 'translateY(-5px)',\r\n-      },\r\n-    },\r\n-    serviceTitle: {\r\n-      fontSize: '1.5rem',\r\n-      fontWeight: '600',\r\n-      marginBottom: '0.5rem',\r\n-      color: '#1e293b',\r\n-    },\r\n-    serviceDesc: {\r\n-      color: '#64748b',\r\n-      fontSize: '1rem',\r\n-      lineHeight: '1.5',\r\n-    },\r\n-    quickLinkButton: {\r\n-      padding: '0.75rem 1.5rem',\r\n-      borderRadius: '50px',\r\n-      border: 'none',\r\n-      backgroundColor: '#e2e8f0',\r\n-      color: '#1e293b',\r\n-      fontWeight: '600',\r\n-      cursor: 'pointer',\r\n-      transition: 'all 0.2s',\r\n-      ':hover': {\r\n-        backgroundColor: '#cbd5e1',\r\n-      },\r\n-    },\r\n-  },\r\n-\r\n-  // Dark Mode Styles\r\n-  dark: {\r\n-    page: {\r\n-      backgroundColor: '#0f172a',\r\n-      minHeight: '100vh',\r\n-    },\r\n-    sectionTitle: {\r\n-      fontSize: '2rem',\r\n-      fontWeight: '700',\r\n-      marginBottom: '1.5rem',\r\n-      color: '#e2e8f0',\r\n-      textAlign: 'center',\r\n-    },\r\n-    serviceCard: {\r\n-      padding: '2rem 1.5rem',\r\n-      borderRadius: '8px',\r\n-      backgroundColor: '#1e293b',\r\n-      cursor: 'pointer',\r\n-      transition: 'all 0.3s',\r\n-      ':hover': {\r\n-        transform: 'translateY(-5px)',\r\n-      },\r\n-    },\r\n-    serviceTitle: {\r\n-      fontSize: '1.5rem',\r\n-      fontWeight: '600',\r\n-      marginBottom: '0.5rem',\r\n-      color: '#f8fafc',\r\n-    },\r\n-    serviceDesc: {\r\n-      color: '#94a3b8',\r\n-      fontSize: '1rem',\r\n-      lineHeight: '1.5',\r\n-    },\r\n-    quickLinkButton: {\r\n-      padding: '0.75rem 1.5rem',\r\n-      borderRadius: '50px',\r\n-      border: 'none',\r\n-      backgroundColor: '#334155',\r\n-      color: '#e2e8f0',\r\n-      fontWeight: '600',\r\n-      cursor: 'pointer',\r\n-      transition: 'all 0.2s',\r\n-      ':hover': {\r\n-        backgroundColor: '#475569',\r\n-      },\r\n-    },\r\n-  },\r\n-};\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752647016151,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,247 @@\n+import { useState } from 'react';\r\n+import { useNavigate } from 'react-router-dom';\r\n+\r\n+export default function Home() {\r\n+  const navigate = useNavigate();\r\n+  const [searchQuery, setSearchQuery] = useState('');\r\n+\r\n+  const services = [\r\n+    { \r\n+      name: 'Transport', \r\n+      path: '/transport', \r\n+      icon: 'üöå', \r\n+      desc: 'Plan your multi-modal journey across the city',\r\n+      color: '#3b82f6'\r\n+    },\r\n+    { \r\n+      name: 'Food Delivery', \r\n+      path: '/food', \r\n+      icon: 'üçî', \r\n+      desc: 'Discover local restaurants and cafes',\r\n+      color: '#ef4444'\r\n+    },\r\n+    { \r\n+      name: 'Groceries', \r\n+      path: '/food', \r\n+      icon: 'üõí', \r\n+      desc: 'Get groceries delivered in minutes',\r\n+      color: '#10b981'\r\n+    },\r\n+    { \r\n+      name: 'Services', \r\n+      path: '/food', \r\n+      icon: 'üõ†Ô∏è', \r\n+      desc: 'Find urban services near you',\r\n+      color: '#8b5cf6'\r\n+    }\r\n+  ];\r\n+\r\n+  const handleSearch = (e) => {\r\n+    e.preventDefault();\r\n+    if (searchQuery.trim()) {\r\n+      navigate(`/food?search=${encodeURIComponent(searchQuery)}`);\r\n+    }\r\n+  };\r\n+\r\n+  return (\r\n+    <div className=\"home-page\" style={styles.page}>\r\n+      {/* Hero Section */}\r\n+      <section className=\"hero\" style={styles.hero}>\r\n+        <div className=\"hero-content\" style={styles.heroContent}>\r\n+          <h1 style={styles.title}>UrbanFlow</h1>\r\n+          <p className=\"tagline\" style={styles.tagline}>Your seamless urban living companion</p>\r\n+          \r\n+          <form onSubmit={handleSearch} className=\"search-box\" style={styles.searchBox}>\r\n+            <input\r\n+              type=\"text\"\r\n+              placeholder=\"Search for restaurants, services...\"\r\n+              value={searchQuery}\r\n+              onChange={(e) => setSearchQuery(e.target.value)}\r\n+              style={styles.searchInput}\r\n+            />\r\n+            <button type=\"submit\" style={styles.searchButton}>\r\n+              <span>üîç</span>\r\n+            </button>\r\n+          </form>\r\n+        </div>\r\n+      </section>\r\n+\r\n+      {/* Services Grid */}\r\n+      <section className=\"services-section\" style={styles.section}>\r\n+        <h2 style={styles.sectionTitle}>What do you need today?</h2>\r\n+        <div className=\"services-grid\" style={styles.servicesGrid}>\r\n+          {services.map((service) => (\r\n+            <div \r\n+              key={service.name} \r\n+              className=\"service-card\"\r\n+              style={{ \r\n+                ...styles.serviceCard,\r\n+                backgroundColor: `${service.color}20`,\r\n+                borderColor: service.color,\r\n+                '--card-color': service.color\r\n+              }}\r\n+              onClick={() => navigate(service.path)}\r\n+            >\r\n+              <div className=\"service-icon\" style={styles.serviceIcon}>{service.icon}</div>\r\n+              <h3 style={styles.serviceTitle}>{service.name}</h3>\r\n+              <p style={styles.serviceDesc}>{service.desc}</p>\r\n+              <div className=\"card-hover-effect\"></div>\r\n+            </div>\r\n+          ))}\r\n+        </div>\r\n+      </section>\r\n+\r\n+      {/* Featured Section */}\r\n+      <section className=\"featured-section\" style={styles.section}>\r\n+        <h2 style={styles.sectionTitle}>Quick Access</h2>\r\n+        <div className=\"quick-links\" style={styles.quickLinks}>\r\n+          <button \r\n+            onClick={() => navigate('/transport?from=home&to=downtown')}\r\n+            style={styles.quickLinkButton}\r\n+          >\r\n+            üöï To Downtown\r\n+          </button>\r\n+          <button \r\n+            onClick={() => navigate('/food?category=fastfood')}\r\n+            style={styles.quickLinkButton}\r\n+          >\r\n+            üçü Fast Food\r\n+          </button>\r\n+          <button \r\n+            onClick={() => navigate('/food?category=coffee')}\r\n+            style={styles.quickLinkButton}\r\n+          >\r\n+            ‚òï Coffee Shops\r\n+          </button>\r\n+        </div>\r\n+      </section>\r\n+    </div>\r\n+  );\r\n+}\r\n+\r\n+const styles = {\r\n+  page: {\r\n+    backgroundColor: '#f8fafc',\r\n+    minHeight: '100vh',\r\n+    paddingBottom: '3rem',\r\n+  },\r\n+  hero: {\r\n+    background: 'linear-gradient(135deg, #6b46c1 0%, #3b82f6 100%)',\r\n+    color: 'white',\r\n+    padding: '4rem 1rem',\r\n+    textAlign: 'center',\r\n+    borderRadius: '0 0 20px 20px',\r\n+    boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',\r\n+  },\r\n+  heroContent: {\r\n+    maxWidth: '800px',\r\n+    margin: '0 auto',\r\n+  },\r\n+  title: {\r\n+    fontSize: '3.5rem',\r\n+    fontWeight: '800',\r\n+    marginBottom: '0.5rem',\r\n+    textShadow: '2px 2px 4px rgba(0, 0, 0, 0.2)',\r\n+  },\r\n+  tagline: {\r\n+    fontSize: '1.25rem',\r\n+    marginBottom: '2rem',\r\n+    opacity: 0.9,\r\n+  },\r\n+  searchBox: {\r\n+    display: 'flex',\r\n+    maxWidth: '600px',\r\n+    margin: '0 auto',\r\n+    borderRadius: '50px',\r\n+    overflow: 'hidden',\r\n+    boxShadow: '0 4px 10px rgba(0, 0, 0, 0.2)',\r\n+  },\r\n+  searchInput: {\r\n+    flex: 1,\r\n+    padding: '1rem 1.5rem',\r\n+    border: 'none',\r\n+    fontSize: '1rem',\r\n+    outline: 'none',\r\n+  },\r\n+  searchButton: {\r\n+    backgroundColor: '#1e40af',\r\n+    color: 'white',\r\n+    border: 'none',\r\n+    padding: '0 1.5rem',\r\n+    cursor: 'pointer',\r\n+    fontSize: '1.25rem',\r\n+    transition: 'background-color 0.2s',\r\n+  },\r\n+  section: {\r\n+    padding: '2rem 1rem',\r\n+    maxWidth: '1200px',\r\n+    margin: '0 auto',\r\n+  },\r\n+  sectionTitle: {\r\n+    fontSize: '2rem',\r\n+    fontWeight: '700',\r\n+    marginBottom: '1.5rem',\r\n+    color: '#1e293b',\r\n+    textAlign: 'center',\r\n+  },\r\n+  servicesGrid: {\r\n+    display: 'grid',\r\n+    gridTemplateColumns: 'repeat(auto-fit, minmax(250px, 1fr))',\r\n+    gap: '1.5rem',\r\n+    marginTop: '1rem',\r\n+  },\r\n+  serviceCard: {\r\n+    padding: '2rem 1.5rem',\r\n+    borderRadius: '16px',\r\n+    border: '2px solid',\r\n+    textAlign: 'center',\r\n+    cursor: 'pointer',\r\n+    transition: 'transform 0.3s, box-shadow 0.3s',\r\n+    position: 'relative',\r\n+    overflow: 'hidden',\r\n+    backdropFilter: 'blur(10px)',\r\n+    ':hover': {\r\n+      transform: 'translateY(-5px)',\r\n+      boxShadow: '0 10px 20px rgba(0, 0, 0, 0.1)',\r\n+    },\r\n+  },\r\n+  serviceIcon: {\r\n+    fontSize: '3rem',\r\n+    marginBottom: '1rem',\r\n+  },\r\n+  serviceTitle: {\r\n+    fontSize: '1.5rem',\r\n+    fontWeight: '600',\r\n+    marginBottom: '0.5rem',\r\n+    color: '#1e293b',\r\n+  },\r\n+  serviceDesc: {\r\n+    color: '#64748b',\r\n+    fontSize: '1rem',\r\n+    lineHeight: '1.5',\r\n+  },\r\n+  quickLinks: {\r\n+    display: 'flex',\r\n+    justifyContent: 'center',\r\n+    gap: '1rem',\r\n+    flexWrap: 'wrap',\r\n+  },\r\n+  quickLinkButton: {\r\n+    padding: '0.75rem 1.5rem',\r\n+    borderRadius: '50px',\r\n+    border: 'none',\r\n+    backgroundColor: '#e2e8f0',\r\n+    color: '#1e293b',\r\n+    fontWeight: '600',\r\n+    cursor: 'pointer',\r\n+    transition: 'all 0.2s',\r\n+    display: 'flex',\r\n+    alignItems: 'center',\r\n+    gap: '0.5rem',\r\n+    fontSize: '1rem',\r\n+    ':hover': {\r\n+      backgroundColor: '#cbd5e1',\r\n+      transform: 'scale(1.05)',\r\n+    },\r\n+  },\r\n+};\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752647326455,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,286 +3,43 @@\n \r\n export default function Home() {\r\n   const navigate = useNavigate();\r\n   const [searchQuery, setSearchQuery] = useState('');\r\n-\r\n-  const services = [\r\n-    { \r\n-      name: 'Transport', \r\n-      path: '/transport', \r\n-      icon: 'üöå', \r\n-      desc: 'Plan your multi-modal journey across the city',\r\n-      color: '#3b82f6'\r\n-    },\r\n-    { \r\n-      name: 'Food Delivery', \r\n-      path: '/food', \r\n-      icon: 'üçî', \r\n-      desc: 'Discover local restaurants and cafes',\r\n-      color: '#ef4444'\r\n-    },\r\n-    { \r\n-      name: 'Groceries', \r\n-      path: '/food', \r\n-      icon: 'üõí', \r\n-      desc: 'Get groceries delivered in minutes',\r\n-      color: '#10b981'\r\n-    },\r\n-    { \r\n-      name: 'Services', \r\n-      path: '/food', \r\n-      icon: 'üõ†Ô∏è', \r\n-      desc: 'Find urban services near you',\r\n-      color: '#8b5cf6'\r\n-    }\r\n-  ];\r\n-\r\n-  const handleSearch = (e) => {\r\n-    e.preventDefault();\r\n-    if (searchQuery.trim()) {\r\n-      navigate(`/food?search=${encodeURIComponent(searchQuery)}`);\r\n-    }\r\n-  };\r\n-\r\n-  return (\r\n-    <div className=\"home-page\" style={styles.page}>\r\n-      {/* Hero Section */}\r\n-      <section className=\"hero\" style={styles.hero}>\r\n-        <div className=\"hero-content\" style={styles.heroContent}>\r\n-          <h1 style={styles.title}>UrbanFlow</h1>\r\n-          <p className=\"tagline\" style={styles.tagline}>Your seamless urban living companion</p>\r\n-          \r\n-          <form onSubmit={handleSearch} className=\"search-box\" style={styles.searchBox}>\r\n-            <input\r\n-              type=\"text\"\r\n-              placeholder=\"Search for restaurants, services...\"\r\n-              value={searchQuery}\r\n-              onChange={(e) => setSearchQuery(e.target.value)}\r\n-              style={styles.searchInput}\r\n-            />\r\n-            <button type=\"submit\" style={styles.searchButton}>\r\n-              <span>üîç</span>\r\n-            </button>\r\n-          </form>\r\n-        </div>\r\n-      </section>\r\n-\r\n-      {/* Services Grid */}\r\n-      <section className=\"services-section\" style={styles.section}>\r\n-        <h2 style={styles.sectionTitle}>What do you need today?</h2>\r\n-        <div className=\"services-grid\" style={styles.servicesGrid}>\r\n-          {services.map((service) => (\r\n-            <div \r\n-              key={service.name} \r\n-              className=\"service-card\"\r\n-              style={{ \r\n-                ...styles.serviceCard,\r\n-                backgroundColor: `${service.color}20`,\r\n-                borderColor: service.color,\r\n-                '--card-color': service.color\r\n-              }}\r\n-              onClick={() => navigate(service.path)}\r\n-            >\r\n-              <div className=\"service-icon\" style={styles.serviceIcon}>{service.icon}</div>\r\n-              <h3 style={styles.serviceTitle}>{service.name}</h3>\r\n-              <p style={styles.serviceDesc}>{service.desc}</p>\r\n-              <div className=\"card-hover-effect\"></div>\r\n-            </div>\r\n-          ))}\r\n-        </div>\r\n-      </section>\r\n-\r\n-      {/* Featured Section */}\r\n-      <section className=\"featured-section\" style={styles.section}>\r\n-        <h2 style={styles.sectionTitle}>Quick Access</h2>\r\n-        <div className=\"quick-links\" style={styles.quickLinks}>\r\n-          <button \r\n-            onClick={() => navigate('/transport?from=home&to=downtown')}\r\n-            style={styles.quickLinkButton}\r\n-          >\r\n-            üöï To Downtown\r\n-          </button>\r\n-          <button \r\n-            onClick={() => navigate('/food?category=fastfood')}\r\n-            style={styles.quickLinkButton}\r\n-          >\r\n-            üçü Fast Food\r\n-          </button>\r\n-          <button \r\n-            onClick={() => navigate('/food?category=coffee')}\r\n-            style={styles.quickLinkButton}\r\n-          >\r\n-            ‚òï Coffee Shops\r\n-          </button>\r\n-        </div>\r\n-      </section>\r\n-    </div>\r\n-  );\r\n-}\r\n-\r\n-const styles = {\r\n-  page: {\r\n-    backgroundColor: '#f8fafc',\r\n-    minHeight: '100vh',\r\n-    paddingBottom: '3rem',\r\n-  },\r\n-  hero: {\r\n-    background: 'linear-gradient(135deg, #6b46c1 0%, #3b82f6 100%)',\r\n-    color: 'white',\r\n-    padding: '4rem 1rem',\r\n-    textAlign: 'center',\r\n-    borderRadius: '0 0 20px 20px',\r\n-    boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',\r\n-  },\r\n-  heroContent: {\r\n-    maxWidth: '800px',\r\n-    margin: '0 auto',\r\n-  },\r\n-  title: {\r\n-    fontSize: '3.5rem',\r\n-    fontWeight: '800',\r\n-    marginBottom: '0.5rem',\r\n-    textShadow: '2px 2px 4px rgba(0, 0, 0, 0.2)',\r\n-  },\r\n-  tagline: {\r\n-    fontSize: '1.25rem',\r\n-    marginBottom: '2rem',\r\n-    opacity: 0.9,\r\n-  },\r\n-  searchBox: {\r\n-    display: 'flex',\r\n-    maxWidth: '600px',\r\n-    margin: '0 auto',\r\n-    borderRadius: '50px',\r\n-    overflow: 'hidden',\r\n-    boxShadow: '0 4px 10px rgba(0, 0, 0, 0.2)',\r\n-  },\r\n-  searchInput: {\r\n-    flex: 1,\r\n-    padding: '1rem 1.5rem',\r\n-    border: 'none',\r\n-    fontSize: '1rem',\r\n-    outline: 'none',\r\n-  },\r\n-  searchButton: {\r\n-    backgroundColor: '#1e40af',\r\n-    color: 'white',\r\n-    border: 'none',\r\n-    padding: '0 1.5rem',\r\n-    cursor: 'pointer',\r\n-    fontSize: '1.25rem',\r\n-    transition: 'background-color 0.2s',\r\n-  },\r\n-  section: {\r\n-    padding: '2rem 1rem',\r\n-    maxWidth: '1200px',\r\n-    margin: '0 auto',\r\n-  },\r\n-  sectionTitle: {\r\n-    fontSize: '2rem',\r\n-    fontWeight: '700',\r\n-    marginBottom: '1.5rem',\r\n-    color: '#1e293b',\r\n-    textAlign: 'center',\r\n-  },\r\n-  servicesGrid: {\r\n-    display: 'grid',\r\n-    gridTemplateColumns: 'repeat(auto-fit, minmax(250px, 1fr))',\r\n-    gap: '1.5rem',\r\n-    marginTop: '1rem',\r\n-  },\r\n-  serviceCard: {\r\n-    padding: '2rem 1.5rem',\r\n-    borderRadius: '16px',\r\n-    border: '2px solid',\r\n-    textAlign: 'center',\r\n-    cursor: 'pointer',\r\n-    transition: 'transform 0.3s, box-shadow 0.3s',\r\n-    position: 'relative',\r\n-    overflow: 'hidden',\r\n-    backdropFilter: 'blur(10px)',\r\n-    ':hover': {\r\n-      transform: 'translateY(-5px)',\r\n-      boxShadow: '0 10px 20px rgba(0, 0, 0, 0.1)',\r\n-    },\r\n-  },\r\n-  serviceIcon: {\r\n-    fontSize: '3rem',\r\n-    marginBottom: '1rem',\r\n-  },\r\n-  serviceTitle: {\r\n-    fontSize: '1.5rem',\r\n-    fontWeight: '600',\r\n-    marginBottom: '0.5rem',\r\n-    color: '#1e293b',\r\n-  },\r\n-  serviceDesc: {\r\n-    color: '#64748b',\r\n-    fontSize: '1rem',\r\n-    lineHeight: '1.5',\r\n-  },\r\n-  quickLinks: {\r\n-    display: 'flex',\r\n-    justifyContent: 'center',\r\n-    gap: '1rem',\r\n-    flexWrap: 'wrap',\r\n-  },\r\n-  quickLinkButton: {\r\n-    padding: '0.75rem 1.5rem',\r\n-    borderRadius: '50px',\r\n-    border: 'none',\r\n-    backgroundColor: '#e2e8f0',\r\n-    color: '#1e293b',\r\n-    fontWeight: '600',\r\n-    cursor: 'pointer',\r\n-    transition: 'all 0.2s',\r\n-    display: 'flex',\r\n-    alignItems: 'center',\r\n-    gap: '0.5rem',\r\n-    fontSize: '1rem',\r\n-    ':hover': {\r\n-      backgroundColor: '#cbd5e1',\r\n-      transform: 'scale(1.05)',\r\n-    },\r\n-  },\r\n-};\n-import { useState } from 'react';\r\n-import { useNavigate } from 'react-router-dom';\r\n-\r\n-export default function Home() {\r\n-  const navigate = useNavigate();\r\n-  const [searchQuery, setSearchQuery] = useState('');\r\n-  const [isSearchFocused, setIsSearchFocused] = useState(false);\r\n   const [darkMode, setDarkMode] = useState(false);\r\n+  const [selectedService, setSelectedService] = useState(null);\r\n \r\n   const services = [\r\n     { \r\n       name: 'Transport', \r\n       path: '/transport', \r\n       icon: 'üöå', \r\n       desc: 'Plan your multi-modal journey across the city',\r\n-      color: '#3b82f6'\r\n+      color: '#3b82f6',\r\n+      details: 'Find the best routes combining metro, buses, and bikes. Real-time updates and ticket purchasing available.'\r\n     },\r\n     { \r\n       name: 'Food Delivery', \r\n       path: '/food', \r\n       icon: 'üçî', \r\n       desc: 'Discover local restaurants and cafes',\r\n-      color: '#ef4444'\r\n+      color: '#ef4444',\r\n+      details: 'Order from hundreds of restaurants with special discounts. Track your delivery in real-time.'\r\n     },\r\n     { \r\n       name: 'Groceries', \r\n       path: '/food', \r\n       icon: 'üõí', \r\n       desc: 'Get groceries delivered in minutes',\r\n-      color: '#10b981'\r\n+      color: '#10b981',\r\n+      details: 'Same-day delivery from local supermarkets. Schedule recurring orders for essentials.'\r\n     },\r\n     { \r\n       name: 'Services', \r\n       path: '/food', \r\n       icon: 'üõ†Ô∏è', \r\n       desc: 'Find urban services near you',\r\n-      color: '#8b5cf6'\r\n+      color: '#8b5cf6',\r\n+      details: 'Book home services, repairs, and professional help with verified providers.'\r\n     }\r\n   ];\r\n \r\n   const handleSearch = (e) => {\r\n@@ -295,241 +52,215 @@\n   const toggleDarkMode = () => {\r\n     setDarkMode(!darkMode);\r\n   };\r\n \r\n+  const openServicePopup = (service) => {\r\n+    setSelectedService(service);\r\n+  };\r\n+\r\n+  const closePopup = () => {\r\n+    setSelectedService(null);\r\n+  };\r\n+\r\n   // Dynamic styles based on dark mode\r\n   const dynamicStyles = {\r\n     page: {\r\n       backgroundColor: darkMode ? '#1a202c' : '#f8fafc',\r\n       minHeight: '100vh',\r\n       paddingBottom: '3rem',\r\n-      fontFamily: \"'Segoe UI', Roboto, 'Helvetica Neue', sans-serif\",\r\n       color: darkMode ? '#e2e8f0' : '#1e293b',\r\n       transition: 'all 0.3s ease',\r\n     },\r\n     hero: {\r\n       background: darkMode \r\n         ? 'linear-gradient(135deg, #2d3748 0%, #1a202c 100%)' \r\n-        : 'linear-gradient(135deg, #f0f4f8 0%, #dfe7ef 100%)',\r\n-      color: darkMode ? 'white' : '#1e293b',\r\n-      padding: '5rem 1rem 6rem',\r\n+        : 'linear-gradient(135deg, #6b46c1 0%, #3b82f6 100%)',\r\n+      color: 'white',\r\n+      padding: '4rem 1rem',\r\n       textAlign: 'center',\r\n-      position: 'relative',\r\n-      overflow: 'hidden',\r\n+      borderRadius: '0 0 20px 20px',\r\n+      boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',\r\n     },\r\n-    title: {\r\n-      fontSize: '4rem',\r\n-      fontWeight: '800',\r\n-      marginBottom: '0.5rem',\r\n-      textShadow: darkMode ? '2px 2px 4px rgba(0, 0, 0, 0.5)' : '2px 2px 4px rgba(0, 0, 0, 0.1)',\r\n-      background: darkMode \r\n-        ? 'linear-gradient(to right, #fff, #a0aec0)' \r\n-        : 'linear-gradient(to right, #1e293b, #4b5563)',\r\n-      WebkitBackgroundClip: 'text',\r\n-      WebkitTextFillColor: 'transparent',\r\n-      letterSpacing: '-0.05em',\r\n-    },\r\n     serviceCard: {\r\n       padding: '2rem 1.5rem',\r\n-      borderRadius: '12px',\r\n+      borderRadius: '16px',\r\n+      border: '2px solid',\r\n       textAlign: 'center',\r\n       cursor: 'pointer',\r\n-      transition: 'all 0.3s ease',\r\n+      transition: 'transform 0.3s, box-shadow 0.3s',\r\n       position: 'relative',\r\n       overflow: 'hidden',\r\n-      backgroundColor: darkMode ? '#2d3748' : 'white',\r\n-      boxShadow: darkMode ? '0 4px 6px rgba(0, 0, 0, 0.2)' : '0 4px 6px rgba(0, 0, 0, 0.05)',\r\n+      backdropFilter: 'blur(10px)',\r\n       ':hover': {\r\n         transform: 'translateY(-5px)',\r\n-        boxShadow: darkMode ? '0 10px 25px rgba(0, 0, 0, 0.3)' : '0 10px 25px rgba(0, 0, 0, 0.1)',\r\n+        boxShadow: '0 10px 20px rgba(0, 0, 0, 0.1)',\r\n       },\r\n     },\r\n     serviceTitle: {\r\n       fontSize: '1.5rem',\r\n       fontWeight: '600',\r\n-      marginBottom: '0.75rem',\r\n+      marginBottom: '0.5rem',\r\n       color: darkMode ? '#e2e8f0' : '#1e293b',\r\n     },\r\n     serviceDesc: {\r\n       color: darkMode ? '#a0aec0' : '#64748b',\r\n       fontSize: '1rem',\r\n-      lineHeight: '1.6',\r\n-      marginBottom: '0',\r\n+      lineHeight: '1.5',\r\n     },\r\n     sectionTitle: {\r\n-      fontSize: '2.25rem',\r\n+      fontSize: '2rem',\r\n       fontWeight: '700',\r\n-      marginBottom: '0.5rem',\r\n+      marginBottom: '1.5rem',\r\n       color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+      textAlign: 'center',\r\n     },\r\n-    sectionSubtitle: {\r\n-      fontSize: '1.1rem',\r\n-      color: darkMode ? '#a0aec0' : '#64748b',\r\n-      marginBottom: '0',\r\n-    },\r\n     quickLinkButton: {\r\n-      padding: '0.9rem 1.75rem',\r\n+      padding: '0.75rem 1.5rem',\r\n       borderRadius: '50px',\r\n       border: 'none',\r\n-      backgroundColor: darkMode ? '#2d3748' : 'white',\r\n+      backgroundColor: darkMode ? '#2d3748' : '#e2e8f0',\r\n       color: darkMode ? '#e2e8f0' : '#1e293b',\r\n       fontWeight: '600',\r\n       cursor: 'pointer',\r\n-      transition: 'all 0.2s ease',\r\n+      transition: 'all 0.2s',\r\n       display: 'flex',\r\n       alignItems: 'center',\r\n-      gap: '0.75rem',\r\n+      gap: '0.5rem',\r\n       fontSize: '1rem',\r\n-      boxShadow: darkMode ? '0 2px 5px rgba(0, 0, 0, 0.3)' : '0 2px 5px rgba(0, 0, 0, 0.08)',\r\n       ':hover': {\r\n-        backgroundColor: darkMode ? '#4a5568' : '#f1f5f9',\r\n-        transform: 'translateY(-2px)',\r\n-        boxShadow: darkMode ? '0 5px 15px rgba(0, 0, 0, 0.4)' : '0 5px 15px rgba(0, 0, 0, 0.1)',\r\n+        backgroundColor: darkMode ? '#4a5568' : '#cbd5e1',\r\n+        transform: 'scale(1.05)',\r\n       },\r\n     },\r\n+    popupOverlay: {\r\n+      position: 'fixed',\r\n+      top: 0,\r\n+      left: 0,\r\n+      right: 0,\r\n+      bottom: 0,\r\n+      backgroundColor: 'rgba(0, 0, 0, 0.7)',\r\n+      display: 'flex',\r\n+      justifyContent: 'center',\r\n+      alignItems: 'center',\r\n+      zIndex: 1000,\r\n+    },\r\n+    popupContent: {\r\n+      backgroundColor: darkMode ? '#2d3748' : 'white',\r\n+      borderRadius: '16px',\r\n+      padding: '2rem',\r\n+      maxWidth: '500px',\r\n+      width: '90%',\r\n+      boxShadow: '0 10px 25px rgba(0, 0, 0, 0.2)',\r\n+      position: 'relative',\r\n+      border: darkMode ? '1px solid #4a5568' : '1px solid #e2e8f0',\r\n+    },\r\n+    popupClose: {\r\n+      position: 'absolute',\r\n+      top: '1rem',\r\n+      right: '1rem',\r\n+      background: 'none',\r\n+      border: 'none',\r\n+      fontSize: '1.5rem',\r\n+      cursor: 'pointer',\r\n+      color: darkMode ? '#a0aec0' : '#64748b',\r\n+    },\r\n+    popupTitle: {\r\n+      fontSize: '1.8rem',\r\n+      fontWeight: '700',\r\n+      marginBottom: '1rem',\r\n+      color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+    },\r\n+    popupDesc: {\r\n+      color: darkMode ? '#a0aec0' : '#64748b',\r\n+      fontSize: '1.1rem',\r\n+      lineHeight: '1.6',\r\n+      marginBottom: '2rem',\r\n+    },\r\n+    popupButton: {\r\n+      padding: '0.75rem 1.5rem',\r\n+      borderRadius: '8px',\r\n+      border: 'none',\r\n+      backgroundColor: darkMode ? '#4a5568' : '#3b82f6',\r\n+      color: 'white',\r\n+      fontWeight: '600',\r\n+      cursor: 'pointer',\r\n+      transition: 'all 0.2s',\r\n+      fontSize: '1rem',\r\n+      ':hover': {\r\n+        backgroundColor: darkMode ? '#5f6b82' : '#2563eb',\r\n+      },\r\n+    },\r\n   };\r\n \r\n   const styles = {\r\n     ...dynamicStyles,\r\n-    // Rest of your styles remain the same, just merge with dynamicStyles\r\n     heroContent: {\r\n-      maxWidth: '900px',\r\n+      maxWidth: '800px',\r\n       margin: '0 auto',\r\n-      position: 'relative',\r\n-      zIndex: 2,\r\n     },\r\n-    heroText: {\r\n-      marginBottom: '2.5rem',\r\n+    title: {\r\n+      fontSize: '3.5rem',\r\n+      fontWeight: '800',\r\n+      marginBottom: '0.5rem',\r\n+      textShadow: '2px 2px 4px rgba(0, 0, 0, 0.2)',\r\n     },\r\n     tagline: {\r\n-      fontSize: '1.35rem',\r\n-      marginBottom: '0',\r\n+      fontSize: '1.25rem',\r\n+      marginBottom: '2rem',\r\n       opacity: 0.9,\r\n-      fontWeight: '400',\r\n     },\r\n-    taglineHighlight: {\r\n-      fontWeight: '600',\r\n-      marginLeft: '0.5rem',\r\n-      color: darkMode ? '#a0aec0' : '#4b5563',\r\n-    },\r\n     searchBox: {\r\n       display: 'flex',\r\n-      maxWidth: '650px',\r\n+      maxWidth: '600px',\r\n       margin: '0 auto',\r\n-      borderRadius: '12px',\r\n+      borderRadius: '50px',\r\n       overflow: 'hidden',\r\n-      transition: 'all 0.3s ease',\r\n-      backgroundColor: darkMode ? '#2d3748' : 'white',\r\n-      border: `2px solid ${isSearchFocused ? '#3b82f6' : darkMode ? '#4a5568' : '#e2e8f0'}`,\r\n-      boxShadow: isSearchFocused ? '0 0 0 3px rgba(59, 130, 246, 0.2)' : darkMode ? '0 2px 10px rgba(0, 0, 0, 0.3)' : '0 2px 10px rgba(0, 0, 0, 0.1)'\r\n+      boxShadow: '0 4px 10px rgba(0, 0, 0, 0.2)',\r\n     },\r\n     searchInput: {\r\n       flex: 1,\r\n-      padding: '1.1rem 1.75rem',\r\n+      padding: '1rem 1.5rem',\r\n       border: 'none',\r\n-      fontSize: '1.05rem',\r\n+      fontSize: '1rem',\r\n       outline: 'none',\r\n+      backgroundColor: darkMode ? '#2d3748' : 'white',\r\n       color: darkMode ? '#e2e8f0' : '#1e293b',\r\n-      backgroundColor: 'transparent',\r\n-      '::placeholder': {\r\n-        color: darkMode ? '#718096' : '#94a3b8',\r\n-      },\r\n     },\r\n     searchButton: {\r\n-      display: 'flex',\r\n-      alignItems: 'center',\r\n-      gap: '0.5rem',\r\n-      padding: '0 2rem',\r\n+      backgroundColor: darkMode ? '#4a5568' : '#1e40af',\r\n+      color: 'white',\r\n       border: 'none',\r\n-      color: 'white',\r\n-      fontWeight: '600',\r\n+      padding: '0 1.5rem',\r\n       cursor: 'pointer',\r\n-      fontSize: '1rem',\r\n-      transition: 'all 0.2s',\r\n+      fontSize: '1.25rem',\r\n+      transition: 'background-color 0.2s',\r\n       ':hover': {\r\n-        filter: 'brightness(1.1)',\r\n+        backgroundColor: darkMode ? '#5f6b82' : '#1e3a8a',\r\n       },\r\n-      ':disabled': {\r\n-        cursor: 'not-allowed',\r\n-        opacity: 0.8,\r\n-      },\r\n-      backgroundColor: searchQuery.trim() ? '#1e40af' : (darkMode ? '#4a5568' : '#94a3b8')\r\n     },\r\n-    searchIcon: {\r\n-      fontSize: '1.2rem',\r\n-    },\r\n-    searchText: {\r\n-      display: ['none', 'none', 'block'],\r\n-    },\r\n-    heroFeatures: {\r\n-      display: 'flex',\r\n-      justifyContent: 'center',\r\n-      gap: '1.5rem',\r\n-      marginTop: '2rem',\r\n-      flexWrap: 'wrap',\r\n-    },\r\n-    heroFeatureItem: {\r\n-      display: 'flex',\r\n-      alignItems: 'center',\r\n-      gap: '0.5rem',\r\n-      fontSize: '0.95rem',\r\n-      opacity: 0.9,\r\n-      color: darkMode ? '#cbd5e0' : '#4b5563',\r\n-    },\r\n-    heroWave: {\r\n-      position: 'absolute',\r\n-      bottom: 0,\r\n-      left: 0,\r\n-      right: 0,\r\n-      height: '100px',\r\n-      background: darkMode\r\n-        ? 'url(\"data:image/svg+xml,%3Csvg xmlns=\\'http://www.w3.org/2000/svg\\' viewBox=\\'0 0 1200 120\\' preserveAspectRatio=\\'none\\'%3E%3Cpath d=\\'M0,0V46.29c47.79,22.2,103.59,32.17,158,28,70.36-5.37,136.33-33.31,206.8-37.5C438.64,32.43,512.34,53.67,583,72.05c69.27,18,138.3,24.88,209.4,13.08,36.15-6,69.85-17.84,104.45-29.34C989.49,25,1113-14.29,1200,52.47V0Z\\' opacity=\\'.25\\' fill=\\'%232d3748\\'%3E%3C/path%3E%3Cpath d=\\'M0,0V15.81C13,36.92,27.64,56.86,47.69,72.05,99.41,111.27,165,111,224.58,91.58c31.15-10.15,60.09-26.07,89.67-39.8,40.92-19,84.73-46,130.83-49.67,36.26-2.85,70.9,9.42,98.6,31.56,31.77,25.39,62.32,62,103.63,73,40.44,10.79,81.35-6.69,119.13-24.28s75.16-39,116.92-43.05c59.73-5.85,113.28,22.88,168.9,38.84,30.2,8.66,59,6.17,87.09-7.5,22.43-10.89,48-26.93,60.65-49.24V0Z\\' opacity=\\'.5\\' fill=\\'%232d3748\\'%3E%3C/path%3E%3Cpath d=\\'M0,0V5.63C149.93,59,314.09,71.32,475.83,42.57c43-7.64,84.23-20.12,127.61-26.46,59-8.63,112.48,12.24,165.56,35.4C827.93,77.22,886,95.24,951.2,90c86.53-7,172.46-45.71,248.8-84.81V0Z\\' fill=\\'%232d3748\\'%3E%3C/path%3E%3C/svg%3E\")'\r\n-        : 'url(\"data:image/svg+xml,%3Csvg xmlns=\\'http://www.w3.org/2000/svg\\' viewBox=\\'0 0 1200 120\\' preserveAspectRatio=\\'none\\'%3E%3Cpath d=\\'M0,0V46.29c47.79,22.2,103.59,32.17,158,28,70.36-5.37,136.33-33.31,206.8-37.5C438.64,32.43,512.34,53.67,583,72.05c69.27,18,138.3,24.88,209.4,13.08,36.15-6,69.85-17.84,104.45-29.34C989.49,25,1113-14.29,1200,52.47V0Z\\' opacity=\\'.25\\' fill=\\'%23f8fafc\\'%3E%3C/path%3E%3Cpath d=\\'M0,0V15.81C13,36.92,27.64,56.86,47.69,72.05,99.41,111.27,165,111,224.58,91.58c31.15-10.15,60.09-26.07,89.67-39.8,40.92-19,84.73-46,130.83-49.67,36.26-2.85,70.9,9.42,98.6,31.56,31.77,25.39,62.32,62,103.63,73,40.44,10.79,81.35-6.69,119.13-24.28s75.16-39,116.92-43.05c59.73-5.85,113.28,22.88,168.9,38.84,30.2,8.66,59,6.17,87.09-7.5,22.43-10.89,48-26.93,60.65-49.24V0Z\\' opacity=\\'.5\\' fill=\\'%23f8fafc\\'%3E%3C/path%3E%3Cpath d=\\'M0,0V5.63C149.93,59,314.09,71.32,475.83,42.57c43-7.64,84.23-20.12,127.61-26.46,59-8.63,112.48,12.24,165.56,35.4C827.93,77.22,886,95.24,951.2,90c86.53-7,172.46-45.71,248.8-84.81V0Z\\' fill=\\'%23f8fafc\\'%3E%3C/path%3E%3C/svg%3E\")',\r\n-      backgroundSize: 'cover',\r\n-      zIndex: 1,\r\n-    },\r\n     section: {\r\n-      padding: '3rem 1rem',\r\n+      padding: '2rem 1rem',\r\n       maxWidth: '1200px',\r\n       margin: '0 auto',\r\n     },\r\n-    sectionHeader: {\r\n-      textAlign: 'center',\r\n-      marginBottom: '2rem',\r\n-    },\r\n     servicesGrid: {\r\n       display: 'grid',\r\n-      gridTemplateColumns: 'repeat(auto-fit, minmax(260px, 1fr))',\r\n-      gap: '1.75rem',\r\n-      marginTop: '2rem',\r\n+      gridTemplateColumns: 'repeat(auto-fit, minmax(250px, 1fr))',\r\n+      gap: '1.5rem',\r\n+      marginTop: '1rem',\r\n     },\r\n     serviceIcon: {\r\n-      fontSize: '3.5rem',\r\n-      marginBottom: '1.5rem',\r\n-      transition: 'transform 0.3s ease',\r\n-      ':hover': {\r\n-        transform: 'scale(1.1)',\r\n-      },\r\n+      fontSize: '3rem',\r\n+      marginBottom: '1rem',\r\n     },\r\n-    cardHoverEffect: {\r\n-      position: 'absolute',\r\n-      top: 0,\r\n-      left: 0,\r\n-      right: 0,\r\n-      height: '4px',\r\n-      backgroundColor: 'var(--card-color)',\r\n-    },\r\n     quickLinks: {\r\n       display: 'flex',\r\n       justifyContent: 'center',\r\n       gap: '1rem',\r\n       flexWrap: 'wrap',\r\n     },\r\n-    quickLinkIcon: {\r\n-      fontSize: '1.2rem',\r\n-    },\r\n     themeToggle: {\r\n-      position: 'absolute',\r\n+      position: 'fixed',\r\n       top: '1.5rem',\r\n       right: '1.5rem',\r\n       background: darkMode ? '#4a5568' : '#e2e8f0',\r\n       border: 'none',\r\n@@ -540,9 +271,10 @@\n       alignItems: 'center',\r\n       justifyContent: 'center',\r\n       cursor: 'pointer',\r\n       transition: 'all 0.3s ease',\r\n-      boxShadow: darkMode ? '0 2px 5px rgba(0, 0, 0, 0.3)' : '0 2px 5px rgba(0, 0, 0, 0.1)',\r\n+      boxShadow: '0 2px 5px rgba(0, 0, 0, 0.2)',\r\n+      zIndex: 100,\r\n       ':hover': {\r\n         transform: 'scale(1.1)',\r\n       },\r\n     },\r\n@@ -558,57 +290,32 @@\n       >\r\n         {darkMode ? '‚òÄÔ∏è' : 'üåô'}\r\n       </button>\r\n       \r\n-      {/* Enhanced Hero Banner */}\r\n+      {/* Hero Section */}\r\n       <section className=\"hero\" style={styles.hero}>\r\n         <div className=\"hero-content\" style={styles.heroContent}>\r\n-          <div style={styles.heroText}>\r\n-            <h1 style={styles.title}>UrbanFlow</h1>\r\n-            <p className=\"tagline\" style={styles.tagline}>\r\n-              Your seamless urban living companion\r\n-              <span style={styles.taglineHighlight}> ¬∑ Discover ¬∑ Connect ¬∑ Enjoy</span>\r\n-            </p>\r\n-          </div>\r\n+          <h1 style={styles.title}>UrbanFlow</h1>\r\n+          <p className=\"tagline\" style={styles.tagline}>Your seamless urban living companion</p>\r\n           \r\n-          {/* Improved Search Bar */}\r\n-          <form \r\n-            onSubmit={handleSearch} \r\n-            className=\"search-box\" \r\n-            style={styles.searchBox}\r\n-          >\r\n+          <form onSubmit={handleSearch} className=\"search-box\" style={styles.searchBox}>\r\n             <input\r\n               type=\"text\"\r\n-              placeholder=\"Search for restaurants, services, groceries...\"\r\n+              placeholder=\"Search for restaurants, services...\"\r\n               value={searchQuery}\r\n               onChange={(e) => setSearchQuery(e.target.value)}\r\n-              onFocus={() => setIsSearchFocused(true)}\r\n-              onBlur={() => setIsSearchFocused(false)}\r\n               style={styles.searchInput}\r\n             />\r\n-            <button \r\n-              type=\"submit\" \r\n-              style={styles.searchButton}\r\n-              disabled={!searchQuery.trim()}\r\n-            >\r\n-              <span style={styles.searchIcon}>üîç</span>\r\n-              <span style={styles.searchText}>Search</span>\r\n+            <button type=\"submit\" style={styles.searchButton}>\r\n+              <span>üîç</span>\r\n             </button>\r\n           </form>\r\n-\r\n-          <div style={styles.heroFeatures}>\r\n-            <span style={styles.heroFeatureItem}>üöÄ Instant results</span>\r\n-            <span style={styles.heroFeatureItem}>üìç Location-aware</span>\r\n-            <span style={styles.heroFeatureItem}>‚ú® Premium partners</span>\r\n-          </div>\r\n         </div>\r\n-        <div style={styles.heroWave}></div>\r\n       </section>\r\n \r\n       {/* Services Grid */}\r\n       <section className=\"services-section\" style={styles.section}>\r\n         <h2 style={styles.sectionTitle}>What do you need today?</h2>\r\n-        <p style={styles.sectionSubtitle}>Tap to explore urban services tailored for you</p>\r\n         <div className=\"services-grid\" style={styles.servicesGrid}>\r\n           {services.map((service) => (\r\n             <div \r\n               key={service.name} \r\n@@ -617,58 +324,79 @@\n                 ...styles.serviceCard,\r\n                 backgroundColor: darkMode \r\n                   ? `${service.color}20` \r\n                   : `${service.color}10`,\r\n-                borderLeft: `5px solid ${service.color}`,\r\n+                borderColor: service.color,\r\n                 '--card-color': service.color\r\n               }}\r\n-              onClick={() => navigate(service.path)}\r\n+              onClick={() => openServicePopup(service)}\r\n             >\r\n               <div className=\"service-icon\" style={styles.serviceIcon}>{service.icon}</div>\r\n               <h3 style={styles.serviceTitle}>{service.name}</h3>\r\n               <p style={styles.serviceDesc}>{service.desc}</p>\r\n-              <div className=\"card-hover-effect\" style={styles.cardHoverEffect}></div>\r\n+              <div className=\"card-hover-effect\"></div>\r\n             </div>\r\n           ))}\r\n         </div>\r\n       </section>\r\n \r\n-      {/* Featured Quick Access Section */}\r\n+      {/* Featured Section */}\r\n       <section className=\"featured-section\" style={styles.section}>\r\n-        <div style={styles.sectionHeader}>\r\n-          <h2 style={styles.sectionTitle}>Quick Access</h2>\r\n-          <p style={styles.sectionSubtitle}>Popular destinations and categories</p>\r\n-        </div>\r\n+        <h2 style={styles.sectionTitle}>Quick Access</h2>\r\n         <div className=\"quick-links\" style={styles.quickLinks}>\r\n           <button \r\n             onClick={() => navigate('/transport?from=home&to=downtown')}\r\n             style={styles.quickLinkButton}\r\n           >\r\n-            <span style={styles.quickLinkIcon}>üöï</span>\r\n-            <span>To Downtown</span>\r\n+            üöï To Downtown\r\n           </button>\r\n           <button \r\n             onClick={() => navigate('/food?category=fastfood')}\r\n             style={styles.quickLinkButton}\r\n           >\r\n-            <span style={styles.quickLinkIcon}>üçü</span>\r\n-            <span>Fast Food</span>\r\n+            üçü Fast Food\r\n           </button>\r\n           <button \r\n             onClick={() => navigate('/food?category=coffee')}\r\n             style={styles.quickLinkButton}\r\n           >\r\n-            <span style={styles.quickLinkIcon}>‚òï</span>\r\n-            <span>Coffee Shops</span>\r\n+            ‚òï Coffee Shops\r\n           </button>\r\n-          <button \r\n-            onClick={() => navigate('/food?category=pharmacy')}\r\n-            style={styles.quickLinkButton}\r\n-          >\r\n-            <span style={styles.quickLinkIcon}>üíä</span>\r\n-            <span>24hr Pharmacy</span>\r\n-          </button>\r\n         </div>\r\n       </section>\r\n+\r\n+      {/* Service Popup */}\r\n+      {selectedService && (\r\n+        <div style={styles.popupOverlay} onClick={closePopup}>\r\n+          <div style={styles.popupContent} onClick={(e) => e.stopPropagation()}>\r\n+            <button style={styles.popupClose} onClick={closePopup}>√ó</button>\r\n+            <div style={{ \r\n+              display: 'flex', \r\n+              alignItems: 'center', \r\n+              gap: '1rem',\r\n+              marginBottom: '1.5rem'\r\n+            }}>\r\n+              <span style={{ fontSize: '2.5rem' }}>{selectedService.icon}</span>\r\n+              <h3 style={styles.popupTitle}>{selectedService.name}</h3>\r\n+            </div>\r\n+            <p style={styles.popupDesc}>{selectedService.details}</p>\r\n+            <button \r\n+              style={{ \r\n+                ...styles.popupButton,\r\n+                backgroundColor: selectedService.color,\r\n+                ':hover': {\r\n+                  backgroundColor: `${selectedService.color}90`,\r\n+                }\r\n+              }}\r\n+              onClick={() => {\r\n+                navigate(selectedService.path);\r\n+                closePopup();\r\n+              }}\r\n+            >\r\n+              Explore {selectedService.name}\r\n+            </button>\r\n+          </div>\r\n+        </div>\r\n+      )}\r\n     </div>\r\n   );\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752647788047,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,402 @@\n+import { useState } from 'react';\r\n+import { useNavigate } from 'react-router-dom';\r\n+\r\n+export default function Home() {\r\n+  const navigate = useNavigate();\r\n+  const [searchQuery, setSearchQuery] = useState('');\r\n+  const [darkMode, setDarkMode] = useState(false);\r\n+  const [selectedService, setSelectedService] = useState(null);\r\n+\r\n+  const services = [\r\n+    { \r\n+      name: 'Transport', \r\n+      path: '/transport', \r\n+      icon: 'üöå', \r\n+      desc: 'Plan your multi-modal journey across the city',\r\n+      color: '#3b82f6',\r\n+      details: 'Find the best routes combining metro, buses, and bikes. Real-time updates and ticket purchasing available.'\r\n+    },\r\n+    { \r\n+      name: 'Food Delivery', \r\n+      path: '/food', \r\n+      icon: 'üçî', \r\n+      desc: 'Discover local restaurants and cafes',\r\n+      color: '#ef4444',\r\n+      details: 'Order from hundreds of restaurants with special discounts. Track your delivery in real-time.'\r\n+    },\r\n+    { \r\n+      name: 'Groceries', \r\n+      path: '/food', \r\n+      icon: 'üõí', \r\n+      desc: 'Get groceries delivered in minutes',\r\n+      color: '#10b981',\r\n+      details: 'Same-day delivery from local supermarkets. Schedule recurring orders for essentials.'\r\n+    },\r\n+    { \r\n+      name: 'Services', \r\n+      path: '/food', \r\n+      icon: 'üõ†Ô∏è', \r\n+      desc: 'Find urban services near you',\r\n+      color: '#8b5cf6',\r\n+      details: 'Book home services, repairs, and professional help with verified providers.'\r\n+    }\r\n+  ];\r\n+\r\n+  const handleSearch = (e) => {\r\n+    e.preventDefault();\r\n+    if (searchQuery.trim()) {\r\n+      navigate(`/food?search=${encodeURIComponent(searchQuery)}`);\r\n+    }\r\n+  };\r\n+\r\n+  const toggleDarkMode = () => {\r\n+    setDarkMode(!darkMode);\r\n+  };\r\n+\r\n+  const openServicePopup = (service) => {\r\n+    setSelectedService(service);\r\n+  };\r\n+\r\n+  const closePopup = () => {\r\n+    setSelectedService(null);\r\n+  };\r\n+\r\n+  // Dynamic styles based on dark mode\r\n+  const dynamicStyles = {\r\n+    page: {\r\n+      backgroundColor: darkMode ? '#1a202c' : '#f8fafc',\r\n+      minHeight: '100vh',\r\n+      paddingBottom: '3rem',\r\n+      color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+      transition: 'all 0.3s ease',\r\n+    },\r\n+    hero: {\r\n+      background: darkMode \r\n+        ? 'linear-gradient(135deg, #2d3748 0%, #1a202c 100%)' \r\n+        : 'linear-gradient(135deg, #6b46c1 0%, #3b82f6 100%)',\r\n+      color: 'white',\r\n+      padding: '4rem 1rem',\r\n+      textAlign: 'center',\r\n+      borderRadius: '0 0 20px 20px',\r\n+      boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',\r\n+    },\r\n+    serviceCard: {\r\n+      padding: '2rem 1.5rem',\r\n+      borderRadius: '16px',\r\n+      border: '2px solid',\r\n+      textAlign: 'center',\r\n+      cursor: 'pointer',\r\n+      transition: 'transform 0.3s, box-shadow 0.3s',\r\n+      position: 'relative',\r\n+      overflow: 'hidden',\r\n+      backdropFilter: 'blur(10px)',\r\n+      ':hover': {\r\n+        transform: 'translateY(-5px)',\r\n+        boxShadow: '0 10px 20px rgba(0, 0, 0, 0.1)',\r\n+      },\r\n+    },\r\n+    serviceTitle: {\r\n+      fontSize: '1.5rem',\r\n+      fontWeight: '600',\r\n+      marginBottom: '0.5rem',\r\n+      color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+    },\r\n+    serviceDesc: {\r\n+      color: darkMode ? '#a0aec0' : '#64748b',\r\n+      fontSize: '1rem',\r\n+      lineHeight: '1.5',\r\n+    },\r\n+    sectionTitle: {\r\n+      fontSize: '2rem',\r\n+      fontWeight: '700',\r\n+      marginBottom: '1.5rem',\r\n+      color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+      textAlign: 'center',\r\n+    },\r\n+    quickLinkButton: {\r\n+      padding: '0.75rem 1.5rem',\r\n+      borderRadius: '50px',\r\n+      border: 'none',\r\n+      backgroundColor: darkMode ? '#2d3748' : '#e2e8f0',\r\n+      color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+      fontWeight: '600',\r\n+      cursor: 'pointer',\r\n+      transition: 'all 0.2s',\r\n+      display: 'flex',\r\n+      alignItems: 'center',\r\n+      gap: '0.5rem',\r\n+      fontSize: '1rem',\r\n+      ':hover': {\r\n+        backgroundColor: darkMode ? '#4a5568' : '#cbd5e1',\r\n+        transform: 'scale(1.05)',\r\n+      },\r\n+    },\r\n+    popupOverlay: {\r\n+      position: 'fixed',\r\n+      top: 0,\r\n+      left: 0,\r\n+      right: 0,\r\n+      bottom: 0,\r\n+      backgroundColor: 'rgba(0, 0, 0, 0.7)',\r\n+      display: 'flex',\r\n+      justifyContent: 'center',\r\n+      alignItems: 'center',\r\n+      zIndex: 1000,\r\n+    },\r\n+    popupContent: {\r\n+      backgroundColor: darkMode ? '#2d3748' : 'white',\r\n+      borderRadius: '16px',\r\n+      padding: '2rem',\r\n+      maxWidth: '500px',\r\n+      width: '90%',\r\n+      boxShadow: '0 10px 25px rgba(0, 0, 0, 0.2)',\r\n+      position: 'relative',\r\n+      border: darkMode ? '1px solid #4a5568' : '1px solid #e2e8f0',\r\n+    },\r\n+    popupClose: {\r\n+      position: 'absolute',\r\n+      top: '1rem',\r\n+      right: '1rem',\r\n+      background: 'none',\r\n+      border: 'none',\r\n+      fontSize: '1.5rem',\r\n+      cursor: 'pointer',\r\n+      color: darkMode ? '#a0aec0' : '#64748b',\r\n+    },\r\n+    popupTitle: {\r\n+      fontSize: '1.8rem',\r\n+      fontWeight: '700',\r\n+      marginBottom: '1rem',\r\n+      color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+    },\r\n+    popupDesc: {\r\n+      color: darkMode ? '#a0aec0' : '#64748b',\r\n+      fontSize: '1.1rem',\r\n+      lineHeight: '1.6',\r\n+      marginBottom: '2rem',\r\n+    },\r\n+    popupButton: {\r\n+      padding: '0.75rem 1.5rem',\r\n+      borderRadius: '8px',\r\n+      border: 'none',\r\n+      backgroundColor: darkMode ? '#4a5568' : '#3b82f6',\r\n+      color: 'white',\r\n+      fontWeight: '600',\r\n+      cursor: 'pointer',\r\n+      transition: 'all 0.2s',\r\n+      fontSize: '1rem',\r\n+      ':hover': {\r\n+        backgroundColor: darkMode ? '#5f6b82' : '#2563eb',\r\n+      },\r\n+    },\r\n+  };\r\n+\r\n+  const styles = {\r\n+    ...dynamicStyles,\r\n+    heroContent: {\r\n+      maxWidth: '800px',\r\n+      margin: '0 auto',\r\n+    },\r\n+    title: {\r\n+      fontSize: '3.5rem',\r\n+      fontWeight: '800',\r\n+      marginBottom: '0.5rem',\r\n+      textShadow: '2px 2px 4px rgba(0, 0, 0, 0.2)',\r\n+    },\r\n+    tagline: {\r\n+      fontSize: '1.25rem',\r\n+      marginBottom: '2rem',\r\n+      opacity: 0.9,\r\n+    },\r\n+    searchBox: {\r\n+      display: 'flex',\r\n+      maxWidth: '600px',\r\n+      margin: '0 auto',\r\n+      borderRadius: '50px',\r\n+      overflow: 'hidden',\r\n+      boxShadow: '0 4px 10px rgba(0, 0, 0, 0.2)',\r\n+    },\r\n+    searchInput: {\r\n+      flex: 1,\r\n+      padding: '1rem 1.5rem',\r\n+      border: 'none',\r\n+      fontSize: '1rem',\r\n+      outline: 'none',\r\n+      backgroundColor: darkMode ? '#2d3748' : 'white',\r\n+      color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+    },\r\n+    searchButton: {\r\n+      backgroundColor: darkMode ? '#4a5568' : '#1e40af',\r\n+      color: 'white',\r\n+      border: 'none',\r\n+      padding: '0 1.5rem',\r\n+      cursor: 'pointer',\r\n+      fontSize: '1.25rem',\r\n+      transition: 'background-color 0.2s',\r\n+      ':hover': {\r\n+        backgroundColor: darkMode ? '#5f6b82' : '#1e3a8a',\r\n+      },\r\n+    },\r\n+    section: {\r\n+      padding: '2rem 1rem',\r\n+      maxWidth: '1200px',\r\n+      margin: '0 auto',\r\n+    },\r\n+    servicesGrid: {\r\n+      display: 'grid',\r\n+      gridTemplateColumns: 'repeat(auto-fit, minmax(250px, 1fr))',\r\n+      gap: '1.5rem',\r\n+      marginTop: '1rem',\r\n+    },\r\n+    serviceIcon: {\r\n+      fontSize: '3rem',\r\n+      marginBottom: '1rem',\r\n+    },\r\n+    quickLinks: {\r\n+      display: 'flex',\r\n+      justifyContent: 'center',\r\n+      gap: '1rem',\r\n+      flexWrap: 'wrap',\r\n+    },\r\n+    themeToggle: {\r\n+      position: 'fixed',\r\n+      top: '1.5rem',\r\n+      right: '1.5rem',\r\n+      background: darkMode ? '#4a5568' : '#e2e8f0',\r\n+      border: 'none',\r\n+      borderRadius: '50%',\r\n+      width: '40px',\r\n+      height: '40px',\r\n+      display: 'flex',\r\n+      alignItems: 'center',\r\n+      justifyContent: 'center',\r\n+      cursor: 'pointer',\r\n+      transition: 'all 0.3s ease',\r\n+      boxShadow: '0 2px 5px rgba(0, 0, 0, 0.2)',\r\n+      zIndex: 100,\r\n+      ':hover': {\r\n+        transform: 'scale(1.1)',\r\n+      },\r\n+    },\r\n+  };\r\n+\r\n+  return (\r\n+    <div className=\"home-page\" style={styles.page}>\r\n+      {/* Theme Toggle Button */}\r\n+      <button \r\n+        onClick={toggleDarkMode} \r\n+        style={styles.themeToggle}\r\n+        aria-label={darkMode ? 'Switch to light mode' : 'Switch to dark mode'}\r\n+      >\r\n+        {darkMode ? '‚òÄÔ∏è' : 'üåô'}\r\n+      </button>\r\n+      \r\n+      {/* Hero Section */}\r\n+      <section className=\"hero\" style={styles.hero}>\r\n+        <div className=\"hero-content\" style={styles.heroContent}>\r\n+          <h1 style={styles.title}>UrbanFlow</h1>\r\n+          <p className=\"tagline\" style={styles.tagline}>Your seamless urban living companion</p>\r\n+          \r\n+          <form onSubmit={handleSearch} className=\"search-box\" style={styles.searchBox}>\r\n+            <input\r\n+              type=\"text\"\r\n+              placeholder=\"Search for restaurants, services...\"\r\n+              value={searchQuery}\r\n+              onChange={(e) => setSearchQuery(e.target.value)}\r\n+              style={styles.searchInput}\r\n+            />\r\n+            <button type=\"submit\" style={styles.searchButton}>\r\n+              <span>üîç</span>\r\n+            </button>\r\n+          </form>\r\n+        </div>\r\n+      </section>\r\n+\r\n+      {/* Services Grid */}\r\n+      <section className=\"services-section\" style={styles.section}>\r\n+        <h2 style={styles.sectionTitle}>What do you need today?</h2>\r\n+        <div className=\"services-grid\" style={styles.servicesGrid}>\r\n+          {services.map((service) => (\r\n+            <div \r\n+              key={service.name} \r\n+              className=\"service-card\"\r\n+              style={{ \r\n+                ...styles.serviceCard,\r\n+                backgroundColor: darkMode \r\n+                  ? `${service.color}20` \r\n+                  : `${service.color}10`,\r\n+                borderColor: service.color,\r\n+                '--card-color': service.color\r\n+              }}\r\n+              onClick={() => openServicePopup(service)}\r\n+            >\r\n+              <div className=\"service-icon\" style={styles.serviceIcon}>{service.icon}</div>\r\n+              <h3 style={styles.serviceTitle}>{service.name}</h3>\r\n+              <p style={styles.serviceDesc}>{service.desc}</p>\r\n+              <div className=\"card-hover-effect\"></div>\r\n+            </div>\r\n+          ))}\r\n+        </div>\r\n+      </section>\r\n+\r\n+      {/* Featured Section */}\r\n+      <section className=\"featured-section\" style={styles.section}>\r\n+        <h2 style={styles.sectionTitle}>Quick Access</h2>\r\n+        <div className=\"quick-links\" style={styles.quickLinks}>\r\n+          <button \r\n+            onClick={() => navigate('/transport?from=home&to=downtown')}\r\n+            style={styles.quickLinkButton}\r\n+          >\r\n+            üöï To Downtown\r\n+          </button>\r\n+          <button \r\n+            onClick={() => navigate('/food?category=fastfood')}\r\n+            style={styles.quickLinkButton}\r\n+          >\r\n+            üçü Fast Food\r\n+          </button>\r\n+          <button \r\n+            onClick={() => navigate('/food?category=coffee')}\r\n+            style={styles.quickLinkButton}\r\n+          >\r\n+            ‚òï Coffee Shops\r\n+          </button>\r\n+        </div>\r\n+      </section>\r\n+\r\n+      {/* Service Popup */}\r\n+      {selectedService && (\r\n+        <div style={styles.popupOverlay} onClick={closePopup}>\r\n+          <div style={styles.popupContent} onClick={(e) => e.stopPropagation()}>\r\n+            <button style={styles.popupClose} onClick={closePopup}>√ó</button>\r\n+            <div style={{ \r\n+              display: 'flex', \r\n+              alignItems: 'center', \r\n+              gap: '1rem',\r\n+              marginBottom: '1.5rem'\r\n+            }}>\r\n+              <span style={{ fontSize: '2.5rem' }}>{selectedService.icon}</span>\r\n+              <h3 style={styles.popupTitle}>{selectedService.name}</h3>\r\n+            </div>\r\n+            <p style={styles.popupDesc}>{selectedService.details}</p>\r\n+            <button \r\n+              style={{ \r\n+                ...styles.popupButton,\r\n+                backgroundColor: selectedService.color,\r\n+                ':hover': {\r\n+                  backgroundColor: `${selectedService.color}90`,\r\n+                }\r\n+              }}\r\n+              onClick={() => {\r\n+                navigate(selectedService.path);\r\n+                closePopup();\r\n+              }}\r\n+            >\r\n+              Explore {selectedService.name}\r\n+            </button>\r\n+          </div>\r\n+        </div>\r\n+      )}\r\n+    </div>\r\n+  );\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752649027945,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,587 @@\n+import { useState, useEffect } from 'react';\r\n+import { useNavigate } from 'react-router-dom';\r\n+\r\n+// UrbanBuddy AI Assistant Component\r\n+const UrbanBuddy = ({ darkMode, highlightedService, season }) => {\r\n+  const [position, setPosition] = useState({ x: 20, y: 20 });\r\n+  const [expression, setExpression] = useState('üòä');\r\n+  const [message, setMessage] = useState('Need help exploring the city?');\r\n+  const [direction, setDirection] = useState(1);\r\n+  const [costume, setCostume] = useState(null);\r\n+\r\n+  // Seasonal costumes\r\n+  useEffect(() => {\r\n+    const today = new Date();\r\n+    const month = today.getMonth() + 1;\r\n+    \r\n+    if (month === 12) setCostume('üéÖ'); // Santa hat in December\r\n+    else if (month === 10) setCostume('üéÉ'); // Pumpkin in October\r\n+    else if (month === 2) setCostume('üíù'); // Heart in February\r\n+    else setCostume(null);\r\n+  }, []);\r\n+\r\n+  // Make the bot wander\r\n+  useEffect(() => {\r\n+    const moveInterval = setInterval(() => {\r\n+      setPosition(prev => {\r\n+        let newX = prev.x + (2 * direction);\r\n+        let newY = prev.y + (Math.random() * 4 - 2);\r\n+        \r\n+        // Keep within bounds\r\n+        if (newX > window.innerWidth - 100) setDirection(-1);\r\n+        if (newX < 20) setDirection(1);\r\n+        if (newY < 20) newY = 20;\r\n+        if (newY > 150) newY = 150;\r\n+        \r\n+        return { x: newX, y: newY };\r\n+      });\r\n+    }, 100);\r\n+\r\n+    return () => clearInterval(moveInterval);\r\n+  }, [direction]);\r\n+\r\n+  // React to highlighted service\r\n+  useEffect(() => {\r\n+    if (highlightedService) {\r\n+      setMessage(`Try our ${highlightedService} service!`);\r\n+      setExpression('üëâ');\r\n+    }\r\n+  }, [highlightedService]);\r\n+\r\n+  // Change expressions randomly\r\n+  useEffect(() => {\r\n+    const expressions = ['üòä', 'ü§î', 'üòÆ', 'üòé', 'üëã'];\r\n+    const expressionInterval = setInterval(() => {\r\n+      if (!highlightedService) {\r\n+        setExpression(expressions[Math.floor(Math.random() * expressions.length)]);\r\n+      }\r\n+    }, 3000);\r\n+    return () => clearInterval(expressionInterval);\r\n+  }, [highlightedService]);\r\n+\r\n+  const handleClick = () => {\r\n+    const messages = [\r\n+      \"Try searching for 'sushi'! üç£\",\r\n+      \"Metro delays? I can check! üöá\",\r\n+      \"Tap the transport icon below! üöï\",\r\n+      \"3 coffee shops open near you! ‚òï\"\r\n+    ];\r\n+    setMessage(messages[Math.floor(Math.random() * messages.length)]);\r\n+    setExpression('üí°');\r\n+  };\r\n+\r\n+  return (\r\n+    <div \r\n+      onClick={handleClick}\r\n+      style={{\r\n+        position: 'absolute',\r\n+        left: `${position.x}px`,\r\n+        top: `${position.y}px`,\r\n+        fontSize: '2rem',\r\n+        cursor: 'pointer',\r\n+        transition: 'all 0.5s ease',\r\n+        transform: `scaleX(${direction})`,\r\n+        zIndex: 100,\r\n+        textShadow: darkMode ? '0 0 8px rgba(255,255,255,0.5)' : '0 0 8px rgba(0,0,0,0.2)'\r\n+      }}\r\n+    >\r\n+      <div style={{ position: 'relative' }}>\r\n+        <div>\r\n+          {expression}\r\n+          {costume && <span style={{ position: 'absolute', top: '-15px', left: '15px' }}>{costume}</span>}\r\n+        </div>\r\n+        <div style={{\r\n+          position: 'absolute',\r\n+          top: '-50px',\r\n+          left: '50%',\r\n+          transform: 'translateX(-50%)',\r\n+          background: darkMode ? '#2d3748' : 'white',\r\n+          color: darkMode ? 'white' : '#1e293b',\r\n+          padding: '0.5rem 1rem',\r\n+          borderRadius: '12px',\r\n+          fontSize: '0.8rem',\r\n+          width: 'max-content',\r\n+          maxWidth: '200px',\r\n+          boxShadow: '0 2px 8px rgba(0,0,0,0.1)',\r\n+          opacity: message ? 1 : 0,\r\n+          transition: 'opacity 0.3s'\r\n+        }}>\r\n+          {message}\r\n+        </div>\r\n+      </div>\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+export default function Home() {\r\n+  const navigate = useNavigate();\r\n+  const [searchQuery, setSearchQuery] = useState('');\r\n+  const [darkMode, setDarkMode] = useState(false);\r\n+  const [selectedService, setSelectedService] = useState(null);\r\n+  const [orderCount, setOrderCount] = useState(0);\r\n+  const [achievements, setAchievements] = useState([]);\r\n+  const [highlightedService, setHighlightedService] = useState(null);\r\n+  const [seasonalCostume, setSeasonalCostume] = useState(null);\r\n+\r\n+  const services = [\r\n+    { \r\n+      name: 'Transport', \r\n+      path: '/transport', \r\n+      icon: 'üöå', \r\n+      desc: 'Plan your multi-modal journey across the city',\r\n+      color: '#3b82f6',\r\n+      details: 'Find the best routes combining metro, buses, and bikes. Real-time updates and ticket purchasing available.'\r\n+    },\r\n+    { \r\n+      name: 'Food Delivery', \r\n+      path: '/food', \r\n+      icon: 'üçî', \r\n+      desc: 'Discover local restaurants and cafes',\r\n+      color: '#ef4444',\r\n+      details: 'Order from hundreds of restaurants with special discounts. Track your delivery in real-time.'\r\n+    },\r\n+    { \r\n+      name: 'Groceries', \r\n+      path: '/food', \r\n+      icon: 'üõí', \r\n+      desc: 'Get groceries delivered in minutes',\r\n+      color: '#10b981',\r\n+      details: 'Same-day delivery from local supermarkets. Schedule recurring orders for essentials.'\r\n+    },\r\n+    { \r\n+      name: 'Services', \r\n+      path: '/food', \r\n+      icon: 'üõ†Ô∏è', \r\n+      desc: 'Find urban services near you',\r\n+      color: '#8b5cf6',\r\n+      details: 'Book home services, repairs, and professional help with verified providers.'\r\n+    }\r\n+  ];\r\n+\r\n+  // Check for achievements\r\n+  useEffect(() => {\r\n+    if (orderCount === 1) {\r\n+      addAchievement('First Order!', 'üéâ');\r\n+    } else if (orderCount === 5) {\r\n+      addAchievement('Regular Customer!', 'üèÜ');\r\n+    } else if (orderCount === 10) {\r\n+      addAchievement('Super User!', 'üåü');\r\n+    }\r\n+  }, [orderCount]);\r\n+\r\n+  const addAchievement = (title, icon) => {\r\n+    if (!achievements.some(a => a.title === title)) {\r\n+      const newAchievement = { title, icon, id: Date.now() };\r\n+      setAchievements(prev => [...prev, newAchievement]);\r\n+      \r\n+      // Auto-hide achievement after 3 seconds\r\n+      setTimeout(() => {\r\n+        setAchievements(prev => prev.filter(a => a.id !== newAchievement.id));\r\n+      }, 3000);\r\n+    }\r\n+  };\r\n+\r\n+  const handleSearch = (e) => {\r\n+    e.preventDefault();\r\n+    if (searchQuery.trim()) {\r\n+      navigate(`/food?search=${encodeURIComponent(searchQuery)}`);\r\n+    }\r\n+  };\r\n+\r\n+  const toggleDarkMode = () => {\r\n+    setDarkMode(!darkMode);\r\n+  };\r\n+\r\n+  const openServicePopup = (service) => {\r\n+    setSelectedService(service);\r\n+    setOrderCount(prev => prev + 1);\r\n+  };\r\n+\r\n+  const closePopup = () => {\r\n+    setSelectedService(null);\r\n+  };\r\n+\r\n+  // Dynamic styles based on dark mode\r\n+  const dynamicStyles = {\r\n+    page: {\r\n+      backgroundColor: darkMode ? '#1a202c' : '#f8fafc',\r\n+      minHeight: '100vh',\r\n+      paddingBottom: '3rem',\r\n+      color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+      transition: 'all 0.3s ease',\r\n+    },\r\n+    hero: {\r\n+      background: darkMode \r\n+        ? 'linear-gradient(135deg, #2d3748 0%, #1a202c 100%)' \r\n+        : 'linear-gradient(135deg, #6b46c1 0%, #3b82f6 100%)',\r\n+      color: 'white',\r\n+      padding: '4rem 1rem',\r\n+      textAlign: 'center',\r\n+      borderRadius: '0 0 20px 20px',\r\n+      boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',\r\n+      position: 'relative',\r\n+      overflow: 'hidden',\r\n+      height: '300px'\r\n+    },\r\n+    serviceCard: {\r\n+      padding: '2rem 1.5rem',\r\n+      borderRadius: '16px',\r\n+      border: '2px solid',\r\n+      textAlign: 'center',\r\n+      cursor: 'pointer',\r\n+      transition: 'transform 0.3s, box-shadow 0.3s',\r\n+      position: 'relative',\r\n+      overflow: 'hidden',\r\n+      backdropFilter: 'blur(10px)',\r\n+      ':hover': {\r\n+        transform: 'translateY(-5px)',\r\n+        boxShadow: '0 10px 20px rgba(0, 0, 0, 0.1)',\r\n+      },\r\n+    },\r\n+    serviceIcon: {\r\n+      fontSize: '3rem',\r\n+      marginBottom: '1rem',\r\n+      display: 'inline-block',\r\n+      animation: 'float 3s ease-in-out infinite'\r\n+    },\r\n+    achievement: {\r\n+      position: 'fixed',\r\n+      bottom: '20px',\r\n+      right: '20px',\r\n+      background: darkMode ? '#2d3748' : 'white',\r\n+      color: darkMode ? 'white' : '#1e293b',\r\n+      padding: '1rem',\r\n+      borderRadius: '12px',\r\n+      boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',\r\n+      display: 'flex',\r\n+      alignItems: 'center',\r\n+      gap: '0.5rem',\r\n+      zIndex: 1000,\r\n+      animation: 'slideIn 0.5s forwards, fadeOut 0.5s forwards 2.5s'\r\n+    },\r\n+    popupOverlay: {\r\n+      position: 'fixed',\r\n+      top: 0,\r\n+      left: 0,\r\n+      right: 0,\r\n+      bottom: 0,\r\n+      backgroundColor: 'rgba(0, 0, 0, 0.7)',\r\n+      display: 'flex',\r\n+      justifyContent: 'center',\r\n+      alignItems: 'center',\r\n+      zIndex: 1000,\r\n+    },\r\n+    popupContent: {\r\n+      backgroundColor: darkMode ? '#2d3748' : 'white',\r\n+      borderRadius: '16px',\r\n+      padding: '2rem',\r\n+      maxWidth: '500px',\r\n+      width: '90%',\r\n+      boxShadow: '0 10px 25px rgba(0, 0, 0, 0.2)',\r\n+      position: 'relative',\r\n+      border: darkMode ? '1px solid #4a5568' : '1px solid #e2e8f0',\r\n+    },\r\n+  };\r\n+\r\n+  const styles = {\r\n+    ...dynamicStyles,\r\n+    heroContent: {\r\n+      maxWidth: '800px',\r\n+      margin: '0 auto',\r\n+      position: 'relative',\r\n+      zIndex: 2\r\n+    },\r\n+    title: {\r\n+      fontSize: '3.5rem',\r\n+      fontWeight: '800',\r\n+      marginBottom: '0.5rem',\r\n+      textShadow: '2px 2px 4px rgba(0, 0, 0, 0.2)',\r\n+    },\r\n+    tagline: {\r\n+      fontSize: '1.25rem',\r\n+      marginBottom: '2rem',\r\n+      opacity: 0.9,\r\n+    },\r\n+    searchBox: {\r\n+      display: 'flex',\r\n+      maxWidth: '600px',\r\n+      margin: '0 auto',\r\n+      borderRadius: '50px',\r\n+      overflow: 'hidden',\r\n+      boxShadow: '0 4px 10px rgba(0, 0, 0, 0.2)',\r\n+    },\r\n+    searchInput: {\r\n+      flex: 1,\r\n+      padding: '1rem 1.5rem',\r\n+      border: 'none',\r\n+      fontSize: '1rem',\r\n+      outline: 'none',\r\n+      backgroundColor: darkMode ? '#2d3748' : 'white',\r\n+      color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+    },\r\n+    searchButton: {\r\n+      backgroundColor: darkMode ? '#4a5568' : '#1e40af',\r\n+      color: 'white',\r\n+      border: 'none',\r\n+      padding: '0 1.5rem',\r\n+      cursor: 'pointer',\r\n+      fontSize: '1.25rem',\r\n+      transition: 'background-color 0.2s',\r\n+      ':hover': {\r\n+        backgroundColor: darkMode ? '#5f6b82' : '#1e3a8a',\r\n+      },\r\n+    },\r\n+    section: {\r\n+      padding: '2rem 1rem',\r\n+      maxWidth: '1200px',\r\n+      margin: '0 auto',\r\n+    },\r\n+    servicesGrid: {\r\n+      display: 'grid',\r\n+      gridTemplateColumns: 'repeat(auto-fit, minmax(250px, 1fr))',\r\n+      gap: '1.5rem',\r\n+      marginTop: '1rem',\r\n+    },\r\n+    quickLinks: {\r\n+      display: 'flex',\r\n+      justifyContent: 'center',\r\n+      gap: '1rem',\r\n+      flexWrap: 'wrap',\r\n+    },\r\n+    themeToggle: {\r\n+      position: 'fixed',\r\n+      top: '1.5rem',\r\n+      right: '1.5rem',\r\n+      background: darkMode ? '#4a5568' : '#e2e8f0',\r\n+      border: 'none',\r\n+      borderRadius: '50%',\r\n+      width: '40px',\r\n+      height: '40px',\r\n+      display: 'flex',\r\n+      alignItems: 'center',\r\n+      justifyContent: 'center',\r\n+      cursor: 'pointer',\r\n+      transition: 'all 0.3s ease',\r\n+      boxShadow: '0 2px 5px rgba(0, 0, 0, 0.2)',\r\n+      zIndex: 100,\r\n+      ':hover': {\r\n+        transform: 'scale(1.1)',\r\n+      },\r\n+    },\r\n+  };\r\n+\r\n+  // Add CSS animations\r\n+  const animations = `\r\n+    @keyframes float {\r\n+      0% { transform: translateY(0px); }\r\n+      50% { transform: translateY(-10px); }\r\n+      100% { transform: translateY(0px); }\r\n+    }\r\n+    @keyframes slideIn {\r\n+      from { transform: translateX(100%); }\r\n+      to { transform: translateX(0); }\r\n+    }\r\n+    @keyframes fadeOut {\r\n+      from { opacity: 1; }\r\n+      to { opacity: 0; }\r\n+    }\r\n+  `;\r\n+\r\n+  return (\r\n+    <div className=\"home-page\" style={styles.page}>\r\n+      <style>{animations}</style>\r\n+      \r\n+      {/* Theme Toggle Button */}\r\n+      <button \r\n+        onClick={toggleDarkMode} \r\n+        style={styles.themeToggle}\r\n+        aria-label={darkMode ? 'Switch to light mode' : 'Switch to dark mode'}\r\n+      >\r\n+        {darkMode ? '‚òÄÔ∏è' : 'üåô'}\r\n+      </button>\r\n+      \r\n+      {/* Hero Section with UrbanBuddy */}\r\n+      <section className=\"hero\" style={styles.hero}>\r\n+        <div className=\"hero-content\" style={styles.heroContent}>\r\n+          <h1 style={styles.title}>UrbanFlow</h1>\r\n+          <p className=\"tagline\" style={styles.tagline}>Your seamless urban living companion</p>\r\n+          \r\n+          <form onSubmit={handleSearch} className=\"search-box\" style={styles.searchBox}>\r\n+            <input\r\n+              type=\"text\"\r\n+              placeholder=\"Search for restaurants, services...\"\r\n+              value={searchQuery}\r\n+              onChange={(e) => setSearchQuery(e.target.value)}\r\n+              style={styles.searchInput}\r\n+            />\r\n+            <button type=\"submit\" style={styles.searchButton}>\r\n+              <span>üîç</span>\r\n+            </button>\r\n+          </form>\r\n+        </div>\r\n+        <UrbanBuddy darkMode={darkMode} highlightedService={highlightedService} />\r\n+      </section>\r\n+\r\n+      {/* Services Grid */}\r\n+      <section className=\"services-section\" style={styles.section}>\r\n+        <h2 style={{...styles.sectionTitle, textAlign: 'center'}}>What do you need today?</h2>\r\n+        <div className=\"services-grid\" style={styles.servicesGrid}>\r\n+          {services.map((service) => (\r\n+            <div \r\n+              key={service.name} \r\n+              className=\"service-card\"\r\n+              style={{ \r\n+                ...styles.serviceCard,\r\n+                backgroundColor: darkMode \r\n+                  ? `${service.color}20` \r\n+                  : `${service.color}10`,\r\n+                borderColor: service.color,\r\n+              }}\r\n+              onClick={() => openServicePopup(service)}\r\n+              onMouseEnter={() => setHighlightedService(service.name)}\r\n+              onMouseLeave={() => setHighlightedService(null)}\r\n+            >\r\n+              <div className=\"service-icon\" style={styles.serviceIcon}>{service.icon}</div>\r\n+              <h3 style={{fontSize: '1.5rem', fontWeight: '600', marginBottom: '0.5rem'}}>{service.name}</h3>\r\n+              <p style={{color: darkMode ? '#a0aec0' : '#64748b'}}>{service.desc}</p>\r\n+            </div>\r\n+          ))}\r\n+        </div>\r\n+      </section>\r\n+\r\n+      {/* Featured Section */}\r\n+      <section className=\"featured-section\" style={styles.section}>\r\n+        <h2 style={{...styles.sectionTitle, textAlign: 'center'}}>Quick Access</h2>\r\n+        <div className=\"quick-links\" style={styles.quickLinks}>\r\n+          <button \r\n+            onClick={() => navigate('/transport?from=home&to=downtown')}\r\n+            style={{\r\n+              padding: '0.75rem 1.5rem',\r\n+              borderRadius: '50px',\r\n+              border: 'none',\r\n+              backgroundColor: darkMode ? '#2d3748' : '#e2e8f0',\r\n+              color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+              fontWeight: '600',\r\n+              cursor: 'pointer',\r\n+              transition: 'all 0.2s',\r\n+              display: 'flex',\r\n+              alignItems: 'center',\r\n+              gap: '0.5rem',\r\n+              fontSize: '1rem',\r\n+              ':hover': {\r\n+                backgroundColor: darkMode ? '#4a5568' : '#cbd5e1',\r\n+                transform: 'scale(1.05)',\r\n+              },\r\n+            }}\r\n+          >\r\n+            üöï To Downtown\r\n+          </button>\r\n+          <button \r\n+            onClick={() => navigate('/food?category=fastfood')}\r\n+            style={{\r\n+              padding: '0.75rem 1.5rem',\r\n+              borderRadius: '50px',\r\n+              border: 'none',\r\n+              backgroundColor: darkMode ? '#2d3748' : '#e2e8f0',\r\n+              color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+              fontWeight: '600',\r\n+              cursor: 'pointer',\r\n+              transition: 'all 0.2s',\r\n+              display: 'flex',\r\n+              alignItems: 'center',\r\n+              gap: '0.5rem',\r\n+              fontSize: '1rem',\r\n+              ':hover': {\r\n+                backgroundColor: darkMode ? '#4a5568' : '#cbd5e1',\r\n+                transform: 'scale(1.05)',\r\n+              },\r\n+            }}\r\n+          >\r\n+            üçü Fast Food\r\n+          </button>\r\n+          <button \r\n+            onClick={() => navigate('/food?category=coffee')}\r\n+            style={{\r\n+              padding: '0.75rem 1.5rem',\r\n+              borderRadius: '50px',\r\n+              border: 'none',\r\n+              backgroundColor: darkMode ? '#2d3748' : '#e2e8f0',\r\n+              color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+              fontWeight: '600',\r\n+              cursor: 'pointer',\r\n+              transition: 'all 0.2s',\r\n+              display: 'flex',\r\n+              alignItems: 'center',\r\n+              gap: '0.5rem',\r\n+              fontSize: '1rem',\r\n+              ':hover': {\r\n+                backgroundColor: darkMode ? '#4a5568' : '#cbd5e1',\r\n+                transform: 'scale(1.05)',\r\n+              },\r\n+            }}\r\n+          >\r\n+            ‚òï Coffee Shops\r\n+          </button>\r\n+        </div>\r\n+      </section>\r\n+\r\n+      {/* Service Popup */}\r\n+      {selectedService && (\r\n+        <div style={styles.popupOverlay} onClick={closePopup}>\r\n+          <div style={styles.popupContent} onClick={(e) => e.stopPropagation()}>\r\n+            <button style={{\r\n+              position: 'absolute',\r\n+              top: '1rem',\r\n+              right: '1rem',\r\n+              background: 'none',\r\n+              border: 'none',\r\n+              fontSize: '1.5rem',\r\n+              cursor: 'pointer',\r\n+              color: darkMode ? '#a0aec0' : '#64748b',\r\n+            }} onClick={closePopup}>√ó</button>\r\n+            <div style={{ \r\n+              display: 'flex', \r\n+              alignItems: 'center', \r\n+              gap: '1rem',\r\n+              marginBottom: '1.5rem'\r\n+            }}>\r\n+              <span style={{ fontSize: '2.5rem', animation: 'float 3s ease-in-out infinite' }}>{selectedService.icon}</span>\r\n+              <h3 style={{fontSize: '1.8rem', fontWeight: '700', marginBottom: '1rem', color: darkMode ? '#e2e8f0' : '#1e293b'}}>{selectedService.name}</h3>\r\n+            </div>\r\n+            <p style={{color: darkMode ? '#a0aec0' : '#64748b', fontSize: '1.1rem', lineHeight: '1.6', marginBottom: '2rem'}}>{selectedService.details}</p>\r\n+            <button \r\n+              style={{ \r\n+                padding: '0.75rem 1.5rem',\r\n+                borderRadius: '8px',\r\n+                border: 'none',\r\n+                backgroundColor: selectedService.color,\r\n+                color: 'white',\r\n+                fontWeight: '600',\r\n+                cursor: 'pointer',\r\n+                transition: 'all 0.2s',\r\n+                fontSize: '1rem',\r\n+                ':hover': {\r\n+                  backgroundColor: `${selectedService.color}90`,\r\n+                }\r\n+              }}\r\n+              onClick={() => {\r\n+                navigate(selectedService.path);\r\n+                closePopup();\r\n+              }}\r\n+            >\r\n+              Explore {selectedService.name}\r\n+            </button>\r\n+          </div>\r\n+        </div>\r\n+      )}\r\n+\r\n+      {/* Achievements */}\r\n+      {achievements.map(achievement => (\r\n+        <div key={achievement.id} style={styles.achievement}>\r\n+          <span style={{fontSize: '1.5rem'}}>{achievement.icon}</span>\r\n+          <span>{achievement.title}</span>\r\n+        </div>\r\n+      ))}\r\n+    </div>\r\n+  );\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752649562704,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,23 +1,26 @@\n-import { useState, useEffect } from 'react';\r\n+import { useState, useEffect, useRef } from 'react';\r\n import { useNavigate } from 'react-router-dom';\r\n \r\n // UrbanBuddy AI Assistant Component\r\n-const UrbanBuddy = ({ darkMode, highlightedService, season }) => {\r\n-  const [position, setPosition] = useState({ x: 20, y: 20 });\r\n+const UrbanBuddy = ({ darkMode, onChatOpen }) => {\r\n+  const [position, setPosition] = useState({ x: 20, y: 50 });\r\n   const [expression, setExpression] = useState('üòä');\r\n-  const [message, setMessage] = useState('Need help exploring the city?');\r\n+  const [message, setMessage] = useState('Hi there! Need help? Tap me!');\r\n   const [direction, setDirection] = useState(1);\r\n   const [costume, setCostume] = useState(null);\r\n+  const [isSpeaking, setIsSpeaking] = useState(false);\r\n+  const botRef = useRef(null);\r\n \r\n   // Seasonal costumes\r\n   useEffect(() => {\r\n     const today = new Date();\r\n     const month = today.getMonth() + 1;\r\n     \r\n-    if (month === 12) setCostume('üéÖ'); // Santa hat in December\r\n+    if (month === 12) setCostume('üéÑ'); // Christmas tree in December\r\n     else if (month === 10) setCostume('üéÉ'); // Pumpkin in October\r\n     else if (month === 2) setCostume('üíù'); // Heart in February\r\n+    else if (month === 4) setCostume('üå∏'); // Cherry blossom in April\r\n     else setCostume(null);\r\n   }, []);\r\n \r\n   // Make the bot wander\r\n@@ -27,11 +30,11 @@\n         let newX = prev.x + (2 * direction);\r\n         let newY = prev.y + (Math.random() * 4 - 2);\r\n         \r\n         // Keep within bounds\r\n-        if (newX > window.innerWidth - 100) setDirection(-1);\r\n+        if (newX > window.innerWidth - 80) setDirection(-1);\r\n         if (newX < 20) setDirection(1);\r\n-        if (newY < 20) newY = 20;\r\n+        if (newY < 50) newY = 50;\r\n         if (newY > 150) newY = 150;\r\n         \r\n         return { x: newX, y: newY };\r\n       });\r\n@@ -39,90 +42,285 @@\n \r\n     return () => clearInterval(moveInterval);\r\n   }, [direction]);\r\n \r\n-  // React to highlighted service\r\n-  useEffect(() => {\r\n-    if (highlightedService) {\r\n-      setMessage(`Try our ${highlightedService} service!`);\r\n-      setExpression('üëâ');\r\n-    }\r\n-  }, [highlightedService]);\r\n-\r\n   // Change expressions randomly\r\n   useEffect(() => {\r\n     const expressions = ['üòä', 'ü§î', 'üòÆ', 'üòé', 'üëã'];\r\n     const expressionInterval = setInterval(() => {\r\n-      if (!highlightedService) {\r\n+      if (!isSpeaking) {\r\n         setExpression(expressions[Math.floor(Math.random() * expressions.length)]);\r\n       }\r\n-    }, 3000);\r\n+    }, 5000);\r\n     return () => clearInterval(expressionInterval);\r\n-  }, [highlightedService]);\r\n+  }, [isSpeaking]);\r\n \r\n   const handleClick = () => {\r\n-    const messages = [\r\n-      \"Try searching for 'sushi'! üç£\",\r\n-      \"Metro delays? I can check! üöá\",\r\n-      \"Tap the transport icon below! üöï\",\r\n-      \"3 coffee shops open near you! ‚òï\"\r\n-    ];\r\n-    setMessage(messages[Math.floor(Math.random() * messages.length)]);\r\n-    setExpression('üí°');\r\n+    setIsSpeaking(true);\r\n+    setExpression('üí¨');\r\n+    setMessage(\"Opening chat...\");\r\n+    \r\n+    // Trigger chat opening in parent component\r\n+    onChatOpen();\r\n+    \r\n+    // Return to normal after a delay\r\n+    setTimeout(() => {\r\n+      setIsSpeaking(false);\r\n+      setMessage('Need more help? Tap me!');\r\n+    }, 3000);\r\n   };\r\n \r\n+  // Custom bot icon with better styling\r\n   return (\r\n     <div \r\n+      ref={botRef}\r\n       onClick={handleClick}\r\n       style={{\r\n-        position: 'absolute',\r\n+        position: 'fixed',\r\n         left: `${position.x}px`,\r\n         top: `${position.y}px`,\r\n-        fontSize: '2rem',\r\n+        fontSize: '2.5rem',\r\n         cursor: 'pointer',\r\n         transition: 'all 0.5s ease',\r\n         transform: `scaleX(${direction})`,\r\n         zIndex: 100,\r\n-        textShadow: darkMode ? '0 0 8px rgba(255,255,255,0.5)' : '0 0 8px rgba(0,0,0,0.2)'\r\n+        filter: darkMode ? 'drop-shadow(0 0 8px rgba(255,255,255,0.7))' : 'drop-shadow(0 0 8px rgba(0,0,0,0.3))',\r\n+        userSelect: 'none'\r\n       }}\r\n     >\r\n-      <div style={{ position: 'relative' }}>\r\n-        <div>\r\n-          {expression}\r\n-          {costume && <span style={{ position: 'absolute', top: '-15px', left: '15px' }}>{costume}</span>}\r\n-        </div>\r\n+      <div style={{ \r\n+        position: 'relative',\r\n+        display: 'flex',\r\n+        flexDirection: 'column',\r\n+        alignItems: 'center'\r\n+      }}>\r\n+        {/* Speech bubble */}\r\n         <div style={{\r\n           position: 'absolute',\r\n-          top: '-50px',\r\n+          top: '-70px',\r\n           left: '50%',\r\n           transform: 'translateX(-50%)',\r\n           background: darkMode ? '#2d3748' : 'white',\r\n           color: darkMode ? 'white' : '#1e293b',\r\n           padding: '0.5rem 1rem',\r\n           borderRadius: '12px',\r\n-          fontSize: '0.8rem',\r\n+          fontSize: '0.9rem',\r\n           width: 'max-content',\r\n           maxWidth: '200px',\r\n-          boxShadow: '0 2px 8px rgba(0,0,0,0.1)',\r\n+          boxShadow: '0 2px 8px rgba(0,0,0,0.2)',\r\n           opacity: message ? 1 : 0,\r\n-          transition: 'opacity 0.3s'\r\n+          transition: 'all 0.3s',\r\n+          textAlign: 'center',\r\n+          pointerEvents: 'none'\r\n         }}>\r\n           {message}\r\n+          <div style={{\r\n+            position: 'absolute',\r\n+            bottom: '-10px',\r\n+            left: '50%',\r\n+            marginLeft: '-10px',\r\n+            width: 0,\r\n+            height: 0,\r\n+            borderLeft: '10px solid transparent',\r\n+            borderRight: '10px solid transparent',\r\n+            borderTop: `10px solid ${darkMode ? '#2d3748' : 'white'}`\r\n+          }}></div>\r\n         </div>\r\n+        \r\n+        {/* Bot icon with costume */}\r\n+        <div style={{\r\n+          position: 'relative',\r\n+          width: '60px',\r\n+          height: '60px',\r\n+          backgroundColor: darkMode ? '#4a5568' : '#3b82f6',\r\n+          borderRadius: '50%',\r\n+          display: 'flex',\r\n+          justifyContent: 'center',\r\n+          alignItems: 'center',\r\n+          color: 'white'\r\n+        }}>\r\n+          <span style={{ fontSize: '1.8rem' }}>ü§ñ</span>\r\n+          {costume && (\r\n+            <span style={{\r\n+              position: 'absolute',\r\n+              top: '-15px',\r\n+              right: '-10px',\r\n+              fontSize: '1.5rem',\r\n+              transform: 'rotate(15deg)'\r\n+            }}>\r\n+              {costume}\r\n+            </span>\r\n+          )}\r\n+        </div>\r\n       </div>\r\n     </div>\r\n   );\r\n };\r\n \r\n+// Chat Modal Component\r\n+const ChatModal = ({ darkMode, onClose }) => {\r\n+  const [messages, setMessages] = useState([\r\n+    { text: \"Hello! I'm UrbanBuddy. How can I help you today?\", sender: 'bot' }\r\n+  ]);\r\n+  const [inputValue, setInputValue] = useState('');\r\n+  const chatEndRef = useRef(null);\r\n+\r\n+  const handleSendMessage = (e) => {\r\n+    e.preventDefault();\r\n+    if (inputValue.trim()) {\r\n+      // Add user message\r\n+      setMessages(prev => [...prev, { text: inputValue, sender: 'user' }]);\r\n+      setInputValue('');\r\n+      \r\n+      // Simulate bot response after a delay\r\n+      setTimeout(() => {\r\n+        const responses = [\r\n+          \"I can help you find that! Try searching above.\",\r\n+          \"Great question! Our transport section can help with that.\",\r\n+          \"I'll guide you to the right service for that need.\",\r\n+          \"Tap on the food delivery icon for restaurant options.\"\r\n+        ];\r\n+        setMessages(prev => [...prev, { \r\n+          text: responses[Math.floor(Math.random() * responses.length)], \r\n+          sender: 'bot' \r\n+        }]);\r\n+      }, 1000);\r\n+    }\r\n+  };\r\n+\r\n+  // Auto-scroll to bottom of chat\r\n+  useEffect(() => {\r\n+    chatEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n+  }, [messages]);\r\n+\r\n+  return (\r\n+    <div style={{\r\n+      position: 'fixed',\r\n+      bottom: '100px',\r\n+      right: '30px',\r\n+      width: '350px',\r\n+      maxWidth: '90%',\r\n+      backgroundColor: darkMode ? '#2d3748' : 'white',\r\n+      borderRadius: '16px',\r\n+      boxShadow: '0 10px 25px rgba(0, 0, 0, 0.2)',\r\n+      border: darkMode ? '1px solid #4a5568' : '1px solid #e2e8f0',\r\n+      zIndex: 1000,\r\n+      overflow: 'hidden',\r\n+      display: 'flex',\r\n+      flexDirection: 'column',\r\n+      maxHeight: '60vh'\r\n+    }}>\r\n+      {/* Chat header */}\r\n+      <div style={{\r\n+        padding: '1rem',\r\n+        backgroundColor: darkMode ? '#4a5568' : '#3b82f6',\r\n+        color: 'white',\r\n+        display: 'flex',\r\n+        justifyContent: 'space-between',\r\n+        alignItems: 'center'\r\n+      }}>\r\n+        <div style={{ display: 'flex', alignItems: 'center', gap: '0.5rem' }}>\r\n+          <span style={{ fontSize: '1.5rem' }}>ü§ñ</span>\r\n+          <h3 style={{ margin: 0 }}>UrbanBuddy</h3>\r\n+        </div>\r\n+        <button \r\n+          onClick={onClose}\r\n+          style={{\r\n+            background: 'none',\r\n+            border: 'none',\r\n+            color: 'white',\r\n+            fontSize: '1.2rem',\r\n+            cursor: 'pointer'\r\n+          }}\r\n+        >\r\n+          √ó\r\n+        </button>\r\n+      </div>\r\n+      \r\n+      {/* Chat messages */}\r\n+      <div style={{\r\n+        flex: 1,\r\n+        padding: '1rem',\r\n+        overflowY: 'auto',\r\n+        display: 'flex',\r\n+        flexDirection: 'column',\r\n+        gap: '0.8rem'\r\n+      }}>\r\n+        {messages.map((msg, index) => (\r\n+          <div \r\n+            key={index}\r\n+            style={{\r\n+              alignSelf: msg.sender === 'user' ? 'flex-end' : 'flex-start',\r\n+              maxWidth: '80%',\r\n+              padding: '0.6rem 1rem',\r\n+              borderRadius: msg.sender === 'user' \r\n+                ? '18px 18px 0 18px' \r\n+                : '18px 18px 18px 0',\r\n+              backgroundColor: msg.sender === 'user'\r\n+                ? (darkMode ? '#4a5568' : '#3b82f6')\r\n+                : (darkMode ? '#4a5568' : '#e2e8f0'),\r\n+              color: msg.sender === 'user' ? 'white' : (darkMode ? 'white' : '#1e293b')\r\n+            }}\r\n+          >\r\n+            {msg.text}\r\n+          </div>\r\n+        ))}\r\n+        <div ref={chatEndRef} />\r\n+      </div>\r\n+      \r\n+      {/* Chat input */}\r\n+      <form onSubmit={handleSendMessage} style={{\r\n+        padding: '0.8rem',\r\n+        borderTop: darkMode ? '1px solid #4a5568' : '1px solid #e2e8f0',\r\n+        display: 'flex',\r\n+        gap: '0.5rem'\r\n+      }}>\r\n+        <input\r\n+          type=\"text\"\r\n+          value={inputValue}\r\n+          onChange={(e) => setInputValue(e.target.value)}\r\n+          placeholder=\"Type your question...\"\r\n+          style={{\r\n+            flex: 1,\r\n+            padding: '0.6rem 1rem',\r\n+            borderRadius: '20px',\r\n+            border: darkMode ? '1px solid #4a5568' : '1px solid #e2e8f0',\r\n+            backgroundColor: darkMode ? '#2d3748' : 'white',\r\n+            color: darkMode ? 'white' : '#1e293b',\r\n+            outline: 'none'\r\n+          }}\r\n+        />\r\n+        <button \r\n+          type=\"submit\"\r\n+          style={{\r\n+            background: darkMode ? '#4a5568' : '#3b82f6',\r\n+            color: 'white',\r\n+            border: 'none',\r\n+            borderRadius: '50%',\r\n+            width: '40px',\r\n+            height: '40px',\r\n+            display: 'flex',\r\n+            alignItems: 'center',\r\n+            justifyContent: 'center',\r\n+            cursor: 'pointer'\r\n+          }}\r\n+        >\r\n+          ‚û§\r\n+        </button>\r\n+      </form>\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n export default function Home() {\r\n   const navigate = useNavigate();\r\n   const [searchQuery, setSearchQuery] = useState('');\r\n   const [darkMode, setDarkMode] = useState(false);\r\n   const [selectedService, setSelectedService] = useState(null);\r\n   const [orderCount, setOrderCount] = useState(0);\r\n   const [achievements, setAchievements] = useState([]);\r\n+  const [showChat, setShowChat] = useState(false);\r\n   const [highlightedService, setHighlightedService] = useState(null);\r\n-  const [seasonalCostume, setSeasonalCostume] = useState(null);\r\n \r\n   const services = [\r\n     { \r\n       name: 'Transport', \r\n@@ -200,16 +398,21 @@\n   const closePopup = () => {\r\n     setSelectedService(null);\r\n   };\r\n \r\n-  // Dynamic styles based on dark mode\r\n-  const dynamicStyles = {\r\n+  const toggleChat = () => {\r\n+    setShowChat(!showChat);\r\n+  };\r\n+\r\n+  // Dynamic styles\r\n+  const styles = {\r\n     page: {\r\n       backgroundColor: darkMode ? '#1a202c' : '#f8fafc',\r\n       minHeight: '100vh',\r\n       paddingBottom: '3rem',\r\n       color: darkMode ? '#e2e8f0' : '#1e293b',\r\n       transition: 'all 0.3s ease',\r\n+      position: 'relative'\r\n     },\r\n     hero: {\r\n       background: darkMode \r\n         ? 'linear-gradient(135deg, #2d3748 0%, #1a202c 100%)' \r\n@@ -280,95 +483,15 @@\n       boxShadow: '0 10px 25px rgba(0, 0, 0, 0.2)',\r\n       position: 'relative',\r\n       border: darkMode ? '1px solid #4a5568' : '1px solid #e2e8f0',\r\n     },\r\n-  };\r\n-\r\n-  const styles = {\r\n-    ...dynamicStyles,\r\n-    heroContent: {\r\n-      maxWidth: '800px',\r\n-      margin: '0 auto',\r\n-      position: 'relative',\r\n-      zIndex: 2\r\n-    },\r\n-    title: {\r\n-      fontSize: '3.5rem',\r\n-      fontWeight: '800',\r\n-      marginBottom: '0.5rem',\r\n-      textShadow: '2px 2px 4px rgba(0, 0, 0, 0.2)',\r\n-    },\r\n-    tagline: {\r\n-      fontSize: '1.25rem',\r\n-      marginBottom: '2rem',\r\n-      opacity: 0.9,\r\n-    },\r\n-    searchBox: {\r\n-      display: 'flex',\r\n-      maxWidth: '600px',\r\n-      margin: '0 auto',\r\n-      borderRadius: '50px',\r\n-      overflow: 'hidden',\r\n-      boxShadow: '0 4px 10px rgba(0, 0, 0, 0.2)',\r\n-    },\r\n-    searchInput: {\r\n-      flex: 1,\r\n-      padding: '1rem 1.5rem',\r\n-      border: 'none',\r\n-      fontSize: '1rem',\r\n-      outline: 'none',\r\n-      backgroundColor: darkMode ? '#2d3748' : 'white',\r\n-      color: darkMode ? '#e2e8f0' : '#1e293b',\r\n-    },\r\n-    searchButton: {\r\n-      backgroundColor: darkMode ? '#4a5568' : '#1e40af',\r\n-      color: 'white',\r\n-      border: 'none',\r\n-      padding: '0 1.5rem',\r\n-      cursor: 'pointer',\r\n-      fontSize: '1.25rem',\r\n-      transition: 'background-color 0.2s',\r\n-      ':hover': {\r\n-        backgroundColor: darkMode ? '#5f6b82' : '#1e3a8a',\r\n-      },\r\n-    },\r\n-    section: {\r\n+    footer: {\r\n+      textAlign: 'center',\r\n       padding: '2rem 1rem',\r\n-      maxWidth: '1200px',\r\n-      margin: '0 auto',\r\n-    },\r\n-    servicesGrid: {\r\n-      display: 'grid',\r\n-      gridTemplateColumns: 'repeat(auto-fit, minmax(250px, 1fr))',\r\n-      gap: '1.5rem',\r\n-      marginTop: '1rem',\r\n-    },\r\n-    quickLinks: {\r\n-      display: 'flex',\r\n-      justifyContent: 'center',\r\n-      gap: '1rem',\r\n-      flexWrap: 'wrap',\r\n-    },\r\n-    themeToggle: {\r\n-      position: 'fixed',\r\n-      top: '1.5rem',\r\n-      right: '1.5rem',\r\n-      background: darkMode ? '#4a5568' : '#e2e8f0',\r\n-      border: 'none',\r\n-      borderRadius: '50%',\r\n-      width: '40px',\r\n-      height: '40px',\r\n-      display: 'flex',\r\n-      alignItems: 'center',\r\n-      justifyContent: 'center',\r\n-      cursor: 'pointer',\r\n-      transition: 'all 0.3s ease',\r\n-      boxShadow: '0 2px 5px rgba(0, 0, 0, 0.2)',\r\n-      zIndex: 100,\r\n-      ':hover': {\r\n-        transform: 'scale(1.1)',\r\n-      },\r\n-    },\r\n+      color: darkMode ? '#a0aec0' : '#64748b',\r\n+      fontSize: '0.9rem',\r\n+      marginTop: '2rem'\r\n+    }\r\n   };\r\n \r\n   // Add CSS animations\r\n   const animations = `\r\n@@ -393,44 +516,117 @@\n       \r\n       {/* Theme Toggle Button */}\r\n       <button \r\n         onClick={toggleDarkMode} \r\n-        style={styles.themeToggle}\r\n+        style={{\r\n+          position: 'fixed',\r\n+          top: '1.5rem',\r\n+          right: '1.5rem',\r\n+          background: darkMode ? '#4a5568' : '#e2e8f0',\r\n+          border: 'none',\r\n+          borderRadius: '50%',\r\n+          width: '40px',\r\n+          height: '40px',\r\n+          display: 'flex',\r\n+          alignItems: 'center',\r\n+          justifyContent: 'center',\r\n+          cursor: 'pointer',\r\n+          transition: 'all 0.3s ease',\r\n+          boxShadow: '0 2px 5px rgba(0, 0, 0, 0.2)',\r\n+          zIndex: 100,\r\n+          ':hover': {\r\n+            transform: 'scale(1.1)',\r\n+          },\r\n+        }}\r\n         aria-label={darkMode ? 'Switch to light mode' : 'Switch to dark mode'}\r\n       >\r\n         {darkMode ? '‚òÄÔ∏è' : 'üåô'}\r\n       </button>\r\n       \r\n       {/* Hero Section with UrbanBuddy */}\r\n       <section className=\"hero\" style={styles.hero}>\r\n-        <div className=\"hero-content\" style={styles.heroContent}>\r\n-          <h1 style={styles.title}>UrbanFlow</h1>\r\n-          <p className=\"tagline\" style={styles.tagline}>Your seamless urban living companion</p>\r\n+        <div style={{\r\n+          maxWidth: '800px',\r\n+          margin: '0 auto',\r\n+          position: 'relative',\r\n+          zIndex: 2\r\n+        }}>\r\n+          <h1 style={{\r\n+            fontSize: '3.5rem',\r\n+            fontWeight: '800',\r\n+            marginBottom: '0.5rem',\r\n+            textShadow: '2px 2px 4px rgba(0, 0, 0, 0.2)',\r\n+          }}>UrbanFlow</h1>\r\n+          <p style={{\r\n+            fontSize: '1.25rem',\r\n+            marginBottom: '2rem',\r\n+            opacity: 0.9,\r\n+          }}>Your seamless urban living companion</p>\r\n           \r\n-          <form onSubmit={handleSearch} className=\"search-box\" style={styles.searchBox}>\r\n+          <form onSubmit={handleSearch} style={{\r\n+            display: 'flex',\r\n+            maxWidth: '600px',\r\n+            margin: '0 auto',\r\n+            borderRadius: '50px',\r\n+            overflow: 'hidden',\r\n+            boxShadow: '0 4px 10px rgba(0, 0, 0, 0.2)',\r\n+          }}>\r\n             <input\r\n               type=\"text\"\r\n               placeholder=\"Search for restaurants, services...\"\r\n               value={searchQuery}\r\n               onChange={(e) => setSearchQuery(e.target.value)}\r\n-              style={styles.searchInput}\r\n+              style={{\r\n+                flex: 1,\r\n+                padding: '1rem 1.5rem',\r\n+                border: 'none',\r\n+                fontSize: '1rem',\r\n+                outline: 'none',\r\n+                backgroundColor: darkMode ? '#2d3748' : 'white',\r\n+                color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+              }}\r\n             />\r\n-            <button type=\"submit\" style={styles.searchButton}>\r\n+            <button type=\"submit\" style={{\r\n+              backgroundColor: darkMode ? '#4a5568' : '#1e40af',\r\n+              color: 'white',\r\n+              border: 'none',\r\n+              padding: '0 1.5rem',\r\n+              cursor: 'pointer',\r\n+              fontSize: '1.25rem',\r\n+              transition: 'background-color 0.2s',\r\n+              ':hover': {\r\n+                backgroundColor: darkMode ? '#5f6b82' : '#1e3a8a',\r\n+              },\r\n+            }}>\r\n               <span>üîç</span>\r\n             </button>\r\n           </form>\r\n         </div>\r\n-        <UrbanBuddy darkMode={darkMode} highlightedService={highlightedService} />\r\n+        <UrbanBuddy darkMode={darkMode} onChatOpen={toggleChat} />\r\n       </section>\r\n \r\n       {/* Services Grid */}\r\n-      <section className=\"services-section\" style={styles.section}>\r\n-        <h2 style={{...styles.sectionTitle, textAlign: 'center'}}>What do you need today?</h2>\r\n-        <div className=\"services-grid\" style={styles.servicesGrid}>\r\n+      <section style={{\r\n+        padding: '2rem 1rem',\r\n+        maxWidth: '1200px',\r\n+        margin: '0 auto',\r\n+      }}>\r\n+        <h2 style={{\r\n+          fontSize: '2rem',\r\n+          fontWeight: '700',\r\n+          marginBottom: '1.5rem',\r\n+          color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+          textAlign: 'center',\r\n+        }}>What do you need today?</h2>\r\n+        <div style={{\r\n+          display: 'grid',\r\n+          gridTemplateColumns: 'repeat(auto-fit, minmax(250px, 1fr))',\r\n+          gap: '1.5rem',\r\n+          marginTop: '1rem',\r\n+        }}>\r\n           {services.map((service) => (\r\n             <div \r\n               key={service.name} \r\n-              className=\"service-card\"\r\n               style={{ \r\n                 ...styles.serviceCard,\r\n                 backgroundColor: darkMode \r\n                   ? `${service.color}20` \r\n@@ -440,20 +636,35 @@\n               onClick={() => openServicePopup(service)}\r\n               onMouseEnter={() => setHighlightedService(service.name)}\r\n               onMouseLeave={() => setHighlightedService(null)}\r\n             >\r\n-              <div className=\"service-icon\" style={styles.serviceIcon}>{service.icon}</div>\r\n+              <div style={styles.serviceIcon}>{service.icon}</div>\r\n               <h3 style={{fontSize: '1.5rem', fontWeight: '600', marginBottom: '0.5rem'}}>{service.name}</h3>\r\n               <p style={{color: darkMode ? '#a0aec0' : '#64748b'}}>{service.desc}</p>\r\n             </div>\r\n           ))}\r\n         </div>\r\n       </section>\r\n \r\n       {/* Featured Section */}\r\n-      <section className=\"featured-section\" style={styles.section}>\r\n-        <h2 style={{...styles.sectionTitle, textAlign: 'center'}}>Quick Access</h2>\r\n-        <div className=\"quick-links\" style={styles.quickLinks}>\r\n+      <section style={{\r\n+        padding: '2rem 1rem',\r\n+        maxWidth: '1200px',\r\n+        margin: '0 auto',\r\n+      }}>\r\n+        <h2 style={{\r\n+          fontSize: '2rem',\r\n+          fontWeight: '700',\r\n+          marginBottom: '1.5rem',\r\n+          color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+          textAlign: 'center',\r\n+        }}>Quick Access</h2>\r\n+        <div style={{\r\n+          display: 'flex',\r\n+          justifyContent: 'center',\r\n+          gap: '1rem',\r\n+          flexWrap: 'wrap',\r\n+        }}>\r\n           <button \r\n             onClick={() => navigate('/transport?from=home&to=downtown')}\r\n             style={{\r\n               padding: '0.75rem 1.5rem',\r\n@@ -581,7 +792,15 @@\n           <span style={{fontSize: '1.5rem'}}>{achievement.icon}</span>\r\n           <span>{achievement.title}</span>\r\n         </div>\r\n       ))}\r\n+\r\n+      {/* Chat Modal */}\r\n+      {showChat && <ChatModal darkMode={darkMode} onClose={toggleChat} />}\r\n+\r\n+      {/* Footer with copyright */}\r\n+      <footer style={styles.footer}>\r\n+        <p>¬© {new Date().getFullYear()} UrbanFlow - Created by Nick</p>\r\n+      </footer>\r\n     </div>\r\n   );\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752650545475,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,195 +4,264 @@\n // UrbanBuddy AI Assistant Component\r\n const UrbanBuddy = ({ darkMode, onChatOpen }) => {\r\n   const [position, setPosition] = useState({ x: 20, y: 50 });\r\n   const [expression, setExpression] = useState('üòä');\r\n-  const [message, setMessage] = useState('Hi there! Need help? Tap me!');\r\n   const [direction, setDirection] = useState(1);\r\n   const [costume, setCostume] = useState(null);\r\n-  const [isSpeaking, setIsSpeaking] = useState(false);\r\n+  const [isActive, setIsActive] = useState(false);\r\n   const botRef = useRef(null);\r\n+  const animationRef = useRef(null);\r\n+  const lastInteractionTime = useRef(Date.now());\r\n \r\n   // Seasonal costumes\r\n   useEffect(() => {\r\n     const today = new Date();\r\n     const month = today.getMonth() + 1;\r\n     \r\n-    if (month === 12) setCostume('üéÑ'); // Christmas tree in December\r\n-    else if (month === 10) setCostume('üéÉ'); // Pumpkin in October\r\n-    else if (month === 2) setCostume('üíù'); // Heart in February\r\n-    else if (month === 4) setCostume('üå∏'); // Cherry blossom in April\r\n+    if (month === 12) setCostume('üéÑ');\r\n+    else if (month === 10) setCostume('üéÉ');\r\n+    else if (month === 2) setCostume('üíù');\r\n+    else if (month === 4) setCostume('üå∏');\r\n     else setCostume(null);\r\n   }, []);\r\n \r\n-  // Make the bot wander\r\n+  // Make the bot wander with more dynamic movement\r\n   useEffect(() => {\r\n     const moveInterval = setInterval(() => {\r\n       setPosition(prev => {\r\n-        let newX = prev.x + (2 * direction);\r\n-        let newY = prev.y + (Math.random() * 4 - 2);\r\n+        const now = Date.now();\r\n+        const timeSinceLastInteraction = now - lastInteractionTime.current;\r\n         \r\n-        // Keep within bounds\r\n-        if (newX > window.innerWidth - 80) setDirection(-1);\r\n-        if (newX < 20) setDirection(1);\r\n-        if (newY < 50) newY = 50;\r\n-        if (newY > 150) newY = 150;\r\n+        // More active movement right after interaction\r\n+        const speedMultiplier = timeSinceLastInteraction < 5000 ? 2 : 1;\r\n         \r\n+        let newX = prev.x + (3 * direction * speedMultiplier);\r\n+        let newY = prev.y + (Math.random() * 6 - 3);\r\n+        \r\n+        // Bounce off edges\r\n+        if (newX > window.innerWidth - 80) {\r\n+          setDirection(-1);\r\n+          triggerAnimation('spin');\r\n+        }\r\n+        if (newX < 20) {\r\n+          setDirection(1);\r\n+          triggerAnimation('spin');\r\n+        }\r\n+        if (newY < 20) newY = 20;\r\n+        if (newY > window.innerHeight - 100) newY = window.innerHeight - 100;\r\n+        \r\n         return { x: newX, y: newY };\r\n       });\r\n     }, 100);\r\n \r\n     return () => clearInterval(moveInterval);\r\n   }, [direction]);\r\n \r\n-  // Change expressions randomly\r\n+  // Change expressions randomly with more variety\r\n   useEffect(() => {\r\n-    const expressions = ['üòä', 'ü§î', 'üòÆ', 'üòé', 'üëã'];\r\n+    const expressions = ['üòä', 'ü§î', 'üòÆ', 'üòé', 'üëã', 'ü§ñ', '‚ú®', 'üåü'];\r\n     const expressionInterval = setInterval(() => {\r\n-      if (!isSpeaking) {\r\n+      if (!isActive) {\r\n         setExpression(expressions[Math.floor(Math.random() * expressions.length)]);\r\n+        // Random animations when idle\r\n+        if (Math.random() > 0.8) {\r\n+          triggerAnimation(['bounce', 'spin', 'wobble'][Math.floor(Math.random() * 3)]);\r\n+        }\r\n       }\r\n-    }, 5000);\r\n+    }, 3000);\r\n     return () => clearInterval(expressionInterval);\r\n-  }, [isSpeaking]);\r\n+  }, [isActive]);\r\n \r\n+  const triggerAnimation = (type) => {\r\n+    if (animationRef.current) {\r\n+      clearTimeout(animationRef.current);\r\n+    }\r\n+    \r\n+    const botElement = botRef.current;\r\n+    if (!botElement) return;\r\n+    \r\n+    botElement.style.animation = 'none';\r\n+    void botElement.offsetWidth; // Trigger reflow\r\n+    \r\n+    switch(type) {\r\n+      case 'spin':\r\n+        botElement.style.animation = 'spin 1s ease';\r\n+        break;\r\n+      case 'bounce':\r\n+        botElement.style.animation = 'bounce 0.5s ease';\r\n+        break;\r\n+      case 'wobble':\r\n+        botElement.style.animation = 'wobble 0.8s ease';\r\n+        break;\r\n+      default:\r\n+        botElement.style.animation = '';\r\n+    }\r\n+    \r\n+    animationRef.current = setTimeout(() => {\r\n+      if (botElement) botElement.style.animation = '';\r\n+    }, 1000);\r\n+  };\r\n+\r\n   const handleClick = () => {\r\n-    setIsSpeaking(true);\r\n-    setExpression('üí¨');\r\n-    setMessage(\"Opening chat...\");\r\n+    lastInteractionTime.current = Date.now();\r\n+    setIsActive(true);\r\n+    triggerAnimation('bounce');\r\n+    setExpression('üí°');\r\n     \r\n     // Trigger chat opening in parent component\r\n     onChatOpen();\r\n     \r\n     // Return to normal after a delay\r\n     setTimeout(() => {\r\n-      setIsSpeaking(false);\r\n-      setMessage('Need more help? Tap me!');\r\n+      setIsActive(false);\r\n     }, 3000);\r\n   };\r\n \r\n-  // Custom bot icon with better styling\r\n+  // Custom animations\r\n+  const animations = `\r\n+    @keyframes spin {\r\n+      0% { transform: rotate(0deg) scaleX(${direction}); }\r\n+      100% { transform: rotate(360deg) scaleX(${direction}); }\r\n+    }\r\n+    @keyframes bounce {\r\n+      0%, 100% { transform: translateY(0) scaleX(${direction}); }\r\n+      50% { transform: translateY(-20px) scaleX(${direction}); }\r\n+    }\r\n+    @keyframes wobble {\r\n+      0%, 100% { transform: rotate(0deg) scaleX(${direction}); }\r\n+      25% { transform: rotate(5deg) scaleX(${direction}); }\r\n+      75% { transform: rotate(-5deg) scaleX(${direction}); }\r\n+    }\r\n+    @keyframes float {\r\n+      0% { transform: translateY(0px) scaleX(${direction}); }\r\n+      50% { transform: translateY(-10px) scaleX(${direction}); }\r\n+      100% { transform: translateY(0px) scaleX(${direction}); }\r\n+    }\r\n+  `;\r\n+\r\n   return (\r\n-    <div \r\n-      ref={botRef}\r\n-      onClick={handleClick}\r\n-      style={{\r\n-        position: 'fixed',\r\n-        left: `${position.x}px`,\r\n-        top: `${position.y}px`,\r\n-        fontSize: '2.5rem',\r\n-        cursor: 'pointer',\r\n-        transition: 'all 0.5s ease',\r\n-        transform: `scaleX(${direction})`,\r\n-        zIndex: 100,\r\n-        filter: darkMode ? 'drop-shadow(0 0 8px rgba(255,255,255,0.7))' : 'drop-shadow(0 0 8px rgba(0,0,0,0.3))',\r\n-        userSelect: 'none'\r\n-      }}\r\n-    >\r\n-      <div style={{ \r\n-        position: 'relative',\r\n-        display: 'flex',\r\n-        flexDirection: 'column',\r\n-        alignItems: 'center'\r\n-      }}>\r\n-        {/* Speech bubble */}\r\n-        <div style={{\r\n-          position: 'absolute',\r\n-          top: '-70px',\r\n-          left: '50%',\r\n-          transform: 'translateX(-50%)',\r\n-          background: darkMode ? '#2d3748' : 'white',\r\n-          color: darkMode ? 'white' : '#1e293b',\r\n-          padding: '0.5rem 1rem',\r\n-          borderRadius: '12px',\r\n-          fontSize: '0.9rem',\r\n-          width: 'max-content',\r\n-          maxWidth: '200px',\r\n-          boxShadow: '0 2px 8px rgba(0,0,0,0.2)',\r\n-          opacity: message ? 1 : 0,\r\n-          transition: 'all 0.3s',\r\n-          textAlign: 'center',\r\n-          pointerEvents: 'none'\r\n-        }}>\r\n-          {message}\r\n-          <div style={{\r\n-            position: 'absolute',\r\n-            bottom: '-10px',\r\n-            left: '50%',\r\n-            marginLeft: '-10px',\r\n-            width: 0,\r\n-            height: 0,\r\n-            borderLeft: '10px solid transparent',\r\n-            borderRight: '10px solid transparent',\r\n-            borderTop: `10px solid ${darkMode ? '#2d3748' : 'white'}`\r\n-          }}></div>\r\n-        </div>\r\n-        \r\n-        {/* Bot icon with costume */}\r\n-        <div style={{\r\n+    <>\r\n+      <style>{animations}</style>\r\n+      <div \r\n+        ref={botRef}\r\n+        onClick={handleClick}\r\n+        style={{\r\n+          position: 'fixed',\r\n+          left: `${position.x}px`,\r\n+          top: `${position.y}px`,\r\n+          fontSize: '2.5rem',\r\n+          cursor: 'pointer',\r\n+          transition: 'all 0.3s ease',\r\n+          transform: `scaleX(${direction})`,\r\n+          zIndex: 100,\r\n+          filter: darkMode \r\n+            ? 'drop-shadow(0 0 8px rgba(255,255,255,0.7))' \r\n+            : 'drop-shadow(0 0 8px rgba(0,0,0,0.3))',\r\n+          userSelect: 'none',\r\n+          animation: 'float 4s ease-in-out infinite'\r\n+        }}\r\n+      >\r\n+        <div style={{ \r\n           position: 'relative',\r\n-          width: '60px',\r\n-          height: '60px',\r\n-          backgroundColor: darkMode ? '#4a5568' : '#3b82f6',\r\n-          borderRadius: '50%',\r\n           display: 'flex',\r\n-          justifyContent: 'center',\r\n-          alignItems: 'center',\r\n-          color: 'white'\r\n+          flexDirection: 'column',\r\n+          alignItems: 'center'\r\n         }}>\r\n-          <span style={{ fontSize: '1.8rem' }}>ü§ñ</span>\r\n-          {costume && (\r\n-            <span style={{\r\n-              position: 'absolute',\r\n-              top: '-15px',\r\n-              right: '-10px',\r\n-              fontSize: '1.5rem',\r\n-              transform: 'rotate(15deg)'\r\n-            }}>\r\n-              {costume}\r\n-            </span>\r\n-          )}\r\n+          {/* Bot icon with costume */}\r\n+          <div style={{\r\n+            position: 'relative',\r\n+            width: '60px',\r\n+            height: '60px',\r\n+            backgroundColor: darkMode ? '#4a5568' : '#3b82f6',\r\n+            borderRadius: '50%',\r\n+            display: 'flex',\r\n+            justifyContent: 'center',\r\n+            alignItems: 'center',\r\n+            color: 'white'\r\n+          }}>\r\n+            <span style={{ fontSize: '1.8rem' }}>{expression}</span>\r\n+            {costume && (\r\n+              <span style={{\r\n+                position: 'absolute',\r\n+                top: '-15px',\r\n+                right: '-10px',\r\n+                fontSize: '1.5rem',\r\n+                transform: 'rotate(15deg)'\r\n+              }}>\r\n+                {costume}\r\n+              </span>\r\n+            )}\r\n+          </div>\r\n         </div>\r\n       </div>\r\n-    </div>\r\n+    </>\r\n   );\r\n };\r\n \r\n-// Chat Modal Component\r\n+// Chat Modal Component with Direct Gemini API Connection\r\n const ChatModal = ({ darkMode, onClose }) => {\r\n   const [messages, setMessages] = useState([\r\n-    { text: \"Hello! I'm UrbanBuddy. How can I help you today?\", sender: 'bot' }\r\n+    { text: \"Hello! I'm UrbanBuddy, your AI assistant powered by Gemini. How can I help you with urban living today?\", sender: 'bot' }\r\n   ]);\r\n   const [inputValue, setInputValue] = useState('');\r\n+  const [isTyping, setIsTyping] = useState(false);\r\n   const chatEndRef = useRef(null);\r\n+  const inputRef = useRef(null);\r\n \r\n-  const handleSendMessage = (e) => {\r\n+  // Auto-scroll to bottom and focus input\r\n+  useEffect(() => {\r\n+    chatEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n+    inputRef.current?.focus();\r\n+  }, [messages]);\r\n+\r\n+  // Direct API call to Gemini through a proxy\r\n+  const generateResponse = async (userMessage) => {\r\n+    setIsTyping(true);\r\n+    \r\n+    try {\r\n+      // Using a public AI API gateway (no API key needed)\r\n+      const response = await fetch('https://gemini-proxy.vercel.app/api/generate', {\r\n+        method: \"POST\",\r\n+        headers: { \r\n+          \"Content-Type\": \"application/json\",\r\n+        },\r\n+        body: JSON.stringify({\r\n+          prompt: `You are UrbanBuddy, a friendly AI assistant for urban living. \r\n+          Respond to this query about city life: ${userMessage}\r\n+          Keep responses concise (1-2 sentences) and helpful.`\r\n+        })\r\n+      });\r\n+      \r\n+      const data = await response.json();\r\n+      \r\n+      setMessages(prev => [...prev, { \r\n+        text: data.response || \"I'm here to help with urban living questions!\", \r\n+        sender: 'bot' \r\n+      }]);\r\n+    } catch (error) {\r\n+      console.error(\"API error:\", error);\r\n+      setMessages(prev => [...prev, { \r\n+        text: \"I'm having trouble connecting right now. Try again later!\", \r\n+        sender: 'bot' \r\n+      }]);\r\n+    } finally {\r\n+      setIsTyping(false);\r\n+    }\r\n+  };\r\n+\r\n+  const handleSendMessage = async (e) => {\r\n     e.preventDefault();\r\n-    if (inputValue.trim()) {\r\n+    if (inputValue.trim() && !isTyping) {\r\n       // Add user message\r\n-      setMessages(prev => [...prev, { text: inputValue, sender: 'user' }]);\r\n+      const userMessage = inputValue.trim();\r\n+      setMessages(prev => [...prev, { text: userMessage, sender: 'user' }]);\r\n       setInputValue('');\r\n       \r\n-      // Simulate bot response after a delay\r\n-      setTimeout(() => {\r\n-        const responses = [\r\n-          \"I can help you find that! Try searching above.\",\r\n-          \"Great question! Our transport section can help with that.\",\r\n-          \"I'll guide you to the right service for that need.\",\r\n-          \"Tap on the food delivery icon for restaurant options.\"\r\n-        ];\r\n-        setMessages(prev => [...prev, { \r\n-          text: responses[Math.floor(Math.random() * responses.length)], \r\n-          sender: 'bot' \r\n-        }]);\r\n-      }, 1000);\r\n+      // Generate AI response\r\n+      await generateResponse(userMessage);\r\n     }\r\n   };\r\n \r\n-  // Auto-scroll to bottom of chat\r\n-  useEffect(() => {\r\n-    chatEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n-  }, [messages]);\r\n-\r\n   return (\r\n     <div style={{\r\n       position: 'fixed',\r\n       bottom: '100px',\r\n@@ -219,9 +288,16 @@\n         alignItems: 'center'\r\n       }}>\r\n         <div style={{ display: 'flex', alignItems: 'center', gap: '0.5rem' }}>\r\n           <span style={{ fontSize: '1.5rem' }}>ü§ñ</span>\r\n-          <h3 style={{ margin: 0 }}>UrbanBuddy</h3>\r\n+          <h3 style={{ margin: 0 }}>UrbanBuddy AI</h3>\r\n+          {isTyping && (\r\n+            <span style={{ \r\n+              fontSize: '0.8rem',\r\n+              marginLeft: '0.5rem',\r\n+              opacity: 0.8\r\n+            }}>typing...</span>\r\n+          )}\r\n         </div>\r\n         <button \r\n           onClick={onClose}\r\n           style={{\r\n@@ -257,9 +333,12 @@\n                 : '18px 18px 18px 0',\r\n               backgroundColor: msg.sender === 'user'\r\n                 ? (darkMode ? '#4a5568' : '#3b82f6')\r\n                 : (darkMode ? '#4a5568' : '#e2e8f0'),\r\n-              color: msg.sender === 'user' ? 'white' : (darkMode ? 'white' : '#1e293b')\r\n+              color: msg.sender === 'user' ? 'white' : (darkMode ? 'white' : '#1e293b'),\r\n+              animation: msg.sender === 'bot' && index === messages.length - 1 \r\n+                ? 'fadeIn 0.3s ease' \r\n+                : 'none'\r\n             }}\r\n           >\r\n             {msg.text}\r\n           </div>\r\n@@ -274,53 +353,59 @@\n         display: 'flex',\r\n         gap: '0.5rem'\r\n       }}>\r\n         <input\r\n+          ref={inputRef}\r\n           type=\"text\"\r\n           value={inputValue}\r\n           onChange={(e) => setInputValue(e.target.value)}\r\n-          placeholder=\"Type your question...\"\r\n+          placeholder=\"Ask me about urban living...\"\r\n+          disabled={isTyping}\r\n           style={{\r\n             flex: 1,\r\n             padding: '0.6rem 1rem',\r\n             borderRadius: '20px',\r\n             border: darkMode ? '1px solid #4a5568' : '1px solid #e2e8f0',\r\n             backgroundColor: darkMode ? '#2d3748' : 'white',\r\n             color: darkMode ? 'white' : '#1e293b',\r\n-            outline: 'none'\r\n+            outline: 'none',\r\n+            opacity: isTyping ? 0.7 : 1\r\n           }}\r\n         />\r\n         <button \r\n           type=\"submit\"\r\n+          disabled={isTyping}\r\n           style={{\r\n-            background: darkMode ? '#4a5568' : '#3b82f6',\r\n+            background: isTyping \r\n+              ? (darkMode ? '#4a5568' : '#e2e8f0')\r\n+              : (darkMode ? '#4a5568' : '#3b82f6'),\r\n             color: 'white',\r\n             border: 'none',\r\n             borderRadius: '50%',\r\n             width: '40px',\r\n             height: '40px',\r\n             display: 'flex',\r\n             alignItems: 'center',\r\n             justifyContent: 'center',\r\n-            cursor: 'pointer'\r\n+            cursor: isTyping ? 'not-allowed' : 'pointer'\r\n           }}\r\n         >\r\n-          ‚û§\r\n+          {isTyping ? '...' : '‚û§'}\r\n         </button>\r\n       </form>\r\n     </div>\r\n   );\r\n };\r\n \r\n+// Main Home Component\r\n export default function Home() {\r\n   const navigate = useNavigate();\r\n   const [searchQuery, setSearchQuery] = useState('');\r\n   const [darkMode, setDarkMode] = useState(false);\r\n   const [selectedService, setSelectedService] = useState(null);\r\n   const [orderCount, setOrderCount] = useState(0);\r\n   const [achievements, setAchievements] = useState([]);\r\n   const [showChat, setShowChat] = useState(false);\r\n-  const [highlightedService, setHighlightedService] = useState(null);\r\n \r\n   const services = [\r\n     { \r\n       name: 'Transport', \r\n@@ -402,119 +487,17 @@\n   const toggleChat = () => {\r\n     setShowChat(!showChat);\r\n   };\r\n \r\n-  // Dynamic styles\r\n-  const styles = {\r\n-    page: {\r\n+  return (\r\n+    <div style={{\r\n       backgroundColor: darkMode ? '#1a202c' : '#f8fafc',\r\n       minHeight: '100vh',\r\n       paddingBottom: '3rem',\r\n       color: darkMode ? '#e2e8f0' : '#1e293b',\r\n       transition: 'all 0.3s ease',\r\n       position: 'relative'\r\n-    },\r\n-    hero: {\r\n-      background: darkMode \r\n-        ? 'linear-gradient(135deg, #2d3748 0%, #1a202c 100%)' \r\n-        : 'linear-gradient(135deg, #6b46c1 0%, #3b82f6 100%)',\r\n-      color: 'white',\r\n-      padding: '4rem 1rem',\r\n-      textAlign: 'center',\r\n-      borderRadius: '0 0 20px 20px',\r\n-      boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',\r\n-      position: 'relative',\r\n-      overflow: 'hidden',\r\n-      height: '300px'\r\n-    },\r\n-    serviceCard: {\r\n-      padding: '2rem 1.5rem',\r\n-      borderRadius: '16px',\r\n-      border: '2px solid',\r\n-      textAlign: 'center',\r\n-      cursor: 'pointer',\r\n-      transition: 'transform 0.3s, box-shadow 0.3s',\r\n-      position: 'relative',\r\n-      overflow: 'hidden',\r\n-      backdropFilter: 'blur(10px)',\r\n-      ':hover': {\r\n-        transform: 'translateY(-5px)',\r\n-        boxShadow: '0 10px 20px rgba(0, 0, 0, 0.1)',\r\n-      },\r\n-    },\r\n-    serviceIcon: {\r\n-      fontSize: '3rem',\r\n-      marginBottom: '1rem',\r\n-      display: 'inline-block',\r\n-      animation: 'float 3s ease-in-out infinite'\r\n-    },\r\n-    achievement: {\r\n-      position: 'fixed',\r\n-      bottom: '20px',\r\n-      right: '20px',\r\n-      background: darkMode ? '#2d3748' : 'white',\r\n-      color: darkMode ? 'white' : '#1e293b',\r\n-      padding: '1rem',\r\n-      borderRadius: '12px',\r\n-      boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',\r\n-      display: 'flex',\r\n-      alignItems: 'center',\r\n-      gap: '0.5rem',\r\n-      zIndex: 1000,\r\n-      animation: 'slideIn 0.5s forwards, fadeOut 0.5s forwards 2.5s'\r\n-    },\r\n-    popupOverlay: {\r\n-      position: 'fixed',\r\n-      top: 0,\r\n-      left: 0,\r\n-      right: 0,\r\n-      bottom: 0,\r\n-      backgroundColor: 'rgba(0, 0, 0, 0.7)',\r\n-      display: 'flex',\r\n-      justifyContent: 'center',\r\n-      alignItems: 'center',\r\n-      zIndex: 1000,\r\n-    },\r\n-    popupContent: {\r\n-      backgroundColor: darkMode ? '#2d3748' : 'white',\r\n-      borderRadius: '16px',\r\n-      padding: '2rem',\r\n-      maxWidth: '500px',\r\n-      width: '90%',\r\n-      boxShadow: '0 10px 25px rgba(0, 0, 0, 0.2)',\r\n-      position: 'relative',\r\n-      border: darkMode ? '1px solid #4a5568' : '1px solid #e2e8f0',\r\n-    },\r\n-    footer: {\r\n-      textAlign: 'center',\r\n-      padding: '2rem 1rem',\r\n-      color: darkMode ? '#a0aec0' : '#64748b',\r\n-      fontSize: '0.9rem',\r\n-      marginTop: '2rem'\r\n-    }\r\n-  };\r\n-\r\n-  // Add CSS animations\r\n-  const animations = `\r\n-    @keyframes float {\r\n-      0% { transform: translateY(0px); }\r\n-      50% { transform: translateY(-10px); }\r\n-      100% { transform: translateY(0px); }\r\n-    }\r\n-    @keyframes slideIn {\r\n-      from { transform: translateX(100%); }\r\n-      to { transform: translateX(0); }\r\n-    }\r\n-    @keyframes fadeOut {\r\n-      from { opacity: 1; }\r\n-      to { opacity: 0; }\r\n-    }\r\n-  `;\r\n-\r\n-  return (\r\n-    <div className=\"home-page\" style={styles.page}>\r\n-      <style>{animations}</style>\r\n-      \r\n+    }}>\r\n       {/* Theme Toggle Button */}\r\n       <button \r\n         onClick={toggleDarkMode} \r\n         style={{\r\n@@ -531,20 +514,29 @@\n           justifyContent: 'center',\r\n           cursor: 'pointer',\r\n           transition: 'all 0.3s ease',\r\n           boxShadow: '0 2px 5px rgba(0, 0, 0, 0.2)',\r\n-          zIndex: 100,\r\n-          ':hover': {\r\n-            transform: 'scale(1.1)',\r\n-          },\r\n+          zIndex: 100\r\n         }}\r\n         aria-label={darkMode ? 'Switch to light mode' : 'Switch to dark mode'}\r\n       >\r\n         {darkMode ? '‚òÄÔ∏è' : 'üåô'}\r\n       </button>\r\n       \r\n       {/* Hero Section with UrbanBuddy */}\r\n-      <section className=\"hero\" style={styles.hero}>\r\n+      <section style={{\r\n+        background: darkMode \r\n+          ? 'linear-gradient(135deg, #2d3748 0%, #1a202c 100%)' \r\n+          : 'linear-gradient(135deg, #6b46c1 0%, #3b82f6 100%)',\r\n+        color: 'white',\r\n+        padding: '4rem 1rem',\r\n+        textAlign: 'center',\r\n+        borderRadius: '0 0 20px 20px',\r\n+        boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',\r\n+        position: 'relative',\r\n+        overflow: 'hidden',\r\n+        height: '300px'\r\n+      }}>\r\n         <div style={{\r\n           maxWidth: '800px',\r\n           margin: '0 auto',\r\n           position: 'relative',\r\n@@ -591,12 +583,9 @@\n               border: 'none',\r\n               padding: '0 1.5rem',\r\n               cursor: 'pointer',\r\n               fontSize: '1.25rem',\r\n-              transition: 'background-color 0.2s',\r\n-              ':hover': {\r\n-                backgroundColor: darkMode ? '#5f6b82' : '#1e3a8a',\r\n-              },\r\n+              transition: 'background-color 0.2s'\r\n             }}>\r\n               <span>üîç</span>\r\n             </button>\r\n           </form>\r\n@@ -626,19 +615,30 @@\n           {services.map((service) => (\r\n             <div \r\n               key={service.name} \r\n               style={{ \r\n-                ...styles.serviceCard,\r\n+                padding: '2rem 1.5rem',\r\n+                borderRadius: '16px',\r\n+                border: `2px solid ${service.color}`,\r\n+                textAlign: 'center',\r\n+                cursor: 'pointer',\r\n+                transition: 'transform 0.3s, box-shadow 0.3s',\r\n                 backgroundColor: darkMode \r\n                   ? `${service.color}20` \r\n                   : `${service.color}10`,\r\n-                borderColor: service.color,\r\n+                ':hover': {\r\n+                  transform: 'translateY(-5px)',\r\n+                  boxShadow: '0 10px 20px rgba(0, 0, 0, 0.1)',\r\n+                }\r\n               }}\r\n               onClick={() => openServicePopup(service)}\r\n-              onMouseEnter={() => setHighlightedService(service.name)}\r\n-              onMouseLeave={() => setHighlightedService(null)}\r\n             >\r\n-              <div style={styles.serviceIcon}>{service.icon}</div>\r\n+              <div style={{ \r\n+                fontSize: '3rem',\r\n+                marginBottom: '1rem',\r\n+                display: 'inline-block',\r\n+                animation: 'float 3s ease-in-out infinite'\r\n+              }}>{service.icon}</div>\r\n               <h3 style={{fontSize: '1.5rem', fontWeight: '600', marginBottom: '0.5rem'}}>{service.name}</h3>\r\n               <p style={{color: darkMode ? '#a0aec0' : '#64748b'}}>{service.desc}</p>\r\n             </div>\r\n           ))}\r\n@@ -677,13 +677,9 @@\n               transition: 'all 0.2s',\r\n               display: 'flex',\r\n               alignItems: 'center',\r\n               gap: '0.5rem',\r\n-              fontSize: '1rem',\r\n-              ':hover': {\r\n-                backgroundColor: darkMode ? '#4a5568' : '#cbd5e1',\r\n-                transform: 'scale(1.05)',\r\n-              },\r\n+              fontSize: '1rem'\r\n             }}\r\n           >\r\n             üöï To Downtown\r\n           </button>\r\n@@ -700,13 +696,9 @@\n               transition: 'all 0.2s',\r\n               display: 'flex',\r\n               alignItems: 'center',\r\n               gap: '0.5rem',\r\n-              fontSize: '1rem',\r\n-              ':hover': {\r\n-                backgroundColor: darkMode ? '#4a5568' : '#cbd5e1',\r\n-                transform: 'scale(1.05)',\r\n-              },\r\n+              fontSize: '1rem'\r\n             }}\r\n           >\r\n             üçü Fast Food\r\n           </button>\r\n@@ -723,13 +715,9 @@\n               transition: 'all 0.2s',\r\n               display: 'flex',\r\n               alignItems: 'center',\r\n               gap: '0.5rem',\r\n-              fontSize: '1rem',\r\n-              ':hover': {\r\n-                backgroundColor: darkMode ? '#4a5568' : '#cbd5e1',\r\n-                transform: 'scale(1.05)',\r\n-              },\r\n+              fontSize: '1rem'\r\n             }}\r\n           >\r\n             ‚òï Coffee Shops\r\n           </button>\r\n@@ -737,10 +725,30 @@\n       </section>\r\n \r\n       {/* Service Popup */}\r\n       {selectedService && (\r\n-        <div style={styles.popupOverlay} onClick={closePopup}>\r\n-          <div style={styles.popupContent} onClick={(e) => e.stopPropagation()}>\r\n+        <div style={{\r\n+          position: 'fixed',\r\n+          top: 0,\r\n+          left: 0,\r\n+          right: 0,\r\n+          bottom: 0,\r\n+          backgroundColor: 'rgba(0, 0, 0, 0.7)',\r\n+          display: 'flex',\r\n+          justifyContent: 'center',\r\n+          alignItems: 'center',\r\n+          zIndex: 1000,\r\n+        }} onClick={closePopup}>\r\n+          <div style={{\r\n+            backgroundColor: darkMode ? '#2d3748' : 'white',\r\n+            borderRadius: '16px',\r\n+            padding: '2rem',\r\n+            maxWidth: '500px',\r\n+            width: '90%',\r\n+            boxShadow: '0 10px 25px rgba(0, 0, 0, 0.2)',\r\n+            position: 'relative',\r\n+            border: darkMode ? '1px solid #4a5568' : '1px solid #e2e8f0',\r\n+          }} onClick={(e) => e.stopPropagation()}>\r\n             <button style={{\r\n               position: 'absolute',\r\n               top: '1rem',\r\n               right: '1rem',\r\n@@ -769,12 +777,9 @@\n                 color: 'white',\r\n                 fontWeight: '600',\r\n                 cursor: 'pointer',\r\n                 transition: 'all 0.2s',\r\n-                fontSize: '1rem',\r\n-                ':hover': {\r\n-                  backgroundColor: `${selectedService.color}90`,\r\n-                }\r\n+                fontSize: '1rem'\r\n               }}\r\n               onClick={() => {\r\n                 navigate(selectedService.path);\r\n                 closePopup();\r\n@@ -787,9 +792,23 @@\n       )}\r\n \r\n       {/* Achievements */}\r\n       {achievements.map(achievement => (\r\n-        <div key={achievement.id} style={styles.achievement}>\r\n+        <div key={achievement.id} style={{\r\n+          position: 'fixed',\r\n+          bottom: '20px',\r\n+          right: '20px',\r\n+          background: darkMode ? '#2d3748' : 'white',\r\n+          color: darkMode ? 'white' : '#1e293b',\r\n+          padding: '1rem',\r\n+          borderRadius: '12px',\r\n+          boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',\r\n+          display: 'flex',\r\n+          alignItems: 'center',\r\n+          gap: '0.5rem',\r\n+          zIndex: 1000,\r\n+          animation: 'slideIn 0.5s forwards, fadeOut 0.5s forwards 2.5s'\r\n+        }}>\r\n           <span style={{fontSize: '1.5rem'}}>{achievement.icon}</span>\r\n           <span>{achievement.title}</span>\r\n         </div>\r\n       ))}\r\n@@ -797,814 +816,16 @@\n       {/* Chat Modal */}\r\n       {showChat && <ChatModal darkMode={darkMode} onClose={toggleChat} />}\r\n \r\n       {/* Footer with copyright */}\r\n-      <footer style={styles.footer}>\r\n+      <footer style={{\r\n+        textAlign: 'center',\r\n+        padding: '2rem 1rem',\r\n+        color: darkMode ? '#a0aec0' : '#64748b',\r\n+        fontSize: '0.9rem',\r\n+        marginTop: '2rem'\r\n+      }}>\r\n         <p>¬© {new Date().getFullYear()} UrbanFlow - Created by Nick</p>\r\n       </footer>\r\n     </div>\r\n   );\r\n-}\n-import { useState } from 'react';\r\n-import { useNavigate } from 'react-router-dom';\r\n-\r\n-export default function Home() {\r\n-  const navigate = useNavigate();\r\n-  const [searchQuery, setSearchQuery] = useState('');\r\n-  const [darkMode, setDarkMode] = useState(false);\r\n-  const [selectedService, setSelectedService] = useState(null);\r\n-\r\n-  const services = [\r\n-    { \r\n-      name: 'Transport', \r\n-      path: '/transport', \r\n-      icon: 'üöå', \r\n-      desc: 'Plan your multi-modal journey across the city',\r\n-      color: '#3b82f6',\r\n-      details: 'Find the best routes combining metro, buses, and bikes. Real-time updates and ticket purchasing available.'\r\n-    },\r\n-    { \r\n-      name: 'Food Delivery', \r\n-      path: '/food', \r\n-      icon: 'üçî', \r\n-      desc: 'Discover local restaurants and cafes',\r\n-      color: '#ef4444',\r\n-      details: 'Order from hundreds of restaurants with special discounts. Track your delivery in real-time.'\r\n-    },\r\n-    { \r\n-      name: 'Groceries', \r\n-      path: '/food', \r\n-      icon: 'üõí', \r\n-      desc: 'Get groceries delivered in minutes',\r\n-      color: '#10b981',\r\n-      details: 'Same-day delivery from local supermarkets. Schedule recurring orders for essentials.'\r\n-    },\r\n-    { \r\n-      name: 'Services', \r\n-      path: '/food', \r\n-      icon: 'üõ†Ô∏è', \r\n-      desc: 'Find urban services near you',\r\n-      color: '#8b5cf6',\r\n-      details: 'Book home services, repairs, and professional help with verified providers.'\r\n-    }\r\n-  ];\r\n-\r\n-  const handleSearch = (e) => {\r\n-    e.preventDefault();\r\n-    if (searchQuery.trim()) {\r\n-      navigate(`/food?search=${encodeURIComponent(searchQuery)}`);\r\n-    }\r\n-  };\r\n-\r\n-  const toggleDarkMode = () => {\r\n-    setDarkMode(!darkMode);\r\n-  };\r\n-\r\n-  const openServicePopup = (service) => {\r\n-    setSelectedService(service);\r\n-  };\r\n-\r\n-  const closePopup = () => {\r\n-    setSelectedService(null);\r\n-  };\r\n-\r\n-  // Dynamic styles based on dark mode\r\n-  const dynamicStyles = {\r\n-    page: {\r\n-      backgroundColor: darkMode ? '#1a202c' : '#f8fafc',\r\n-      minHeight: '100vh',\r\n-      paddingBottom: '3rem',\r\n-      color: darkMode ? '#e2e8f0' : '#1e293b',\r\n-      transition: 'all 0.3s ease',\r\n-    },\r\n-    hero: {\r\n-      background: darkMode \r\n-        ? 'linear-gradient(135deg, #2d3748 0%, #1a202c 100%)' \r\n-        : 'linear-gradient(135deg, #6b46c1 0%, #3b82f6 100%)',\r\n-      color: 'white',\r\n-      padding: '4rem 1rem',\r\n-      textAlign: 'center',\r\n-      borderRadius: '0 0 20px 20px',\r\n-      boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',\r\n-    },\r\n-    serviceCard: {\r\n-      padding: '2rem 1.5rem',\r\n-      borderRadius: '16px',\r\n-      border: '2px solid',\r\n-      textAlign: 'center',\r\n-      cursor: 'pointer',\r\n-      transition: 'transform 0.3s, box-shadow 0.3s',\r\n-      position: 'relative',\r\n-      overflow: 'hidden',\r\n-      backdropFilter: 'blur(10px)',\r\n-      ':hover': {\r\n-        transform: 'translateY(-5px)',\r\n-        boxShadow: '0 10px 20px rgba(0, 0, 0, 0.1)',\r\n-      },\r\n-    },\r\n-    serviceTitle: {\r\n-      fontSize: '1.5rem',\r\n-      fontWeight: '600',\r\n-      marginBottom: '0.5rem',\r\n-      color: darkMode ? '#e2e8f0' : '#1e293b',\r\n-    },\r\n-    serviceDesc: {\r\n-      color: darkMode ? '#a0aec0' : '#64748b',\r\n-      fontSize: '1rem',\r\n-      lineHeight: '1.5',\r\n-    },\r\n-    sectionTitle: {\r\n-      fontSize: '2rem',\r\n-      fontWeight: '700',\r\n-      marginBottom: '1.5rem',\r\n-      color: darkMode ? '#e2e8f0' : '#1e293b',\r\n-      textAlign: 'center',\r\n-    },\r\n-    quickLinkButton: {\r\n-      padding: '0.75rem 1.5rem',\r\n-      borderRadius: '50px',\r\n-      border: 'none',\r\n-      backgroundColor: darkMode ? '#2d3748' : '#e2e8f0',\r\n-      color: darkMode ? '#e2e8f0' : '#1e293b',\r\n-      fontWeight: '600',\r\n-      cursor: 'pointer',\r\n-      transition: 'all 0.2s',\r\n-      display: 'flex',\r\n-      alignItems: 'center',\r\n-      gap: '0.5rem',\r\n-      fontSize: '1rem',\r\n-      ':hover': {\r\n-        backgroundColor: darkMode ? '#4a5568' : '#cbd5e1',\r\n-        transform: 'scale(1.05)',\r\n-      },\r\n-    },\r\n-    popupOverlay: {\r\n-      position: 'fixed',\r\n-      top: 0,\r\n-      left: 0,\r\n-      right: 0,\r\n-      bottom: 0,\r\n-      backgroundColor: 'rgba(0, 0, 0, 0.7)',\r\n-      display: 'flex',\r\n-      justifyContent: 'center',\r\n-      alignItems: 'center',\r\n-      zIndex: 1000,\r\n-    },\r\n-    popupContent: {\r\n-      backgroundColor: darkMode ? '#2d3748' : 'white',\r\n-      borderRadius: '16px',\r\n-      padding: '2rem',\r\n-      maxWidth: '500px',\r\n-      width: '90%',\r\n-      boxShadow: '0 10px 25px rgba(0, 0, 0, 0.2)',\r\n-      position: 'relative',\r\n-      border: darkMode ? '1px solid #4a5568' : '1px solid #e2e8f0',\r\n-    },\r\n-    popupClose: {\r\n-      position: 'absolute',\r\n-      top: '1rem',\r\n-      right: '1rem',\r\n-      background: 'none',\r\n-      border: 'none',\r\n-      fontSize: '1.5rem',\r\n-      cursor: 'pointer',\r\n-      color: darkMode ? '#a0aec0' : '#64748b',\r\n-    },\r\n-    popupTitle: {\r\n-      fontSize: '1.8rem',\r\n-      fontWeight: '700',\r\n-      marginBottom: '1rem',\r\n-      color: darkMode ? '#e2e8f0' : '#1e293b',\r\n-    },\r\n-    popupDesc: {\r\n-      color: darkMode ? '#a0aec0' : '#64748b',\r\n-      fontSize: '1.1rem',\r\n-      lineHeight: '1.6',\r\n-      marginBottom: '2rem',\r\n-    },\r\n-    popupButton: {\r\n-      padding: '0.75rem 1.5rem',\r\n-      borderRadius: '8px',\r\n-      border: 'none',\r\n-      backgroundColor: darkMode ? '#4a5568' : '#3b82f6',\r\n-      color: 'white',\r\n-      fontWeight: '600',\r\n-      cursor: 'pointer',\r\n-      transition: 'all 0.2s',\r\n-      fontSize: '1rem',\r\n-      ':hover': {\r\n-        backgroundColor: darkMode ? '#5f6b82' : '#2563eb',\r\n-      },\r\n-    },\r\n-  };\r\n-\r\n-  const styles = {\r\n-    ...dynamicStyles,\r\n-    heroContent: {\r\n-      maxWidth: '800px',\r\n-      margin: '0 auto',\r\n-    },\r\n-    title: {\r\n-      fontSize: '3.5rem',\r\n-      fontWeight: '800',\r\n-      marginBottom: '0.5rem',\r\n-      textShadow: '2px 2px 4px rgba(0, 0, 0, 0.2)',\r\n-    },\r\n-    tagline: {\r\n-      fontSize: '1.25rem',\r\n-      marginBottom: '2rem',\r\n-      opacity: 0.9,\r\n-    },\r\n-    searchBox: {\r\n-      display: 'flex',\r\n-      maxWidth: '600px',\r\n-      margin: '0 auto',\r\n-      borderRadius: '50px',\r\n-      overflow: 'hidden',\r\n-      boxShadow: '0 4px 10px rgba(0, 0, 0, 0.2)',\r\n-    },\r\n-    searchInput: {\r\n-      flex: 1,\r\n-      padding: '1rem 1.5rem',\r\n-      border: 'none',\r\n-      fontSize: '1rem',\r\n-      outline: 'none',\r\n-      backgroundColor: darkMode ? '#2d3748' : 'white',\r\n-      color: darkMode ? '#e2e8f0' : '#1e293b',\r\n-    },\r\n-    searchButton: {\r\n-      backgroundColor: darkMode ? '#4a5568' : '#1e40af',\r\n-      color: 'white',\r\n-      border: 'none',\r\n-      padding: '0 1.5rem',\r\n-      cursor: 'pointer',\r\n-      fontSize: '1.25rem',\r\n-      transition: 'background-color 0.2s',\r\n-      ':hover': {\r\n-        backgroundColor: darkMode ? '#5f6b82' : '#1e3a8a',\r\n-      },\r\n-    },\r\n-    section: {\r\n-      padding: '2rem 1rem',\r\n-      maxWidth: '1200px',\r\n-      margin: '0 auto',\r\n-    },\r\n-    servicesGrid: {\r\n-      display: 'grid',\r\n-      gridTemplateColumns: 'repeat(auto-fit, minmax(250px, 1fr))',\r\n-      gap: '1.5rem',\r\n-      marginTop: '1rem',\r\n-    },\r\n-    serviceIcon: {\r\n-      fontSize: '3rem',\r\n-      marginBottom: '1rem',\r\n-    },\r\n-    quickLinks: {\r\n-      display: 'flex',\r\n-      justifyContent: 'center',\r\n-      gap: '1rem',\r\n-      flexWrap: 'wrap',\r\n-    },\r\n-    themeToggle: {\r\n-      position: 'fixed',\r\n-      top: '1.5rem',\r\n-      right: '1.5rem',\r\n-      background: darkMode ? '#4a5568' : '#e2e8f0',\r\n-      border: 'none',\r\n-      borderRadius: '50%',\r\n-      width: '40px',\r\n-      height: '40px',\r\n-      display: 'flex',\r\n-      alignItems: 'center',\r\n-      justifyContent: 'center',\r\n-      cursor: 'pointer',\r\n-      transition: 'all 0.3s ease',\r\n-      boxShadow: '0 2px 5px rgba(0, 0, 0, 0.2)',\r\n-      zIndex: 100,\r\n-      ':hover': {\r\n-        transform: 'scale(1.1)',\r\n-      },\r\n-    },\r\n-  };\r\n-\r\n-  return (\r\n-    <div className=\"home-page\" style={styles.page}>\r\n-      {/* Theme Toggle Button */}\r\n-      <button \r\n-        onClick={toggleDarkMode} \r\n-        style={styles.themeToggle}\r\n-        aria-label={darkMode ? 'Switch to light mode' : 'Switch to dark mode'}\r\n-      >\r\n-        {darkMode ? '‚òÄÔ∏è' : 'üåô'}\r\n-      </button>\r\n-      \r\n-      {/* Hero Section */}\r\n-      <section className=\"hero\" style={styles.hero}>\r\n-        <div className=\"hero-content\" style={styles.heroContent}>\r\n-          <h1 style={styles.title}>UrbanFlow</h1>\r\n-          <p className=\"tagline\" style={styles.tagline}>Your seamless urban living companion</p>\r\n-          \r\n-          <form onSubmit={handleSearch} className=\"search-box\" style={styles.searchBox}>\r\n-            <input\r\n-              type=\"text\"\r\n-              placeholder=\"Search for restaurants, services...\"\r\n-              value={searchQuery}\r\n-              onChange={(e) => setSearchQuery(e.target.value)}\r\n-              style={styles.searchInput}\r\n-            />\r\n-            <button type=\"submit\" style={styles.searchButton}>\r\n-              <span>üîç</span>\r\n-            </button>\r\n-          </form>\r\n-        </div>\r\n-      </section>\r\n-\r\n-      {/* Services Grid */}\r\n-      <section className=\"services-section\" style={styles.section}>\r\n-        <h2 style={styles.sectionTitle}>What do you need today?</h2>\r\n-        <div className=\"services-grid\" style={styles.servicesGrid}>\r\n-          {services.map((service) => (\r\n-            <div \r\n-              key={service.name} \r\n-              className=\"service-card\"\r\n-              style={{ \r\n-                ...styles.serviceCard,\r\n-                backgroundColor: darkMode \r\n-                  ? `${service.color}20` \r\n-                  : `${service.color}10`,\r\n-                borderColor: service.color,\r\n-                '--card-color': service.color\r\n-              }}\r\n-              onClick={() => openServicePopup(service)}\r\n-            >\r\n-              <div className=\"service-icon\" style={styles.serviceIcon}>{service.icon}</div>\r\n-              <h3 style={styles.serviceTitle}>{service.name}</h3>\r\n-              <p style={styles.serviceDesc}>{service.desc}</p>\r\n-              <div className=\"card-hover-effect\"></div>\r\n-            </div>\r\n-          ))}\r\n-        </div>\r\n-      </section>\r\n-\r\n-      {/* Featured Section */}\r\n-      <section className=\"featured-section\" style={styles.section}>\r\n-        <h2 style={styles.sectionTitle}>Quick Access</h2>\r\n-        <div className=\"quick-links\" style={styles.quickLinks}>\r\n-          <button \r\n-            onClick={() => navigate('/transport?from=home&to=downtown')}\r\n-            style={styles.quickLinkButton}\r\n-          >\r\n-            üöï To Downtown\r\n-          </button>\r\n-          <button \r\n-            onClick={() => navigate('/food?category=fastfood')}\r\n-            style={styles.quickLinkButton}\r\n-          >\r\n-            üçü Fast Food\r\n-          </button>\r\n-          <button \r\n-            onClick={() => navigate('/food?category=coffee')}\r\n-            style={styles.quickLinkButton}\r\n-          >\r\n-            ‚òï Coffee Shops\r\n-          </button>\r\n-        </div>\r\n-      </section>\r\n-\r\n-      {/* Service Popup */}\r\n-      {selectedService && (\r\n-        <div style={styles.popupOverlay} onClick={closePopup}>\r\n-          <div style={styles.popupContent} onClick={(e) => e.stopPropagation()}>\r\n-            <button style={styles.popupClose} onClick={closePopup}>√ó</button>\r\n-            <div style={{ \r\n-              display: 'flex', \r\n-              alignItems: 'center', \r\n-              gap: '1rem',\r\n-              marginBottom: '1.5rem'\r\n-            }}>\r\n-              <span style={{ fontSize: '2.5rem' }}>{selectedService.icon}</span>\r\n-              <h3 style={styles.popupTitle}>{selectedService.name}</h3>\r\n-            </div>\r\n-            <p style={styles.popupDesc}>{selectedService.details}</p>\r\n-            <button \r\n-              style={{ \r\n-                ...styles.popupButton,\r\n-                backgroundColor: selectedService.color,\r\n-                ':hover': {\r\n-                  backgroundColor: `${selectedService.color}90`,\r\n-                }\r\n-              }}\r\n-              onClick={() => {\r\n-                navigate(selectedService.path);\r\n-                closePopup();\r\n-              }}\r\n-            >\r\n-              Explore {selectedService.name}\r\n-            </button>\r\n-          </div>\r\n-        </div>\r\n-      )}\r\n-    </div>\r\n-  );\r\n-}\n-import { useState } from 'react';\r\n-import { useNavigate } from 'react-router-dom';\r\n-\r\n-export default function Home() {\r\n-  const navigate = useNavigate();\r\n-  const [searchQuery, setSearchQuery] = useState('');\r\n-  const [darkMode, setDarkMode] = useState(false);\r\n-  const [selectedService, setSelectedService] = useState(null);\r\n-\r\n-  const services = [\r\n-    { \r\n-      name: 'Transport', \r\n-      path: '/transport', \r\n-      icon: 'üöå', \r\n-      desc: 'Plan your multi-modal journey across the city',\r\n-      color: '#3b82f6',\r\n-      details: 'Find the best routes combining metro, buses, and bikes. Real-time updates and ticket purchasing available.'\r\n-    },\r\n-    { \r\n-      name: 'Food Delivery', \r\n-      path: '/food', \r\n-      icon: 'üçî', \r\n-      desc: 'Discover local restaurants and cafes',\r\n-      color: '#ef4444',\r\n-      details: 'Order from hundreds of restaurants with special discounts. Track your delivery in real-time.'\r\n-    },\r\n-    { \r\n-      name: 'Groceries', \r\n-      path: '/food', \r\n-      icon: 'üõí', \r\n-      desc: 'Get groceries delivered in minutes',\r\n-      color: '#10b981',\r\n-      details: 'Same-day delivery from local supermarkets. Schedule recurring orders for essentials.'\r\n-    },\r\n-    { \r\n-      name: 'Services', \r\n-      path: '/food', \r\n-      icon: 'üõ†Ô∏è', \r\n-      desc: 'Find urban services near you',\r\n-      color: '#8b5cf6',\r\n-      details: 'Book home services, repairs, and professional help with verified providers.'\r\n-    }\r\n-  ];\r\n-\r\n-  const handleSearch = (e) => {\r\n-    e.preventDefault();\r\n-    if (searchQuery.trim()) {\r\n-      navigate(`/food?search=${encodeURIComponent(searchQuery)}`);\r\n-    }\r\n-  };\r\n-\r\n-  const toggleDarkMode = () => {\r\n-    setDarkMode(!darkMode);\r\n-  };\r\n-\r\n-  const openServicePopup = (service) => {\r\n-    setSelectedService(service);\r\n-  };\r\n-\r\n-  const closePopup = () => {\r\n-    setSelectedService(null);\r\n-  };\r\n-\r\n-  // Dynamic styles based on dark mode\r\n-  const dynamicStyles = {\r\n-    page: {\r\n-      backgroundColor: darkMode ? '#1a202c' : '#f8fafc',\r\n-      minHeight: '100vh',\r\n-      paddingBottom: '3rem',\r\n-      color: darkMode ? '#e2e8f0' : '#1e293b',\r\n-      transition: 'all 0.3s ease',\r\n-    },\r\n-    hero: {\r\n-      background: darkMode \r\n-        ? 'linear-gradient(135deg, #2d3748 0%, #1a202c 100%)' \r\n-        : 'linear-gradient(135deg, #6b46c1 0%, #3b82f6 100%)',\r\n-      color: 'white',\r\n-      padding: '4rem 1rem',\r\n-      textAlign: 'center',\r\n-      borderRadius: '0 0 20px 20px',\r\n-      boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',\r\n-    },\r\n-    serviceCard: {\r\n-      padding: '2rem 1.5rem',\r\n-      borderRadius: '16px',\r\n-      border: '2px solid',\r\n-      textAlign: 'center',\r\n-      cursor: 'pointer',\r\n-      transition: 'transform 0.3s, box-shadow 0.3s',\r\n-      position: 'relative',\r\n-      overflow: 'hidden',\r\n-      backdropFilter: 'blur(10px)',\r\n-      ':hover': {\r\n-        transform: 'translateY(-5px)',\r\n-        boxShadow: '0 10px 20px rgba(0, 0, 0, 0.1)',\r\n-      },\r\n-    },\r\n-    serviceTitle: {\r\n-      fontSize: '1.5rem',\r\n-      fontWeight: '600',\r\n-      marginBottom: '0.5rem',\r\n-      color: darkMode ? '#e2e8f0' : '#1e293b',\r\n-    },\r\n-    serviceDesc: {\r\n-      color: darkMode ? '#a0aec0' : '#64748b',\r\n-      fontSize: '1rem',\r\n-      lineHeight: '1.5',\r\n-    },\r\n-    sectionTitle: {\r\n-      fontSize: '2rem',\r\n-      fontWeight: '700',\r\n-      marginBottom: '1.5rem',\r\n-      color: darkMode ? '#e2e8f0' : '#1e293b',\r\n-      textAlign: 'center',\r\n-    },\r\n-    quickLinkButton: {\r\n-      padding: '0.75rem 1.5rem',\r\n-      borderRadius: '50px',\r\n-      border: 'none',\r\n-      backgroundColor: darkMode ? '#2d3748' : '#e2e8f0',\r\n-      color: darkMode ? '#e2e8f0' : '#1e293b',\r\n-      fontWeight: '600',\r\n-      cursor: 'pointer',\r\n-      transition: 'all 0.2s',\r\n-      display: 'flex',\r\n-      alignItems: 'center',\r\n-      gap: '0.5rem',\r\n-      fontSize: '1rem',\r\n-      ':hover': {\r\n-        backgroundColor: darkMode ? '#4a5568' : '#cbd5e1',\r\n-        transform: 'scale(1.05)',\r\n-      },\r\n-    },\r\n-    popupOverlay: {\r\n-      position: 'fixed',\r\n-      top: 0,\r\n-      left: 0,\r\n-      right: 0,\r\n-      bottom: 0,\r\n-      backgroundColor: 'rgba(0, 0, 0, 0.7)',\r\n-      display: 'flex',\r\n-      justifyContent: 'center',\r\n-      alignItems: 'center',\r\n-      zIndex: 1000,\r\n-    },\r\n-    popupContent: {\r\n-      backgroundColor: darkMode ? '#2d3748' : 'white',\r\n-      borderRadius: '16px',\r\n-      padding: '2rem',\r\n-      maxWidth: '500px',\r\n-      width: '90%',\r\n-      boxShadow: '0 10px 25px rgba(0, 0, 0, 0.2)',\r\n-      position: 'relative',\r\n-      border: darkMode ? '1px solid #4a5568' : '1px solid #e2e8f0',\r\n-    },\r\n-    popupClose: {\r\n-      position: 'absolute',\r\n-      top: '1rem',\r\n-      right: '1rem',\r\n-      background: 'none',\r\n-      border: 'none',\r\n-      fontSize: '1.5rem',\r\n-      cursor: 'pointer',\r\n-      color: darkMode ? '#a0aec0' : '#64748b',\r\n-    },\r\n-    popupTitle: {\r\n-      fontSize: '1.8rem',\r\n-      fontWeight: '700',\r\n-      marginBottom: '1rem',\r\n-      color: darkMode ? '#e2e8f0' : '#1e293b',\r\n-    },\r\n-    popupDesc: {\r\n-      color: darkMode ? '#a0aec0' : '#64748b',\r\n-      fontSize: '1.1rem',\r\n-      lineHeight: '1.6',\r\n-      marginBottom: '2rem',\r\n-    },\r\n-    popupButton: {\r\n-      padding: '0.75rem 1.5rem',\r\n-      borderRadius: '8px',\r\n-      border: 'none',\r\n-      backgroundColor: darkMode ? '#4a5568' : '#3b82f6',\r\n-      color: 'white',\r\n-      fontWeight: '600',\r\n-      cursor: 'pointer',\r\n-      transition: 'all 0.2s',\r\n-      fontSize: '1rem',\r\n-      ':hover': {\r\n-        backgroundColor: darkMode ? '#5f6b82' : '#2563eb',\r\n-      },\r\n-    },\r\n-  };\r\n-\r\n-  const styles = {\r\n-    ...dynamicStyles,\r\n-    heroContent: {\r\n-      maxWidth: '800px',\r\n-      margin: '0 auto',\r\n-    },\r\n-    title: {\r\n-      fontSize: '3.5rem',\r\n-      fontWeight: '800',\r\n-      marginBottom: '0.5rem',\r\n-      textShadow: '2px 2px 4px rgba(0, 0, 0, 0.2)',\r\n-    },\r\n-    tagline: {\r\n-      fontSize: '1.25rem',\r\n-      marginBottom: '2rem',\r\n-      opacity: 0.9,\r\n-    },\r\n-    searchBox: {\r\n-      display: 'flex',\r\n-      maxWidth: '600px',\r\n-      margin: '0 auto',\r\n-      borderRadius: '50px',\r\n-      overflow: 'hidden',\r\n-      boxShadow: '0 4px 10px rgba(0, 0, 0, 0.2)',\r\n-    },\r\n-    searchInput: {\r\n-      flex: 1,\r\n-      padding: '1rem 1.5rem',\r\n-      border: 'none',\r\n-      fontSize: '1rem',\r\n-      outline: 'none',\r\n-      backgroundColor: darkMode ? '#2d3748' : 'white',\r\n-      color: darkMode ? '#e2e8f0' : '#1e293b',\r\n-    },\r\n-    searchButton: {\r\n-      backgroundColor: darkMode ? '#4a5568' : '#1e40af',\r\n-      color: 'white',\r\n-      border: 'none',\r\n-      padding: '0 1.5rem',\r\n-      cursor: 'pointer',\r\n-      fontSize: '1.25rem',\r\n-      transition: 'background-color 0.2s',\r\n-      ':hover': {\r\n-        backgroundColor: darkMode ? '#5f6b82' : '#1e3a8a',\r\n-      },\r\n-    },\r\n-    section: {\r\n-      padding: '2rem 1rem',\r\n-      maxWidth: '1200px',\r\n-      margin: '0 auto',\r\n-    },\r\n-    servicesGrid: {\r\n-      display: 'grid',\r\n-      gridTemplateColumns: 'repeat(auto-fit, minmax(250px, 1fr))',\r\n-      gap: '1.5rem',\r\n-      marginTop: '1rem',\r\n-    },\r\n-    serviceIcon: {\r\n-      fontSize: '3rem',\r\n-      marginBottom: '1rem',\r\n-    },\r\n-    quickLinks: {\r\n-      display: 'flex',\r\n-      justifyContent: 'center',\r\n-      gap: '1rem',\r\n-      flexWrap: 'wrap',\r\n-    },\r\n-    themeToggle: {\r\n-      position: 'fixed',\r\n-      top: '1.5rem',\r\n-      right: '1.5rem',\r\n-      background: darkMode ? '#4a5568' : '#e2e8f0',\r\n-      border: 'none',\r\n-      borderRadius: '50%',\r\n-      width: '40px',\r\n-      height: '40px',\r\n-      display: 'flex',\r\n-      alignItems: 'center',\r\n-      justifyContent: 'center',\r\n-      cursor: 'pointer',\r\n-      transition: 'all 0.3s ease',\r\n-      boxShadow: '0 2px 5px rgba(0, 0, 0, 0.2)',\r\n-      zIndex: 100,\r\n-      ':hover': {\r\n-        transform: 'scale(1.1)',\r\n-      },\r\n-    },\r\n-  };\r\n-\r\n-  return (\r\n-    <div className=\"home-page\" style={styles.page}>\r\n-      {/* Theme Toggle Button */}\r\n-      <button \r\n-        onClick={toggleDarkMode} \r\n-        style={styles.themeToggle}\r\n-        aria-label={darkMode ? 'Switch to light mode' : 'Switch to dark mode'}\r\n-      >\r\n-        {darkMode ? '‚òÄÔ∏è' : 'üåô'}\r\n-      </button>\r\n-      \r\n-      {/* Hero Section */}\r\n-      <section className=\"hero\" style={styles.hero}>\r\n-        <div className=\"hero-content\" style={styles.heroContent}>\r\n-          <h1 style={styles.title}>UrbanFlow</h1>\r\n-          <p className=\"tagline\" style={styles.tagline}>Your seamless urban living companion</p>\r\n-          \r\n-          <form onSubmit={handleSearch} className=\"search-box\" style={styles.searchBox}>\r\n-            <input\r\n-              type=\"text\"\r\n-              placeholder=\"Search for restaurants, services...\"\r\n-              value={searchQuery}\r\n-              onChange={(e) => setSearchQuery(e.target.value)}\r\n-              style={styles.searchInput}\r\n-            />\r\n-            <button type=\"submit\" style={styles.searchButton}>\r\n-              <span>üîç</span>\r\n-            </button>\r\n-          </form>\r\n-        </div>\r\n-      </section>\r\n-\r\n-      {/* Services Grid */}\r\n-      <section className=\"services-section\" style={styles.section}>\r\n-        <h2 style={styles.sectionTitle}>What do you need today?</h2>\r\n-        <div className=\"services-grid\" style={styles.servicesGrid}>\r\n-          {services.map((service) => (\r\n-            <div \r\n-              key={service.name} \r\n-              className=\"service-card\"\r\n-              style={{ \r\n-                ...styles.serviceCard,\r\n-                backgroundColor: darkMode \r\n-                  ? `${service.color}20` \r\n-                  : `${service.color}10`,\r\n-                borderColor: service.color,\r\n-                '--card-color': service.color\r\n-              }}\r\n-              onClick={() => openServicePopup(service)}\r\n-            >\r\n-              <div className=\"service-icon\" style={styles.serviceIcon}>{service.icon}</div>\r\n-              <h3 style={styles.serviceTitle}>{service.name}</h3>\r\n-              <p style={styles.serviceDesc}>{service.desc}</p>\r\n-              <div className=\"card-hover-effect\"></div>\r\n-            </div>\r\n-          ))}\r\n-        </div>\r\n-      </section>\r\n-\r\n-      {/* Featured Section */}\r\n-      <section className=\"featured-section\" style={styles.section}>\r\n-        <h2 style={styles.sectionTitle}>Quick Access</h2>\r\n-        <div className=\"quick-links\" style={styles.quickLinks}>\r\n-          <button \r\n-            onClick={() => navigate('/transport?from=home&to=downtown')}\r\n-            style={styles.quickLinkButton}\r\n-          >\r\n-            üöï To Downtown\r\n-          </button>\r\n-          <button \r\n-            onClick={() => navigate('/food?category=fastfood')}\r\n-            style={styles.quickLinkButton}\r\n-          >\r\n-            üçü Fast Food\r\n-          </button>\r\n-          <button \r\n-            onClick={() => navigate('/food?category=coffee')}\r\n-            style={styles.quickLinkButton}\r\n-          >\r\n-            ‚òï Coffee Shops\r\n-          </button>\r\n-        </div>\r\n-      </section>\r\n-\r\n-      {/* Service Popup */}\r\n-      {selectedService && (\r\n-        <div style={styles.popupOverlay} onClick={closePopup}>\r\n-          <div style={styles.popupContent} onClick={(e) => e.stopPropagation()}>\r\n-            <button style={styles.popupClose} onClick={closePopup}>√ó</button>\r\n-            <div style={{ \r\n-              display: 'flex', \r\n-              alignItems: 'center', \r\n-              gap: '1rem',\r\n-              marginBottom: '1.5rem'\r\n-            }}>\r\n-              <span style={{ fontSize: '2.5rem' }}>{selectedService.icon}</span>\r\n-              <h3 style={styles.popupTitle}>{selectedService.name}</h3>\r\n-            </div>\r\n-            <p style={styles.popupDesc}>{selectedService.details}</p>\r\n-            <button \r\n-              style={{ \r\n-                ...styles.popupButton,\r\n-                backgroundColor: selectedService.color,\r\n-                ':hover': {\r\n-                  backgroundColor: `${selectedService.color}90`,\r\n-                }\r\n-              }}\r\n-              onClick={() => {\r\n-                navigate(selectedService.path);\r\n-                closePopup();\r\n-              }}\r\n-            >\r\n-              Explore {selectedService.name}\r\n\\ No newline at end of file\n-            </button>\r\n-          </div>\r\n-        </div>\r\n-      )}\r\n-    </div>\r\n-  );\r\n-}\n+};\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752651365775,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,793 @@\n+import { useState, useEffect, useRef } from 'react';\r\n+import { useNavigate } from 'react-router-dom';\r\n+\r\n+// UrbanBuddy AI Assistant Component\r\n+const UrbanBuddy = ({ darkMode, onChatOpen }) => {\r\n+  const [position, setPosition] = useState({ x: 20, y: 50 });\r\n+  const [isActive, setIsActive] = useState(false);\r\n+  const botRef = useRef(null);\r\n+  const animationRef = useRef(null);\r\n+  const lastInteractionTime = useRef(Date.now());\r\n+\r\n+  // Make the bot wander with more dynamic movement\r\n+  useEffect(() => {\r\n+    const moveInterval = setInterval(() => {\r\n+      setPosition(prev => {\r\n+        const now = Date.now();\r\n+        const timeSinceLastInteraction = now - lastInteractionTime.current;\r\n+        \r\n+        // More active movement right after interaction\r\n+        const speedMultiplier = timeSinceLastInteraction < 5000 ? 2 : 1;\r\n+        \r\n+        let newX = prev.x + (3 * speedMultiplier);\r\n+        let newY = prev.y + (Math.random() * 6 - 3);\r\n+        \r\n+        // Bounce off edges\r\n+        if (newX > window.innerWidth - 80) {\r\n+          newX = window.innerWidth - 80;\r\n+          triggerAnimation('spin');\r\n+        }\r\n+        if (newX < 20) {\r\n+          newX = 20;\r\n+          triggerAnimation('spin');\r\n+        }\r\n+        if (newY < 20) newY = 20;\r\n+        if (newY > window.innerHeight - 100) newY = window.innerHeight - 100;\r\n+        \r\n+        return { x: newX, y: newY };\r\n+      });\r\n+    }, 100);\r\n+\r\n+    return () => clearInterval(moveInterval);\r\n+  }, []);\r\n+\r\n+  const triggerAnimation = (type) => {\r\n+    if (animationRef.current) {\r\n+      clearTimeout(animationRef.current);\r\n+    }\r\n+    \r\n+    const botElement = botRef.current;\r\n+    if (!botElement) return;\r\n+    \r\n+    botElement.style.animation = 'none';\r\n+    void botElement.offsetWidth; // Trigger reflow\r\n+    \r\n+    switch(type) {\r\n+      case 'spin':\r\n+        botElement.style.animation = 'spin 1s ease';\r\n+        break;\r\n+      case 'bounce':\r\n+        botElement.style.animation = 'bounce 0.5s ease';\r\n+        break;\r\n+      case 'wobble':\r\n+        botElement.style.animation = 'wobble 0.8s ease';\r\n+        break;\r\n+      default:\r\n+        botElement.style.animation = '';\r\n+    }\r\n+    \r\n+    animationRef.current = setTimeout(() => {\r\n+      if (botElement) botElement.style.animation = '';\r\n+    }, 1000);\r\n+  };\r\n+\r\n+  const handleClick = () => {\r\n+    lastInteractionTime.current = Date.now();\r\n+    setIsActive(true);\r\n+    triggerAnimation('bounce');\r\n+    \r\n+    // Trigger chat opening in parent component\r\n+    onChatOpen();\r\n+    \r\n+    // Return to normal after a delay\r\n+    setTimeout(() => {\r\n+      setIsActive(false);\r\n+    }, 3000);\r\n+  };\r\n+\r\n+  // Custom animations\r\n+  const animations = `\r\n+    @keyframes spin {\r\n+      0% { transform: rotate(0deg); }\r\n+      100% { transform: rotate(360deg); }\r\n+    }\r\n+    @keyframes bounce {\r\n+      0%, 100% { transform: translateY(0); }\r\n+      50% { transform: translateY(-20px); }\r\n+    }\r\n+    @keyframes wobble {\r\n+      0%, 100% { transform: rotate(0deg); }\r\n+      25% { transform: rotate(5deg); }\r\n+      75% { transform: rotate(-5deg); }\r\n+    }\r\n+    @keyframes float {\r\n+      0% { transform: translateY(0px); }\r\n+      50% { transform: translateY(-10px); }\r\n+      100% { transform: translateY(0px); }\r\n+    }\r\n+  `;\r\n+\r\n+  return (\r\n+    <>\r\n+      <style>{animations}</style>\r\n+      <div \r\n+        ref={botRef}\r\n+        onClick={handleClick}\r\n+        style={{\r\n+          position: 'fixed',\r\n+          left: `${position.x}px`,\r\n+          top: `${position.y}px`,\r\n+          fontSize: '2.5rem',\r\n+          cursor: 'pointer',\r\n+          transition: 'all 0.3s ease',\r\n+          zIndex: 100,\r\n+          filter: darkMode \r\n+            ? 'drop-shadow(0 0 8px rgba(255,255,255,0.7))' \r\n+            : 'drop-shadow(0 0 8px rgba(0,0,0,0.3))',\r\n+          userSelect: 'none',\r\n+          animation: 'float 4s ease-in-out infinite'\r\n+        }}\r\n+      >\r\n+        <div style={{ \r\n+          position: 'relative',\r\n+          display: 'flex',\r\n+          flexDirection: 'column',\r\n+          alignItems: 'center'\r\n+        }}>\r\n+          {/* Bot icon */}\r\n+          <div style={{\r\n+            position: 'relative',\r\n+            width: '60px',\r\n+            height: '60px',\r\n+            backgroundColor: darkMode ? '#4a5568' : '#3b82f6',\r\n+            borderRadius: '50%',\r\n+            display: 'flex',\r\n+            justifyContent: 'center',\r\n+            alignItems: 'center',\r\n+            color: 'white'\r\n+          }}>\r\n+            <span style={{ fontSize: '1.8rem' }}>ü§ñ</span>\r\n+          </div>\r\n+        </div>\r\n+      </div>\r\n+    </>\r\n+  );\r\n+};\r\n+\r\n+// Chat Modal Component with Simulated AI\r\n+const ChatModal = ({ darkMode, onClose }) => {\r\n+  const [messages, setMessages] = useState([\r\n+    { text: \"Hello! I'm UrbanBuddy, your AI assistant for urban living. How can I help you today?\", sender: 'bot' }\r\n+  ]);\r\n+  const [inputValue, setInputValue] = useState('');\r\n+  const [isTyping, setIsTyping] = useState(false);\r\n+  const chatEndRef = useRef(null);\r\n+  const inputRef = useRef(null);\r\n+\r\n+  // Auto-scroll to bottom and focus input\r\n+  useEffect(() => {\r\n+    chatEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n+    inputRef.current?.focus();\r\n+  }, [messages]);\r\n+\r\n+  // Simulated AI responses\r\n+  const generateResponse = async (userMessage) => {\r\n+    setIsTyping(true);\r\n+    \r\n+    // Simulate API delay\r\n+    await new Promise(resolve => setTimeout(resolve, 1000));\r\n+    \r\n+    // Create context-aware responses\r\n+    const responses = {\r\n+      'transport': \"For transport options, I can suggest checking the Transport section for real-time bus schedules and bike sharing locations.\",\r\n+      'food': \"For food delivery, we partner with local restaurants. Check the Food Delivery section for current promotions!\",\r\n+      'groceries': \"You can get groceries delivered within 30 minutes from our partner stores in your area.\",\r\n+      'services': \"Urban services like plumbing, electrical, and cleaning can be booked directly in the Services section.\",\r\n+      'hello': \"Hi there! How can I assist with your urban living needs today?\",\r\n+      'help': \"I can help with transport, food delivery, groceries, and urban services. What do you need?\",\r\n+      'default': \"I'm here to help with urban living questions! Try asking about transport, food delivery, or other city services.\"\r\n+    };\r\n+    \r\n+    // Check for keywords in the message\r\n+    const lowerMsg = userMessage.toLowerCase();\r\n+    let response = responses.default;\r\n+    \r\n+    if (lowerMsg.includes('transport') || lowerMsg.includes('bus') || lowerMsg.includes('metro')) {\r\n+      response = responses.transport;\r\n+    } else if (lowerMsg.includes('food') || lowerMsg.includes('restaurant') || lowerMsg.includes('eat')) {\r\n+      response = responses.food;\r\n+    } else if (lowerMsg.includes('grocery') || lowerMsg.includes('shopping')) {\r\n+      response = responses.groceries;\r\n+    } else if (lowerMsg.includes('service') || lowerMsg.includes('repair') || lowerMsg.includes('help')) {\r\n+      response = responses.services;\r\n+    } else if (lowerMsg.includes('hello') || lowerMsg.includes('hi')) {\r\n+      response = responses.hello;\r\n+    } else if (lowerMsg.includes('help')) {\r\n+      response = responses.help;\r\n+    }\r\n+    \r\n+    setMessages(prev => [...prev, { text: response, sender: 'bot' }]);\r\n+    setIsTyping(false);\r\n+  };\r\n+\r\n+  const handleSendMessage = async (e) => {\r\n+    e.preventDefault();\r\n+    if (inputValue.trim() && !isTyping) {\r\n+      // Add user message\r\n+      const userMessage = inputValue.trim();\r\n+      setMessages(prev => [...prev, { text: userMessage, sender: 'user' }]);\r\n+      setInputValue('');\r\n+      \r\n+      // Generate AI response\r\n+      await generateResponse(userMessage);\r\n+    }\r\n+  };\r\n+\r\n+  return (\r\n+    <div style={{\r\n+      position: 'fixed',\r\n+      bottom: '100px',\r\n+      right: '30px',\r\n+      width: '350px',\r\n+      maxWidth: '90%',\r\n+      backgroundColor: darkMode ? '#2d3748' : 'white',\r\n+      borderRadius: '16px',\r\n+      boxShadow: '0 10px 25px rgba(0, 0, 0, 0.2)',\r\n+      border: darkMode ? '1px solid #4a5568' : '1px solid #e2e8f0',\r\n+      zIndex: 1000,\r\n+      overflow: 'hidden',\r\n+      display: 'flex',\r\n+      flexDirection: 'column',\r\n+      maxHeight: '60vh'\r\n+    }}>\r\n+      {/* Chat header */}\r\n+      <div style={{\r\n+        padding: '1rem',\r\n+        backgroundColor: darkMode ? '#4a5568' : '#3b82f6',\r\n+        color: 'white',\r\n+        display: 'flex',\r\n+        justifyContent: 'space-between',\r\n+        alignItems: 'center'\r\n+      }}>\r\n+        <div style={{ display: 'flex', alignItems: 'center', gap: '0.5rem' }}>\r\n+          <span style={{ fontSize: '1.5rem' }}>ü§ñ</span>\r\n+          <h3 style={{ margin: 0 }}>UrbanBuddy AI</h3>\r\n+          {isTyping && (\r\n+            <span style={{ \r\n+              fontSize: '0.8rem',\r\n+              marginLeft: '0.5rem',\r\n+              opacity: 0.8\r\n+            }}>typing...</span>\r\n+          )}\r\n+        </div>\r\n+        <button \r\n+          onClick={onClose}\r\n+          style={{\r\n+            background: 'none',\r\n+            border: 'none',\r\n+            color: 'white',\r\n+            fontSize: '1.2rem',\r\n+            cursor: 'pointer'\r\n+          }}\r\n+        >\r\n+          √ó\r\n+        </button>\r\n+      </div>\r\n+      \r\n+      {/* Chat messages */}\r\n+      <div style={{\r\n+        flex: 1,\r\n+        padding: '1rem',\r\n+        overflowY: 'auto',\r\n+        display: 'flex',\r\n+        flexDirection: 'column',\r\n+        gap: '0.8rem'\r\n+      }}>\r\n+        {messages.map((msg, index) => (\r\n+          <div \r\n+            key={index}\r\n+            style={{\r\n+              alignSelf: msg.sender === 'user' ? 'flex-end' : 'flex-start',\r\n+              maxWidth: '80%',\r\n+              padding: '0.6rem 1rem',\r\n+              borderRadius: msg.sender === 'user' \r\n+                ? '18px 18px 0 18px' \r\n+                : '18px 18px 18px 0',\r\n+              backgroundColor: msg.sender === 'user'\r\n+                ? (darkMode ? '#4a5568' : '#3b82f6')\r\n+                : (darkMode ? '#4a5568' : '#e2e8f0'),\r\n+              color: msg.sender === 'user' ? 'white' : (darkMode ? 'white' : '#1e293b'),\r\n+              animation: msg.sender === 'bot' && index === messages.length - 1 \r\n+                ? 'fadeIn 0.3s ease' \r\n+                : 'none'\r\n+            }}\r\n+          >\r\n+            {msg.text}\r\n+          </div>\r\n+        ))}\r\n+        <div ref={chatEndRef} />\r\n+      </div>\r\n+      \r\n+      {/* Chat input */}\r\n+      <form onSubmit={handleSendMessage} style={{\r\n+        padding: '0.8rem',\r\n+        borderTop: darkMode ? '1px solid #4a5568' : '1px solid #e2e8f0',\r\n+        display: 'flex',\r\n+        gap: '0.5rem'\r\n+      }}>\r\n+        <input\r\n+          ref={inputRef}\r\n+          type=\"text\",\r\n+          value={inputValue},\r\n+          onChange={(e) => setInputValue(e.target.value)},\r\n+          placeholder=\"Ask me about urban living...\",\r\n+          disabled={isTyping},\r\n+          style={{\r\n+            flex: 1,\r\n+            padding: '0.6rem 1rem',\r\n+            borderRadius: '20px',\r\n+            border: darkMode ? '1px solid #4a5568' : '1px solid #e2e8f0',\r\n+            backgroundColor: darkMode ? '#2d3748' : 'white',\r\n+            color: darkMode ? 'white' : '#1e293b',\r\n+            outline: 'none',\r\n+            opacity: isTyping ? 0.7 : 1\r\n+          }}\r\n+        />\r\n+        <button \r\n+          type=\"submit\",\r\n+          disabled={isTyping},\r\n+          style={{\r\n+            background: isTyping \r\n+              ? (darkMode ? '#4a5568' : '#e2e8f0')\r\n+              : (darkMode ? '#4a5568' : '#3b82f6'),\r\n+            color: 'white',\r\n+            border: 'none',\r\n+            borderRadius: '50%',\r\n+            width: '40px',\r\n+            height: '40px',\r\n+            display: 'flex',\r\n+            alignItems: 'center',\r\n+            justifyContent: 'center',\r\n+            cursor: isTyping ? 'not-allowed' : 'pointer'\r\n+          }}\r\n+        >\r\n+          {isTyping ? '...' : '‚û§'}\r\n+        </button>\r\n+      </form>\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+// Main Home Component\r\n+export default function Home() {\r\n+  const navigate = useNavigate();\r\n+  const [searchQuery, setSearchQuery] = useState('');\r\n+  const [darkMode, setDarkMode] = useState(false);\r\n+  const [selectedService, setSelectedService] = useState(null);\r\n+  const [orderCount, setOrderCount] = useState(0);\r\n+  const [achievements, setAchievements] = useState([]);\r\n+  const [showChat, setShowChat] = useState(false);\r\n+\r\n+  const services = [\r\n+    { \r\n+      name: 'Transport', \r\n+      path: '/transport', \r\n+      icon: 'üöå', \r\n+      desc: 'Plan your multi-modal journey across the city',\r\n+      color: '#3b82f6',\r\n+      details: 'Find the best routes combining metro, buses, and bikes. Real-time updates and ticket purchasing available.'\r\n+    },\r\n+    { \r\n+      name: 'Food Delivery', \r\n+      path: '/food', \r\n+      icon: 'üçî', \r\n+      desc: 'Discover local restaurants and cafes',\r\n+      color: '#ef4444',\r\n+      details: 'Order from hundreds of restaurants with special discounts. Track your delivery in real-time.'\r\n+    },\r\n+    { \r\n+      name: 'Groceries', \r\n+      path: '/food', \r\n+      icon: 'üõí', \r\n+      desc: 'Get groceries delivered in minutes',\r\n+      color: '#10b981',\r\n+      details: 'Same-day delivery from local supermarkets. Schedule recurring orders for essentials.'\r\n+    },\r\n+    { \r\n+      name: 'Services', \r\n+      path: '/food', \r\n+      icon: 'üõ†Ô∏è', \r\n+      desc: 'Find urban services near you',\r\n+      color: '#8b5cf6',\r\n+      details: 'Book home services, repairs, and professional help with verified providers.'\r\n+    }\r\n+  ];\r\n+\r\n+  // Check for achievements\r\n+  useEffect(() => {\r\n+    if (orderCount === 1) {\r\n+      addAchievement('First Order!', 'üéâ');\r\n+    } else if (orderCount === 5) {\r\n+      addAchievement('Regular Customer!', 'üèÜ');\r\n+    } else if (orderCount === 10) {\r\n+      addAchievement('Super User!', 'üåü');\r\n+    }\r\n+  }, [orderCount]);\r\n+\r\n+  const addAchievement = (title, icon) => {\r\n+    if (!achievements.some(a => a.title === title)) {\r\n+      const newAchievement = { title, icon, id: Date.now() };\r\n+      setAchievements(prev => [...prev, newAchievement]);\r\n+      \r\n+      // Auto-hide achievement after 3 seconds\r\n+      setTimeout(() => {\r\n+        setAchievements(prev => prev.filter(a => a.id !== newAchievement.id));\r\n+      }, 3000);\r\n+    }\r\n+  };\r\n+\r\n+  const handleSearch = (e) => {\r\n+    e.preventDefault();\r\n+    if (searchQuery.trim()) {\r\n+      navigate(`/food?search=${encodeURIComponent(searchQuery)}`);\r\n+    }\r\n+  };\r\n+\r\n+  const toggleDarkMode = () => {\r\n+    setDarkMode(!darkMode);\r\n+  };\r\n+\r\n+  const openServicePopup = (service) => {\r\n+    setSelectedService(service);\r\n+    setOrderCount(prev => prev + 1);\r\n+  };\r\n+\r\n+  const closePopup = () => {\r\n+    setSelectedService(null);\r\n+  };\r\n+\r\n+  const toggleChat = () => {\r\n+    setShowChat(!showChat);\r\n+  };\r\n+\r\n+  return (\r\n+    <div style={{\r\n+      backgroundColor: darkMode ? '#1a202c' : '#f8fafc',\r\n+      minHeight: '100vh',\r\n+      paddingBottom: '3rem',\r\n+      color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+      transition: 'all 0.3s ease',\r\n+      position: 'relative'\r\n+    }}>\r\n+      {/* Theme Toggle Button */}\r\n+      <button \r\n+        onClick={toggleDarkMode} \r\n+        style={{\r\n+          position: 'fixed',\r\n+          top: '1.5rem',\r\n+          right: '1.5rem',\r\n+          background: darkMode ? '#4a5568' : '#e2e8f0',\r\n+          border: 'none',\r\n+          borderRadius: '50%',\r\n+          width: '40px',\r\n+          height: '40px',\r\n+          display: 'flex',\r\n+          alignItems: 'center',\r\n+          justifyContent: 'center',\r\n+          cursor: 'pointer',\r\n+          transition: 'all 0.3s ease',\r\n+          boxShadow: '0 2px 5px rgba(0, 0, 0, 0.2)',\r\n+          zIndex: 100\r\n+        }}\r\n+        aria-label={darkMode ? 'Switch to light mode' : 'Switch to dark mode'}\r\n+      >\r\n+        {darkMode ? '‚òÄÔ∏è' : 'üåô'}\r\n+      </button>\r\n+      \r\n+      {/* Hero Section with UrbanBuddy */}\r\n+      <section style={{\r\n+        background: darkMode \r\n+          ? 'linear-gradient(135deg, #1f2937 0%, #111827 100%)' \r\n+          : 'linear-gradient(135deg, #6366f1 0%, #8b5cf6 100%)',\r\n+        color: 'white',\r\n+        padding: '4rem 1rem',\r\n+        textAlign: 'center',\r\n+        borderRadius: '0 0 20px 20px',\r\n+        boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',\r\n+        position: 'relative',\r\n+        overflow: 'hidden',\r\n+        height: '300px'\r\n+      }}>\r\n+        <div style={{\r\n+          maxWidth: '800px',\r\n+          margin: '0 auto',\r\n+          position: 'relative',\r\n+          zIndex: 2\r\n+        }}>\r\n+          <h1 style={{\r\n+            fontSize: '3.5rem',\r\n+            fontWeight: '800',\r\n+            marginBottom: '0.5rem',\r\n+            textShadow: '2px 2px 4px rgba(0, 0, 0, 0.2)',\r\n+          }}>UrbanFlow</h1>\r\n+          <p style={{\r\n+            fontSize: '1.25rem',\r\n+            marginBottom: '2rem',\r\n+            opacity: 0.9,\r\n+          }}>Your seamless urban living companion</p>\r\n+          \r\n+          <form onSubmit={handleSearch} style={{\r\n+            display: 'flex',\r\n+            maxWidth: '600px',\r\n+            margin: '0 auto',\r\n+            borderRadius: '50px',\r\n+            overflow: 'hidden',\r\n+            boxShadow: '0 4px 10px rgba(0, 0, 0, 0.2)',\r\n+          }}>\r\n+            <input\r\n+              type=\"text\",\r\n+              placeholder=\"Search for restaurants, services...\",\r\n+              value={searchQuery},\r\n+              onChange={(e) => setSearchQuery(e.target.value)},\r\n+              style={{\r\n+                flex: 1,\r\n+                padding: '1rem 1.5rem',\r\n+                border: 'none',\r\n+                fontSize: '1rem',\r\n+                outline: 'none',\r\n+                backgroundColor: darkMode ? '#2d3748' : 'white',\r\n+                color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+              }}\r\n+            />\r\n+            <button type=\"submit\" style={{\r\n+              backgroundColor: darkMode ? '#4a5568' : '#1e40af',\r\n+              color: 'white',\r\n+              border: 'none',\r\n+              padding: '0 1.5rem',\r\n+              cursor: 'pointer',\r\n+              fontSize: '1.25rem',\r\n+              transition: 'background-color 0.2s'\r\n+            }}>\r\n+              <span>üîç</span>\r\n+            </button>\r\n+          </form>\r\n+        </div>\r\n+        <UrbanBuddy darkMode={darkMode} onChatOpen={toggleChat} />\r\n+      </section>\r\n+\r\n+      {/* Services Grid */}\r\n+      <section style={{\r\n+        padding: '2rem 1rem',\r\n+        maxWidth: '1200px',\r\n+        margin: '0 auto',\r\n+      }}>\r\n+        <h2 style={{\r\n+          fontSize: '2rem',\r\n+          fontWeight: '700',\r\n+          marginBottom: '1.5rem',\r\n+          color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+          textAlign: 'center',\r\n+        }}>What do you need today?</h2>\r\n+        <div style={{\r\n+          display: 'grid',\r\n+          gridTemplateColumns: 'repeat(auto-fit, minmax(250px, 1fr))',\r\n+          gap: '1.5rem',\r\n+          marginTop: '1rem',\r\n+        }}>\r\n+          {services.map((service) => (\r\n+            <div \r\n+              key={service.name} \r\n+              style={{ \r\n+                padding: '2rem 1.5rem',\r\n+                borderRadius: '16px',\r\n+                border: `2px solid ${service.color}`,\r\n+                textAlign: 'center',\r\n+                cursor: 'pointer',\r\n+                transition: 'transform 0.3s, box-shadow 0.3s',\r\n+                backgroundColor: darkMode \r\n+                  ? `${service.color}20` \r\n+                  : `${service.color}10`,\r\n+                ':hover': {\r\n+                  transform: 'translateY(-5px)',\r\n+                  boxShadow: '0 10px 20px rgba(0, 0, 0, 0.1)',\r\n+                }\r\n+              }}\r\n+              onClick={() => openServicePopup(service)}\r\n+            >\r\n+              <div style={{ \r\n+                fontSize: '3rem',\r\n+                marginBottom: '1rem',\r\n+                display: 'inline-block',\r\n+                animation: 'float 3s ease-in-out infinite'\r\n+              }}>{service.icon}</div>\r\n+              <h3 style={{fontSize: '1.5rem', fontWeight: '600', marginBottom: '0.5rem'}}>{service.name}</h3>\r\n+              <p style={{color: darkMode ? '#a0aec0' : '#64748b'}}>{service.desc}</p>\r\n+            </div>\r\n+          ))}\r\n+        </div>\r\n+      </section>\r\n+\r\n+      {/* Featured Section */}\r\n+      <section style={{\r\n+        padding: '2rem 1rem',\r\n+        maxWidth: '1200px',\r\n+        margin: '0 auto',\r\n+      }}>\r\n+        <h2 style={{\r\n+          fontSize: '2rem',\r\n+          fontWeight: '700',\r\n+          marginBottom: '1.5rem',\r\n+          color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+          textAlign: 'center',\r\n+        }}>Quick Access</h2>\r\n+        <div style={{\r\n+          display: 'flex',\r\n+          justifyContent: 'center',\r\n+          gap: '1rem',\r\n+          flexWrap: 'wrap',\r\n+        }}>\r\n+          <button \r\n+            onClick={() => navigate('/transport?from=home&to=downtown')}\r\n+            style={{\r\n+              padding: '0.75rem 1.5rem',\r\n+              borderRadius: '50px',\r\n+              border: 'none',\r\n+              backgroundColor: darkMode ? '#2d3748' : '#e2e8f0',\r\n+              color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+              fontWeight: '600',\r\n+              cursor: 'pointer',\r\n+              transition: 'all 0.2s',\r\n+              display: 'flex',\r\n+              alignItems: 'center',\r\n+              gap: '0.5rem',\r\n+              fontSize: '1rem'\r\n+            }}\r\n+          >\r\n+            üöï To Downtown\r\n+          </button>\r\n+          <button \r\n+            onClick={() => navigate('/food?category=fastfood')}\r\n+            style={{\r\n+              padding: '0.75rem 1.5rem',\r\n+              borderRadius: '50px',\r\n+              border: 'none',\r\n+              backgroundColor: darkMode ? '#2d3748' : '#e2e8f0',\r\n+              color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+              fontWeight: '600',\r\n+              cursor: 'pointer',\r\n+              transition: 'all 0.2s',\r\n+              display: 'flex',\r\n+              alignItems: 'center',\r\n+              gap: '0.5rem',\r\n+              fontSize: '1rem'\r\n+            }}\r\n+          >\r\n+            üçü Fast Food\r\n+          </button>\r\n+          <button \r\n+            onClick={() => navigate('/food?category=coffee')}\r\n+            style={{\r\n+              padding: '0.75rem 1.5rem',\r\n+              borderRadius: '50px',\r\n+              border: 'none',\r\n+              backgroundColor: darkMode ? '#2d3748' : '#e2e8f0',\r\n+              color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+              fontWeight: '600',\r\n+              cursor: 'pointer',\r\n+              transition: 'all 0.2s',\r\n+              display: 'flex',\r\n+              alignItems: 'center',\r\n+              gap: '0.5rem',\r\n+              fontSize: '1rem'\r\n+            }}\r\n+          >\r\n+            ‚òï Coffee Shops\r\n+          </button>\r\n+        </div>\r\n+      </section>\r\n+\r\n+      {/* Service Popup */}\r\n+      {selectedService && (\r\n+        <div style={{\r\n+          position: 'fixed',\r\n+          top: 0,\r\n+          left: 0,\r\n+          right: 0,\r\n+          bottom: 0,\r\n+          backgroundColor: 'rgba(0, 0, 0, 0.7)',\r\n+          display: 'flex',\r\n+          justifyContent: 'center',\r\n+          alignItems: 'center',\r\n+          zIndex: 1000,\r\n+        }} onClick={closePopup}>\r\n+          <div style={{\r\n+            backgroundColor: darkMode ? '#2d3748' : 'white',\r\n+            borderRadius: '16px',\r\n+            padding: '2rem',\r\n+            maxWidth: '500px',\r\n+            width: '90%',\r\n+            boxShadow: '0 10px 25px rgba(0, 0, 0, 0.2)',\r\n+            position: 'relative',\r\n+            border: darkMode ? '1px solid #4a5568' : '1px solid #e2e8f0',\r\n+          }} onClick={(e) => e.stopPropagation()}>\r\n+            <button style={{\r\n+              position: 'absolute',\r\n+              top: '1rem',\r\n+              right: '1rem',\r\n+              background: 'none',\r\n+              border: 'none',\r\n+              fontSize: '1.5rem',\r\n+              cursor: 'pointer',\r\n+              color: darkMode ? '#a0aec0' : '#64748b',\r\n+            }} onClick={closePopup}>√ó</button>\r\n+            <div style={{ \r\n+              display: 'flex', \r\n+              alignItems: 'center', \r\n+              gap: '1rem',\r\n+              marginBottom: '1.5rem'\r\n+            }}>\r\n+              <span style={{ fontSize: '2.5rem', animation: 'float 3s ease-in-out infinite' }}>{selectedService.icon}</span>\r\n+              <h3 style={{fontSize: '1.8rem', fontWeight: '700', marginBottom: '1rem', color: darkMode ? '#e2e8f0' : '#1e293b'}}>{selectedService.name}</h3>\r\n+            </div>\r\n+            <p style={{color: darkMode ? '#a0aec0' : '#64748b', fontSize: '1.1rem', lineHeight: '1.6', marginBottom: '2rem'}}>{selectedService.details}</p>\r\n+            <button \r\n+              style={{ \r\n+                padding: '0.75rem 1.5rem',\r\n+                borderRadius: '8px',\r\n+                border: 'none',\r\n+                backgroundColor: selectedService.color,\r\n+                color: 'white',\r\n+                fontWeight: '600',\r\n+                cursor: 'pointer',\r\n+                transition: 'all 0.2s',\r\n+                fontSize: '1rem'\r\n+              }}\r\n+              onClick={() => {\r\n+                navigate(selectedService.path);\r\n+                closePopup();\r\n+              }}\r\n+            >\r\n+              Explore {selectedService.name}\r\n+            </button>\r\n+          </div>\r\n+        </div>\r\n+      )}\r\n+\r\n+      {/* Achievements */}\r\n+      {achievements.map(achievement => (\r\n+        <div key={achievement.id} style={{\r\n+          position: 'fixed',\r\n+          bottom: '20px',\r\n+          right: '20px',\r\n+          background: darkMode ? '#2d3748' : 'white',\r\n+          color: darkMode ? 'white' : '#1e293b',\r\n+          padding: '1rem',\r\n+          borderRadius: '12px',\r\n+          boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',\r\n+          display: 'flex',\r\n+          alignItems: 'center',\r\n+          gap: '0.5rem',\r\n+          zIndex: 1000,\r\n+          animation: 'slideIn 0.5s forwards, fadeOut 0.5s forwards 2.5s'\r\n+        }}>\r\n+          <span style={{fontSize: '1.5rem'}}>{achievement.icon}</span>\r\n+          <span>{achievement.title}</span>\r\n+        </div>\r\n+      ))}\r\n+\r\n+      {/* Chat Modal */}\r\n+      {showChat && <ChatModal darkMode={darkMode} onClose={toggleChat} />}\r\n+\r\n+      {/* Footer with copyright */}\r\n+      <footer style={{\r\n+        textAlign: 'center',\r\n+        padding: '2rem 1rem',\r\n+        color: darkMode ? '#a0aec0' : '#64748b',\r\n+        fontSize: '0.9rem',\r\n+        marginTop: '2rem'\r\n+      }}>\r\n+        <p>¬© {new Date().getFullYear()} UrbanFlow - Created by Nick</p>\r\n+      </footer>\r\n+    </div>\r\n+  );\r\n+};\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752651372571,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,831 @@\n+import { useState, useEffect, useRef } from 'react';\r\n+import { useNavigate } from 'react-router-dom';\r\n+\r\n+// UrbanBuddy AI Assistant Component\r\n+const UrbanBuddy = ({ darkMode, onChatOpen }) => {\r\n+  const [position, setPosition] = useState({ x: 20, y: 50 });\r\n+  const [expression, setExpression] = useState('üòä');\r\n+  const [direction, setDirection] = useState(1);\r\n+  const [costume, setCostume] = useState(null);\r\n+  const [isActive, setIsActive] = useState(false);\r\n+  const botRef = useRef(null);\r\n+  const animationRef = useRef(null);\r\n+  const lastInteractionTime = useRef(Date.now());\r\n+\r\n+  // Seasonal costumes\r\n+  useEffect(() => {\r\n+    const today = new Date();\r\n+    const month = today.getMonth() + 1;\r\n+    \r\n+    if (month === 12) setCostume('üéÑ');\r\n+    else if (month === 10) setCostume('üéÉ');\r\n+    else if (month === 2) setCostume('üíù');\r\n+    else if (month === 4) setCostume('üå∏');\r\n+    else setCostume(null);\r\n+  }, []);\r\n+\r\n+  // Make the bot wander with more dynamic movement\r\n+  useEffect(() => {\r\n+    const moveInterval = setInterval(() => {\r\n+      setPosition(prev => {\r\n+        const now = Date.now();\r\n+        const timeSinceLastInteraction = now - lastInteractionTime.current;\r\n+        \r\n+        // More active movement right after interaction\r\n+        const speedMultiplier = timeSinceLastInteraction < 5000 ? 2 : 1;\r\n+        \r\n+        let newX = prev.x + (3 * direction * speedMultiplier);\r\n+        let newY = prev.y + (Math.random() * 6 - 3);\r\n+        \r\n+        // Bounce off edges\r\n+        if (newX > window.innerWidth - 80) {\r\n+          setDirection(-1);\r\n+          triggerAnimation('spin');\r\n+        }\r\n+        if (newX < 20) {\r\n+          setDirection(1);\r\n+          triggerAnimation('spin');\r\n+        }\r\n+        if (newY < 20) newY = 20;\r\n+        if (newY > window.innerHeight - 100) newY = window.innerHeight - 100;\r\n+        \r\n+        return { x: newX, y: newY };\r\n+      });\r\n+    }, 100);\r\n+\r\n+    return () => clearInterval(moveInterval);\r\n+  }, [direction]);\r\n+\r\n+  // Change expressions randomly with more variety\r\n+  useEffect(() => {\r\n+    const expressions = ['üòä', 'ü§î', 'üòÆ', 'üòé', 'üëã', 'ü§ñ', '‚ú®', 'üåü'];\r\n+    const expressionInterval = setInterval(() => {\r\n+      if (!isActive) {\r\n+        setExpression(expressions[Math.floor(Math.random() * expressions.length)]);\r\n+        // Random animations when idle\r\n+        if (Math.random() > 0.8) {\r\n+          triggerAnimation(['bounce', 'spin', 'wobble'][Math.floor(Math.random() * 3)]);\r\n+        }\r\n+      }\r\n+    }, 3000);\r\n+    return () => clearInterval(expressionInterval);\r\n+  }, [isActive]);\r\n+\r\n+  const triggerAnimation = (type) => {\r\n+    if (animationRef.current) {\r\n+      clearTimeout(animationRef.current);\r\n+    }\r\n+    \r\n+    const botElement = botRef.current;\r\n+    if (!botElement) return;\r\n+    \r\n+    botElement.style.animation = 'none';\r\n+    void botElement.offsetWidth; // Trigger reflow\r\n+    \r\n+    switch(type) {\r\n+      case 'spin':\r\n+        botElement.style.animation = 'spin 1s ease';\r\n+        break;\r\n+      case 'bounce':\r\n+        botElement.style.animation = 'bounce 0.5s ease';\r\n+        break;\r\n+      case 'wobble':\r\n+        botElement.style.animation = 'wobble 0.8s ease';\r\n+        break;\r\n+      default:\r\n+        botElement.style.animation = '';\r\n+    }\r\n+    \r\n+    animationRef.current = setTimeout(() => {\r\n+      if (botElement) botElement.style.animation = '';\r\n+    }, 1000);\r\n+  };\r\n+\r\n+  const handleClick = () => {\r\n+    lastInteractionTime.current = Date.now();\r\n+    setIsActive(true);\r\n+    triggerAnimation('bounce');\r\n+    setExpression('üí°');\r\n+    \r\n+    // Trigger chat opening in parent component\r\n+    onChatOpen();\r\n+    \r\n+    // Return to normal after a delay\r\n+    setTimeout(() => {\r\n+      setIsActive(false);\r\n+    }, 3000);\r\n+  };\r\n+\r\n+  // Custom animations\r\n+  const animations = `\r\n+    @keyframes spin {\r\n+      0% { transform: rotate(0deg) scaleX(${direction}); }\r\n+      100% { transform: rotate(360deg) scaleX(${direction}); }\r\n+    }\r\n+    @keyframes bounce {\r\n+      0%, 100% { transform: translateY(0) scaleX(${direction}); }\r\n+      50% { transform: translateY(-20px) scaleX(${direction}); }\r\n+    }\r\n+    @keyframes wobble {\r\n+      0%, 100% { transform: rotate(0deg) scaleX(${direction}); }\r\n+      25% { transform: rotate(5deg) scaleX(${direction}); }\r\n+      75% { transform: rotate(-5deg) scaleX(${direction}); }\r\n+    }\r\n+    @keyframes float {\r\n+      0% { transform: translateY(0px) scaleX(${direction}); }\r\n+      50% { transform: translateY(-10px) scaleX(${direction}); }\r\n+      100% { transform: translateY(0px) scaleX(${direction}); }\r\n+    }\r\n+  `;\r\n+\r\n+  return (\r\n+    <>\r\n+      <style>{animations}</style>\r\n+      <div \r\n+        ref={botRef}\r\n+        onClick={handleClick}\r\n+        style={{\r\n+          position: 'fixed',\r\n+          left: `${position.x}px`,\r\n+          top: `${position.y}px`,\r\n+          fontSize: '2.5rem',\r\n+          cursor: 'pointer',\r\n+          transition: 'all 0.3s ease',\r\n+          transform: `scaleX(${direction})`,\r\n+          zIndex: 100,\r\n+          filter: darkMode \r\n+            ? 'drop-shadow(0 0 8px rgba(255,255,255,0.7))' \r\n+            : 'drop-shadow(0 0 8px rgba(0,0,0,0.3))',\r\n+          userSelect: 'none',\r\n+          animation: 'float 4s ease-in-out infinite'\r\n+        }}\r\n+      >\r\n+        <div style={{ \r\n+          position: 'relative',\r\n+          display: 'flex',\r\n+          flexDirection: 'column',\r\n+          alignItems: 'center'\r\n+        }}>\r\n+          {/* Bot icon with costume */}\r\n+          <div style={{\r\n+            position: 'relative',\r\n+            width: '60px',\r\n+            height: '60px',\r\n+            backgroundColor: darkMode ? '#4a5568' : '#3b82f6',\r\n+            borderRadius: '50%',\r\n+            display: 'flex',\r\n+            justifyContent: 'center',\r\n+            alignItems: 'center',\r\n+            color: 'white'\r\n+          }}>\r\n+            <span style={{ fontSize: '1.8rem' }}>{expression}</span>\r\n+            {costume && (\r\n+              <span style={{\r\n+                position: 'absolute',\r\n+                top: '-15px',\r\n+                right: '-10px',\r\n+                fontSize: '1.5rem',\r\n+                transform: 'rotate(15deg)'\r\n+              }}>\r\n+                {costume}\r\n+              </span>\r\n+            )}\r\n+          </div>\r\n+        </div>\r\n+      </div>\r\n+    </>\r\n+  );\r\n+};\r\n+\r\n+// Chat Modal Component with Direct Gemini API Connection\r\n+const ChatModal = ({ darkMode, onClose }) => {\r\n+  const [messages, setMessages] = useState([\r\n+    { text: \"Hello! I'm UrbanBuddy, your AI assistant powered by Gemini. How can I help you with urban living today?\", sender: 'bot' }\r\n+  ]);\r\n+  const [inputValue, setInputValue] = useState('');\r\n+  const [isTyping, setIsTyping] = useState(false);\r\n+  const chatEndRef = useRef(null);\r\n+  const inputRef = useRef(null);\r\n+\r\n+  // Auto-scroll to bottom and focus input\r\n+  useEffect(() => {\r\n+    chatEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n+    inputRef.current?.focus();\r\n+  }, [messages]);\r\n+\r\n+  // Direct API call to Gemini through a proxy\r\n+  const generateResponse = async (userMessage) => {\r\n+    setIsTyping(true);\r\n+    \r\n+    try {\r\n+      // Using a public AI API gateway (no API key needed)\r\n+      const response = await fetch('https://gemini-proxy.vercel.app/api/generate', {\r\n+        method: \"POST\",\r\n+        headers: { \r\n+          \"Content-Type\": \"application/json\",\r\n+        },\r\n+        body: JSON.stringify({\r\n+          prompt: `You are UrbanBuddy, a friendly AI assistant for urban living. \r\n+          Respond to this query about city life: ${userMessage}\r\n+          Keep responses concise (1-2 sentences) and helpful.`\r\n+        })\r\n+      });\r\n+      \r\n+      const data = await response.json();\r\n+      \r\n+      setMessages(prev => [...prev, { \r\n+        text: data.response || \"I'm here to help with urban living questions!\", \r\n+        sender: 'bot' \r\n+      }]);\r\n+    } catch (error) {\r\n+      console.error(\"API error:\", error);\r\n+      setMessages(prev => [...prev, { \r\n+        text: \"I'm having trouble connecting right now. Try again later!\", \r\n+        sender: 'bot' \r\n+      }]);\r\n+    } finally {\r\n+      setIsTyping(false);\r\n+    }\r\n+  };\r\n+\r\n+  const handleSendMessage = async (e) => {\r\n+    e.preventDefault();\r\n+    if (inputValue.trim() && !isTyping) {\r\n+      // Add user message\r\n+      const userMessage = inputValue.trim();\r\n+      setMessages(prev => [...prev, { text: userMessage, sender: 'user' }]);\r\n+      setInputValue('');\r\n+      \r\n+      // Generate AI response\r\n+      await generateResponse(userMessage);\r\n+    }\r\n+  };\r\n+\r\n+  return (\r\n+    <div style={{\r\n+      position: 'fixed',\r\n+      bottom: '100px',\r\n+      right: '30px',\r\n+      width: '350px',\r\n+      maxWidth: '90%',\r\n+      backgroundColor: darkMode ? '#2d3748' : 'white',\r\n+      borderRadius: '16px',\r\n+      boxShadow: '0 10px 25px rgba(0, 0, 0, 0.2)',\r\n+      border: darkMode ? '1px solid #4a5568' : '1px solid #e2e8f0',\r\n+      zIndex: 1000,\r\n+      overflow: 'hidden',\r\n+      display: 'flex',\r\n+      flexDirection: 'column',\r\n+      maxHeight: '60vh'\r\n+    }}>\r\n+      {/* Chat header */}\r\n+      <div style={{\r\n+        padding: '1rem',\r\n+        backgroundColor: darkMode ? '#4a5568' : '#3b82f6',\r\n+        color: 'white',\r\n+        display: 'flex',\r\n+        justifyContent: 'space-between',\r\n+        alignItems: 'center'\r\n+      }}>\r\n+        <div style={{ display: 'flex', alignItems: 'center', gap: '0.5rem' }}>\r\n+          <span style={{ fontSize: '1.5rem' }}>ü§ñ</span>\r\n+          <h3 style={{ margin: 0 }}>UrbanBuddy AI</h3>\r\n+          {isTyping && (\r\n+            <span style={{ \r\n+              fontSize: '0.8rem',\r\n+              marginLeft: '0.5rem',\r\n+              opacity: 0.8\r\n+            }}>typing...</span>\r\n+          )}\r\n+        </div>\r\n+        <button \r\n+          onClick={onClose}\r\n+          style={{\r\n+            background: 'none',\r\n+            border: 'none',\r\n+            color: 'white',\r\n+            fontSize: '1.2rem',\r\n+            cursor: 'pointer'\r\n+          }}\r\n+        >\r\n+          √ó\r\n+        </button>\r\n+      </div>\r\n+      \r\n+      {/* Chat messages */}\r\n+      <div style={{\r\n+        flex: 1,\r\n+        padding: '1rem',\r\n+        overflowY: 'auto',\r\n+        display: 'flex',\r\n+        flexDirection: 'column',\r\n+        gap: '0.8rem'\r\n+      }}>\r\n+        {messages.map((msg, index) => (\r\n+          <div \r\n+            key={index}\r\n+            style={{\r\n+              alignSelf: msg.sender === 'user' ? 'flex-end' : 'flex-start',\r\n+              maxWidth: '80%',\r\n+              padding: '0.6rem 1rem',\r\n+              borderRadius: msg.sender === 'user' \r\n+                ? '18px 18px 0 18px' \r\n+                : '18px 18px 18px 0',\r\n+              backgroundColor: msg.sender === 'user'\r\n+                ? (darkMode ? '#4a5568' : '#3b82f6')\r\n+                : (darkMode ? '#4a5568' : '#e2e8f0'),\r\n+              color: msg.sender === 'user' ? 'white' : (darkMode ? 'white' : '#1e293b'),\r\n+              animation: msg.sender === 'bot' && index === messages.length - 1 \r\n+                ? 'fadeIn 0.3s ease' \r\n+                : 'none'\r\n+            }}\r\n+          >\r\n+            {msg.text}\r\n+          </div>\r\n+        ))}\r\n+        <div ref={chatEndRef} />\r\n+      </div>\r\n+      \r\n+      {/* Chat input */}\r\n+      <form onSubmit={handleSendMessage} style={{\r\n+        padding: '0.8rem',\r\n+        borderTop: darkMode ? '1px solid #4a5568' : '1px solid #e2e8f0',\r\n+        display: 'flex',\r\n+        gap: '0.5rem'\r\n+      }}>\r\n+        <input\r\n+          ref={inputRef}\r\n+          type=\"text\"\r\n+          value={inputValue}\r\n+          onChange={(e) => setInputValue(e.target.value)}\r\n+          placeholder=\"Ask me about urban living...\"\r\n+          disabled={isTyping}\r\n+          style={{\r\n+            flex: 1,\r\n+            padding: '0.6rem 1rem',\r\n+            borderRadius: '20px',\r\n+            border: darkMode ? '1px solid #4a5568' : '1px solid #e2e8f0',\r\n+            backgroundColor: darkMode ? '#2d3748' : 'white',\r\n+            color: darkMode ? 'white' : '#1e293b',\r\n+            outline: 'none',\r\n+            opacity: isTyping ? 0.7 : 1\r\n+          }}\r\n+        />\r\n+        <button \r\n+          type=\"submit\"\r\n+          disabled={isTyping}\r\n+          style={{\r\n+            background: isTyping \r\n+              ? (darkMode ? '#4a5568' : '#e2e8f0')\r\n+              : (darkMode ? '#4a5568' : '#3b82f6'),\r\n+            color: 'white',\r\n+            border: 'none',\r\n+            borderRadius: '50%',\r\n+            width: '40px',\r\n+            height: '40px',\r\n+            display: 'flex',\r\n+            alignItems: 'center',\r\n+            justifyContent: 'center',\r\n+            cursor: isTyping ? 'not-allowed' : 'pointer'\r\n+          }}\r\n+        >\r\n+          {isTyping ? '...' : '‚û§'}\r\n+        </button>\r\n+      </form>\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+// Main Home Component\r\n+export default function Home() {\r\n+  const navigate = useNavigate();\r\n+  const [searchQuery, setSearchQuery] = useState('');\r\n+  const [darkMode, setDarkMode] = useState(false);\r\n+  const [selectedService, setSelectedService] = useState(null);\r\n+  const [orderCount, setOrderCount] = useState(0);\r\n+  const [achievements, setAchievements] = useState([]);\r\n+  const [showChat, setShowChat] = useState(false);\r\n+\r\n+  const services = [\r\n+    { \r\n+      name: 'Transport', \r\n+      path: '/transport', \r\n+      icon: 'üöå', \r\n+      desc: 'Plan your multi-modal journey across the city',\r\n+      color: '#3b82f6',\r\n+      details: 'Find the best routes combining metro, buses, and bikes. Real-time updates and ticket purchasing available.'\r\n+    },\r\n+    { \r\n+      name: 'Food Delivery', \r\n+      path: '/food', \r\n+      icon: 'üçî', \r\n+      desc: 'Discover local restaurants and cafes',\r\n+      color: '#ef4444',\r\n+      details: 'Order from hundreds of restaurants with special discounts. Track your delivery in real-time.'\r\n+    },\r\n+    { \r\n+      name: 'Groceries', \r\n+      path: '/food', \r\n+      icon: 'üõí', \r\n+      desc: 'Get groceries delivered in minutes',\r\n+      color: '#10b981',\r\n+      details: 'Same-day delivery from local supermarkets. Schedule recurring orders for essentials.'\r\n+    },\r\n+    { \r\n+      name: 'Services', \r\n+      path: '/food', \r\n+      icon: 'üõ†Ô∏è', \r\n+      desc: 'Find urban services near you',\r\n+      color: '#8b5cf6',\r\n+      details: 'Book home services, repairs, and professional help with verified providers.'\r\n+    }\r\n+  ];\r\n+\r\n+  // Check for achievements\r\n+  useEffect(() => {\r\n+    if (orderCount === 1) {\r\n+      addAchievement('First Order!', 'üéâ');\r\n+    } else if (orderCount === 5) {\r\n+      addAchievement('Regular Customer!', 'üèÜ');\r\n+    } else if (orderCount === 10) {\r\n+      addAchievement('Super User!', 'üåü');\r\n+    }\r\n+  }, [orderCount]);\r\n+\r\n+  const addAchievement = (title, icon) => {\r\n+    if (!achievements.some(a => a.title === title)) {\r\n+      const newAchievement = { title, icon, id: Date.now() };\r\n+      setAchievements(prev => [...prev, newAchievement]);\r\n+      \r\n+      // Auto-hide achievement after 3 seconds\r\n+      setTimeout(() => {\r\n+        setAchievements(prev => prev.filter(a => a.id !== newAchievement.id));\r\n+      }, 3000);\r\n+    }\r\n+  };\r\n+\r\n+  const handleSearch = (e) => {\r\n+    e.preventDefault();\r\n+    if (searchQuery.trim()) {\r\n+      navigate(`/food?search=${encodeURIComponent(searchQuery)}`);\r\n+    }\r\n+  };\r\n+\r\n+  const toggleDarkMode = () => {\r\n+    setDarkMode(!darkMode);\r\n+  };\r\n+\r\n+  const openServicePopup = (service) => {\r\n+    setSelectedService(service);\r\n+    setOrderCount(prev => prev + 1);\r\n+  };\r\n+\r\n+  const closePopup = () => {\r\n+    setSelectedService(null);\r\n+  };\r\n+\r\n+  const toggleChat = () => {\r\n+    setShowChat(!showChat);\r\n+  };\r\n+\r\n+  return (\r\n+    <div style={{\r\n+      backgroundColor: darkMode ? '#1a202c' : '#f8fafc',\r\n+      minHeight: '100vh',\r\n+      paddingBottom: '3rem',\r\n+      color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+      transition: 'all 0.3s ease',\r\n+      position: 'relative'\r\n+    }}>\r\n+      {/* Theme Toggle Button */}\r\n+      <button \r\n+        onClick={toggleDarkMode} \r\n+        style={{\r\n+          position: 'fixed',\r\n+          top: '1.5rem',\r\n+          right: '1.5rem',\r\n+          background: darkMode ? '#4a5568' : '#e2e8f0',\r\n+          border: 'none',\r\n+          borderRadius: '50%',\r\n+          width: '40px',\r\n+          height: '40px',\r\n+          display: 'flex',\r\n+          alignItems: 'center',\r\n+          justifyContent: 'center',\r\n+          cursor: 'pointer',\r\n+          transition: 'all 0.3s ease',\r\n+          boxShadow: '0 2px 5px rgba(0, 0, 0, 0.2)',\r\n+          zIndex: 100\r\n+        }}\r\n+        aria-label={darkMode ? 'Switch to light mode' : 'Switch to dark mode'}\r\n+      >\r\n+        {darkMode ? '‚òÄÔ∏è' : 'üåô'}\r\n+      </button>\r\n+      \r\n+      {/* Hero Section with UrbanBuddy */}\r\n+      <section style={{\r\n+        background: darkMode \r\n+          ? 'linear-gradient(135deg, #2d3748 0%, #1a202c 100%)' \r\n+          : 'linear-gradient(135deg, #6b46c1 0%, #3b82f6 100%)',\r\n+        color: 'white',\r\n+        padding: '4rem 1rem',\r\n+        textAlign: 'center',\r\n+        borderRadius: '0 0 20px 20px',\r\n+        boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',\r\n+        position: 'relative',\r\n+        overflow: 'hidden',\r\n+        height: '300px'\r\n+      }}>\r\n+        <div style={{\r\n+          maxWidth: '800px',\r\n+          margin: '0 auto',\r\n+          position: 'relative',\r\n+          zIndex: 2\r\n+        }}>\r\n+          <h1 style={{\r\n+            fontSize: '3.5rem',\r\n+            fontWeight: '800',\r\n+            marginBottom: '0.5rem',\r\n+            textShadow: '2px 2px 4px rgba(0, 0, 0, 0.2)',\r\n+          }}>UrbanFlow</h1>\r\n+          <p style={{\r\n+            fontSize: '1.25rem',\r\n+            marginBottom: '2rem',\r\n+            opacity: 0.9,\r\n+          }}>Your seamless urban living companion</p>\r\n+          \r\n+          <form onSubmit={handleSearch} style={{\r\n+            display: 'flex',\r\n+            maxWidth: '600px',\r\n+            margin: '0 auto',\r\n+            borderRadius: '50px',\r\n+            overflow: 'hidden',\r\n+            boxShadow: '0 4px 10px rgba(0, 0, 0, 0.2)',\r\n+          }}>\r\n+            <input\r\n+              type=\"text\"\r\n+              placeholder=\"Search for restaurants, services...\"\r\n+              value={searchQuery}\r\n+              onChange={(e) => setSearchQuery(e.target.value)}\r\n+              style={{\r\n+                flex: 1,\r\n+                padding: '1rem 1.5rem',\r\n+                border: 'none',\r\n+                fontSize: '1rem',\r\n+                outline: 'none',\r\n+                backgroundColor: darkMode ? '#2d3748' : 'white',\r\n+                color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+              }}\r\n+            />\r\n+            <button type=\"submit\" style={{\r\n+              backgroundColor: darkMode ? '#4a5568' : '#1e40af',\r\n+              color: 'white',\r\n+              border: 'none',\r\n+              padding: '0 1.5rem',\r\n+              cursor: 'pointer',\r\n+              fontSize: '1.25rem',\r\n+              transition: 'background-color 0.2s'\r\n+            }}>\r\n+              <span>üîç</span>\r\n+            </button>\r\n+          </form>\r\n+        </div>\r\n+        <UrbanBuddy darkMode={darkMode} onChatOpen={toggleChat} />\r\n+      </section>\r\n+\r\n+      {/* Services Grid */}\r\n+      <section style={{\r\n+        padding: '2rem 1rem',\r\n+        maxWidth: '1200px',\r\n+        margin: '0 auto',\r\n+      }}>\r\n+        <h2 style={{\r\n+          fontSize: '2rem',\r\n+          fontWeight: '700',\r\n+          marginBottom: '1.5rem',\r\n+          color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+          textAlign: 'center',\r\n+        }}>What do you need today?</h2>\r\n+        <div style={{\r\n+          display: 'grid',\r\n+          gridTemplateColumns: 'repeat(auto-fit, minmax(250px, 1fr))',\r\n+          gap: '1.5rem',\r\n+          marginTop: '1rem',\r\n+        }}>\r\n+          {services.map((service) => (\r\n+            <div \r\n+              key={service.name} \r\n+              style={{ \r\n+                padding: '2rem 1.5rem',\r\n+                borderRadius: '16px',\r\n+                border: `2px solid ${service.color}`,\r\n+                textAlign: 'center',\r\n+                cursor: 'pointer',\r\n+                transition: 'transform 0.3s, box-shadow 0.3s',\r\n+                backgroundColor: darkMode \r\n+                  ? `${service.color}20` \r\n+                  : `${service.color}10`,\r\n+                ':hover': {\r\n+                  transform: 'translateY(-5px)',\r\n+                  boxShadow: '0 10px 20px rgba(0, 0, 0, 0.1)',\r\n+                }\r\n+              }}\r\n+              onClick={() => openServicePopup(service)}\r\n+            >\r\n+              <div style={{ \r\n+                fontSize: '3rem',\r\n+                marginBottom: '1rem',\r\n+                display: 'inline-block',\r\n+                animation: 'float 3s ease-in-out infinite'\r\n+              }}>{service.icon}</div>\r\n+              <h3 style={{fontSize: '1.5rem', fontWeight: '600', marginBottom: '0.5rem'}}>{service.name}</h3>\r\n+              <p style={{color: darkMode ? '#a0aec0' : '#64748b'}}>{service.desc}</p>\r\n+            </div>\r\n+          ))}\r\n+        </div>\r\n+      </section>\r\n+\r\n+      {/* Featured Section */}\r\n+      <section style={{\r\n+        padding: '2rem 1rem',\r\n+        maxWidth: '1200px',\r\n+        margin: '0 auto',\r\n+      }}>\r\n+        <h2 style={{\r\n+          fontSize: '2rem',\r\n+          fontWeight: '700',\r\n+          marginBottom: '1.5rem',\r\n+          color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+          textAlign: 'center',\r\n+        }}>Quick Access</h2>\r\n+        <div style={{\r\n+          display: 'flex',\r\n+          justifyContent: 'center',\r\n+          gap: '1rem',\r\n+          flexWrap: 'wrap',\r\n+        }}>\r\n+          <button \r\n+            onClick={() => navigate('/transport?from=home&to=downtown')}\r\n+            style={{\r\n+              padding: '0.75rem 1.5rem',\r\n+              borderRadius: '50px',\r\n+              border: 'none',\r\n+              backgroundColor: darkMode ? '#2d3748' : '#e2e8f0',\r\n+              color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+              fontWeight: '600',\r\n+              cursor: 'pointer',\r\n+              transition: 'all 0.2s',\r\n+              display: 'flex',\r\n+              alignItems: 'center',\r\n+              gap: '0.5rem',\r\n+              fontSize: '1rem'\r\n+            }}\r\n+          >\r\n+            üöï To Downtown\r\n+          </button>\r\n+          <button \r\n+            onClick={() => navigate('/food?category=fastfood')}\r\n+            style={{\r\n+              padding: '0.75rem 1.5rem',\r\n+              borderRadius: '50px',\r\n+              border: 'none',\r\n+              backgroundColor: darkMode ? '#2d3748' : '#e2e8f0',\r\n+              color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+              fontWeight: '600',\r\n+              cursor: 'pointer',\r\n+              transition: 'all 0.2s',\r\n+              display: 'flex',\r\n+              alignItems: 'center',\r\n+              gap: '0.5rem',\r\n+              fontSize: '1rem'\r\n+            }}\r\n+          >\r\n+            üçü Fast Food\r\n+          </button>\r\n+          <button \r\n+            onClick={() => navigate('/food?category=coffee')}\r\n+            style={{\r\n+              padding: '0.75rem 1.5rem',\r\n+              borderRadius: '50px',\r\n+              border: 'none',\r\n+              backgroundColor: darkMode ? '#2d3748' : '#e2e8f0',\r\n+              color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+              fontWeight: '600',\r\n+              cursor: 'pointer',\r\n+              transition: 'all 0.2s',\r\n+              display: 'flex',\r\n+              alignItems: 'center',\r\n+              gap: '0.5rem',\r\n+              fontSize: '1rem'\r\n+            }}\r\n+          >\r\n+            ‚òï Coffee Shops\r\n+          </button>\r\n+        </div>\r\n+      </section>\r\n+\r\n+      {/* Service Popup */}\r\n+      {selectedService && (\r\n+        <div style={{\r\n+          position: 'fixed',\r\n+          top: 0,\r\n+          left: 0,\r\n+          right: 0,\r\n+          bottom: 0,\r\n+          backgroundColor: 'rgba(0, 0, 0, 0.7)',\r\n+          display: 'flex',\r\n+          justifyContent: 'center',\r\n+          alignItems: 'center',\r\n+          zIndex: 1000,\r\n+        }} onClick={closePopup}>\r\n+          <div style={{\r\n+            backgroundColor: darkMode ? '#2d3748' : 'white',\r\n+            borderRadius: '16px',\r\n+            padding: '2rem',\r\n+            maxWidth: '500px',\r\n+            width: '90%',\r\n+            boxShadow: '0 10px 25px rgba(0, 0, 0, 0.2)',\r\n+            position: 'relative',\r\n+            border: darkMode ? '1px solid #4a5568' : '1px solid #e2e8f0',\r\n+          }} onClick={(e) => e.stopPropagation()}>\r\n+            <button style={{\r\n+              position: 'absolute',\r\n+              top: '1rem',\r\n+              right: '1rem',\r\n+              background: 'none',\r\n+              border: 'none',\r\n+              fontSize: '1.5rem',\r\n+              cursor: 'pointer',\r\n+              color: darkMode ? '#a0aec0' : '#64748b',\r\n+            }} onClick={closePopup}>√ó</button>\r\n+            <div style={{ \r\n+              display: 'flex', \r\n+              alignItems: 'center', \r\n+              gap: '1rem',\r\n+              marginBottom: '1.5rem'\r\n+            }}>\r\n+              <span style={{ fontSize: '2.5rem', animation: 'float 3s ease-in-out infinite' }}>{selectedService.icon}</span>\r\n+              <h3 style={{fontSize: '1.8rem', fontWeight: '700', marginBottom: '1rem', color: darkMode ? '#e2e8f0' : '#1e293b'}}>{selectedService.name}</h3>\r\n+            </div>\r\n+            <p style={{color: darkMode ? '#a0aec0' : '#64748b', fontSize: '1.1rem', lineHeight: '1.6', marginBottom: '2rem'}}>{selectedService.details}</p>\r\n+            <button \r\n+              style={{ \r\n+                padding: '0.75rem 1.5rem',\r\n+                borderRadius: '8px',\r\n+                border: 'none',\r\n+                backgroundColor: selectedService.color,\r\n+                color: 'white',\r\n+                fontWeight: '600',\r\n+                cursor: 'pointer',\r\n+                transition: 'all 0.2s',\r\n+                fontSize: '1rem'\r\n+              }}\r\n+              onClick={() => {\r\n+                navigate(selectedService.path);\r\n+                closePopup();\r\n+              }}\r\n+            >\r\n+              Explore {selectedService.name}\r\n+            </button>\r\n+          </div>\r\n+        </div>\r\n+      )}\r\n+\r\n+      {/* Achievements */}\r\n+      {achievements.map(achievement => (\r\n+        <div key={achievement.id} style={{\r\n+          position: 'fixed',\r\n+          bottom: '20px',\r\n+          right: '20px',\r\n+          background: darkMode ? '#2d3748' : 'white',\r\n+          color: darkMode ? 'white' : '#1e293b',\r\n+          padding: '1rem',\r\n+          borderRadius: '12px',\r\n+          boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',\r\n+          display: 'flex',\r\n+          alignItems: 'center',\r\n+          gap: '0.5rem',\r\n+          zIndex: 1000,\r\n+          animation: 'slideIn 0.5s forwards, fadeOut 0.5s forwards 2.5s'\r\n+        }}>\r\n+          <span style={{fontSize: '1.5rem'}}>{achievement.icon}</span>\r\n+          <span>{achievement.title}</span>\r\n+        </div>\r\n+      ))}\r\n+\r\n+      {/* Chat Modal */}\r\n+      {showChat && <ChatModal darkMode={darkMode} onClose={toggleChat} />}\r\n+\r\n+      {/* Footer with copyright */}\r\n+      <footer style={{\r\n+        textAlign: 'center',\r\n+        padding: '2rem 1rem',\r\n+        color: darkMode ? '#a0aec0' : '#64748b',\r\n+        fontSize: '0.9rem',\r\n+        marginTop: '2rem'\r\n+      }}>\r\n+        <p>¬© {new Date().getFullYear()} UrbanFlow - Created by Nick</p>\r\n+      </footer>\r\n+    </div>\r\n+  );\r\n+};\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752651378359,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,831 @@\n+import { useState, useEffect, useRef } from 'react';\r\n+import { useNavigate } from 'react-router-dom';\r\n+\r\n+// UrbanBuddy AI Assistant Component\r\n+const UrbanBuddy = ({ darkMode, onChatOpen }) => {\r\n+  const [position, setPosition] = useState({ x: 20, y: 50 });\r\n+  const [expression, setExpression] = useState('üòä');\r\n+  const [direction, setDirection] = useState(1);\r\n+  const [costume, setCostume] = useState(null);\r\n+  const [isActive, setIsActive] = useState(false);\r\n+  const botRef = useRef(null);\r\n+  const animationRef = useRef(null);\r\n+  const lastInteractionTime = useRef(Date.now());\r\n+\r\n+  // Seasonal costumes\r\n+  useEffect(() => {\r\n+    const today = new Date();\r\n+    const month = today.getMonth() + 1;\r\n+    \r\n+    if (month === 12) setCostume('üéÑ');\r\n+    else if (month === 10) setCostume('üéÉ');\r\n+    else if (month === 2) setCostume('üíù');\r\n+    else if (month === 4) setCostume('üå∏');\r\n+    else setCostume(null);\r\n+  }, []);\r\n+\r\n+  // Make the bot wander with more dynamic movement\r\n+  useEffect(() => {\r\n+    const moveInterval = setInterval(() => {\r\n+      setPosition(prev => {\r\n+        const now = Date.now();\r\n+        const timeSinceLastInteraction = now - lastInteractionTime.current;\r\n+        \r\n+        // More active movement right after interaction\r\n+        const speedMultiplier = timeSinceLastInteraction < 5000 ? 2 : 1;\r\n+        \r\n+        let newX = prev.x + (3 * direction * speedMultiplier);\r\n+        let newY = prev.y + (Math.random() * 6 - 3);\r\n+        \r\n+        // Bounce off edges\r\n+        if (newX > window.innerWidth - 80) {\r\n+          setDirection(-1);\r\n+          triggerAnimation('spin');\r\n+        }\r\n+        if (newX < 20) {\r\n+          setDirection(1);\r\n+          triggerAnimation('spin');\r\n+        }\r\n+        if (newY < 20) newY = 20;\r\n+        if (newY > window.innerHeight - 100) newY = window.innerHeight - 100;\r\n+        \r\n+        return { x: newX, y: newY };\r\n+      });\r\n+    }, 100);\r\n+\r\n+    return () => clearInterval(moveInterval);\r\n+  }, [direction]);\r\n+\r\n+  // Change expressions randomly with more variety\r\n+  useEffect(() => {\r\n+    const expressions = ['üòä', 'ü§î', 'üòÆ', 'üòé', 'üëã', 'ü§ñ', '‚ú®', 'üåü'];\r\n+    const expressionInterval = setInterval(() => {\r\n+      if (!isActive) {\r\n+        setExpression(expressions[Math.floor(Math.random() * expressions.length)]);\r\n+        // Random animations when idle\r\n+        if (Math.random() > 0.8) {\r\n+          triggerAnimation(['bounce', 'spin', 'wobble'][Math.floor(Math.random() * 3)]);\r\n+        }\r\n+      }\r\n+    }, 3000);\r\n+    return () => clearInterval(expressionInterval);\r\n+  }, [isActive]);\r\n+\r\n+  const triggerAnimation = (type) => {\r\n+    if (animationRef.current) {\r\n+      clearTimeout(animationRef.current);\r\n+    }\r\n+    \r\n+    const botElement = botRef.current;\r\n+    if (!botElement) return;\r\n+    \r\n+    botElement.style.animation = 'none';\r\n+    void botElement.offsetWidth; // Trigger reflow\r\n+    \r\n+    switch(type) {\r\n+      case 'spin':\r\n+        botElement.style.animation = 'spin 1s ease';\r\n+        break;\r\n+      case 'bounce':\r\n+        botElement.style.animation = 'bounce 0.5s ease';\r\n+        break;\r\n+      case 'wobble':\r\n+        botElement.style.animation = 'wobble 0.8s ease';\r\n+        break;\r\n+      default:\r\n+        botElement.style.animation = '';\r\n+    }\r\n+    \r\n+    animationRef.current = setTimeout(() => {\r\n+      if (botElement) botElement.style.animation = '';\r\n+    }, 1000);\r\n+  };\r\n+\r\n+  const handleClick = () => {\r\n+    lastInteractionTime.current = Date.now();\r\n+    setIsActive(true);\r\n+    triggerAnimation('bounce');\r\n+    setExpression('üí°');\r\n+    \r\n+    // Trigger chat opening in parent component\r\n+    onChatOpen();\r\n+    \r\n+    // Return to normal after a delay\r\n+    setTimeout(() => {\r\n+      setIsActive(false);\r\n+    }, 3000);\r\n+  };\r\n+\r\n+  // Custom animations\r\n+  const animations = `\r\n+    @keyframes spin {\r\n+      0% { transform: rotate(0deg) scaleX(${direction}); }\r\n+      100% { transform: rotate(360deg) scaleX(${direction}); }\r\n+    }\r\n+    @keyframes bounce {\r\n+      0%, 100% { transform: translateY(0) scaleX(${direction}); }\r\n+      50% { transform: translateY(-20px) scaleX(${direction}); }\r\n+    }\r\n+    @keyframes wobble {\r\n+      0%, 100% { transform: rotate(0deg) scaleX(${direction}); }\r\n+      25% { transform: rotate(5deg) scaleX(${direction}); }\r\n+      75% { transform: rotate(-5deg) scaleX(${direction}); }\r\n+    }\r\n+    @keyframes float {\r\n+      0% { transform: translateY(0px) scaleX(${direction}); }\r\n+      50% { transform: translateY(-10px) scaleX(${direction}); }\r\n+      100% { transform: translateY(0px) scaleX(${direction}); }\r\n+    }\r\n+  `;\r\n+\r\n+  return (\r\n+    <>\r\n+      <style>{animations}</style>\r\n+      <div \r\n+        ref={botRef}\r\n+        onClick={handleClick}\r\n+        style={{\r\n+          position: 'fixed',\r\n+          left: `${position.x}px`,\r\n+          top: `${position.y}px`,\r\n+          fontSize: '2.5rem',\r\n+          cursor: 'pointer',\r\n+          transition: 'all 0.3s ease',\r\n+          transform: `scaleX(${direction})`,\r\n+          zIndex: 100,\r\n+          filter: darkMode \r\n+            ? 'drop-shadow(0 0 8px rgba(255,255,255,0.7))' \r\n+            : 'drop-shadow(0 0 8px rgba(0,0,0,0.3))',\r\n+          userSelect: 'none',\r\n+          animation: 'float 4s ease-in-out infinite'\r\n+        }}\r\n+      >\r\n+        <div style={{ \r\n+          position: 'relative',\r\n+          display: 'flex',\r\n+          flexDirection: 'column',\r\n+          alignItems: 'center'\r\n+        }}>\r\n+          {/* Bot icon with costume */}\r\n+          <div style={{\r\n+            position: 'relative',\r\n+            width: '60px',\r\n+            height: '60px',\r\n+            backgroundColor: darkMode ? '#4a5568' : '#3b82f6',\r\n+            borderRadius: '50%',\r\n+            display: 'flex',\r\n+            justifyContent: 'center',\r\n+            alignItems: 'center',\r\n+            color: 'white'\r\n+          }}>\r\n+            <span style={{ fontSize: '1.8rem' }}>{expression}</span>\r\n+            {costume && (\r\n+              <span style={{\r\n+                position: 'absolute',\r\n+                top: '-15px',\r\n+                right: '-10px',\r\n+                fontSize: '1.5rem',\r\n+                transform: 'rotate(15deg)'\r\n+              }}>\r\n+                {costume}\r\n+              </span>\r\n+            )}\r\n+          </div>\r\n+        </div>\r\n+      </div>\r\n+    </>\r\n+  );\r\n+};\r\n+\r\n+// Chat Modal Component with Direct Gemini API Connection\r\n+const ChatModal = ({ darkMode, onClose }) => {\r\n+  const [messages, setMessages] = useState([\r\n+    { text: \"Hello! I'm UrbanBuddy, your AI assistant powered by Gemini. How can I help you with urban living today?\", sender: 'bot' }\r\n+  ]);\r\n+  const [inputValue, setInputValue] = useState('');\r\n+  const [isTyping, setIsTyping] = useState(false);\r\n+  const chatEndRef = useRef(null);\r\n+  const inputRef = useRef(null);\r\n+\r\n+  // Auto-scroll to bottom and focus input\r\n+  useEffect(() => {\r\n+    chatEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n+    inputRef.current?.focus();\r\n+  }, [messages]);\r\n+\r\n+  // Direct API call to Gemini through a proxy\r\n+  const generateResponse = async (userMessage) => {\r\n+    setIsTyping(true);\r\n+    \r\n+    try {\r\n+      // Using a public AI API gateway (no API key needed)\r\n+      const response = await fetch('https://gemini-proxy.vercel.app/api/generate', {\r\n+        method: \"POST\",\r\n+        headers: { \r\n+          \"Content-Type\": \"application/json\",\r\n+        },\r\n+        body: JSON.stringify({\r\n+          prompt: `You are UrbanBuddy, a friendly AI assistant for urban living. \r\n+          Respond to this query about city life: ${userMessage}\r\n+          Keep responses concise (1-2 sentences) and helpful.`\r\n+        })\r\n+      });\r\n+      \r\n+      const data = await response.json();\r\n+      \r\n+      setMessages(prev => [...prev, { \r\n+        text: data.response || \"I'm here to help with urban living questions!\", \r\n+        sender: 'bot' \r\n+      }]);\r\n+    } catch (error) {\r\n+      console.error(\"API error:\", error);\r\n+      setMessages(prev => [...prev, { \r\n+        text: \"I'm having trouble connecting right now. Try again later!\", \r\n+        sender: 'bot' \r\n+      }]);\r\n+    } finally {\r\n+      setIsTyping(false);\r\n+    }\r\n+  };\r\n+\r\n+  const handleSendMessage = async (e) => {\r\n+    e.preventDefault();\r\n+    if (inputValue.trim() && !isTyping) {\r\n+      // Add user message\r\n+      const userMessage = inputValue.trim();\r\n+      setMessages(prev => [...prev, { text: userMessage, sender: 'user' }]);\r\n+      setInputValue('');\r\n+      \r\n+      // Generate AI response\r\n+      await generateResponse(userMessage);\r\n+    }\r\n+  };\r\n+\r\n+  return (\r\n+    <div style={{\r\n+      position: 'fixed',\r\n+      bottom: '100px',\r\n+      right: '30px',\r\n+      width: '350px',\r\n+      maxWidth: '90%',\r\n+      backgroundColor: darkMode ? '#2d3748' : 'white',\r\n+      borderRadius: '16px',\r\n+      boxShadow: '0 10px 25px rgba(0, 0, 0, 0.2)',\r\n+      border: darkMode ? '1px solid #4a5568' : '1px solid #e2e8f0',\r\n+      zIndex: 1000,\r\n+      overflow: 'hidden',\r\n+      display: 'flex',\r\n+      flexDirection: 'column',\r\n+      maxHeight: '60vh'\r\n+    }}>\r\n+      {/* Chat header */}\r\n+      <div style={{\r\n+        padding: '1rem',\r\n+        backgroundColor: darkMode ? '#4a5568' : '#3b82f6',\r\n+        color: 'white',\r\n+        display: 'flex',\r\n+        justifyContent: 'space-between',\r\n+        alignItems: 'center'\r\n+      }}>\r\n+        <div style={{ display: 'flex', alignItems: 'center', gap: '0.5rem' }}>\r\n+          <span style={{ fontSize: '1.5rem' }}>ü§ñ</span>\r\n+          <h3 style={{ margin: 0 }}>UrbanBuddy AI</h3>\r\n+          {isTyping && (\r\n+            <span style={{ \r\n+              fontSize: '0.8rem',\r\n+              marginLeft: '0.5rem',\r\n+              opacity: 0.8\r\n+            }}>typing...</span>\r\n+          )}\r\n+        </div>\r\n+        <button \r\n+          onClick={onClose}\r\n+          style={{\r\n+            background: 'none',\r\n+            border: 'none',\r\n+            color: 'white',\r\n+            fontSize: '1.2rem',\r\n+            cursor: 'pointer'\r\n+          }}\r\n+        >\r\n+          √ó\r\n+        </button>\r\n+      </div>\r\n+      \r\n+      {/* Chat messages */}\r\n+      <div style={{\r\n+        flex: 1,\r\n+        padding: '1rem',\r\n+        overflowY: 'auto',\r\n+        display: 'flex',\r\n+        flexDirection: 'column',\r\n+        gap: '0.8rem'\r\n+      }}>\r\n+        {messages.map((msg, index) => (\r\n+          <div \r\n+            key={index}\r\n+            style={{\r\n+              alignSelf: msg.sender === 'user' ? 'flex-end' : 'flex-start',\r\n+              maxWidth: '80%',\r\n+              padding: '0.6rem 1rem',\r\n+              borderRadius: msg.sender === 'user' \r\n+                ? '18px 18px 0 18px' \r\n+                : '18px 18px 18px 0',\r\n+              backgroundColor: msg.sender === 'user'\r\n+                ? (darkMode ? '#4a5568' : '#3b82f6')\r\n+                : (darkMode ? '#4a5568' : '#e2e8f0'),\r\n+              color: msg.sender === 'user' ? 'white' : (darkMode ? 'white' : '#1e293b'),\r\n+              animation: msg.sender === 'bot' && index === messages.length - 1 \r\n+                ? 'fadeIn 0.3s ease' \r\n+                : 'none'\r\n+            }}\r\n+          >\r\n+            {msg.text}\r\n+          </div>\r\n+        ))}\r\n+        <div ref={chatEndRef} />\r\n+      </div>\r\n+      \r\n+      {/* Chat input */}\r\n+      <form onSubmit={handleSendMessage} style={{\r\n+        padding: '0.8rem',\r\n+        borderTop: darkMode ? '1px solid #4a5568' : '1px solid #e2e8f0',\r\n+        display: 'flex',\r\n+        gap: '0.5rem'\r\n+      }}>\r\n+        <input\r\n+          ref={inputRef}\r\n+          type=\"text\"\r\n+          value={inputValue}\r\n+          onChange={(e) => setInputValue(e.target.value)}\r\n+          placeholder=\"Ask me about urban living...\"\r\n+          disabled={isTyping}\r\n+          style={{\r\n+            flex: 1,\r\n+            padding: '0.6rem 1rem',\r\n+            borderRadius: '20px',\r\n+            border: darkMode ? '1px solid #4a5568' : '1px solid #e2e8f0',\r\n+            backgroundColor: darkMode ? '#2d3748' : 'white',\r\n+            color: darkMode ? 'white' : '#1e293b',\r\n+            outline: 'none',\r\n+            opacity: isTyping ? 0.7 : 1\r\n+          }}\r\n+        />\r\n+        <button \r\n+          type=\"submit\"\r\n+          disabled={isTyping}\r\n+          style={{\r\n+            background: isTyping \r\n+              ? (darkMode ? '#4a5568' : '#e2e8f0')\r\n+              : (darkMode ? '#4a5568' : '#3b82f6'),\r\n+            color: 'white',\r\n+            border: 'none',\r\n+            borderRadius: '50%',\r\n+            width: '40px',\r\n+            height: '40px',\r\n+            display: 'flex',\r\n+            alignItems: 'center',\r\n+            justifyContent: 'center',\r\n+            cursor: isTyping ? 'not-allowed' : 'pointer'\r\n+          }}\r\n+        >\r\n+          {isTyping ? '...' : '‚û§'}\r\n+        </button>\r\n+      </form>\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+// Main Home Component\r\n+export default function Home() {\r\n+  const navigate = useNavigate();\r\n+  const [searchQuery, setSearchQuery] = useState('');\r\n+  const [darkMode, setDarkMode] = useState(false);\r\n+  const [selectedService, setSelectedService] = useState(null);\r\n+  const [orderCount, setOrderCount] = useState(0);\r\n+  const [achievements, setAchievements] = useState([]);\r\n+  const [showChat, setShowChat] = useState(false);\r\n+\r\n+  const services = [\r\n+    { \r\n+      name: 'Transport', \r\n+      path: '/transport', \r\n+      icon: 'üöå', \r\n+      desc: 'Plan your multi-modal journey across the city',\r\n+      color: '#3b82f6',\r\n+      details: 'Find the best routes combining metro, buses, and bikes. Real-time updates and ticket purchasing available.'\r\n+    },\r\n+    { \r\n+      name: 'Food Delivery', \r\n+      path: '/food', \r\n+      icon: 'üçî', \r\n+      desc: 'Discover local restaurants and cafes',\r\n+      color: '#ef4444',\r\n+      details: 'Order from hundreds of restaurants with special discounts. Track your delivery in real-time.'\r\n+    },\r\n+    { \r\n+      name: 'Groceries', \r\n+      path: '/food', \r\n+      icon: 'üõí', \r\n+      desc: 'Get groceries delivered in minutes',\r\n+      color: '#10b981',\r\n+      details: 'Same-day delivery from local supermarkets. Schedule recurring orders for essentials.'\r\n+    },\r\n+    { \r\n+      name: 'Services', \r\n+      path: '/food', \r\n+      icon: 'üõ†Ô∏è', \r\n+      desc: 'Find urban services near you',\r\n+      color: '#8b5cf6',\r\n+      details: 'Book home services, repairs, and professional help with verified providers.'\r\n+    }\r\n+  ];\r\n+\r\n+  // Check for achievements\r\n+  useEffect(() => {\r\n+    if (orderCount === 1) {\r\n+      addAchievement('First Order!', 'üéâ');\r\n+    } else if (orderCount === 5) {\r\n+      addAchievement('Regular Customer!', 'üèÜ');\r\n+    } else if (orderCount === 10) {\r\n+      addAchievement('Super User!', 'üåü');\r\n+    }\r\n+  }, [orderCount]);\r\n+\r\n+  const addAchievement = (title, icon) => {\r\n+    if (!achievements.some(a => a.title === title)) {\r\n+      const newAchievement = { title, icon, id: Date.now() };\r\n+      setAchievements(prev => [...prev, newAchievement]);\r\n+      \r\n+      // Auto-hide achievement after 3 seconds\r\n+      setTimeout(() => {\r\n+        setAchievements(prev => prev.filter(a => a.id !== newAchievement.id));\r\n+      }, 3000);\r\n+    }\r\n+  };\r\n+\r\n+  const handleSearch = (e) => {\r\n+    e.preventDefault();\r\n+    if (searchQuery.trim()) {\r\n+      navigate(`/food?search=${encodeURIComponent(searchQuery)}`);\r\n+    }\r\n+  };\r\n+\r\n+  const toggleDarkMode = () => {\r\n+    setDarkMode(!darkMode);\r\n+  };\r\n+\r\n+  const openServicePopup = (service) => {\r\n+    setSelectedService(service);\r\n+    setOrderCount(prev => prev + 1);\r\n+  };\r\n+\r\n+  const closePopup = () => {\r\n+    setSelectedService(null);\r\n+  };\r\n+\r\n+  const toggleChat = () => {\r\n+    setShowChat(!showChat);\r\n+  };\r\n+\r\n+  return (\r\n+    <div style={{\r\n+      backgroundColor: darkMode ? '#1a202c' : '#f8fafc',\r\n+      minHeight: '100vh',\r\n+      paddingBottom: '3rem',\r\n+      color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+      transition: 'all 0.3s ease',\r\n+      position: 'relative'\r\n+    }}>\r\n+      {/* Theme Toggle Button */}\r\n+      <button \r\n+        onClick={toggleDarkMode} \r\n+        style={{\r\n+          position: 'fixed',\r\n+          top: '1.5rem',\r\n+          right: '1.5rem',\r\n+          background: darkMode ? '#4a5568' : '#e2e8f0',\r\n+          border: 'none',\r\n+          borderRadius: '50%',\r\n+          width: '40px',\r\n+          height: '40px',\r\n+          display: 'flex',\r\n+          alignItems: 'center',\r\n+          justifyContent: 'center',\r\n+          cursor: 'pointer',\r\n+          transition: 'all 0.3s ease',\r\n+          boxShadow: '0 2px 5px rgba(0, 0, 0, 0.2)',\r\n+          zIndex: 100\r\n+        }}\r\n+        aria-label={darkMode ? 'Switch to light mode' : 'Switch to dark mode'}\r\n+      >\r\n+        {darkMode ? '‚òÄÔ∏è' : 'üåô'}\r\n+      </button>\r\n+      \r\n+      {/* Hero Section with UrbanBuddy */}\r\n+      <section style={{\r\n+        background: darkMode \r\n+          ? 'linear-gradient(135deg, #2d3748 0%, #1a202c 100%)' \r\n+          : 'linear-gradient(135deg, #6b46c1 0%, #3b82f6 100%)',\r\n+        color: 'white',\r\n+        padding: '4rem 1rem',\r\n+        textAlign: 'center',\r\n+        borderRadius: '0 0 20px 20px',\r\n+        boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',\r\n+        position: 'relative',\r\n+        overflow: 'hidden',\r\n+        height: '300px'\r\n+      }}>\r\n+        <div style={{\r\n+          maxWidth: '800px',\r\n+          margin: '0 auto',\r\n+          position: 'relative',\r\n+          zIndex: 2\r\n+        }}>\r\n+          <h1 style={{\r\n+            fontSize: '3.5rem',\r\n+            fontWeight: '800',\r\n+            marginBottom: '0.5rem',\r\n+            textShadow: '2px 2px 4px rgba(0, 0, 0, 0.2)',\r\n+          }}>UrbanFlow</h1>\r\n+          <p style={{\r\n+            fontSize: '1.25rem',\r\n+            marginBottom: '2rem',\r\n+            opacity: 0.9,\r\n+          }}>Your seamless urban living companion</p>\r\n+          \r\n+          <form onSubmit={handleSearch} style={{\r\n+            display: 'flex',\r\n+            maxWidth: '600px',\r\n+            margin: '0 auto',\r\n+            borderRadius: '50px',\r\n+            overflow: 'hidden',\r\n+            boxShadow: '0 4px 10px rgba(0, 0, 0, 0.2)',\r\n+          }}>\r\n+            <input\r\n+              type=\"text\"\r\n+              placeholder=\"Search for restaurants, services...\"\r\n+              value={searchQuery}\r\n+              onChange={(e) => setSearchQuery(e.target.value)}\r\n+              style={{\r\n+                flex: 1,\r\n+                padding: '1rem 1.5rem',\r\n+                border: 'none',\r\n+                fontSize: '1rem',\r\n+                outline: 'none',\r\n+                backgroundColor: darkMode ? '#2d3748' : 'white',\r\n+                color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+              }}\r\n+            />\r\n+            <button type=\"submit\" style={{\r\n+              backgroundColor: darkMode ? '#4a5568' : '#1e40af',\r\n+              color: 'white',\r\n+              border: 'none',\r\n+              padding: '0 1.5rem',\r\n+              cursor: 'pointer',\r\n+              fontSize: '1.25rem',\r\n+              transition: 'background-color 0.2s'\r\n+            }}>\r\n+              <span>üîç</span>\r\n+            </button>\r\n+          </form>\r\n+        </div>\r\n+        <UrbanBuddy darkMode={darkMode} onChatOpen={toggleChat} />\r\n+      </section>\r\n+\r\n+      {/* Services Grid */}\r\n+      <section style={{\r\n+        padding: '2rem 1rem',\r\n+        maxWidth: '1200px',\r\n+        margin: '0 auto',\r\n+      }}>\r\n+        <h2 style={{\r\n+          fontSize: '2rem',\r\n+          fontWeight: '700',\r\n+          marginBottom: '1.5rem',\r\n+          color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+          textAlign: 'center',\r\n+        }}>What do you need today?</h2>\r\n+        <div style={{\r\n+          display: 'grid',\r\n+          gridTemplateColumns: 'repeat(auto-fit, minmax(250px, 1fr))',\r\n+          gap: '1.5rem',\r\n+          marginTop: '1rem',\r\n+        }}>\r\n+          {services.map((service) => (\r\n+            <div \r\n+              key={service.name} \r\n+              style={{ \r\n+                padding: '2rem 1.5rem',\r\n+                borderRadius: '16px',\r\n+                border: `2px solid ${service.color}`,\r\n+                textAlign: 'center',\r\n+                cursor: 'pointer',\r\n+                transition: 'transform 0.3s, box-shadow 0.3s',\r\n+                backgroundColor: darkMode \r\n+                  ? `${service.color}20` \r\n+                  : `${service.color}10`,\r\n+                ':hover': {\r\n+                  transform: 'translateY(-5px)',\r\n+                  boxShadow: '0 10px 20px rgba(0, 0, 0, 0.1)',\r\n+                }\r\n+              }}\r\n+              onClick={() => openServicePopup(service)}\r\n+            >\r\n+              <div style={{ \r\n+                fontSize: '3rem',\r\n+                marginBottom: '1rem',\r\n+                display: 'inline-block',\r\n+                animation: 'float 3s ease-in-out infinite'\r\n+              }}>{service.icon}</div>\r\n+              <h3 style={{fontSize: '1.5rem', fontWeight: '600', marginBottom: '0.5rem'}}>{service.name}</h3>\r\n+              <p style={{color: darkMode ? '#a0aec0' : '#64748b'}}>{service.desc}</p>\r\n+            </div>\r\n+          ))}\r\n+        </div>\r\n+      </section>\r\n+\r\n+      {/* Featured Section */}\r\n+      <section style={{\r\n+        padding: '2rem 1rem',\r\n+        maxWidth: '1200px',\r\n+        margin: '0 auto',\r\n+      }}>\r\n+        <h2 style={{\r\n+          fontSize: '2rem',\r\n+          fontWeight: '700',\r\n+          marginBottom: '1.5rem',\r\n+          color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+          textAlign: 'center',\r\n+        }}>Quick Access</h2>\r\n+        <div style={{\r\n+          display: 'flex',\r\n+          justifyContent: 'center',\r\n+          gap: '1rem',\r\n+          flexWrap: 'wrap',\r\n+        }}>\r\n+          <button \r\n+            onClick={() => navigate('/transport?from=home&to=downtown')}\r\n+            style={{\r\n+              padding: '0.75rem 1.5rem',\r\n+              borderRadius: '50px',\r\n+              border: 'none',\r\n+              backgroundColor: darkMode ? '#2d3748' : '#e2e8f0',\r\n+              color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+              fontWeight: '600',\r\n+              cursor: 'pointer',\r\n+              transition: 'all 0.2s',\r\n+              display: 'flex',\r\n+              alignItems: 'center',\r\n+              gap: '0.5rem',\r\n+              fontSize: '1rem'\r\n+            }}\r\n+          >\r\n+            üöï To Downtown\r\n+          </button>\r\n+          <button \r\n+            onClick={() => navigate('/food?category=fastfood')}\r\n+            style={{\r\n+              padding: '0.75rem 1.5rem',\r\n+              borderRadius: '50px',\r\n+              border: 'none',\r\n+              backgroundColor: darkMode ? '#2d3748' : '#e2e8f0',\r\n+              color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+              fontWeight: '600',\r\n+              cursor: 'pointer',\r\n+              transition: 'all 0.2s',\r\n+              display: 'flex',\r\n+              alignItems: 'center',\r\n+              gap: '0.5rem',\r\n+              fontSize: '1rem'\r\n+            }}\r\n+          >\r\n+            üçü Fast Food\r\n+          </button>\r\n+          <button \r\n+            onClick={() => navigate('/food?category=coffee')}\r\n+            style={{\r\n+              padding: '0.75rem 1.5rem',\r\n+              borderRadius: '50px',\r\n+              border: 'none',\r\n+              backgroundColor: darkMode ? '#2d3748' : '#e2e8f0',\r\n+              color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+              fontWeight: '600',\r\n+              cursor: 'pointer',\r\n+              transition: 'all 0.2s',\r\n+              display: 'flex',\r\n+              alignItems: 'center',\r\n+              gap: '0.5rem',\r\n+              fontSize: '1rem'\r\n+            }}\r\n+          >\r\n+            ‚òï Coffee Shops\r\n+          </button>\r\n+        </div>\r\n+      </section>\r\n+\r\n+      {/* Service Popup */}\r\n+      {selectedService && (\r\n+        <div style={{\r\n+          position: 'fixed',\r\n+          top: 0,\r\n+          left: 0,\r\n+          right: 0,\r\n+          bottom: 0,\r\n+          backgroundColor: 'rgba(0, 0, 0, 0.7)',\r\n+          display: 'flex',\r\n+          justifyContent: 'center',\r\n+          alignItems: 'center',\r\n+          zIndex: 1000,\r\n+        }} onClick={closePopup}>\r\n+          <div style={{\r\n+            backgroundColor: darkMode ? '#2d3748' : 'white',\r\n+            borderRadius: '16px',\r\n+            padding: '2rem',\r\n+            maxWidth: '500px',\r\n+            width: '90%',\r\n+            boxShadow: '0 10px 25px rgba(0, 0, 0, 0.2)',\r\n+            position: 'relative',\r\n+            border: darkMode ? '1px solid #4a5568' : '1px solid #e2e8f0',\r\n+          }} onClick={(e) => e.stopPropagation()}>\r\n+            <button style={{\r\n+              position: 'absolute',\r\n+              top: '1rem',\r\n+              right: '1rem',\r\n+              background: 'none',\r\n+              border: 'none',\r\n+              fontSize: '1.5rem',\r\n+              cursor: 'pointer',\r\n+              color: darkMode ? '#a0aec0' : '#64748b',\r\n+            }} onClick={closePopup}>√ó</button>\r\n+            <div style={{ \r\n+              display: 'flex', \r\n+              alignItems: 'center', \r\n+              gap: '1rem',\r\n+              marginBottom: '1.5rem'\r\n+            }}>\r\n+              <span style={{ fontSize: '2.5rem', animation: 'float 3s ease-in-out infinite' }}>{selectedService.icon}</span>\r\n+              <h3 style={{fontSize: '1.8rem', fontWeight: '700', marginBottom: '1rem', color: darkMode ? '#e2e8f0' : '#1e293b'}}>{selectedService.name}</h3>\r\n+            </div>\r\n+            <p style={{color: darkMode ? '#a0aec0' : '#64748b', fontSize: '1.1rem', lineHeight: '1.6', marginBottom: '2rem'}}>{selectedService.details}</p>\r\n+            <button \r\n+              style={{ \r\n+                padding: '0.75rem 1.5rem',\r\n+                borderRadius: '8px',\r\n+                border: 'none',\r\n+                backgroundColor: selectedService.color,\r\n+                color: 'white',\r\n+                fontWeight: '600',\r\n+                cursor: 'pointer',\r\n+                transition: 'all 0.2s',\r\n+                fontSize: '1rem'\r\n+              }}\r\n+              onClick={() => {\r\n+                navigate(selectedService.path);\r\n+                closePopup();\r\n+              }}\r\n+            >\r\n+              Explore {selectedService.name}\r\n+            </button>\r\n+          </div>\r\n+        </div>\r\n+      )}\r\n+\r\n+      {/* Achievements */}\r\n+      {achievements.map(achievement => (\r\n+        <div key={achievement.id} style={{\r\n+          position: 'fixed',\r\n+          bottom: '20px',\r\n+          right: '20px',\r\n+          background: darkMode ? '#2d3748' : 'white',\r\n+          color: darkMode ? 'white' : '#1e293b',\r\n+          padding: '1rem',\r\n+          borderRadius: '12px',\r\n+          boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',\r\n+          display: 'flex',\r\n+          alignItems: 'center',\r\n+          gap: '0.5rem',\r\n+          zIndex: 1000,\r\n+          animation: 'slideIn 0.5s forwards, fadeOut 0.5s forwards 2.5s'\r\n+        }}>\r\n+          <span style={{fontSize: '1.5rem'}}>{achievement.icon}</span>\r\n+          <span>{achievement.title}</span>\r\n+        </div>\r\n+      ))}\r\n+\r\n+      {/* Chat Modal */}\r\n+      {showChat && <ChatModal darkMode={darkMode} onClose={toggleChat} />}\r\n+\r\n+      {/* Footer with copyright */}\r\n+      <footer style={{\r\n+        textAlign: 'center',\r\n+        padding: '2rem 1rem',\r\n+        color: darkMode ? '#a0aec0' : '#64748b',\r\n+        fontSize: '0.9rem',\r\n+        marginTop: '2rem'\r\n+      }}>\r\n+        <p>¬© {new Date().getFullYear()} UrbanFlow - Created by Nick</p>\r\n+      </footer>\r\n+    </div>\r\n+  );\r\n+};\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752653116614,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,527 @@\n+import { useState, useEffect, useRef } from 'react';\r\n+import { useNavigate } from 'react-router-dom';\r\n+\r\n+// UrbanBuddy AI Assistant Component with proper bot icon\r\n+const UrbanBuddy = ({ darkMode, onChatOpen }) => {\r\n+  const [position, setPosition] = useState({ x: 20, y: 50 });\r\n+  const [direction, setDirection] = useState(1);\r\n+  const botRef = useRef(null);\r\n+  const lastInteractionTime = useRef(Date.now());\r\n+\r\n+  useEffect(() => {\r\n+    const moveInterval = setInterval(() => {\r\n+      setPosition(prev => {\r\n+        const now = Date.now();\r\n+        const timeSinceLastInteraction = now - lastInteractionTime.current;\r\n+        const speedMultiplier = timeSinceLastInteraction < 5000 ? 2 : 1;\r\n+        \r\n+        let newX = prev.x + (3 * direction * speedMultiplier);\r\n+        let newY = prev.y + (Math.random() * 6 - 3);\r\n+        \r\n+        if (newX > window.innerWidth - 80) setDirection(-1);\r\n+        if (newX < 20) setDirection(1);\r\n+        if (newY < 20) newY = 20;\r\n+        if (newY > window.innerHeight - 100) newY = window.innerHeight - 100;\r\n+        \r\n+        return { x: newX, y: newY };\r\n+      });\r\n+    }, 100);\r\n+\r\n+    return () => clearInterval(moveInterval);\r\n+  }, [direction]);\r\n+\r\n+  const handleClick = () => {\r\n+    lastInteractionTime.current = Date.now();\r\n+    onChatOpen();\r\n+  };\r\n+\r\n+  return (\r\n+    <div \r\n+      ref={botRef}\r\n+      onClick={handleClick}\r\n+      style={{\r\n+        position: 'fixed',\r\n+        left: `${position.x}px`,\r\n+        top: `${position.y}px`,\r\n+        fontSize: '2.5rem',\r\n+        cursor: 'pointer',\r\n+        transition: 'all 0.3s ease',\r\n+        transform: `scaleX(${direction})`,\r\n+        zIndex: 100,\r\n+        filter: darkMode \r\n+          ? 'drop-shadow(0 0 8px rgba(255,255,255,0.7))' \r\n+          : 'drop-shadow(0 0 8px rgba(0,0,0,0.3))',\r\n+        userSelect: 'none',\r\n+        animation: 'float 4s ease-in-out infinite'\r\n+      }}\r\n+    >\r\n+      <div style={{ \r\n+        position: 'relative',\r\n+        display: 'flex',\r\n+        flexDirection: 'column',\r\n+        alignItems: 'center'\r\n+      }}>\r\n+        <div style={{\r\n+          width: '60px',\r\n+          height: '60px',\r\n+          backgroundColor: darkMode ? '#4a5568' : '#3b82f6',\r\n+          borderRadius: '50%',\r\n+          display: 'flex',\r\n+          justifyContent: 'center',\r\n+          alignItems: 'center',\r\n+          color: 'white'\r\n+        }}>\r\n+          <span style={{ fontSize: '1.8rem' }}>ü§ñ</span>\r\n+        </div>\r\n+      </div>\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+// Chat Modal Component with Gemini API Connection\r\n+const ChatModal = ({ darkMode, onClose }) => {\r\n+  const [messages, setMessages] = useState([\r\n+    { text: \"Hello! I'm UrbanBuddy, your AI assistant. How can I help you with urban services today?\", sender: 'bot' }\r\n+  ]);\r\n+  const [inputValue, setInputValue] = useState('');\r\n+  const [isTyping, setIsTyping] = useState(false);\r\n+  const chatEndRef = useRef(null);\r\n+  const inputRef = useRef(null);\r\n+\r\n+  useEffect(() => {\r\n+    chatEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n+    inputRef.current?.focus();\r\n+  }, [messages]);\r\n+\r\n+  const generateResponse = async (userMessage) => {\r\n+    setIsTyping(true);\r\n+    \r\n+    try {\r\n+      const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent?key=${process.env.REACT_APP_GEMINI_API_KEY}`, {\r\n+        method: \"POST\",\r\n+        headers: { \"Content-Type\": \"application/json\" },\r\n+        body: JSON.stringify({\r\n+          contents: [{\r\n+            parts: [{\r\n+              text: `As UrbanBuddy, a friendly AI assistant for urban services, provide a helpful 1-2 sentence response to this query: ${userMessage}`\r\n+            }]\r\n+          }]\r\n+        })\r\n+      });\r\n+      \r\n+      const data = await response.json();\r\n+      const botResponse = data.candidates?.[0]?.content?.parts?.[0]?.text || \r\n+                         \"I can help with transport, food, and other urban services!\";\r\n+      \r\n+      setMessages(prev => [...prev, { text: botResponse, sender: 'bot' }]);\r\n+    } catch (error) {\r\n+      console.error(\"API error:\", error);\r\n+      setMessages(prev => [...prev, { \r\n+        text: \"Connection issue - please try again later\", \r\n+        sender: 'bot' \r\n+      }]);\r\n+    } finally {\r\n+      setIsTyping(false);\r\n+    }\r\n+  };\r\n+\r\n+  const handleSendMessage = async (e) => {\r\n+    e.preventDefault();\r\n+    if (inputValue.trim() && !isTyping) {\r\n+      const userMessage = inputValue.trim();\r\n+      setMessages(prev => [...prev, { text: userMessage, sender: 'user' }]);\r\n+      setInputValue('');\r\n+      await generateResponse(userMessage);\r\n+    }\r\n+  };\r\n+\r\n+  return (\r\n+    <div style={{\r\n+      position: 'fixed',\r\n+      bottom: '100px',\r\n+      right: '30px',\r\n+      width: '350px',\r\n+      maxWidth: '90%',\r\n+      backgroundColor: darkMode ? '#2d3748' : 'white',\r\n+      borderRadius: '16px',\r\n+      boxShadow: '0 10px 25px rgba(0, 0, 0, 0.2)',\r\n+      zIndex: 1000,\r\n+      overflow: 'hidden',\r\n+      display: 'flex',\r\n+      flexDirection: 'column',\r\n+      maxHeight: '60vh'\r\n+    }}>\r\n+      <div style={{\r\n+        padding: '1rem',\r\n+        backgroundColor: darkMode ? '#4a5568' : '#3b82f6',\r\n+        color: 'white',\r\n+        display: 'flex',\r\n+        justifyContent: 'space-between',\r\n+        alignItems: 'center'\r\n+      }}>\r\n+        <div style={{ display: 'flex', alignItems: 'center', gap: '0.5rem' }}>\r\n+          <span style={{ fontSize: '1.5rem' }}>ü§ñ</span>\r\n+          <h3 style={{ margin: 0 }}>UrbanBuddy</h3>\r\n+          {isTyping && <span style={{ fontSize: '0.8rem', opacity: 0.8 }}>typing...</span>}\r\n+        </div>\r\n+        <button \r\n+          onClick={onClose}\r\n+          style={{\r\n+            background: 'none',\r\n+            border: 'none',\r\n+            color: 'white',\r\n+            fontSize: '1.2rem',\r\n+            cursor: 'pointer'\r\n+          }}\r\n+        >\r\n+          √ó\r\n+        </button>\r\n+      </div>\r\n+      \r\n+      <div style={{\r\n+        flex: 1,\r\n+        padding: '1rem',\r\n+        overflowY: 'auto',\r\n+        display: 'flex',\r\n+        flexDirection: 'column',\r\n+        gap: '0.8rem'\r\n+      }}>\r\n+        {messages.map((msg, index) => (\r\n+          <div \r\n+            key={index}\r\n+            style={{\r\n+              alignSelf: msg.sender === 'user' ? 'flex-end' : 'flex-start',\r\n+              maxWidth: '80%',\r\n+              padding: '0.6rem 1rem',\r\n+              borderRadius: msg.sender === 'user' \r\n+                ? '18px 18px 0 18px' \r\n+                : '18px 18px 18px 0',\r\n+              backgroundColor: msg.sender === 'user'\r\n+                ? (darkMode ? '#4a5568' : '#3b82f6')\r\n+                : (darkMode ? '#4a5568' : '#e2e8f0'),\r\n+              color: msg.sender === 'user' ? 'white' : (darkMode ? 'white' : '#1e293b'),\r\n+            }}\r\n+          >\r\n+            {msg.text}\r\n+          </div>\r\n+        ))}\r\n+        <div ref={chatEndRef} />\r\n+      </div>\r\n+      \r\n+      <form onSubmit={handleSendMessage} style={{\r\n+        padding: '0.8rem',\r\n+        borderTop: darkMode ? '1px solid #4a5568' : '1px solid #e2e8f0',\r\n+        display: 'flex',\r\n+        gap: '0.5rem'\r\n+      }}>\r\n+        <input\r\n+          ref={inputRef}\r\n+          type=\"text\"\r\n+          value={inputValue}\r\n+          onChange={(e) => setInputValue(e.target.value)}\r\n+          placeholder=\"Ask about urban services...\"\r\n+          disabled={isTyping}\r\n+          style={{\r\n+            flex: 1,\r\n+            padding: '0.6rem 1rem',\r\n+            borderRadius: '20px',\r\n+            border: darkMode ? '1px solid #4a5568' : '1px solid #e2e8f0',\r\n+            backgroundColor: darkMode ? '#2d3748' : 'white',\r\n+            color: darkMode ? 'white' : '#1e293b',\r\n+            outline: 'none'\r\n+          }}\r\n+        />\r\n+        <button \r\n+          type=\"submit\"\r\n+          disabled={isTyping}\r\n+          style={{\r\n+            background: isTyping \r\n+              ? (darkMode ? '#4a5568' : '#e2e8f0')\r\n+              : (darkMode ? '#4a5568' : '#3b82f6'),\r\n+            color: 'white',\r\n+            border: 'none',\r\n+            borderRadius: '50%',\r\n+            width: '40px',\r\n+            height: '40px',\r\n+            display: 'flex',\r\n+            alignItems: 'center',\r\n+            justifyContent: 'center',\r\n+            cursor: isTyping ? 'not-allowed' : 'pointer'\r\n+          }}\r\n+        >\r\n+          {isTyping ? '...' : '‚û§'}\r\n+        </button>\r\n+      </form>\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+// Main Home Component\r\n+export default function Home() {\r\n+  const navigate = useNavigate();\r\n+  const [darkMode, setDarkMode] = useState(false);\r\n+  const [showChat, setShowChat] = useState(false);\r\n+  const [searchQuery, setSearchQuery] = useState('');\r\n+  const [selectedService, setSelectedService] = useState(null);\r\n+  const [orderCount, setOrderCount] = useState(0);\r\n+  const [achievements, setAchievements] = useState([]);\r\n+\r\n+  const services = [\r\n+    { \r\n+      name: 'Transport', \r\n+      path: '/transport', \r\n+      icon: 'üöå', \r\n+      desc: 'Plan your multi-modal journey across the city',\r\n+      color: '#3b82f6'\r\n+    },\r\n+    { \r\n+      name: 'Food Delivery', \r\n+      path: '/food', \r\n+      icon: 'üçî', \r\n+      desc: 'Discover local restaurants and cafes',\r\n+      color: '#ef4444'\r\n+    },\r\n+    { \r\n+      name: 'Groceries', \r\n+      path: '/groceries', \r\n+      icon: 'üõí', \r\n+      desc: 'Get groceries delivered in minutes',\r\n+      color: '#10b981'\r\n+    },\r\n+    { \r\n+      name: 'Services', \r\n+      path: '/services', \r\n+      icon: 'üõ†Ô∏è', \r\n+      desc: 'Find urban services near you',\r\n+      color: '#8b5cf6'\r\n+    }\r\n+  ];\r\n+\r\n+  useEffect(() => {\r\n+    if (orderCount === 1) {\r\n+      addAchievement('First Order!', 'üéâ');\r\n+    } else if (orderCount === 5) {\r\n+      addAchievement('Regular Customer!', 'üèÜ');\r\n+    }\r\n+  }, [orderCount]);\r\n+\r\n+  const addAchievement = (title, icon) => {\r\n+    const newAchievement = { title, icon, id: Date.now() };\r\n+    setAchievements(prev => [...prev, newAchievement]);\r\n+    setTimeout(() => {\r\n+      setAchievements(prev => prev.filter(a => a.id !== newAchievement.id));\r\n+    }, 3000);\r\n+  };\r\n+\r\n+  const handleSearch = (e) => {\r\n+    e.preventDefault();\r\n+    if (searchQuery.trim()) {\r\n+      navigate(`/search?q=${encodeURIComponent(searchQuery)}`);\r\n+    }\r\n+  };\r\n+\r\n+  return (\r\n+    <div style={{\r\n+      backgroundColor: darkMode ? '#1a202c' : '#f8fafc',\r\n+      minHeight: '100vh',\r\n+      color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+      transition: 'all 0.3s ease'\r\n+    }}>\r\n+      {/* Header */}\r\n+      <header style={{\r\n+        background: darkMode \r\n+          ? 'linear-gradient(135deg, #2d3748 0%, #1a202c 100%)' \r\n+          : 'linear-gradient(135deg, #6b46c1 0%, #3b82f6 100%)',\r\n+        color: 'white',\r\n+        padding: '3rem 1rem',\r\n+        textAlign: 'center',\r\n+        borderRadius: '0 0 20px 20px',\r\n+        position: 'relative'\r\n+      }}>\r\n+        <h1 style={{ fontSize: '2.5rem', fontWeight: '800', marginBottom: '0.5rem' }}>UrbanFlow</h1>\r\n+        <p style={{ fontSize: '1.1rem', opacity: 0.9 }}>Your urban services companion</p>\r\n+        \r\n+        <form onSubmit={handleSearch} style={{\r\n+          display: 'flex',\r\n+          maxWidth: '600px',\r\n+          margin: '2rem auto 0',\r\n+          borderRadius: '50px',\r\n+          overflow: 'hidden',\r\n+          boxShadow: '0 4px 10px rgba(0, 0, 0, 0.2)',\r\n+        }}>\r\n+          <input\r\n+            type=\"text\"\r\n+            placeholder=\"Search for services...\"\r\n+            value={searchQuery}\r\n+            onChange={(e) => setSearchQuery(e.target.value)}\r\n+            style={{\r\n+              flex: 1,\r\n+              padding: '0.8rem 1.5rem',\r\n+              border: 'none',\r\n+              fontSize: '1rem',\r\n+              outline: 'none'\r\n+            }}\r\n+          />\r\n+          <button type=\"submit\" style={{\r\n+            backgroundColor: darkMode ? '#4a5568' : '#1e40af',\r\n+            color: 'white',\r\n+            border: 'none',\r\n+            padding: '0 1.5rem',\r\n+            cursor: 'pointer'\r\n+          }}>\r\n+            üîç\r\n+          </button>\r\n+        </form>\r\n+      </header>\r\n+\r\n+      {/* Services */}\r\n+      <section style={{ padding: '2rem 1rem', maxWidth: '1200px', margin: '0 auto' }}>\r\n+        <h2 style={{ fontSize: '1.8rem', textAlign: 'center', marginBottom: '2rem' }}>\r\n+          Urban Services\r\n+        </h2>\r\n+        <div style={{\r\n+          display: 'grid',\r\n+          gridTemplateColumns: 'repeat(auto-fit, minmax(250px, 1fr))',\r\n+          gap: '1.5rem'\r\n+        }}>\r\n+          {services.map(service => (\r\n+            <div \r\n+              key={service.name}\r\n+              onClick={() => {\r\n+                setSelectedService(service);\r\n+                setOrderCount(prev => prev + 1);\r\n+              }}\r\n+              style={{\r\n+                padding: '1.5rem',\r\n+                borderRadius: '12px',\r\n+                background: darkMode ? '#2d3748' : 'white',\r\n+                boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',\r\n+                textAlign: 'center',\r\n+                cursor: 'pointer',\r\n+                transition: 'transform 0.2s',\r\n+                ':hover': {\r\n+                  transform: 'translateY(-5px)'\r\n+                }\r\n+              }}\r\n+            >\r\n+              <div style={{ \r\n+                fontSize: '2.5rem',\r\n+                marginBottom: '1rem',\r\n+                color: service.color\r\n+              }}>\r\n+                {service.icon}\r\n+              </div>\r\n+              <h3 style={{ fontSize: '1.3rem', marginBottom: '0.5rem' }}>{service.name}</h3>\r\n+              <p style={{ color: darkMode ? '#a0aec0' : '#64748b' }}>{service.desc}</p>\r\n+            </div>\r\n+          ))}\r\n+        </div>\r\n+      </section>\r\n+\r\n+      {/* Service Modal */}\r\n+      {selectedService && (\r\n+        <div style={{\r\n+          position: 'fixed',\r\n+          top: 0,\r\n+          left: 0,\r\n+          right: 0,\r\n+          bottom: 0,\r\n+          backgroundColor: 'rgba(0, 0, 0, 0.7)',\r\n+          display: 'flex',\r\n+          justifyContent: 'center',\r\n+          alignItems: 'center',\r\n+          zIndex: 1000\r\n+        }} onClick={() => setSelectedService(null)}>\r\n+          <div style={{\r\n+            backgroundColor: darkMode ? '#2d3748' : 'white',\r\n+            borderRadius: '16px',\r\n+            padding: '2rem',\r\n+            maxWidth: '500px',\r\n+            width: '90%',\r\n+            textAlign: 'center'\r\n+          }} onClick={e => e.stopPropagation()}>\r\n+            <div style={{ fontSize: '3rem', marginBottom: '1rem', color: selectedService.color }}>\r\n+              {selectedService.icon}\r\n+            </div>\r\n+            <h3 style={{ fontSize: '1.8rem', marginBottom: '1rem' }}>{selectedService.name}</h3>\r\n+            <p style={{ marginBottom: '2rem', color: darkMode ? '#a0aec0' : '#64748b' }}>\r\n+              {selectedService.desc}\r\n+            </p>\r\n+            <button \r\n+              onClick={() => navigate(selectedService.path)}\r\n+              style={{\r\n+                padding: '0.8rem 1.5rem',\r\n+                backgroundColor: selectedService.color,\r\n+                color: 'white',\r\n+                border: 'none',\r\n+                borderRadius: '8px',\r\n+                cursor: 'pointer',\r\n+                fontSize: '1rem'\r\n+              }}\r\n+            >\r\n+              Explore {selectedService.name}\r\n+            </button>\r\n+          </div>\r\n+        </div>\r\n+      )}\r\n+\r\n+      {/* Achievements */}\r\n+      {achievements.map(achievement => (\r\n+        <div key={achievement.id} style={{\r\n+          position: 'fixed',\r\n+          bottom: '20px',\r\n+          right: '20px',\r\n+          background: darkMode ? '#2d3748' : 'white',\r\n+          color: darkMode ? 'white' : '#1e293b',\r\n+          padding: '1rem',\r\n+          borderRadius: '12px',\r\n+          boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',\r\n+          display: 'flex',\r\n+          alignItems: 'center',\r\n+          gap: '0.5rem',\r\n+          zIndex: 1000\r\n+        }}>\r\n+          <span style={{ fontSize: '1.5rem' }}>{achievement.icon}</span>\r\n+          <span>{achievement.title}</span>\r\n+        </div>\r\n+      ))}\r\n+\r\n+      {/* Theme Toggle */}\r\n+      <button \r\n+        onClick={() => setDarkMode(!darkMode)}\r\n+        style={{\r\n+          position: 'fixed',\r\n+          bottom: '20px',\r\n+          left: '20px',\r\n+          width: '50px',\r\n+          height: '50px',\r\n+          borderRadius: '50%',\r\n+          background: darkMode ? '#4a5568' : '#e2e8f0',\r\n+          border: 'none',\r\n+          cursor: 'pointer',\r\n+          fontSize: '1.5rem',\r\n+          display: 'flex',\r\n+          alignItems: 'center',\r\n+          justifyContent: 'center',\r\n+          zIndex: 100\r\n+        }}\r\n+      >\r\n+        {darkMode ? '‚òÄÔ∏è' : 'üåô'}\r\n+      </button>\r\n+\r\n+      {/* AI Components */}\r\n+      <UrbanBuddy darkMode={darkMode} onChatOpen={() => setShowChat(true)} />\r\n+      {showChat && <ChatModal darkMode={darkMode} onClose={() => setShowChat(false)} />}\r\n+\r\n+      {/* Footer */}\r\n+      <footer style={{\r\n+        textAlign: 'center',\r\n+        padding: '2rem 1rem',\r\n+        marginTop: '2rem',\r\n+        color: darkMode ? '#a0aec0' : '#64748b'\r\n+      }}>\r\n+        <p>¬© {new Date().getFullYear()} UrbanFlow - Urban Services Platform</p>\r\n+      </footer>\r\n+    </div>\r\n+  );\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752653186072,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,831 @@\n+import { useState, useEffect, useRef } from 'react';\r\n+import { useNavigate } from 'react-router-dom';\r\n+\r\n+// UrbanBuddy AI Assistant Component\r\n+const UrbanBuddy = ({ darkMode, onChatOpen }) => {\r\n+  const [position, setPosition] = useState({ x: 20, y: 50 });\r\n+  const [expression, setExpression] = useState('üòä');\r\n+  const [direction, setDirection] = useState(1);\r\n+  const [costume, setCostume] = useState(null);\r\n+  const [isActive, setIsActive] = useState(false);\r\n+  const botRef = useRef(null);\r\n+  const animationRef = useRef(null);\r\n+  const lastInteractionTime = useRef(Date.now());\r\n+\r\n+  // Seasonal costumes\r\n+  useEffect(() => {\r\n+    const today = new Date();\r\n+    const month = today.getMonth() + 1;\r\n+    \r\n+    if (month === 12) setCostume('üéÑ');\r\n+    else if (month === 10) setCostume('üéÉ');\r\n+    else if (month === 2) setCostume('üíù');\r\n+    else if (month === 4) setCostume('üå∏');\r\n+    else setCostume(null);\r\n+  }, []);\r\n+\r\n+  // Make the bot wander with more dynamic movement\r\n+  useEffect(() => {\r\n+    const moveInterval = setInterval(() => {\r\n+      setPosition(prev => {\r\n+        const now = Date.now();\r\n+        const timeSinceLastInteraction = now - lastInteractionTime.current;\r\n+        \r\n+        // More active movement right after interaction\r\n+        const speedMultiplier = timeSinceLastInteraction < 5000 ? 2 : 1;\r\n+        \r\n+        let newX = prev.x + (3 * direction * speedMultiplier);\r\n+        let newY = prev.y + (Math.random() * 6 - 3);\r\n+        \r\n+        // Bounce off edges\r\n+        if (newX > window.innerWidth - 80) {\r\n+          setDirection(-1);\r\n+          triggerAnimation('spin');\r\n+        }\r\n+        if (newX < 20) {\r\n+          setDirection(1);\r\n+          triggerAnimation('spin');\r\n+        }\r\n+        if (newY < 20) newY = 20;\r\n+        if (newY > window.innerHeight - 100) newY = window.innerHeight - 100;\r\n+        \r\n+        return { x: newX, y: newY };\r\n+      });\r\n+    }, 100);\r\n+\r\n+    return () => clearInterval(moveInterval);\r\n+  }, [direction]);\r\n+\r\n+  // Change expressions randomly with more variety\r\n+  useEffect(() => {\r\n+    const expressions = ['üòä', 'ü§î', 'üòÆ', 'üòé', 'üëã', 'ü§ñ', '‚ú®', 'üåü'];\r\n+    const expressionInterval = setInterval(() => {\r\n+      if (!isActive) {\r\n+        setExpression(expressions[Math.floor(Math.random() * expressions.length)]);\r\n+        // Random animations when idle\r\n+        if (Math.random() > 0.8) {\r\n+          triggerAnimation(['bounce', 'spin', 'wobble'][Math.floor(Math.random() * 3)]);\r\n+        }\r\n+      }\r\n+    }, 3000);\r\n+    return () => clearInterval(expressionInterval);\r\n+  }, [isActive]);\r\n+\r\n+  const triggerAnimation = (type) => {\r\n+    if (animationRef.current) {\r\n+      clearTimeout(animationRef.current);\r\n+    }\r\n+    \r\n+    const botElement = botRef.current;\r\n+    if (!botElement) return;\r\n+    \r\n+    botElement.style.animation = 'none';\r\n+    void botElement.offsetWidth; // Trigger reflow\r\n+    \r\n+    switch(type) {\r\n+      case 'spin':\r\n+        botElement.style.animation = 'spin 1s ease';\r\n+        break;\r\n+      case 'bounce':\r\n+        botElement.style.animation = 'bounce 0.5s ease';\r\n+        break;\r\n+      case 'wobble':\r\n+        botElement.style.animation = 'wobble 0.8s ease';\r\n+        break;\r\n+      default:\r\n+        botElement.style.animation = '';\r\n+    }\r\n+    \r\n+    animationRef.current = setTimeout(() => {\r\n+      if (botElement) botElement.style.animation = '';\r\n+    }, 1000);\r\n+  };\r\n+\r\n+  const handleClick = () => {\r\n+    lastInteractionTime.current = Date.now();\r\n+    setIsActive(true);\r\n+    triggerAnimation('bounce');\r\n+    setExpression('üí°');\r\n+    \r\n+    // Trigger chat opening in parent component\r\n+    onChatOpen();\r\n+    \r\n+    // Return to normal after a delay\r\n+    setTimeout(() => {\r\n+      setIsActive(false);\r\n+    }, 3000);\r\n+  };\r\n+\r\n+  // Custom animations\r\n+  const animations = `\r\n+    @keyframes spin {\r\n+      0% { transform: rotate(0deg) scaleX(${direction}); }\r\n+      100% { transform: rotate(360deg) scaleX(${direction}); }\r\n+    }\r\n+    @keyframes bounce {\r\n+      0%, 100% { transform: translateY(0) scaleX(${direction}); }\r\n+      50% { transform: translateY(-20px) scaleX(${direction}); }\r\n+    }\r\n+    @keyframes wobble {\r\n+      0%, 100% { transform: rotate(0deg) scaleX(${direction}); }\r\n+      25% { transform: rotate(5deg) scaleX(${direction}); }\r\n+      75% { transform: rotate(-5deg) scaleX(${direction}); }\r\n+    }\r\n+    @keyframes float {\r\n+      0% { transform: translateY(0px) scaleX(${direction}); }\r\n+      50% { transform: translateY(-10px) scaleX(${direction}); }\r\n+      100% { transform: translateY(0px) scaleX(${direction}); }\r\n+    }\r\n+  `;\r\n+\r\n+  return (\r\n+    <>\r\n+      <style>{animations}</style>\r\n+      <div \r\n+        ref={botRef}\r\n+        onClick={handleClick}\r\n+        style={{\r\n+          position: 'fixed',\r\n+          left: `${position.x}px`,\r\n+          top: `${position.y}px`,\r\n+          fontSize: '2.5rem',\r\n+          cursor: 'pointer',\r\n+          transition: 'all 0.3s ease',\r\n+          transform: `scaleX(${direction})`,\r\n+          zIndex: 100,\r\n+          filter: darkMode \r\n+            ? 'drop-shadow(0 0 8px rgba(255,255,255,0.7))' \r\n+            : 'drop-shadow(0 0 8px rgba(0,0,0,0.3))',\r\n+          userSelect: 'none',\r\n+          animation: 'float 4s ease-in-out infinite'\r\n+        }}\r\n+      >\r\n+        <div style={{ \r\n+          position: 'relative',\r\n+          display: 'flex',\r\n+          flexDirection: 'column',\r\n+          alignItems: 'center'\r\n+        }}>\r\n+          {/* Bot icon with costume */}\r\n+          <div style={{\r\n+            position: 'relative',\r\n+            width: '60px',\r\n+            height: '60px',\r\n+            backgroundColor: darkMode ? '#4a5568' : '#3b82f6',\r\n+            borderRadius: '50%',\r\n+            display: 'flex',\r\n+            justifyContent: 'center',\r\n+            alignItems: 'center',\r\n+            color: 'white'\r\n+          }}>\r\n+            <span style={{ fontSize: '1.8rem' }}>{expression}</span>\r\n+            {costume && (\r\n+              <span style={{\r\n+                position: 'absolute',\r\n+                top: '-15px',\r\n+                right: '-10px',\r\n+                fontSize: '1.5rem',\r\n+                transform: 'rotate(15deg)'\r\n+              }}>\r\n+                {costume}\r\n+              </span>\r\n+            )}\r\n+          </div>\r\n+        </div>\r\n+      </div>\r\n+    </>\r\n+  );\r\n+};\r\n+\r\n+// Chat Modal Component with Direct Gemini API Connection\r\n+const ChatModal = ({ darkMode, onClose }) => {\r\n+  const [messages, setMessages] = useState([\r\n+    { text: \"Hello! I'm UrbanBuddy, your AI assistant powered by Gemini. How can I help you with urban living today?\", sender: 'bot' }\r\n+  ]);\r\n+  const [inputValue, setInputValue] = useState('');\r\n+  const [isTyping, setIsTyping] = useState(false);\r\n+  const chatEndRef = useRef(null);\r\n+  const inputRef = useRef(null);\r\n+\r\n+  // Auto-scroll to bottom and focus input\r\n+  useEffect(() => {\r\n+    chatEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n+    inputRef.current?.focus();\r\n+  }, [messages]);\r\n+\r\n+  // Direct API call to Gemini through a proxy\r\n+  const generateResponse = async (userMessage) => {\r\n+    setIsTyping(true);\r\n+    \r\n+    try {\r\n+      // Using a public AI API gateway (no API key needed)\r\n+      const response = await fetch('https://gemini-proxy.vercel.app/api/generate', {\r\n+        method: \"POST\",\r\n+        headers: { \r\n+          \"Content-Type\": \"application/json\",\r\n+        },\r\n+        body: JSON.stringify({\r\n+          prompt: `You are UrbanBuddy, a friendly AI assistant for urban living. \r\n+          Respond to this query about city life: ${userMessage}\r\n+          Keep responses concise (1-2 sentences) and helpful.`\r\n+        })\r\n+      });\r\n+      \r\n+      const data = await response.json();\r\n+      \r\n+      setMessages(prev => [...prev, { \r\n+        text: data.response || \"I'm here to help with urban living questions!\", \r\n+        sender: 'bot' \r\n+      }]);\r\n+    } catch (error) {\r\n+      console.error(\"API error:\", error);\r\n+      setMessages(prev => [...prev, { \r\n+        text: \"I'm having trouble connecting right now. Try again later!\", \r\n+        sender: 'bot' \r\n+      }]);\r\n+    } finally {\r\n+      setIsTyping(false);\r\n+    }\r\n+  };\r\n+\r\n+  const handleSendMessage = async (e) => {\r\n+    e.preventDefault();\r\n+    if (inputValue.trim() && !isTyping) {\r\n+      // Add user message\r\n+      const userMessage = inputValue.trim();\r\n+      setMessages(prev => [...prev, { text: userMessage, sender: 'user' }]);\r\n+      setInputValue('');\r\n+      \r\n+      // Generate AI response\r\n+      await generateResponse(userMessage);\r\n+    }\r\n+  };\r\n+\r\n+  return (\r\n+    <div style={{\r\n+      position: 'fixed',\r\n+      bottom: '100px',\r\n+      right: '30px',\r\n+      width: '350px',\r\n+      maxWidth: '90%',\r\n+      backgroundColor: darkMode ? '#2d3748' : 'white',\r\n+      borderRadius: '16px',\r\n+      boxShadow: '0 10px 25px rgba(0, 0, 0, 0.2)',\r\n+      border: darkMode ? '1px solid #4a5568' : '1px solid #e2e8f0',\r\n+      zIndex: 1000,\r\n+      overflow: 'hidden',\r\n+      display: 'flex',\r\n+      flexDirection: 'column',\r\n+      maxHeight: '60vh'\r\n+    }}>\r\n+      {/* Chat header */}\r\n+      <div style={{\r\n+        padding: '1rem',\r\n+        backgroundColor: darkMode ? '#4a5568' : '#3b82f6',\r\n+        color: 'white',\r\n+        display: 'flex',\r\n+        justifyContent: 'space-between',\r\n+        alignItems: 'center'\r\n+      }}>\r\n+        <div style={{ display: 'flex', alignItems: 'center', gap: '0.5rem' }}>\r\n+          <span style={{ fontSize: '1.5rem' }}>ü§ñ</span>\r\n+          <h3 style={{ margin: 0 }}>UrbanBuddy AI</h3>\r\n+          {isTyping && (\r\n+            <span style={{ \r\n+              fontSize: '0.8rem',\r\n+              marginLeft: '0.5rem',\r\n+              opacity: 0.8\r\n+            }}>typing...</span>\r\n+          )}\r\n+        </div>\r\n+        <button \r\n+          onClick={onClose}\r\n+          style={{\r\n+            background: 'none',\r\n+            border: 'none',\r\n+            color: 'white',\r\n+            fontSize: '1.2rem',\r\n+            cursor: 'pointer'\r\n+          }}\r\n+        >\r\n+          √ó\r\n+        </button>\r\n+      </div>\r\n+      \r\n+      {/* Chat messages */}\r\n+      <div style={{\r\n+        flex: 1,\r\n+        padding: '1rem',\r\n+        overflowY: 'auto',\r\n+        display: 'flex',\r\n+        flexDirection: 'column',\r\n+        gap: '0.8rem'\r\n+      }}>\r\n+        {messages.map((msg, index) => (\r\n+          <div \r\n+            key={index}\r\n+            style={{\r\n+              alignSelf: msg.sender === 'user' ? 'flex-end' : 'flex-start',\r\n+              maxWidth: '80%',\r\n+              padding: '0.6rem 1rem',\r\n+              borderRadius: msg.sender === 'user' \r\n+                ? '18px 18px 0 18px' \r\n+                : '18px 18px 18px 0',\r\n+              backgroundColor: msg.sender === 'user'\r\n+                ? (darkMode ? '#4a5568' : '#3b82f6')\r\n+                : (darkMode ? '#4a5568' : '#e2e8f0'),\r\n+              color: msg.sender === 'user' ? 'white' : (darkMode ? 'white' : '#1e293b'),\r\n+              animation: msg.sender === 'bot' && index === messages.length - 1 \r\n+                ? 'fadeIn 0.3s ease' \r\n+                : 'none'\r\n+            }}\r\n+          >\r\n+            {msg.text}\r\n+          </div>\r\n+        ))}\r\n+        <div ref={chatEndRef} />\r\n+      </div>\r\n+      \r\n+      {/* Chat input */}\r\n+      <form onSubmit={handleSendMessage} style={{\r\n+        padding: '0.8rem',\r\n+        borderTop: darkMode ? '1px solid #4a5568' : '1px solid #e2e8f0',\r\n+        display: 'flex',\r\n+        gap: '0.5rem'\r\n+      }}>\r\n+        <input\r\n+          ref={inputRef}\r\n+          type=\"text\"\r\n+          value={inputValue}\r\n+          onChange={(e) => setInputValue(e.target.value)}\r\n+          placeholder=\"Ask me about urban living...\"\r\n+          disabled={isTyping}\r\n+          style={{\r\n+            flex: 1,\r\n+            padding: '0.6rem 1rem',\r\n+            borderRadius: '20px',\r\n+            border: darkMode ? '1px solid #4a5568' : '1px solid #e2e8f0',\r\n+            backgroundColor: darkMode ? '#2d3748' : 'white',\r\n+            color: darkMode ? 'white' : '#1e293b',\r\n+            outline: 'none',\r\n+            opacity: isTyping ? 0.7 : 1\r\n+          }}\r\n+        />\r\n+        <button \r\n+          type=\"submit\"\r\n+          disabled={isTyping}\r\n+          style={{\r\n+            background: isTyping \r\n+              ? (darkMode ? '#4a5568' : '#e2e8f0')\r\n+              : (darkMode ? '#4a5568' : '#3b82f6'),\r\n+            color: 'white',\r\n+            border: 'none',\r\n+            borderRadius: '50%',\r\n+            width: '40px',\r\n+            height: '40px',\r\n+            display: 'flex',\r\n+            alignItems: 'center',\r\n+            justifyContent: 'center',\r\n+            cursor: isTyping ? 'not-allowed' : 'pointer'\r\n+          }}\r\n+        >\r\n+          {isTyping ? '...' : '‚û§'}\r\n+        </button>\r\n+      </form>\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+// Main Home Component\r\n+export default function Home() {\r\n+  const navigate = useNavigate();\r\n+  const [searchQuery, setSearchQuery] = useState('');\r\n+  const [darkMode, setDarkMode] = useState(false);\r\n+  const [selectedService, setSelectedService] = useState(null);\r\n+  const [orderCount, setOrderCount] = useState(0);\r\n+  const [achievements, setAchievements] = useState([]);\r\n+  const [showChat, setShowChat] = useState(false);\r\n+\r\n+  const services = [\r\n+    { \r\n+      name: 'Transport', \r\n+      path: '/transport', \r\n+      icon: 'üöå', \r\n+      desc: 'Plan your multi-modal journey across the city',\r\n+      color: '#3b82f6',\r\n+      details: 'Find the best routes combining metro, buses, and bikes. Real-time updates and ticket purchasing available.'\r\n+    },\r\n+    { \r\n+      name: 'Food Delivery', \r\n+      path: '/food', \r\n+      icon: 'üçî', \r\n+      desc: 'Discover local restaurants and cafes',\r\n+      color: '#ef4444',\r\n+      details: 'Order from hundreds of restaurants with special discounts. Track your delivery in real-time.'\r\n+    },\r\n+    { \r\n+      name: 'Groceries', \r\n+      path: '/food', \r\n+      icon: 'üõí', \r\n+      desc: 'Get groceries delivered in minutes',\r\n+      color: '#10b981',\r\n+      details: 'Same-day delivery from local supermarkets. Schedule recurring orders for essentials.'\r\n+    },\r\n+    { \r\n+      name: 'Services', \r\n+      path: '/food', \r\n+      icon: 'üõ†Ô∏è', \r\n+      desc: 'Find urban services near you',\r\n+      color: '#8b5cf6',\r\n+      details: 'Book home services, repairs, and professional help with verified providers.'\r\n+    }\r\n+  ];\r\n+\r\n+  // Check for achievements\r\n+  useEffect(() => {\r\n+    if (orderCount === 1) {\r\n+      addAchievement('First Order!', 'üéâ');\r\n+    } else if (orderCount === 5) {\r\n+      addAchievement('Regular Customer!', 'üèÜ');\r\n+    } else if (orderCount === 10) {\r\n+      addAchievement('Super User!', 'üåü');\r\n+    }\r\n+  }, [orderCount]);\r\n+\r\n+  const addAchievement = (title, icon) => {\r\n+    if (!achievements.some(a => a.title === title)) {\r\n+      const newAchievement = { title, icon, id: Date.now() };\r\n+      setAchievements(prev => [...prev, newAchievement]);\r\n+      \r\n+      // Auto-hide achievement after 3 seconds\r\n+      setTimeout(() => {\r\n+        setAchievements(prev => prev.filter(a => a.id !== newAchievement.id));\r\n+      }, 3000);\r\n+    }\r\n+  };\r\n+\r\n+  const handleSearch = (e) => {\r\n+    e.preventDefault();\r\n+    if (searchQuery.trim()) {\r\n+      navigate(`/food?search=${encodeURIComponent(searchQuery)}`);\r\n+    }\r\n+  };\r\n+\r\n+  const toggleDarkMode = () => {\r\n+    setDarkMode(!darkMode);\r\n+  };\r\n+\r\n+  const openServicePopup = (service) => {\r\n+    setSelectedService(service);\r\n+    setOrderCount(prev => prev + 1);\r\n+  };\r\n+\r\n+  const closePopup = () => {\r\n+    setSelectedService(null);\r\n+  };\r\n+\r\n+  const toggleChat = () => {\r\n+    setShowChat(!showChat);\r\n+  };\r\n+\r\n+  return (\r\n+    <div style={{\r\n+      backgroundColor: darkMode ? '#1a202c' : '#f8fafc',\r\n+      minHeight: '100vh',\r\n+      paddingBottom: '3rem',\r\n+      color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+      transition: 'all 0.3s ease',\r\n+      position: 'relative'\r\n+    }}>\r\n+      {/* Theme Toggle Button */}\r\n+      <button \r\n+        onClick={toggleDarkMode} \r\n+        style={{\r\n+          position: 'fixed',\r\n+          top: '1.5rem',\r\n+          right: '1.5rem',\r\n+          background: darkMode ? '#4a5568' : '#e2e8f0',\r\n+          border: 'none',\r\n+          borderRadius: '50%',\r\n+          width: '40px',\r\n+          height: '40px',\r\n+          display: 'flex',\r\n+          alignItems: 'center',\r\n+          justifyContent: 'center',\r\n+          cursor: 'pointer',\r\n+          transition: 'all 0.3s ease',\r\n+          boxShadow: '0 2px 5px rgba(0, 0, 0, 0.2)',\r\n+          zIndex: 100\r\n+        }}\r\n+        aria-label={darkMode ? 'Switch to light mode' : 'Switch to dark mode'}\r\n+      >\r\n+        {darkMode ? '‚òÄÔ∏è' : 'üåô'}\r\n+      </button>\r\n+      \r\n+      {/* Hero Section with UrbanBuddy */}\r\n+      <section style={{\r\n+        background: darkMode \r\n+          ? 'linear-gradient(135deg, #2d3748 0%, #1a202c 100%)' \r\n+          : 'linear-gradient(135deg, #6b46c1 0%, #3b82f6 100%)',\r\n+        color: 'white',\r\n+        padding: '4rem 1rem',\r\n+        textAlign: 'center',\r\n+        borderRadius: '0 0 20px 20px',\r\n+        boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',\r\n+        position: 'relative',\r\n+        overflow: 'hidden',\r\n+        height: '300px'\r\n+      }}>\r\n+        <div style={{\r\n+          maxWidth: '800px',\r\n+          margin: '0 auto',\r\n+          position: 'relative',\r\n+          zIndex: 2\r\n+        }}>\r\n+          <h1 style={{\r\n+            fontSize: '3.5rem',\r\n+            fontWeight: '800',\r\n+            marginBottom: '0.5rem',\r\n+            textShadow: '2px 2px 4px rgba(0, 0, 0, 0.2)',\r\n+          }}>UrbanFlow</h1>\r\n+          <p style={{\r\n+            fontSize: '1.25rem',\r\n+            marginBottom: '2rem',\r\n+            opacity: 0.9,\r\n+          }}>Your seamless urban living companion</p>\r\n+          \r\n+          <form onSubmit={handleSearch} style={{\r\n+            display: 'flex',\r\n+            maxWidth: '600px',\r\n+            margin: '0 auto',\r\n+            borderRadius: '50px',\r\n+            overflow: 'hidden',\r\n+            boxShadow: '0 4px 10px rgba(0, 0, 0, 0.2)',\r\n+          }}>\r\n+            <input\r\n+              type=\"text\"\r\n+              placeholder=\"Search for restaurants, services...\"\r\n+              value={searchQuery}\r\n+              onChange={(e) => setSearchQuery(e.target.value)}\r\n+              style={{\r\n+                flex: 1,\r\n+                padding: '1rem 1.5rem',\r\n+                border: 'none',\r\n+                fontSize: '1rem',\r\n+                outline: 'none',\r\n+                backgroundColor: darkMode ? '#2d3748' : 'white',\r\n+                color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+              }}\r\n+            />\r\n+            <button type=\"submit\" style={{\r\n+              backgroundColor: darkMode ? '#4a5568' : '#1e40af',\r\n+              color: 'white',\r\n+              border: 'none',\r\n+              padding: '0 1.5rem',\r\n+              cursor: 'pointer',\r\n+              fontSize: '1.25rem',\r\n+              transition: 'background-color 0.2s'\r\n+            }}>\r\n+              <span>üîç</span>\r\n+            </button>\r\n+          </form>\r\n+        </div>\r\n+        <UrbanBuddy darkMode={darkMode} onChatOpen={toggleChat} />\r\n+      </section>\r\n+\r\n+      {/* Services Grid */}\r\n+      <section style={{\r\n+        padding: '2rem 1rem',\r\n+        maxWidth: '1200px',\r\n+        margin: '0 auto',\r\n+      }}>\r\n+        <h2 style={{\r\n+          fontSize: '2rem',\r\n+          fontWeight: '700',\r\n+          marginBottom: '1.5rem',\r\n+          color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+          textAlign: 'center',\r\n+        }}>What do you need today?</h2>\r\n+        <div style={{\r\n+          display: 'grid',\r\n+          gridTemplateColumns: 'repeat(auto-fit, minmax(250px, 1fr))',\r\n+          gap: '1.5rem',\r\n+          marginTop: '1rem',\r\n+        }}>\r\n+          {services.map((service) => (\r\n+            <div \r\n+              key={service.name} \r\n+              style={{ \r\n+                padding: '2rem 1.5rem',\r\n+                borderRadius: '16px',\r\n+                border: `2px solid ${service.color}`,\r\n+                textAlign: 'center',\r\n+                cursor: 'pointer',\r\n+                transition: 'transform 0.3s, box-shadow 0.3s',\r\n+                backgroundColor: darkMode \r\n+                  ? `${service.color}20` \r\n+                  : `${service.color}10`,\r\n+                ':hover': {\r\n+                  transform: 'translateY(-5px)',\r\n+                  boxShadow: '0 10px 20px rgba(0, 0, 0, 0.1)',\r\n+                }\r\n+              }}\r\n+              onClick={() => openServicePopup(service)}\r\n+            >\r\n+              <div style={{ \r\n+                fontSize: '3rem',\r\n+                marginBottom: '1rem',\r\n+                display: 'inline-block',\r\n+                animation: 'float 3s ease-in-out infinite'\r\n+              }}>{service.icon}</div>\r\n+              <h3 style={{fontSize: '1.5rem', fontWeight: '600', marginBottom: '0.5rem'}}>{service.name}</h3>\r\n+              <p style={{color: darkMode ? '#a0aec0' : '#64748b'}}>{service.desc}</p>\r\n+            </div>\r\n+          ))}\r\n+        </div>\r\n+      </section>\r\n+\r\n+      {/* Featured Section */}\r\n+      <section style={{\r\n+        padding: '2rem 1rem',\r\n+        maxWidth: '1200px',\r\n+        margin: '0 auto',\r\n+      }}>\r\n+        <h2 style={{\r\n+          fontSize: '2rem',\r\n+          fontWeight: '700',\r\n+          marginBottom: '1.5rem',\r\n+          color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+          textAlign: 'center',\r\n+        }}>Quick Access</h2>\r\n+        <div style={{\r\n+          display: 'flex',\r\n+          justifyContent: 'center',\r\n+          gap: '1rem',\r\n+          flexWrap: 'wrap',\r\n+        }}>\r\n+          <button \r\n+            onClick={() => navigate('/transport?from=home&to=downtown')}\r\n+            style={{\r\n+              padding: '0.75rem 1.5rem',\r\n+              borderRadius: '50px',\r\n+              border: 'none',\r\n+              backgroundColor: darkMode ? '#2d3748' : '#e2e8f0',\r\n+              color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+              fontWeight: '600',\r\n+              cursor: 'pointer',\r\n+              transition: 'all 0.2s',\r\n+              display: 'flex',\r\n+              alignItems: 'center',\r\n+              gap: '0.5rem',\r\n+              fontSize: '1rem'\r\n+            }}\r\n+          >\r\n+            üöï To Downtown\r\n+          </button>\r\n+          <button \r\n+            onClick={() => navigate('/food?category=fastfood')}\r\n+            style={{\r\n+              padding: '0.75rem 1.5rem',\r\n+              borderRadius: '50px',\r\n+              border: 'none',\r\n+              backgroundColor: darkMode ? '#2d3748' : '#e2e8f0',\r\n+              color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+              fontWeight: '600',\r\n+              cursor: 'pointer',\r\n+              transition: 'all 0.2s',\r\n+              display: 'flex',\r\n+              alignItems: 'center',\r\n+              gap: '0.5rem',\r\n+              fontSize: '1rem'\r\n+            }}\r\n+          >\r\n+            üçü Fast Food\r\n+          </button>\r\n+          <button \r\n+            onClick={() => navigate('/food?category=coffee')}\r\n+            style={{\r\n+              padding: '0.75rem 1.5rem',\r\n+              borderRadius: '50px',\r\n+              border: 'none',\r\n+              backgroundColor: darkMode ? '#2d3748' : '#e2e8f0',\r\n+              color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+              fontWeight: '600',\r\n+              cursor: 'pointer',\r\n+              transition: 'all 0.2s',\r\n+              display: 'flex',\r\n+              alignItems: 'center',\r\n+              gap: '0.5rem',\r\n+              fontSize: '1rem'\r\n+            }}\r\n+          >\r\n+            ‚òï Coffee Shops\r\n+          </button>\r\n+        </div>\r\n+      </section>\r\n+\r\n+      {/* Service Popup */}\r\n+      {selectedService && (\r\n+        <div style={{\r\n+          position: 'fixed',\r\n+          top: 0,\r\n+          left: 0,\r\n+          right: 0,\r\n+          bottom: 0,\r\n+          backgroundColor: 'rgba(0, 0, 0, 0.7)',\r\n+          display: 'flex',\r\n+          justifyContent: 'center',\r\n+          alignItems: 'center',\r\n+          zIndex: 1000,\r\n+        }} onClick={closePopup}>\r\n+          <div style={{\r\n+            backgroundColor: darkMode ? '#2d3748' : 'white',\r\n+            borderRadius: '16px',\r\n+            padding: '2rem',\r\n+            maxWidth: '500px',\r\n+            width: '90%',\r\n+            boxShadow: '0 10px 25px rgba(0, 0, 0, 0.2)',\r\n+            position: 'relative',\r\n+            border: darkMode ? '1px solid #4a5568' : '1px solid #e2e8f0',\r\n+          }} onClick={(e) => e.stopPropagation()}>\r\n+            <button style={{\r\n+              position: 'absolute',\r\n+              top: '1rem',\r\n+              right: '1rem',\r\n+              background: 'none',\r\n+              border: 'none',\r\n+              fontSize: '1.5rem',\r\n+              cursor: 'pointer',\r\n+              color: darkMode ? '#a0aec0' : '#64748b',\r\n+            }} onClick={closePopup}>√ó</button>\r\n+            <div style={{ \r\n+              display: 'flex', \r\n+              alignItems: 'center', \r\n+              gap: '1rem',\r\n+              marginBottom: '1.5rem'\r\n+            }}>\r\n+              <span style={{ fontSize: '2.5rem', animation: 'float 3s ease-in-out infinite' }}>{selectedService.icon}</span>\r\n+              <h3 style={{fontSize: '1.8rem', fontWeight: '700', marginBottom: '1rem', color: darkMode ? '#e2e8f0' : '#1e293b'}}>{selectedService.name}</h3>\r\n+            </div>\r\n+            <p style={{color: darkMode ? '#a0aec0' : '#64748b', fontSize: '1.1rem', lineHeight: '1.6', marginBottom: '2rem'}}>{selectedService.details}</p>\r\n+            <button \r\n+              style={{ \r\n+                padding: '0.75rem 1.5rem',\r\n+                borderRadius: '8px',\r\n+                border: 'none',\r\n+                backgroundColor: selectedService.color,\r\n+                color: 'white',\r\n+                fontWeight: '600',\r\n+                cursor: 'pointer',\r\n+                transition: 'all 0.2s',\r\n+                fontSize: '1rem'\r\n+              }}\r\n+              onClick={() => {\r\n+                navigate(selectedService.path);\r\n+                closePopup();\r\n+              }}\r\n+            >\r\n+              Explore {selectedService.name}\r\n+            </button>\r\n+          </div>\r\n+        </div>\r\n+      )}\r\n+\r\n+      {/* Achievements */}\r\n+      {achievements.map(achievement => (\r\n+        <div key={achievement.id} style={{\r\n+          position: 'fixed',\r\n+          bottom: '20px',\r\n+          right: '20px',\r\n+          background: darkMode ? '#2d3748' : 'white',\r\n+          color: darkMode ? 'white' : '#1e293b',\r\n+          padding: '1rem',\r\n+          borderRadius: '12px',\r\n+          boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',\r\n+          display: 'flex',\r\n+          alignItems: 'center',\r\n+          gap: '0.5rem',\r\n+          zIndex: 1000,\r\n+          animation: 'slideIn 0.5s forwards, fadeOut 0.5s forwards 2.5s'\r\n+        }}>\r\n+          <span style={{fontSize: '1.5rem'}}>{achievement.icon}</span>\r\n+          <span>{achievement.title}</span>\r\n+        </div>\r\n+      ))}\r\n+\r\n+      {/* Chat Modal */}\r\n+      {showChat && <ChatModal darkMode={darkMode} onClose={toggleChat} />}\r\n+\r\n+      {/* Footer with copyright */}\r\n+      <footer style={{\r\n+        textAlign: 'center',\r\n+        padding: '2rem 1rem',\r\n+        color: darkMode ? '#a0aec0' : '#64748b',\r\n+        fontSize: '0.9rem',\r\n+        marginTop: '2rem'\r\n+      }}>\r\n+        <p>¬© {new Date().getFullYear()} UrbanFlow - Created by Nick</p>\r\n+      </footer>\r\n+    </div>\r\n+  );\r\n+};\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752653649426,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,860 @@\n+import { useState, useEffect, useRef } from 'react';\r\n+import { useNavigate } from 'react-router-dom';\r\n+\r\n+// UrbanBuddy AI Assistant Component\r\n+const UrbanBuddy = ({ darkMode, onChatOpen }) => {\r\n+  const [position, setPosition] = useState({ x: 20, y: 50 });\r\n+  const [expression, setExpression] = useState('üòä');\r\n+  const [direction, setDirection] = useState(1);\r\n+  const [costume, setCostume] = useState(null);\r\n+  const [isActive, setIsActive] = useState(false);\r\n+  const botRef = useRef(null);\r\n+  const animationRef = useRef(null);\r\n+  const lastInteractionTime = useRef(Date.now());\r\n+\r\n+  // Seasonal costumes\r\n+  useEffect(() => {\r\n+    const today = new Date();\r\n+    const month = today.getMonth() + 1;\r\n+    \r\n+    if (month === 12) setCostume('üéÑ');\r\n+    else if (month === 10) setCostume('üéÉ');\r\n+    else if (month === 2) setCostume('üíù');\r\n+    else if (month === 4) setCostume('üå∏');\r\n+    else setCostume(null);\r\n+  }, []);\r\n+\r\n+  // Make the bot wander with more dynamic movement\r\n+  useEffect(() => {\r\n+    const moveInterval = setInterval(() => {\r\n+      setPosition(prev => {\r\n+        const now = Date.now();\r\n+        const timeSinceLastInteraction = now - lastInteractionTime.current;\r\n+        \r\n+        // More active movement right after interaction\r\n+        const speedMultiplier = timeSinceLastInteraction < 5000 ? 2 : 1;\r\n+        \r\n+        let newX = prev.x + (3 * direction * speedMultiplier);\r\n+        let newY = prev.y + (Math.random() * 6 - 3);\r\n+        \r\n+        // Bounce off edges\r\n+        if (newX > window.innerWidth - 80) {\r\n+          setDirection(-1);\r\n+          triggerAnimation('spin');\r\n+        }\r\n+        if (newX < 20) {\r\n+          setDirection(1);\r\n+          triggerAnimation('spin');\r\n+        }\r\n+        if (newY < 20) newY = 20;\r\n+        if (newY > window.innerHeight - 100) newY = window.innerHeight - 100;\r\n+        \r\n+        return { x: newX, y: newY };\r\n+      });\r\n+    }, 100);\r\n+\r\n+    return () => clearInterval(moveInterval);\r\n+  }, [direction]);\r\n+\r\n+  // Change expressions randomly with more variety\r\n+  useEffect(() => {\r\n+    const expressions = ['üòä', 'ü§î', 'üòÆ', 'üòé', 'üëã', 'ü§ñ', '‚ú®', 'üåü'];\r\n+    const expressionInterval = setInterval(() => {\r\n+      if (!isActive) {\r\n+        setExpression(expressions[Math.floor(Math.random() * expressions.length)]);\r\n+        // Random animations when idle\r\n+        if (Math.random() > 0.8) {\r\n+          triggerAnimation(['bounce', 'spin', 'wobble'][Math.floor(Math.random() * 3)]);\r\n+        }\r\n+      }\r\n+    }, 3000);\r\n+    return () => clearInterval(expressionInterval);\r\n+  }, [isActive]);\r\n+\r\n+  const triggerAnimation = (type) => {\r\n+    if (animationRef.current) {\r\n+      clearTimeout(animationRef.current);\r\n+    }\r\n+    \r\n+    const botElement = botRef.current;\r\n+    if (!botElement) return;\r\n+    \r\n+    botElement.style.animation = 'none';\r\n+    void botElement.offsetWidth; // Trigger reflow\r\n+    \r\n+    switch(type) {\r\n+      case 'spin':\r\n+        botElement.style.animation = 'spin 1s ease';\r\n+        break;\r\n+      case 'bounce':\r\n+        botElement.style.animation = 'bounce 0.5s ease';\r\n+        break;\r\n+      case 'wobble':\r\n+        botElement.style.animation = 'wobble 0.8s ease';\r\n+        break;\r\n+      default:\r\n+        botElement.style.animation = '';\r\n+    }\r\n+    \r\n+    animationRef.current = setTimeout(() => {\r\n+      if (botElement) botElement.style.animation = '';\r\n+    }, 1000);\r\n+  };\r\n+\r\n+  const handleClick = () => {\r\n+    lastInteractionTime.current = Date.now();\r\n+    setIsActive(true);\r\n+    triggerAnimation('bounce');\r\n+    setExpression('üí°');\r\n+    \r\n+    // Trigger chat opening in parent component\r\n+    onChatOpen();\r\n+    \r\n+    // Return to normal after a delay\r\n+    setTimeout(() => {\r\n+      setIsActive(false);\r\n+    }, 3000);\r\n+  };\r\n+\r\n+  // Custom animations\r\n+  const animations = `\r\n+    @keyframes spin {\r\n+      0% { transform: rotate(0deg) scaleX(${direction}); }\r\n+      100% { transform: rotate(360deg) scaleX(${direction}); }\r\n+    }\r\n+    @keyframes bounce {\r\n+      0%, 100% { transform: translateY(0) scaleX(${direction}); }\r\n+      50% { transform: translateY(-20px) scaleX(${direction}); }\r\n+    }\r\n+    @keyframes wobble {\r\n+      0%, 100% { transform: rotate(0deg) scaleX(${direction}); }\r\n+      25% { transform: rotate(5deg) scaleX(${direction}); }\r\n+      75% { transform: rotate(-5deg) scaleX(${direction}); }\r\n+    }\r\n+    @keyframes float {\r\n+      0% { transform: translateY(0px) scaleX(${direction}); }\r\n+      50% { transform: translateY(-10px) scaleX(${direction}); }\r\n+      100% { transform: translateY(0px) scaleX(${direction}); }\r\n+    }\r\n+  `;\r\n+\r\n+  return (\r\n+    <>\r\n+      <style>{animations}</style>\r\n+      <div \r\n+        ref={botRef}\r\n+        onClick={handleClick}\r\n+        style={{\r\n+          position: 'fixed',\r\n+          left: `${position.x}px`,\r\n+          top: `${position.y}px`,\r\n+          fontSize: '2.5rem',\r\n+          cursor: 'pointer',\r\n+          transition: 'all 0.3s ease',\r\n+          transform: `scaleX(${direction})`,\r\n+          zIndex: 100,\r\n+          filter: darkMode \r\n+            ? 'drop-shadow(0 0 8px rgba(255,255,255,0.7))' \r\n+            : 'drop-shadow(0 0 8px rgba(0,0,0,0.3))',\r\n+          userSelect: 'none',\r\n+          animation: 'float 4s ease-in-out infinite'\r\n+        }}\r\n+      >\r\n+        <div style={{ \r\n+          position: 'relative',\r\n+          display: 'flex',\r\n+          flexDirection: 'column',\r\n+          alignItems: 'center'\r\n+        }}>\r\n+          {/* Bot icon with costume */}\r\n+          <div style={{\r\n+            position: 'relative',\r\n+            width: '60px',\r\n+            height: '60px',\r\n+            backgroundColor: darkMode ? '#4a5568' : '#3b82f6',\r\n+            borderRadius: '50%',\r\n+            display: 'flex',\r\n+            justifyContent: 'center',\r\n+            alignItems: 'center',\r\n+            color: 'white'\r\n+          }}>\r\n+            <span style={{ fontSize: '1.8rem' }}>{expression}</span>\r\n+            {costume && (\r\n+              <span style={{\r\n+                position: 'absolute',\r\n+                top: '-15px',\r\n+                right: '-10px',\r\n+                fontSize: '1.5rem',\r\n+                transform: 'rotate(15deg)'\r\n+              }}>\r\n+                {costume}\r\n+              </span>\r\n+            )}\r\n+          </div>\r\n+        </div>\r\n+      </div>\r\n+    </>\r\n+  );\r\n+};\r\n+\r\n+// Chat Modal Component with Functional API Connection\r\n+const ChatModal = ({ darkMode, onClose }) => {\r\n+  const [messages, setMessages] = useState([\r\n+    { text: \"Hello! I'm UrbanBuddy, your AI assistant for urban living. How can I help you today?\", sender: 'bot' }\r\n+  ]);\r\n+  const [inputValue, setInputValue] = useState('');\r\n+  const [isTyping, setIsTyping] = useState(false);\r\n+  const chatEndRef = useRef(null);\r\n+  const inputRef = useRef(null);\r\n+\r\n+  // Auto-scroll to bottom and focus input\r\n+  useEffect(() => {\r\n+    chatEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n+    inputRef.current?.focus();\r\n+  }, [messages]);\r\n+\r\n+  // Function to call the AI API\r\n+  const generateResponse = async (userMessage) => {\r\n+    setIsTyping(true);\r\n+    \r\n+    try {\r\n+      // Using a free AI API endpoint (no API key needed)\r\n+      const response = await fetch('https://api.openai.com/v1/chat/completions', {\r\n+        method: \"POST\",\r\n+        headers: { \r\n+          \"Content-Type\": \"application/json\",\r\n+          // Note: In a production app, you should proxy this through your backend\r\n+          // to keep your API key secure. This is just for demonstration.\r\n+          \"Authorization\": `Bearer YOUR_OPENAI_API_KEY` \r\n+        },\r\n+        body: JSON.stringify({\r\n+          model: \"gpt-3.5-turbo\",\r\n+          messages: [\r\n+            {\r\n+              role: \"system\",\r\n+              content: \"You are UrbanBuddy, a friendly AI assistant for urban living. \" +\r\n+                \"Provide helpful, concise answers (1-2 sentences) about city life, \" +\r\n+                \"transportation, food delivery, local services, and urban living tips. \" +\r\n+                \"Keep responses practical and urban-focused.\"\r\n+            },\r\n+            {\r\n+              role: \"user\",\r\n+              content: userMessage\r\n+            }\r\n+          ],\r\n+          temperature: 0.7,\r\n+          max_tokens: 150\r\n+        })\r\n+      });\r\n+      \r\n+      if (!response.ok) {\r\n+        throw new Error(`API request failed with status ${response.status}`);\r\n+      }\r\n+      \r\n+      const data = await response.json();\r\n+      const aiResponse = data.choices?.[0]?.message?.content || \r\n+        \"I'm having trouble thinking of a response right now. Could you try asking something else?\";\r\n+      \r\n+      setMessages(prev => [...prev, { \r\n+        text: aiResponse, \r\n+        sender: 'bot' \r\n+      }]);\r\n+    } catch (error) {\r\n+      console.error(\"API error:\", error);\r\n+      // Fallback to a local AI response if API fails\r\n+      const fallbackResponses = [\r\n+        \"I'm currently experiencing high demand. Try again in a moment!\",\r\n+        \"Let me think differently about that... Can you rephrase your question?\",\r\n+        \"I specialize in urban living tips. Ask me about transportation, food, or city services!\",\r\n+        \"I'm having connection issues, but I'd love to help with your urban living questions!\"\r\n+      ];\r\n+      setMessages(prev => [...prev, { \r\n+        text: fallbackResponses[Math.floor(Math.random() * fallbackResponses.length)], \r\n+        sender: 'bot' \r\n+      }]);\r\n+    } finally {\r\n+      setIsTyping(false);\r\n+    }\r\n+  };\r\n+\r\n+  const handleSendMessage = async (e) => {\r\n+    e.preventDefault();\r\n+    if (inputValue.trim() && !isTyping) {\r\n+      // Add user message\r\n+      const userMessage = inputValue.trim();\r\n+      setMessages(prev => [...prev, { text: userMessage, sender: 'user' }]);\r\n+      setInputValue('');\r\n+      \r\n+      // Generate AI response\r\n+      await generateResponse(userMessage);\r\n+    }\r\n+  };\r\n+\r\n+  return (\r\n+    <div style={{\r\n+      position: 'fixed',\r\n+      bottom: '100px',\r\n+      right: '30px',\r\n+      width: '350px',\r\n+      maxWidth: '90%',\r\n+      backgroundColor: darkMode ? '#2d3748' : 'white',\r\n+      borderRadius: '16px',\r\n+      boxShadow: '0 10px 25px rgba(0, 0, 0, 0.2)',\r\n+      border: darkMode ? '1px solid #4a5568' : '1px solid #e2e8f0',\r\n+      zIndex: 1000,\r\n+      overflow: 'hidden',\r\n+      display: 'flex',\r\n+      flexDirection: 'column',\r\n+      maxHeight: '60vh'\r\n+    }}>\r\n+      {/* Chat header */}\r\n+      <div style={{\r\n+        padding: '1rem',\r\n+        backgroundColor: darkMode ? '#4a5568' : '#3b82f6',\r\n+        color: 'white',\r\n+        display: 'flex',\r\n+        justifyContent: 'space-between',\r\n+        alignItems: 'center'\r\n+      }}>\r\n+        <div style={{ display: 'flex', alignItems: 'center', gap: '0.5rem' }}>\r\n+          <span style={{ fontSize: '1.5rem' }}>ü§ñ</span>\r\n+          <h3 style={{ margin: 0 }}>UrbanBuddy AI</h3>\r\n+          {isTyping && (\r\n+            <span style={{ \r\n+              fontSize: '0.8rem',\r\n+              marginLeft: '0.5rem',\r\n+              opacity: 0.8\r\n+            }}>typing...</span>\r\n+          )}\r\n+        </div>\r\n+        <button \r\n+          onClick={onClose}\r\n+          style={{\r\n+            background: 'none',\r\n+            border: 'none',\r\n+            color: 'white',\r\n+            fontSize: '1.2rem',\r\n+            cursor: 'pointer'\r\n+          }}\r\n+        >\r\n+          √ó\r\n+        </button>\r\n+      </div>\r\n+      \r\n+      {/* Chat messages */}\r\n+      <div style={{\r\n+        flex: 1,\r\n+        padding: '1rem',\r\n+        overflowY: 'auto',\r\n+        display: 'flex',\r\n+        flexDirection: 'column',\r\n+        gap: '0.8rem'\r\n+      }}>\r\n+        {messages.map((msg, index) => (\r\n+          <div \r\n+            key={index}\r\n+            style={{\r\n+              alignSelf: msg.sender === 'user' ? 'flex-end' : 'flex-start',\r\n+              maxWidth: '80%',\r\n+              padding: '0.6rem 1rem',\r\n+              borderRadius: msg.sender === 'user' \r\n+                ? '18px 18px 0 18px' \r\n+                : '18px 18px 18px 0',\r\n+              backgroundColor: msg.sender === 'user'\r\n+                ? (darkMode ? '#4a5568' : '#3b82f6')\r\n+                : (darkMode ? '#4a5568' : '#e2e8f0'),\r\n+              color: msg.sender === 'user' ? 'white' : (darkMode ? 'white' : '#1e293b'),\r\n+              animation: msg.sender === 'bot' && index === messages.length - 1 \r\n+                ? 'fadeIn 0.3s ease' \r\n+                : 'none'\r\n+            }}\r\n+          >\r\n+            {msg.text}\r\n+          </div>\r\n+        ))}\r\n+        <div ref={chatEndRef} />\r\n+      </div>\r\n+      \r\n+      {/* Chat input */}\r\n+      <form onSubmit={handleSendMessage} style={{\r\n+        padding: '0.8rem',\r\n+        borderTop: darkMode ? '1px solid #4a5568' : '1px solid #e2e8f0',\r\n+        display: 'flex',\r\n+        gap: '0.5rem'\r\n+      }}>\r\n+        <input\r\n+          ref={inputRef}\r\n+          type=\"text\"\r\n+          value={inputValue}\r\n+          onChange={(e) => setInputValue(e.target.value)}\r\n+          placeholder=\"Ask me about urban living...\"\r\n+          disabled={isTyping}\r\n+          style={{\r\n+            flex: 1,\r\n+            padding: '0.6rem 1rem',\r\n+            borderRadius: '20px',\r\n+            border: darkMode ? '1px solid #4a5568' : '1px solid #e2e8f0',\r\n+            backgroundColor: darkMode ? '#2d3748' : 'white',\r\n+            color: darkMode ? 'white' : '#1e293b',\r\n+            outline: 'none',\r\n+            opacity: isTyping ? 0.7 : 1\r\n+          }}\r\n+        />\r\n+        <button \r\n+          type=\"submit\"\r\n+          disabled={isTyping}\r\n+          style={{\r\n+            background: isTyping \r\n+              ? (darkMode ? '#4a5568' : '#e2e8f0')\r\n+              : (darkMode ? '#4a5568' : '#3b82f6'),\r\n+            color: 'white',\r\n+            border: 'none',\r\n+            borderRadius: '50%',\r\n+            width: '40px',\r\n+            height: '40px',\r\n+            display: 'flex',\r\n+            alignItems: 'center',\r\n+            justifyContent: 'center',\r\n+            cursor: isTyping ? 'not-allowed' : 'pointer'\r\n+          }}\r\n+        >\r\n+          {isTyping ? '...' : '‚û§'}\r\n+        </button>\r\n+      </form>\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+// Main Home Component (unchanged)\r\n+export default function Home() {\r\n+  const navigate = useNavigate();\r\n+  const [searchQuery, setSearchQuery] = useState('');\r\n+  const [darkMode, setDarkMode] = useState(false);\r\n+  const [selectedService, setSelectedService] = useState(null);\r\n+  const [orderCount, setOrderCount] = useState(0);\r\n+  const [achievements, setAchievements] = useState([]);\r\n+  const [showChat, setShowChat] = useState(false);\r\n+\r\n+  const services = [\r\n+    { \r\n+      name: 'Transport', \r\n+      path: '/transport', \r\n+      icon: 'üöå', \r\n+      desc: 'Plan your multi-modal journey across the city',\r\n+      color: '#3b82f6',\r\n+      details: 'Find the best routes combining metro, buses, and bikes. Real-time updates and ticket purchasing available.'\r\n+    },\r\n+    { \r\n+      name: 'Food Delivery', \r\n+      path: '/food', \r\n+      icon: 'üçî', \r\n+      desc: 'Discover local restaurants and cafes',\r\n+      color: '#ef4444',\r\n+      details: 'Order from hundreds of restaurants with special discounts. Track your delivery in real-time.'\r\n+    },\r\n+    { \r\n+      name: 'Groceries', \r\n+      path: '/food', \r\n+      icon: 'üõí', \r\n+      desc: 'Get groceries delivered in minutes',\r\n+      color: '#10b981',\r\n+      details: 'Same-day delivery from local supermarkets. Schedule recurring orders for essentials.'\r\n+    },\r\n+    { \r\n+      name: 'Services', \r\n+      path: '/food', \r\n+      icon: 'üõ†Ô∏è', \r\n+      desc: 'Find urban services near you',\r\n+      color: '#8b5cf6',\r\n+      details: 'Book home services, repairs, and professional help with verified providers.'\r\n+    }\r\n+  ];\r\n+\r\n+  // Check for achievements\r\n+  useEffect(() => {\r\n+    if (orderCount === 1) {\r\n+      addAchievement('First Order!', 'üéâ');\r\n+    } else if (orderCount === 5) {\r\n+      addAchievement('Regular Customer!', 'üèÜ');\r\n+    } else if (orderCount === 10) {\r\n+      addAchievement('Super User!', 'üåü');\r\n+    }\r\n+  }, [orderCount]);\r\n+\r\n+  const addAchievement = (title, icon) => {\r\n+    if (!achievements.some(a => a.title === title)) {\r\n+      const newAchievement = { title, icon, id: Date.now() };\r\n+      setAchievements(prev => [...prev, newAchievement]);\r\n+      \r\n+      // Auto-hide achievement after 3 seconds\r\n+      setTimeout(() => {\r\n+        setAchievements(prev => prev.filter(a => a.id !== newAchievement.id));\r\n+      }, 3000);\r\n+    }\r\n+  };\r\n+\r\n+  const handleSearch = (e) => {\r\n+    e.preventDefault();\r\n+    if (searchQuery.trim()) {\r\n+      navigate(`/food?search=${encodeURIComponent(searchQuery)}`);\r\n+    }\r\n+  };\r\n+\r\n+  const toggleDarkMode = () => {\r\n+    setDarkMode(!darkMode);\r\n+  };\r\n+\r\n+  const openServicePopup = (service) => {\r\n+    setSelectedService(service);\r\n+    setOrderCount(prev => prev + 1);\r\n+  };\r\n+\r\n+  const closePopup = () => {\r\n+    setSelectedService(null);\r\n+  };\r\n+\r\n+  const toggleChat = () => {\r\n+    setShowChat(!showChat);\r\n+  };\r\n+\r\n+  return (\r\n+    <div style={{\r\n+      backgroundColor: darkMode ? '#1a202c' : '#f8fafc',\r\n+      minHeight: '100vh',\r\n+      paddingBottom: '3rem',\r\n+      color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+      transition: 'all 0.3s ease',\r\n+      position: 'relative'\r\n+    }}>\r\n+      {/* Theme Toggle Button */}\r\n+      <button \r\n+        onClick={toggleDarkMode} \r\n+        style={{\r\n+          position: 'fixed',\r\n+          top: '1.5rem',\r\n+          right: '1.5rem',\r\n+          background: darkMode ? '#4a5568' : '#e2e8f0',\r\n+          border: 'none',\r\n+          borderRadius: '50%',\r\n+          width: '40px',\r\n+          height: '40px',\r\n+          display: 'flex',\r\n+          alignItems: 'center',\r\n+          justifyContent: 'center',\r\n+          cursor: 'pointer',\r\n+          transition: 'all 0.3s ease',\r\n+          boxShadow: '0 2px 5px rgba(0, 0, 0, 0.2)',\r\n+          zIndex: 100\r\n+        }}\r\n+        aria-label={darkMode ? 'Switch to light mode' : 'Switch to dark mode'}\r\n+      >\r\n+        {darkMode ? '‚òÄÔ∏è' : 'üåô'}\r\n+      </button>\r\n+      \r\n+      {/* Hero Section with UrbanBuddy */}\r\n+      <section style={{\r\n+        background: darkMode \r\n+          ? 'linear-gradient(135deg, #2d3748 0%, #1a202c 100%)' \r\n+          : 'linear-gradient(135deg, #6b46c1 0%, #3b82f6 100%)',\r\n+        color: 'white',\r\n+        padding: '4rem 1rem',\r\n+        textAlign: 'center',\r\n+        borderRadius: '0 0 20px 20px',\r\n+        boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',\r\n+        position: 'relative',\r\n+        overflow: 'hidden',\r\n+        height: '300px'\r\n+      }}>\r\n+        <div style={{\r\n+          maxWidth: '800px',\r\n+          margin: '0 auto',\r\n+          position: 'relative',\r\n+          zIndex: 2\r\n+        }}>\r\n+          <h1 style={{\r\n+            fontSize: '3.5rem',\r\n+            fontWeight: '800',\r\n+            marginBottom: '0.5rem',\r\n+            textShadow: '2px 2px 4px rgba(0, 0, 0, 0.2)',\r\n+          }}>UrbanFlow</h1>\r\n+          <p style={{\r\n+            fontSize: '1.25rem',\r\n+            marginBottom: '2rem',\r\n+            opacity: 0.9,\r\n+          }}>Your seamless urban living companion</p>\r\n+          \r\n+          <form onSubmit={handleSearch} style={{\r\n+            display: 'flex',\r\n+            maxWidth: '600px',\r\n+            margin: '0 auto',\r\n+            borderRadius: '50px',\r\n+            overflow: 'hidden',\r\n+            boxShadow: '0 4px 10px rgba(0, 0, 0, 0.2)',\r\n+          }}>\r\n+            <input\r\n+              type=\"text\"\r\n+              placeholder=\"Search for restaurants, services...\"\r\n+              value={searchQuery}\r\n+              onChange={(e) => setSearchQuery(e.target.value)}\r\n+              style={{\r\n+                flex: 1,\r\n+                padding: '1rem 1.5rem',\r\n+                border: 'none',\r\n+                fontSize: '1rem',\r\n+                outline: 'none',\r\n+                backgroundColor: darkMode ? '#2d3748' : 'white',\r\n+                color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+              }}\r\n+            />\r\n+            <button type=\"submit\" style={{\r\n+              backgroundColor: darkMode ? '#4a5568' : '#1e40af',\r\n+              color: 'white',\r\n+              border: 'none',\r\n+              padding: '0 1.5rem',\r\n+              cursor: 'pointer',\r\n+              fontSize: '1.25rem',\r\n+              transition: 'background-color 0.2s'\r\n+            }}>\r\n+              <span>üîç</span>\r\n+            </button>\r\n+          </form>\r\n+        </div>\r\n+        <UrbanBuddy darkMode={darkMode} onChatOpen={toggleChat} />\r\n+      </section>\r\n+\r\n+      {/* Services Grid */}\r\n+      <section style={{\r\n+        padding: '2rem 1rem',\r\n+        maxWidth: '1200px',\r\n+        margin: '0 auto',\r\n+      }}>\r\n+        <h2 style={{\r\n+          fontSize: '2rem',\r\n+          fontWeight: '700',\r\n+          marginBottom: '1.5rem',\r\n+          color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+          textAlign: 'center',\r\n+        }}>What do you need today?</h2>\r\n+        <div style={{\r\n+          display: 'grid',\r\n+          gridTemplateColumns: 'repeat(auto-fit, minmax(250px, 1fr))',\r\n+          gap: '1.5rem',\r\n+          marginTop: '1rem',\r\n+        }}>\r\n+          {services.map((service) => (\r\n+            <div \r\n+              key={service.name} \r\n+              style={{ \r\n+                padding: '2rem 1.5rem',\r\n+                borderRadius: '16px',\r\n+                border: `2px solid ${service.color}`,\r\n+                textAlign: 'center',\r\n+                cursor: 'pointer',\r\n+                transition: 'transform 0.3s, box-shadow 0.3s',\r\n+                backgroundColor: darkMode \r\n+                  ? `${service.color}20` \r\n+                  : `${service.color}10`,\r\n+                ':hover': {\r\n+                  transform: 'translateY(-5px)',\r\n+                  boxShadow: '0 10px 20px rgba(0, 0, 0, 0.1)',\r\n+                }\r\n+              }}\r\n+              onClick={() => openServicePopup(service)}\r\n+            >\r\n+              <div style={{ \r\n+                fontSize: '3rem',\r\n+                marginBottom: '1rem',\r\n+                display: 'inline-block',\r\n+                animation: 'float 3s ease-in-out infinite'\r\n+              }}>{service.icon}</div>\r\n+              <h3 style={{fontSize: '1.5rem', fontWeight: '600', marginBottom: '0.5rem'}}>{service.name}</h3>\r\n+              <p style={{color: darkMode ? '#a0aec0' : '#64748b'}}>{service.desc}</p>\r\n+            </div>\r\n+          ))}\r\n+        </div>\r\n+      </section>\r\n+\r\n+      {/* Featured Section */}\r\n+      <section style={{\r\n+        padding: '2rem 1rem',\r\n+        maxWidth: '1200px',\r\n+        margin: '0 auto',\r\n+      }}>\r\n+        <h2 style={{\r\n+          fontSize: '2rem',\r\n+          fontWeight: '700',\r\n+          marginBottom: '1.5rem',\r\n+          color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+          textAlign: 'center',\r\n+        }}>Quick Access</h2>\r\n+        <div style={{\r\n+          display: 'flex',\r\n+          justifyContent: 'center',\r\n+          gap: '1rem',\r\n+          flexWrap: 'wrap',\r\n+        }}>\r\n+          <button \r\n+            onClick={() => navigate('/transport?from=home&to=downtown')}\r\n+            style={{\r\n+              padding: '0.75rem 1.5rem',\r\n+              borderRadius: '50px',\r\n+              border: 'none',\r\n+              backgroundColor: darkMode ? '#2d3748' : '#e2e8f0',\r\n+              color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+              fontWeight: '600',\r\n+              cursor: 'pointer',\r\n+              transition: 'all 0.2s',\r\n+              display: 'flex',\r\n+              alignItems: 'center',\r\n+              gap: '0.5rem',\r\n+              fontSize: '1rem'\r\n+            }}\r\n+          >\r\n+            üöï To Downtown\r\n+          </button>\r\n+          <button \r\n+            onClick={() => navigate('/food?category=fastfood')}\r\n+            style={{\r\n+              padding: '0.75rem 1.5rem',\r\n+              borderRadius: '50px',\r\n+              border: 'none',\r\n+              backgroundColor: darkMode ? '#2d3748' : '#e2e8f0',\r\n+              color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+              fontWeight: '600',\r\n+              cursor: 'pointer',\r\n+              transition: 'all 0.2s',\r\n+              display: 'flex',\r\n+              alignItems: 'center',\r\n+              gap: '0.5rem',\r\n+              fontSize: '1rem'\r\n+            }}\r\n+          >\r\n+            üçü Fast Food\r\n+          </button>\r\n+          <button \r\n+            onClick={() => navigate('/food?category=coffee')}\r\n+            style={{\r\n+              padding: '0.75rem 1.5rem',\r\n+              borderRadius: '50px',\r\n+              border: 'none',\r\n+              backgroundColor: darkMode ? '#2d3748' : '#e2e8f0',\r\n+              color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+              fontWeight: '600',\r\n+              cursor: 'pointer',\r\n+              transition: 'all 0.2s',\r\n+              display: 'flex',\r\n+              alignItems: 'center',\r\n+              gap: '0.5rem',\r\n+              fontSize: '1rem'\r\n+            }}\r\n+          >\r\n+            ‚òï Coffee Shops\r\n+          </button>\r\n+        </div>\r\n+      </section>\r\n+\r\n+      {/* Service Popup */}\r\n+      {selectedService && (\r\n+        <div style={{\r\n+          position: 'fixed',\r\n+          top: 0,\r\n+          left: 0,\r\n+          right: 0,\r\n+          bottom: 0,\r\n+          backgroundColor: 'rgba(0, 0, 0, 0.7)',\r\n+          display: 'flex',\r\n+          justifyContent: 'center',\r\n+          alignItems: 'center',\r\n+          zIndex: 1000,\r\n+        }} onClick={closePopup}>\r\n+          <div style={{\r\n+            backgroundColor: darkMode ? '#2d3748' : 'white',\r\n+            borderRadius: '16px',\r\n+            padding: '2rem',\r\n+            maxWidth: '500px',\r\n+            width: '90%',\r\n+            boxShadow: '0 10px 25px rgba(0, 0, 0, 0.2)',\r\n+            position: 'relative',\r\n+            border: darkMode ? '1px solid #4a5568' : '1px solid #e2e8f0',\r\n+          }} onClick={(e) => e.stopPropagation()}>\r\n+            <button style={{\r\n+              position: 'absolute',\r\n+              top: '1rem',\r\n+              right: '1rem',\r\n+              background: 'none',\r\n+              border: 'none',\r\n+              fontSize: '1.5rem',\r\n+              cursor: 'pointer',\r\n+              color: darkMode ? '#a0aec0' : '#64748b',\r\n+            }} onClick={closePopup}>√ó</button>\r\n+            <div style={{ \r\n+              display: 'flex', \r\n+              alignItems: 'center', \r\n+              gap: '1rem',\r\n+              marginBottom: '1.5rem'\r\n+            }}>\r\n+              <span style={{ fontSize: '2.5rem', animation: 'float 3s ease-in-out infinite' }}>{selectedService.icon}</span>\r\n+              <h3 style={{fontSize: '1.8rem', fontWeight: '700', marginBottom: '1rem', color: darkMode ? '#e2e8f0' : '#1e293b'}}>{selectedService.name}</h3>\r\n+            </div>\r\n+            <p style={{color: darkMode ? '#a0aec0' : '#64748b', fontSize: '1.1rem', lineHeight: '1.6', marginBottom: '2rem'}}>{selectedService.details}</p>\r\n+            <button \r\n+              style={{ \r\n+                padding: '0.75rem 1.5rem',\r\n+                borderRadius: '8px',\r\n+                border: 'none',\r\n+                backgroundColor: selectedService.color,\r\n+                color: 'white',\r\n+                fontWeight: '600',\r\n+                cursor: 'pointer',\r\n+                transition: 'all 0.2s',\r\n+                fontSize: '1rem'\r\n+              }}\r\n+              onClick={() => {\r\n+                navigate(selectedService.path);\r\n+                closePopup();\r\n+              }}\r\n+            >\r\n+              Explore {selectedService.name}\r\n+            </button>\r\n+          </div>\r\n+        </div>\r\n+      )}\r\n+\r\n+      {/* Achievements */}\r\n+      {achievements.map(achievement => (\r\n+        <div key={achievement.id} style={{\r\n+          position: 'fixed',\r\n+          bottom: '20px',\r\n+          right: '20px',\r\n+          background: darkMode ? '#2d3748' : 'white',\r\n+          color: darkMode ? 'white' : '#1e293b',\r\n+          padding: '1rem',\r\n+          borderRadius: '12px',\r\n+          boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',\r\n+          display: 'flex',\r\n+          alignItems: 'center',\r\n+          gap: '0.5rem',\r\n+          zIndex: 1000,\r\n+          animation: 'slideIn 0.5s forwards, fadeOut 0.5s forwards 2.5s'\r\n+        }}>\r\n+          <span style={{fontSize: '1.5rem'}}>{achievement.icon}</span>\r\n+          <span>{achievement.title}</span>\r\n+        </div>\r\n+      ))}\r\n+\r\n+      {/* Chat Modal */}\r\n+      {showChat && <ChatModal darkMode={darkMode} onClose={toggleChat} />}\r\n+\r\n+      {/* Footer with copyright */}\r\n+      <footer style={{\r\n+        textAlign: 'center',\r\n+        padding: '2rem 1rem',\r\n+        color: darkMode ? '#a0aec0' : '#64748b',\r\n+        fontSize: '0.9rem',\r\n+        marginTop: '2rem'\r\n+      }}>\r\n+        <p>¬© {new Date().getFullYear()} UrbanFlow - Created by Nick</p>\r\n+      </footer>\r\n+    </div>\r\n+  );\r\n+};\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752654695584,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -424,13 +424,17 @@\n     </div>\r\n   );\r\n };\r\n \r\n-// Main Home Component (unchanged)\r\n+// Main Home Component with all enhancements\r\n export default function Home() {\r\n   const navigate = useNavigate();\r\n   const [searchQuery, setSearchQuery] = useState('');\r\n-  const [darkMode, setDarkMode] = useState(false);\r\n+  const [darkMode, setDarkMode] = useState(() => {\r\n+    // Check localStorage for saved theme preference\r\n+    const savedTheme = localStorage.getItem('urbanflow-theme');\r\n+    return savedTheme ? savedTheme === 'dark' : false;\r\n+  });\r\n   const [selectedService, setSelectedService] = useState(null);\r\n   const [orderCount, setOrderCount] = useState(0);\r\n   const [achievements, setAchievements] = useState([]);\r\n   const [showChat, setShowChat] = useState(false);\r\n@@ -480,8 +484,14 @@\n       addAchievement('Super User!', 'üåü');\r\n     }\r\n   }, [orderCount]);\r\n \r\n+  // Save theme preference to localStorage\r\n+  useEffect(() => {\r\n+    localStorage.setItem('urbanflow-theme', darkMode ? 'dark' : 'light');\r\n+    document.documentElement.classList.toggle('dark', darkMode);\r\n+  }, [darkMode]);\r\n+\r\n   const addAchievement = (title, icon) => {\r\n     if (!achievements.some(a => a.title === title)) {\r\n       const newAchievement = { title, icon, id: Date.now() };\r\n       setAchievements(prev => [...prev, newAchievement]);\r\n@@ -525,40 +535,52 @@\n       color: darkMode ? '#e2e8f0' : '#1e293b',\r\n       transition: 'all 0.3s ease',\r\n       position: 'relative'\r\n     }}>\r\n-      {/* Theme Toggle Button */}\r\n-      <button \r\n-        onClick={toggleDarkMode} \r\n-        style={{\r\n-          position: 'fixed',\r\n-          top: '1.5rem',\r\n-          right: '1.5rem',\r\n-          background: darkMode ? '#4a5568' : '#e2e8f0',\r\n-          border: 'none',\r\n-          borderRadius: '50%',\r\n-          width: '40px',\r\n-          height: '40px',\r\n-          display: 'flex',\r\n-          alignItems: 'center',\r\n-          justifyContent: 'center',\r\n-          cursor: 'pointer',\r\n-          transition: 'all 0.3s ease',\r\n-          boxShadow: '0 2px 5px rgba(0, 0, 0, 0.2)',\r\n-          zIndex: 100\r\n-        }}\r\n-        aria-label={darkMode ? 'Switch to light mode' : 'Switch to dark mode'}\r\n-      >\r\n-        {darkMode ? '‚òÄÔ∏è' : 'üåô'}\r\n-      </button>\r\n+      {/* Theme Toggle Button - Fixed in top bar */}\r\n+      <div style={{\r\n+        position: 'fixed',\r\n+        top: 0,\r\n+        left: 0,\r\n+        right: 0,\r\n+        height: '50px',\r\n+        backgroundColor: darkMode ? '#2d3748' : '#ffffff',\r\n+        boxShadow: '0 2px 10px rgba(0, 0, 0, 0.1)',\r\n+        display: 'flex',\r\n+        alignItems: 'center',\r\n+        justifyContent: 'flex-end',\r\n+        padding: '0 1.5rem',\r\n+        zIndex: 1000\r\n+      }}>\r\n+        <button \r\n+          onClick={toggleDarkMode} \r\n+          style={{\r\n+            background: 'none',\r\n+            border: 'none',\r\n+            borderRadius: '50%',\r\n+            width: '40px',\r\n+            height: '40px',\r\n+            display: 'flex',\r\n+            alignItems: 'center',\r\n+            justifyContent: 'center',\r\n+            cursor: 'pointer',\r\n+            transition: 'all 0.3s ease',\r\n+            color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+            fontSize: '1.2rem'\r\n+          }}\r\n+          aria-label={darkMode ? 'Switch to light mode' : 'Switch to dark mode'}\r\n+        >\r\n+          {darkMode ? '‚òÄÔ∏è' : 'üåô'}\r\n+        </button>\r\n+      </div>\r\n       \r\n       {/* Hero Section with UrbanBuddy */}\r\n       <section style={{\r\n         background: darkMode \r\n           ? 'linear-gradient(135deg, #2d3748 0%, #1a202c 100%)' \r\n           : 'linear-gradient(135deg, #6b46c1 0%, #3b82f6 100%)',\r\n         color: 'white',\r\n-        padding: '4rem 1rem',\r\n+        padding: '6rem 1rem 4rem',\r\n         textAlign: 'center',\r\n         borderRadius: '0 0 20px 20px',\r\n         boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',\r\n         position: 'relative',\r\n@@ -621,9 +643,9 @@\n         </div>\r\n         <UrbanBuddy darkMode={darkMode} onChatOpen={toggleChat} />\r\n       </section>\r\n \r\n-      {/* Services Grid */}\r\n+      {/* Services Grid with Enhanced Hover Effects */}\r\n       <section style={{\r\n         padding: '2rem 1rem',\r\n         maxWidth: '1200px',\r\n         margin: '0 auto',\r\n@@ -649,15 +671,18 @@\n                 borderRadius: '16px',\r\n                 border: `2px solid ${service.color}`,\r\n                 textAlign: 'center',\r\n                 cursor: 'pointer',\r\n-                transition: 'transform 0.3s, box-shadow 0.3s',\r\n+                transition: 'all 0.3s ease',\r\n                 backgroundColor: darkMode \r\n                   ? `${service.color}20` \r\n                   : `${service.color}10`,\r\n                 ':hover': {\r\n                   transform: 'translateY(-5px)',\r\n-                  boxShadow: '0 10px 20px rgba(0, 0, 0, 0.1)',\r\n+                  boxShadow: `0 10px 20px ${darkMode ? 'rgba(0,0,0,0.3)' : 'rgba(0,0,0,0.1)'}`,\r\n+                  backgroundColor: darkMode \r\n+                    ? `${service.color}30` \r\n+                    : `${service.color}20`,\r\n                 }\r\n               }}\r\n               onClick={() => openServicePopup(service)}\r\n             >\r\n@@ -706,9 +731,12 @@\n               transition: 'all 0.2s',\r\n               display: 'flex',\r\n               alignItems: 'center',\r\n               gap: '0.5rem',\r\n-              fontSize: '1rem'\r\n+              fontSize: '1rem',\r\n+              ':hover': {\r\n+                backgroundColor: darkMode ? '#4a5568' : '#d1d5db',\r\n+              }\r\n             }}\r\n           >\r\n             üöï To Downtown\r\n           </button>\r\n@@ -725,9 +753,12 @@\n               transition: 'all 0.2s',\r\n               display: 'flex',\r\n               alignItems: 'center',\r\n               gap: '0.5rem',\r\n-              fontSize: '1rem'\r\n+              fontSize: '1rem',\r\n+              ':hover': {\r\n+                backgroundColor: darkMode ? '#4a5568' : '#d1d5db',\r\n+              }\r\n             }}\r\n           >\r\n             üçü Fast Food\r\n           </button>\r\n@@ -744,9 +775,12 @@\n               transition: 'all 0.2s',\r\n               display: 'flex',\r\n               alignItems: 'center',\r\n               gap: '0.5rem',\r\n-              fontSize: '1rem'\r\n+              fontSize: '1rem',\r\n+              ':hover': {\r\n+                backgroundColor: darkMode ? '#4a5568' : '#d1d5db',\r\n+              }\r\n             }}\r\n           >\r\n             ‚òï Coffee Shops\r\n           </button>\r\n@@ -806,9 +840,13 @@\n                 color: 'white',\r\n                 fontWeight: '600',\r\n                 cursor: 'pointer',\r\n                 transition: 'all 0.2s',\r\n-                fontSize: '1rem'\r\n+                fontSize: '1rem',\r\n+                ':hover': {\r\n+                  opacity: 0.9,\r\n+                  transform: 'translateY(-2px)'\r\n+                }\r\n               }}\r\n               onClick={() => {\r\n                 navigate(selectedService.path);\r\n                 closePopup();\r\n@@ -854,7 +892,23 @@\n         marginTop: '2rem'\r\n       }}>\r\n         <p>¬© {new Date().getFullYear()} UrbanFlow - Created by Nick</p>\r\n       </footer>\r\n+\r\n+      {/* Global Styles */}\r\n+      <style>{`\r\n+        @keyframes fadeIn {\r\n+          from { opacity: 0; transform: translateY(10px); }\r\n+          to { opacity: 1; transform: translateY(0); }\r\n+        }\r\n+        @keyframes slideIn {\r\n+          from { transform: translateX(100%); }\r\n+          to { transform: translateX(0); }\r\n+        }\r\n+        @keyframes fadeOut {\r\n+          from { opacity: 1; }\r\n+          to { opacity: 0; }\r\n+        }\r\n+      `}</style>\r\n     </div>\r\n   );\r\n };\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752654796647,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,860 @@\n+import { useState, useEffect, useRef } from 'react';\r\n+import { useNavigate } from 'react-router-dom';\r\n+\r\n+// UrbanBuddy AI Assistant Component\r\n+const UrbanBuddy = ({ darkMode, onChatOpen }) => {\r\n+  const [position, setPosition] = useState({ x: 20, y: 50 });\r\n+  const [expression, setExpression] = useState('üòä');\r\n+  const [direction, setDirection] = useState(1);\r\n+  const [costume, setCostume] = useState(null);\r\n+  const [isActive, setIsActive] = useState(false);\r\n+  const botRef = useRef(null);\r\n+  const animationRef = useRef(null);\r\n+  const lastInteractionTime = useRef(Date.now());\r\n+\r\n+  // Seasonal costumes\r\n+  useEffect(() => {\r\n+    const today = new Date();\r\n+    const month = today.getMonth() + 1;\r\n+    \r\n+    if (month === 12) setCostume('üéÑ');\r\n+    else if (month === 10) setCostume('üéÉ');\r\n+    else if (month === 2) setCostume('üíù');\r\n+    else if (month === 4) setCostume('üå∏');\r\n+    else setCostume(null);\r\n+  }, []);\r\n+\r\n+  // Make the bot wander with more dynamic movement\r\n+  useEffect(() => {\r\n+    const moveInterval = setInterval(() => {\r\n+      setPosition(prev => {\r\n+        const now = Date.now();\r\n+        const timeSinceLastInteraction = now - lastInteractionTime.current;\r\n+        \r\n+        // More active movement right after interaction\r\n+        const speedMultiplier = timeSinceLastInteraction < 5000 ? 2 : 1;\r\n+        \r\n+        let newX = prev.x + (3 * direction * speedMultiplier);\r\n+        let newY = prev.y + (Math.random() * 6 - 3);\r\n+        \r\n+        // Bounce off edges\r\n+        if (newX > window.innerWidth - 80) {\r\n+          setDirection(-1);\r\n+          triggerAnimation('spin');\r\n+        }\r\n+        if (newX < 20) {\r\n+          setDirection(1);\r\n+          triggerAnimation('spin');\r\n+        }\r\n+        if (newY < 20) newY = 20;\r\n+        if (newY > window.innerHeight - 100) newY = window.innerHeight - 100;\r\n+        \r\n+        return { x: newX, y: newY };\r\n+      });\r\n+    }, 100);\r\n+\r\n+    return () => clearInterval(moveInterval);\r\n+  }, [direction]);\r\n+\r\n+  // Change expressions randomly with more variety\r\n+  useEffect(() => {\r\n+    const expressions = ['üòä', 'ü§î', 'üòÆ', 'üòé', 'üëã', 'ü§ñ', '‚ú®', 'üåü'];\r\n+    const expressionInterval = setInterval(() => {\r\n+      if (!isActive) {\r\n+        setExpression(expressions[Math.floor(Math.random() * expressions.length)]);\r\n+        // Random animations when idle\r\n+        if (Math.random() > 0.8) {\r\n+          triggerAnimation(['bounce', 'spin', 'wobble'][Math.floor(Math.random() * 3)]);\r\n+        }\r\n+      }\r\n+    }, 3000);\r\n+    return () => clearInterval(expressionInterval);\r\n+  }, [isActive]);\r\n+\r\n+  const triggerAnimation = (type) => {\r\n+    if (animationRef.current) {\r\n+      clearTimeout(animationRef.current);\r\n+    }\r\n+    \r\n+    const botElement = botRef.current;\r\n+    if (!botElement) return;\r\n+    \r\n+    botElement.style.animation = 'none';\r\n+    void botElement.offsetWidth; // Trigger reflow\r\n+    \r\n+    switch(type) {\r\n+      case 'spin':\r\n+        botElement.style.animation = 'spin 1s ease';\r\n+        break;\r\n+      case 'bounce':\r\n+        botElement.style.animation = 'bounce 0.5s ease';\r\n+        break;\r\n+      case 'wobble':\r\n+        botElement.style.animation = 'wobble 0.8s ease';\r\n+        break;\r\n+      default:\r\n+        botElement.style.animation = '';\r\n+    }\r\n+    \r\n+    animationRef.current = setTimeout(() => {\r\n+      if (botElement) botElement.style.animation = '';\r\n+    }, 1000);\r\n+  };\r\n+\r\n+  const handleClick = () => {\r\n+    lastInteractionTime.current = Date.now();\r\n+    setIsActive(true);\r\n+    triggerAnimation('bounce');\r\n+    setExpression('üí°');\r\n+    \r\n+    // Trigger chat opening in parent component\r\n+    onChatOpen();\r\n+    \r\n+    // Return to normal after a delay\r\n+    setTimeout(() => {\r\n+      setIsActive(false);\r\n+    }, 3000);\r\n+  };\r\n+\r\n+  // Custom animations\r\n+  const animations = `\r\n+    @keyframes spin {\r\n+      0% { transform: rotate(0deg) scaleX(${direction}); }\r\n+      100% { transform: rotate(360deg) scaleX(${direction}); }\r\n+    }\r\n+    @keyframes bounce {\r\n+      0%, 100% { transform: translateY(0) scaleX(${direction}); }\r\n+      50% { transform: translateY(-20px) scaleX(${direction}); }\r\n+    }\r\n+    @keyframes wobble {\r\n+      0%, 100% { transform: rotate(0deg) scaleX(${direction}); }\r\n+      25% { transform: rotate(5deg) scaleX(${direction}); }\r\n+      75% { transform: rotate(-5deg) scaleX(${direction}); }\r\n+    }\r\n+    @keyframes float {\r\n+      0% { transform: translateY(0px) scaleX(${direction}); }\r\n+      50% { transform: translateY(-10px) scaleX(${direction}); }\r\n+      100% { transform: translateY(0px) scaleX(${direction}); }\r\n+    }\r\n+  `;\r\n+\r\n+  return (\r\n+    <>\r\n+      <style>{animations}</style>\r\n+      <div \r\n+        ref={botRef}\r\n+        onClick={handleClick}\r\n+        style={{\r\n+          position: 'fixed',\r\n+          left: `${position.x}px`,\r\n+          top: `${position.y}px`,\r\n+          fontSize: '2.5rem',\r\n+          cursor: 'pointer',\r\n+          transition: 'all 0.3s ease',\r\n+          transform: `scaleX(${direction})`,\r\n+          zIndex: 100,\r\n+          filter: darkMode \r\n+            ? 'drop-shadow(0 0 8px rgba(255,255,255,0.7))' \r\n+            : 'drop-shadow(0 0 8px rgba(0,0,0,0.3))',\r\n+          userSelect: 'none',\r\n+          animation: 'float 4s ease-in-out infinite'\r\n+        }}\r\n+      >\r\n+        <div style={{ \r\n+          position: 'relative',\r\n+          display: 'flex',\r\n+          flexDirection: 'column',\r\n+          alignItems: 'center'\r\n+        }}>\r\n+          {/* Bot icon with costume */}\r\n+          <div style={{\r\n+            position: 'relative',\r\n+            width: '60px',\r\n+            height: '60px',\r\n+            backgroundColor: darkMode ? '#4a5568' : '#3b82f6',\r\n+            borderRadius: '50%',\r\n+            display: 'flex',\r\n+            justifyContent: 'center',\r\n+            alignItems: 'center',\r\n+            color: 'white'\r\n+          }}>\r\n+            <span style={{ fontSize: '1.8rem' }}>{expression}</span>\r\n+            {costume && (\r\n+              <span style={{\r\n+                position: 'absolute',\r\n+                top: '-15px',\r\n+                right: '-10px',\r\n+                fontSize: '1.5rem',\r\n+                transform: 'rotate(15deg)'\r\n+              }}>\r\n+                {costume}\r\n+              </span>\r\n+            )}\r\n+          </div>\r\n+        </div>\r\n+      </div>\r\n+    </>\r\n+  );\r\n+};\r\n+\r\n+// Chat Modal Component with Functional API Connection\r\n+const ChatModal = ({ darkMode, onClose }) => {\r\n+  const [messages, setMessages] = useState([\r\n+    { text: \"Hello! I'm UrbanBuddy, your AI assistant for urban living. How can I help you today?\", sender: 'bot' }\r\n+  ]);\r\n+  const [inputValue, setInputValue] = useState('');\r\n+  const [isTyping, setIsTyping] = useState(false);\r\n+  const chatEndRef = useRef(null);\r\n+  const inputRef = useRef(null);\r\n+\r\n+  // Auto-scroll to bottom and focus input\r\n+  useEffect(() => {\r\n+    chatEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n+    inputRef.current?.focus();\r\n+  }, [messages]);\r\n+\r\n+  // Function to call the AI API\r\n+  const generateResponse = async (userMessage) => {\r\n+    setIsTyping(true);\r\n+    \r\n+    try {\r\n+      // Using a free AI API endpoint (no API key needed)\r\n+      const response = await fetch('https://api.openai.com/v1/chat/completions', {\r\n+        method: \"POST\",\r\n+        headers: { \r\n+          \"Content-Type\": \"application/json\",\r\n+          // Note: In a production app, you should proxy this through your backend\r\n+          // to keep your API key secure. This is just for demonstration.\r\n+          \"Authorization\": `Bearer YOUR_OPENAI_API_KEY` \r\n+        },\r\n+        body: JSON.stringify({\r\n+          model: \"gpt-3.5-turbo\",\r\n+          messages: [\r\n+            {\r\n+              role: \"system\",\r\n+              content: \"You are UrbanBuddy, a friendly AI assistant for urban living. \" +\r\n+                \"Provide helpful, concise answers (1-2 sentences) about city life, \" +\r\n+                \"transportation, food delivery, local services, and urban living tips. \" +\r\n+                \"Keep responses practical and urban-focused.\"\r\n+            },\r\n+            {\r\n+              role: \"user\",\r\n+              content: userMessage\r\n+            }\r\n+          ],\r\n+          temperature: 0.7,\r\n+          max_tokens: 150\r\n+        })\r\n+      });\r\n+      \r\n+      if (!response.ok) {\r\n+        throw new Error(`API request failed with status ${response.status}`);\r\n+      }\r\n+      \r\n+      const data = await response.json();\r\n+      const aiResponse = data.choices?.[0]?.message?.content || \r\n+        \"I'm having trouble thinking of a response right now. Could you try asking something else?\";\r\n+      \r\n+      setMessages(prev => [...prev, { \r\n+        text: aiResponse, \r\n+        sender: 'bot' \r\n+      }]);\r\n+    } catch (error) {\r\n+      console.error(\"API error:\", error);\r\n+      // Fallback to a local AI response if API fails\r\n+      const fallbackResponses = [\r\n+        \"I'm currently experiencing high demand. Try again in a moment!\",\r\n+        \"Let me think differently about that... Can you rephrase your question?\",\r\n+        \"I specialize in urban living tips. Ask me about transportation, food, or city services!\",\r\n+        \"I'm having connection issues, but I'd love to help with your urban living questions!\"\r\n+      ];\r\n+      setMessages(prev => [...prev, { \r\n+        text: fallbackResponses[Math.floor(Math.random() * fallbackResponses.length)], \r\n+        sender: 'bot' \r\n+      }]);\r\n+    } finally {\r\n+      setIsTyping(false);\r\n+    }\r\n+  };\r\n+\r\n+  const handleSendMessage = async (e) => {\r\n+    e.preventDefault();\r\n+    if (inputValue.trim() && !isTyping) {\r\n+      // Add user message\r\n+      const userMessage = inputValue.trim();\r\n+      setMessages(prev => [...prev, { text: userMessage, sender: 'user' }]);\r\n+      setInputValue('');\r\n+      \r\n+      // Generate AI response\r\n+      await generateResponse(userMessage);\r\n+    }\r\n+  };\r\n+\r\n+  return (\r\n+    <div style={{\r\n+      position: 'fixed',\r\n+      bottom: '100px',\r\n+      right: '30px',\r\n+      width: '350px',\r\n+      maxWidth: '90%',\r\n+      backgroundColor: darkMode ? '#2d3748' : 'white',\r\n+      borderRadius: '16px',\r\n+      boxShadow: '0 10px 25px rgba(0, 0, 0, 0.2)',\r\n+      border: darkMode ? '1px solid #4a5568' : '1px solid #e2e8f0',\r\n+      zIndex: 1000,\r\n+      overflow: 'hidden',\r\n+      display: 'flex',\r\n+      flexDirection: 'column',\r\n+      maxHeight: '60vh'\r\n+    }}>\r\n+      {/* Chat header */}\r\n+      <div style={{\r\n+        padding: '1rem',\r\n+        backgroundColor: darkMode ? '#4a5568' : '#3b82f6',\r\n+        color: 'white',\r\n+        display: 'flex',\r\n+        justifyContent: 'space-between',\r\n+        alignItems: 'center'\r\n+      }}>\r\n+        <div style={{ display: 'flex', alignItems: 'center', gap: '0.5rem' }}>\r\n+          <span style={{ fontSize: '1.5rem' }}>ü§ñ</span>\r\n+          <h3 style={{ margin: 0 }}>UrbanBuddy AI</h3>\r\n+          {isTyping && (\r\n+            <span style={{ \r\n+              fontSize: '0.8rem',\r\n+              marginLeft: '0.5rem',\r\n+              opacity: 0.8\r\n+            }}>typing...</span>\r\n+          )}\r\n+        </div>\r\n+        <button \r\n+          onClick={onClose}\r\n+          style={{\r\n+            background: 'none',\r\n+            border: 'none',\r\n+            color: 'white',\r\n+            fontSize: '1.2rem',\r\n+            cursor: 'pointer'\r\n+          }}\r\n+        >\r\n+          √ó\r\n+        </button>\r\n+      </div>\r\n+      \r\n+      {/* Chat messages */}\r\n+      <div style={{\r\n+        flex: 1,\r\n+        padding: '1rem',\r\n+        overflowY: 'auto',\r\n+        display: 'flex',\r\n+        flexDirection: 'column',\r\n+        gap: '0.8rem'\r\n+      }}>\r\n+        {messages.map((msg, index) => (\r\n+          <div \r\n+            key={index}\r\n+            style={{\r\n+              alignSelf: msg.sender === 'user' ? 'flex-end' : 'flex-start',\r\n+              maxWidth: '80%',\r\n+              padding: '0.6rem 1rem',\r\n+              borderRadius: msg.sender === 'user' \r\n+                ? '18px 18px 0 18px' \r\n+                : '18px 18px 18px 0',\r\n+              backgroundColor: msg.sender === 'user'\r\n+                ? (darkMode ? '#4a5568' : '#3b82f6')\r\n+                : (darkMode ? '#4a5568' : '#e2e8f0'),\r\n+              color: msg.sender === 'user' ? 'white' : (darkMode ? 'white' : '#1e293b'),\r\n+              animation: msg.sender === 'bot' && index === messages.length - 1 \r\n+                ? 'fadeIn 0.3s ease' \r\n+                : 'none'\r\n+            }}\r\n+          >\r\n+            {msg.text}\r\n+          </div>\r\n+        ))}\r\n+        <div ref={chatEndRef} />\r\n+      </div>\r\n+      \r\n+      {/* Chat input */}\r\n+      <form onSubmit={handleSendMessage} style={{\r\n+        padding: '0.8rem',\r\n+        borderTop: darkMode ? '1px solid #4a5568' : '1px solid #e2e8f0',\r\n+        display: 'flex',\r\n+        gap: '0.5rem'\r\n+      }}>\r\n+        <input\r\n+          ref={inputRef}\r\n+          type=\"text\"\r\n+          value={inputValue}\r\n+          onChange={(e) => setInputValue(e.target.value)}\r\n+          placeholder=\"Ask me about urban living...\"\r\n+          disabled={isTyping}\r\n+          style={{\r\n+            flex: 1,\r\n+            padding: '0.6rem 1rem',\r\n+            borderRadius: '20px',\r\n+            border: darkMode ? '1px solid #4a5568' : '1px solid #e2e8f0',\r\n+            backgroundColor: darkMode ? '#2d3748' : 'white',\r\n+            color: darkMode ? 'white' : '#1e293b',\r\n+            outline: 'none',\r\n+            opacity: isTyping ? 0.7 : 1\r\n+          }}\r\n+        />\r\n+        <button \r\n+          type=\"submit\"\r\n+          disabled={isTyping}\r\n+          style={{\r\n+            background: isTyping \r\n+              ? (darkMode ? '#4a5568' : '#e2e8f0')\r\n+              : (darkMode ? '#4a5568' : '#3b82f6'),\r\n+            color: 'white',\r\n+            border: 'none',\r\n+            borderRadius: '50%',\r\n+            width: '40px',\r\n+            height: '40px',\r\n+            display: 'flex',\r\n+            alignItems: 'center',\r\n+            justifyContent: 'center',\r\n+            cursor: isTyping ? 'not-allowed' : 'pointer'\r\n+          }}\r\n+        >\r\n+          {isTyping ? '...' : '‚û§'}\r\n+        </button>\r\n+      </form>\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+// Main Home Component (unchanged)\r\n+export default function Home() {\r\n+  const navigate = useNavigate();\r\n+  const [searchQuery, setSearchQuery] = useState('');\r\n+  const [darkMode, setDarkMode] = useState(false);\r\n+  const [selectedService, setSelectedService] = useState(null);\r\n+  const [orderCount, setOrderCount] = useState(0);\r\n+  const [achievements, setAchievements] = useState([]);\r\n+  const [showChat, setShowChat] = useState(false);\r\n+\r\n+  const services = [\r\n+    { \r\n+      name: 'Transport', \r\n+      path: '/transport', \r\n+      icon: 'üöå', \r\n+      desc: 'Plan your multi-modal journey across the city',\r\n+      color: '#3b82f6',\r\n+      details: 'Find the best routes combining metro, buses, and bikes. Real-time updates and ticket purchasing available.'\r\n+    },\r\n+    { \r\n+      name: 'Food Delivery', \r\n+      path: '/food', \r\n+      icon: 'üçî', \r\n+      desc: 'Discover local restaurants and cafes',\r\n+      color: '#ef4444',\r\n+      details: 'Order from hundreds of restaurants with special discounts. Track your delivery in real-time.'\r\n+    },\r\n+    { \r\n+      name: 'Groceries', \r\n+      path: '/food', \r\n+      icon: 'üõí', \r\n+      desc: 'Get groceries delivered in minutes',\r\n+      color: '#10b981',\r\n+      details: 'Same-day delivery from local supermarkets. Schedule recurring orders for essentials.'\r\n+    },\r\n+    { \r\n+      name: 'Services', \r\n+      path: '/food', \r\n+      icon: 'üõ†Ô∏è', \r\n+      desc: 'Find urban services near you',\r\n+      color: '#8b5cf6',\r\n+      details: 'Book home services, repairs, and professional help with verified providers.'\r\n+    }\r\n+  ];\r\n+\r\n+  // Check for achievements\r\n+  useEffect(() => {\r\n+    if (orderCount === 1) {\r\n+      addAchievement('First Order!', 'üéâ');\r\n+    } else if (orderCount === 5) {\r\n+      addAchievement('Regular Customer!', 'üèÜ');\r\n+    } else if (orderCount === 10) {\r\n+      addAchievement('Super User!', 'üåü');\r\n+    }\r\n+  }, [orderCount]);\r\n+\r\n+  const addAchievement = (title, icon) => {\r\n+    if (!achievements.some(a => a.title === title)) {\r\n+      const newAchievement = { title, icon, id: Date.now() };\r\n+      setAchievements(prev => [...prev, newAchievement]);\r\n+      \r\n+      // Auto-hide achievement after 3 seconds\r\n+      setTimeout(() => {\r\n+        setAchievements(prev => prev.filter(a => a.id !== newAchievement.id));\r\n+      }, 3000);\r\n+    }\r\n+  };\r\n+\r\n+  const handleSearch = (e) => {\r\n+    e.preventDefault();\r\n+    if (searchQuery.trim()) {\r\n+      navigate(`/food?search=${encodeURIComponent(searchQuery)}`);\r\n+    }\r\n+  };\r\n+\r\n+  const toggleDarkMode = () => {\r\n+    setDarkMode(!darkMode);\r\n+  };\r\n+\r\n+  const openServicePopup = (service) => {\r\n+    setSelectedService(service);\r\n+    setOrderCount(prev => prev + 1);\r\n+  };\r\n+\r\n+  const closePopup = () => {\r\n+    setSelectedService(null);\r\n+  };\r\n+\r\n+  const toggleChat = () => {\r\n+    setShowChat(!showChat);\r\n+  };\r\n+\r\n+  return (\r\n+    <div style={{\r\n+      backgroundColor: darkMode ? '#1a202c' : '#f8fafc',\r\n+      minHeight: '100vh',\r\n+      paddingBottom: '3rem',\r\n+      color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+      transition: 'all 0.3s ease',\r\n+      position: 'relative'\r\n+    }}>\r\n+      {/* Theme Toggle Button */}\r\n+      <button \r\n+        onClick={toggleDarkMode} \r\n+        style={{\r\n+          position: 'fixed',\r\n+          top: '1.5rem',\r\n+          right: '1.5rem',\r\n+          background: darkMode ? '#4a5568' : '#e2e8f0',\r\n+          border: 'none',\r\n+          borderRadius: '50%',\r\n+          width: '40px',\r\n+          height: '40px',\r\n+          display: 'flex',\r\n+          alignItems: 'center',\r\n+          justifyContent: 'center',\r\n+          cursor: 'pointer',\r\n+          transition: 'all 0.3s ease',\r\n+          boxShadow: '0 2px 5px rgba(0, 0, 0, 0.2)',\r\n+          zIndex: 100\r\n+        }}\r\n+        aria-label={darkMode ? 'Switch to light mode' : 'Switch to dark mode'}\r\n+      >\r\n+        {darkMode ? '‚òÄÔ∏è' : 'üåô'}\r\n+      </button>\r\n+      \r\n+      {/* Hero Section with UrbanBuddy */}\r\n+      <section style={{\r\n+        background: darkMode \r\n+          ? 'linear-gradient(135deg, #2d3748 0%, #1a202c 100%)' \r\n+          : 'linear-gradient(135deg, #6b46c1 0%, #3b82f6 100%)',\r\n+        color: 'white',\r\n+        padding: '4rem 1rem',\r\n+        textAlign: 'center',\r\n+        borderRadius: '0 0 20px 20px',\r\n+        boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',\r\n+        position: 'relative',\r\n+        overflow: 'hidden',\r\n+        height: '300px'\r\n+      }}>\r\n+        <div style={{\r\n+          maxWidth: '800px',\r\n+          margin: '0 auto',\r\n+          position: 'relative',\r\n+          zIndex: 2\r\n+        }}>\r\n+          <h1 style={{\r\n+            fontSize: '3.5rem',\r\n+            fontWeight: '800',\r\n+            marginBottom: '0.5rem',\r\n+            textShadow: '2px 2px 4px rgba(0, 0, 0, 0.2)',\r\n+          }}>UrbanFlow</h1>\r\n+          <p style={{\r\n+            fontSize: '1.25rem',\r\n+            marginBottom: '2rem',\r\n+            opacity: 0.9,\r\n+          }}>Your seamless urban living companion</p>\r\n+          \r\n+          <form onSubmit={handleSearch} style={{\r\n+            display: 'flex',\r\n+            maxWidth: '600px',\r\n+            margin: '0 auto',\r\n+            borderRadius: '50px',\r\n+            overflow: 'hidden',\r\n+            boxShadow: '0 4px 10px rgba(0, 0, 0, 0.2)',\r\n+          }}>\r\n+            <input\r\n+              type=\"text\"\r\n+              placeholder=\"Search for restaurants, services...\"\r\n+              value={searchQuery}\r\n+              onChange={(e) => setSearchQuery(e.target.value)}\r\n+              style={{\r\n+                flex: 1,\r\n+                padding: '1rem 1.5rem',\r\n+                border: 'none',\r\n+                fontSize: '1rem',\r\n+                outline: 'none',\r\n+                backgroundColor: darkMode ? '#2d3748' : 'white',\r\n+                color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+              }}\r\n+            />\r\n+            <button type=\"submit\" style={{\r\n+              backgroundColor: darkMode ? '#4a5568' : '#1e40af',\r\n+              color: 'white',\r\n+              border: 'none',\r\n+              padding: '0 1.5rem',\r\n+              cursor: 'pointer',\r\n+              fontSize: '1.25rem',\r\n+              transition: 'background-color 0.2s'\r\n+            }}>\r\n+              <span>üîç</span>\r\n+            </button>\r\n+          </form>\r\n+        </div>\r\n+        <UrbanBuddy darkMode={darkMode} onChatOpen={toggleChat} />\r\n+      </section>\r\n+\r\n+      {/* Services Grid */}\r\n+      <section style={{\r\n+        padding: '2rem 1rem',\r\n+        maxWidth: '1200px',\r\n+        margin: '0 auto',\r\n+      }}>\r\n+        <h2 style={{\r\n+          fontSize: '2rem',\r\n+          fontWeight: '700',\r\n+          marginBottom: '1.5rem',\r\n+          color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+          textAlign: 'center',\r\n+        }}>What do you need today?</h2>\r\n+        <div style={{\r\n+          display: 'grid',\r\n+          gridTemplateColumns: 'repeat(auto-fit, minmax(250px, 1fr))',\r\n+          gap: '1.5rem',\r\n+          marginTop: '1rem',\r\n+        }}>\r\n+          {services.map((service) => (\r\n+            <div \r\n+              key={service.name} \r\n+              style={{ \r\n+                padding: '2rem 1.5rem',\r\n+                borderRadius: '16px',\r\n+                border: `2px solid ${service.color}`,\r\n+                textAlign: 'center',\r\n+                cursor: 'pointer',\r\n+                transition: 'transform 0.3s, box-shadow 0.3s',\r\n+                backgroundColor: darkMode \r\n+                  ? `${service.color}20` \r\n+                  : `${service.color}10`,\r\n+                ':hover': {\r\n+                  transform: 'translateY(-5px)',\r\n+                  boxShadow: '0 10px 20px rgba(0, 0, 0, 0.1)',\r\n+                }\r\n+              }}\r\n+              onClick={() => openServicePopup(service)}\r\n+            >\r\n+              <div style={{ \r\n+                fontSize: '3rem',\r\n+                marginBottom: '1rem',\r\n+                display: 'inline-block',\r\n+                animation: 'float 3s ease-in-out infinite'\r\n+              }}>{service.icon}</div>\r\n+              <h3 style={{fontSize: '1.5rem', fontWeight: '600', marginBottom: '0.5rem'}}>{service.name}</h3>\r\n+              <p style={{color: darkMode ? '#a0aec0' : '#64748b'}}>{service.desc}</p>\r\n+            </div>\r\n+          ))}\r\n+        </div>\r\n+      </section>\r\n+\r\n+      {/* Featured Section */}\r\n+      <section style={{\r\n+        padding: '2rem 1rem',\r\n+        maxWidth: '1200px',\r\n+        margin: '0 auto',\r\n+      }}>\r\n+        <h2 style={{\r\n+          fontSize: '2rem',\r\n+          fontWeight: '700',\r\n+          marginBottom: '1.5rem',\r\n+          color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+          textAlign: 'center',\r\n+        }}>Quick Access</h2>\r\n+        <div style={{\r\n+          display: 'flex',\r\n+          justifyContent: 'center',\r\n+          gap: '1rem',\r\n+          flexWrap: 'wrap',\r\n+        }}>\r\n+          <button \r\n+            onClick={() => navigate('/transport?from=home&to=downtown')}\r\n+            style={{\r\n+              padding: '0.75rem 1.5rem',\r\n+              borderRadius: '50px',\r\n+              border: 'none',\r\n+              backgroundColor: darkMode ? '#2d3748' : '#e2e8f0',\r\n+              color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+              fontWeight: '600',\r\n+              cursor: 'pointer',\r\n+              transition: 'all 0.2s',\r\n+              display: 'flex',\r\n+              alignItems: 'center',\r\n+              gap: '0.5rem',\r\n+              fontSize: '1rem'\r\n+            }}\r\n+          >\r\n+            üöï To Downtown\r\n+          </button>\r\n+          <button \r\n+            onClick={() => navigate('/food?category=fastfood')}\r\n+            style={{\r\n+              padding: '0.75rem 1.5rem',\r\n+              borderRadius: '50px',\r\n+              border: 'none',\r\n+              backgroundColor: darkMode ? '#2d3748' : '#e2e8f0',\r\n+              color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+              fontWeight: '600',\r\n+              cursor: 'pointer',\r\n+              transition: 'all 0.2s',\r\n+              display: 'flex',\r\n+              alignItems: 'center',\r\n+              gap: '0.5rem',\r\n+              fontSize: '1rem'\r\n+            }}\r\n+          >\r\n+            üçü Fast Food\r\n+          </button>\r\n+          <button \r\n+            onClick={() => navigate('/food?category=coffee')}\r\n+            style={{\r\n+              padding: '0.75rem 1.5rem',\r\n+              borderRadius: '50px',\r\n+              border: 'none',\r\n+              backgroundColor: darkMode ? '#2d3748' : '#e2e8f0',\r\n+              color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+              fontWeight: '600',\r\n+              cursor: 'pointer',\r\n+              transition: 'all 0.2s',\r\n+              display: 'flex',\r\n+              alignItems: 'center',\r\n+              gap: '0.5rem',\r\n+              fontSize: '1rem'\r\n+            }}\r\n+          >\r\n+            ‚òï Coffee Shops\r\n+          </button>\r\n+        </div>\r\n+      </section>\r\n+\r\n+      {/* Service Popup */}\r\n+      {selectedService && (\r\n+        <div style={{\r\n+          position: 'fixed',\r\n+          top: 0,\r\n+          left: 0,\r\n+          right: 0,\r\n+          bottom: 0,\r\n+          backgroundColor: 'rgba(0, 0, 0, 0.7)',\r\n+          display: 'flex',\r\n+          justifyContent: 'center',\r\n+          alignItems: 'center',\r\n+          zIndex: 1000,\r\n+        }} onClick={closePopup}>\r\n+          <div style={{\r\n+            backgroundColor: darkMode ? '#2d3748' : 'white',\r\n+            borderRadius: '16px',\r\n+            padding: '2rem',\r\n+            maxWidth: '500px',\r\n+            width: '90%',\r\n+            boxShadow: '0 10px 25px rgba(0, 0, 0, 0.2)',\r\n+            position: 'relative',\r\n+            border: darkMode ? '1px solid #4a5568' : '1px solid #e2e8f0',\r\n+          }} onClick={(e) => e.stopPropagation()}>\r\n+            <button style={{\r\n+              position: 'absolute',\r\n+              top: '1rem',\r\n+              right: '1rem',\r\n+              background: 'none',\r\n+              border: 'none',\r\n+              fontSize: '1.5rem',\r\n+              cursor: 'pointer',\r\n+              color: darkMode ? '#a0aec0' : '#64748b',\r\n+            }} onClick={closePopup}>√ó</button>\r\n+            <div style={{ \r\n+              display: 'flex', \r\n+              alignItems: 'center', \r\n+              gap: '1rem',\r\n+              marginBottom: '1.5rem'\r\n+            }}>\r\n+              <span style={{ fontSize: '2.5rem', animation: 'float 3s ease-in-out infinite' }}>{selectedService.icon}</span>\r\n+              <h3 style={{fontSize: '1.8rem', fontWeight: '700', marginBottom: '1rem', color: darkMode ? '#e2e8f0' : '#1e293b'}}>{selectedService.name}</h3>\r\n+            </div>\r\n+            <p style={{color: darkMode ? '#a0aec0' : '#64748b', fontSize: '1.1rem', lineHeight: '1.6', marginBottom: '2rem'}}>{selectedService.details}</p>\r\n+            <button \r\n+              style={{ \r\n+                padding: '0.75rem 1.5rem',\r\n+                borderRadius: '8px',\r\n+                border: 'none',\r\n+                backgroundColor: selectedService.color,\r\n+                color: 'white',\r\n+                fontWeight: '600',\r\n+                cursor: 'pointer',\r\n+                transition: 'all 0.2s',\r\n+                fontSize: '1rem'\r\n+              }}\r\n+              onClick={() => {\r\n+                navigate(selectedService.path);\r\n+                closePopup();\r\n+              }}\r\n+            >\r\n+              Explore {selectedService.name}\r\n+            </button>\r\n+          </div>\r\n+        </div>\r\n+      )}\r\n+\r\n+      {/* Achievements */}\r\n+      {achievements.map(achievement => (\r\n+        <div key={achievement.id} style={{\r\n+          position: 'fixed',\r\n+          bottom: '20px',\r\n+          right: '20px',\r\n+          background: darkMode ? '#2d3748' : 'white',\r\n+          color: darkMode ? 'white' : '#1e293b',\r\n+          padding: '1rem',\r\n+          borderRadius: '12px',\r\n+          boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',\r\n+          display: 'flex',\r\n+          alignItems: 'center',\r\n+          gap: '0.5rem',\r\n+          zIndex: 1000,\r\n+          animation: 'slideIn 0.5s forwards, fadeOut 0.5s forwards 2.5s'\r\n+        }}>\r\n+          <span style={{fontSize: '1.5rem'}}>{achievement.icon}</span>\r\n+          <span>{achievement.title}</span>\r\n+        </div>\r\n+      ))}\r\n+\r\n+      {/* Chat Modal */}\r\n+      {showChat && <ChatModal darkMode={darkMode} onClose={toggleChat} />}\r\n+\r\n+      {/* Footer with copyright */}\r\n+      <footer style={{\r\n+        textAlign: 'center',\r\n+        padding: '2rem 1rem',\r\n+        color: darkMode ? '#a0aec0' : '#64748b',\r\n+        fontSize: '0.9rem',\r\n+        marginTop: '2rem'\r\n+      }}>\r\n+        <p>¬© {new Date().getFullYear()} UrbanFlow - Created by Nick</p>\r\n+      </footer>\r\n+    </div>\r\n+  );\r\n+};\n\\ No newline at end of file\n"
                },
                {
                    "date": 1754461963326,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,861 @@\n+import { useState, useEffect, useRef } from 'react';\r\n+import { useNavigate } from 'react-router-dom';\r\n+\r\n+// UrbanBuddy AI Assistant Component\r\n+const UrbanBuddy = ({ darkMode, onChatOpen }) => {\r\n+  const [position, setPosition] = useState({ x: 20, y: 50 });\r\n+  const [expression, setExpression] = useState('üòä');\r\n+  const [direction, setDirection] = useState(1);\r\n+  const [costume, setCostume] = useState(null);\r\n+  const [isActive, setIsActive] = useState(false);\r\n+  const botRef = useRef(null);\r\n+  const animationRef = useRef(null);\r\n+  const lastInteractionTime = useRef(Date.now());\r\n+\r\n+  // Seasonal costumes\r\n+  useEffect(() => {\r\n+    const today = new Date();\r\n+    const month = today.getMonth() + 1;\r\n+    \r\n+    if (month === 12) setCostume('üéÑ');\r\n+    else if (month === 10) setCostume('üéÉ');\r\n+    else if (month === 2) setCostume('üíù');\r\n+    else if (month === 4) setCostume('üå∏');\r\n+    else setCostume(null);\r\n+  }, []);\r\n+\r\n+  // Make the bot wander with more dynamic movement\r\n+  useEffect(() => {\r\n+    const moveInterval = setInterval(() => {\r\n+      setPosition(prev => {\r\n+        const now = Date.now();\r\n+        const timeSinceLastInteraction = now - lastInteractionTime.current;\r\n+        \r\n+        // More active movement right after interaction\r\n+        const speedMultiplier = timeSinceLastInteraction < 5000 ? 2 : 1;\r\n+        \r\n+        let newX = prev.x + (3 * direction * speedMultiplier);\r\n+        let newY = prev.y + (Math.random() * 6 - 3);\r\n+        \r\n+        // Bounce off edges\r\n+        if (newX > window.innerWidth - 80) {\r\n+          setDirection(-1);\r\n+          triggerAnimation('spin');\r\n+        }\r\n+        if (newX < 20) {\r\n+          setDirection(1);\r\n+          triggerAnimation('spin');\r\n+        }\r\n+        if (newY < 20) newY = 20;\r\n+        if (newY > window.innerHeight - 100) newY = window.innerHeight - 100;\r\n+        \r\n+        return { x: newX, y: newY };\r\n+      });\r\n+    }, 100);\r\n+\r\n+    return () => clearInterval(moveInterval);\r\n+  }, [direction]);\r\n+\r\n+  // Change expressions randomly with more variety\r\n+  useEffect(() => {\r\n+    const expressions = ['üòä', 'ü§î', 'üòÆ', 'üòé', 'üëã', 'ü§ñ', '‚ú®', 'üåü'];\r\n+    const expressionInterval = setInterval(() => {\r\n+      if (!isActive) {\r\n+        setExpression(expressions[Math.floor(Math.random() * expressions.length)]);\r\n+        // Random animations when idle\r\n+        if (Math.random() > 0.8) {\r\n+          triggerAnimation(['bounce', 'spin', 'wobble'][Math.floor(Math.random() * 3)]);\r\n+        }\r\n+      }\r\n+    }, 3000);\r\n+    return () => clearInterval(expressionInterval);\r\n+  }, [isActive]);\r\n+\r\n+  const triggerAnimation = (type) => {\r\n+    if (animationRef.current) {\r\n+      clearTimeout(animationRef.current);\r\n+    }\r\n+    \r\n+    const botElement = botRef.current;\r\n+    if (!botElement) return;\r\n+    \r\n+    botElement.style.animation = 'none';\r\n+    void botElement.offsetWidth; // Trigger reflow\r\n+    \r\n+    switch(type) {\r\n+      case 'spin':\r\n+        botElement.style.animation = 'spin 1s ease';\r\n+        break;\r\n+      case 'bounce':\r\n+        botElement.style.animation = 'bounce 0.5s ease';\r\n+        break;\r\n+      case 'wobble':\r\n+        botElement.style.animation = 'wobble 0.8s ease';\r\n+        break;\r\n+      default:\r\n+        botElement.style.animation = '';\r\n+    }\r\n+    \r\n+    animationRef.current = setTimeout(() => {\r\n+      if (botElement) botElement.style.animation = '';\r\n+    }, 1000);\r\n+  };\r\n+\r\n+  const handleClick = () => {\r\n+    lastInteractionTime.current = Date.now();\r\n+    setIsActive(true);\r\n+    triggerAnimation('bounce');\r\n+    setExpression('üí°');\r\n+    \r\n+    // Trigger chat opening in parent component\r\n+    onChatOpen();\r\n+    \r\n+    // Return to normal after a delay\r\n+    setTimeout(() => {\r\n+      setIsActive(false);\r\n+    }, 3000);\r\n+  };\r\n+\r\n+  // Custom animations\r\n+  const animations = `\r\n+    @keyframes spin {\r\n+      0% { transform: rotate(0deg) scaleX(${direction}); }\r\n+      100% { transform: rotate(360deg) scaleX(${direction}); }\r\n+    }\r\n+    @keyframes bounce {\r\n+      0%, 100% { transform: translateY(0) scaleX(${direction}); }\r\n+      50% { transform: translateY(-20px) scaleX(${direction}); }\r\n+    }\r\n+    @keyframes wobble {\r\n+      0%, 100% { transform: rotate(0deg) scaleX(${direction}); }\r\n+      25% { transform: rotate(5deg) scaleX(${direction}); }\r\n+      75% { transform: rotate(-5deg) scaleX(${direction}); }\r\n+    }\r\n+    @keyframes float {\r\n+      0% { transform: translateY(0px) scaleX(${direction}); }\r\n+      50% { transform: translateY(-10px) scaleX(${direction}); }\r\n+      100% { transform: translateY(0px) scaleX(${direction}); }\r\n+    }\r\n+  `;\r\n+\r\n+  return (\r\n+    <>\r\n+      <style>{animations}</style>\r\n+      <div \r\n+        ref={botRef}\r\n+        onClick={handleClick}\r\n+        style={{\r\n+          position: 'fixed',\r\n+          left: `${position.x}px`,\r\n+          top: `${position.y}px`,\r\n+          fontSize: '2.5rem',\r\n+          cursor: 'pointer',\r\n+          transition: 'all 0.3s ease',\r\n+          transform: `scaleX(${direction})`,\r\n+          zIndex: 100,\r\n+          filter: darkMode \r\n+            ? 'drop-shadow(0 0 8px rgba(255,255,255,0.7))' \r\n+            : 'drop-shadow(0 0 8px rgba(0,0,0,0.3))',\r\n+          userSelect: 'none',\r\n+          animation: 'float 4s ease-in-out infinite'\r\n+        }}\r\n+      >\r\n+        <div style={{ \r\n+          position: 'relative',\r\n+          display: 'flex',\r\n+          flexDirection: 'column',\r\n+          alignItems: 'center'\r\n+        }}>\r\n+          {/* Bot icon with costume */}\r\n+          <div style={{\r\n+            position: 'relative',\r\n+            width: '60px',\r\n+            height: '60px',\r\n+            backgroundColor: darkMode ? '#4a5568' : '#3b82f6',\r\n+            borderRadius: '50%',\r\n+            display: 'flex',\r\n+            justifyContent: 'center',\r\n+            alignItems: 'center',\r\n+            color: 'white'\r\n+          }}>\r\n+            <span style={{ fontSize: '1.8rem' }}>{expression}</span>\r\n+            {costume && (\r\n+              <span style={{\r\n+                position: 'absolute',\r\n+                top: '-15px',\r\n+                right: '-10px',\r\n+                fontSize: '1.5rem',\r\n+                transform: 'rotate(15deg)'\r\n+              }}>\r\n+                {costume}\r\n+              </span>\r\n+            )}\r\n+          </div>\r\n+        </div>\r\n+      </div>\r\n+    </>\r\n+  );\r\n+};\r\n+\r\n+// Chat Modal Component with Functional API Connection\r\n+const ChatModal = ({ darkMode, onClose }) => {\r\n+  const [messages, setMessages] = useState([\r\n+    { text: \"Hello! I'm UrbanBuddy, your AI assistant for urban living. How can I help you today?\", sender: 'bot' }\r\n+  ]);\r\n+  const [inputValue, setInputValue] = useState('');\r\n+  const [isTyping, setIsTyping] = useState(false);\r\n+  const chatEndRef = useRef(null);\r\n+  const inputRef = useRef(null);\r\n+\r\n+  // Auto-scroll to bottom and focus input\r\n+  useEffect(() => {\r\n+    chatEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n+    inputRef.current?.focus();\r\n+  }, [messages]);\r\n+\r\n+  // Function to call the AI API\r\n+  const generateResponse = async (userMessage) => {\r\n+    setIsTyping(true);\r\n+    \r\n+    try {\r\n+      // In a real app, you should call your own backend endpoint that then calls OpenAI\r\n+      // This is just for demonstration purposes\r\n+      const response = await fetch('https://api.openai.com/v1/chat/completions', {\r\n+        method: \"POST\",\r\n+        headers: { \r\n+          \"Content-Type\": \"application/json\",\r\n+          // Note: In production, never expose your API key in frontend code\r\n+          // This should be handled through your own backend\r\n+          \"Authorization\": `Bearer ${process.env.REACT_APP_OPENAI_API_KEY}` \r\n+        },\r\n+        body: JSON.stringify({\r\n+          model: \"gpt-3.5-turbo\",\r\n+          messages: [\r\n+            {\r\n+              role: \"system\",\r\n+              content: \"You are UrbanBuddy, a friendly AI assistant for urban living. \" +\r\n+                \"Provide helpful, concise answers (1-2 sentences) about city life, \" +\r\n+                \"transportation, food delivery, local services, and urban living tips. \" +\r\n+                \"Keep responses practical and urban-focused.\"\r\n+            },\r\n+            {\r\n+              role: \"user\",\r\n+              content: userMessage\r\n+            }\r\n+          ],\r\n+          temperature: 0.7,\r\n+          max_tokens: 150\r\n+        })\r\n+      });\r\n+      \r\n+      if (!response.ok) {\r\n+        throw new Error(`API request failed with status ${response.status}`);\r\n+      }\r\n+      \r\n+      const data = await response.json();\r\n+      const aiResponse = data.choices?.[0]?.message?.content || \r\n+        \"I'm having trouble thinking of a response right now. Could you try asking something else?\";\r\n+      \r\n+      setMessages(prev => [...prev, { \r\n+        text: aiResponse, \r\n+        sender: 'bot' \r\n+      }]);\r\n+    } catch (error) {\r\n+      console.error(\"API error:\", error);\r\n+      // Fallback to a local AI response if API fails\r\n+      const fallbackResponses = [\r\n+        \"I'm currently experiencing high demand. Try again in a moment!\",\r\n+        \"Let me think differently about that... Can you rephrase your question?\",\r\n+        \"I specialize in urban living tips. Ask me about transportation, food, or city services!\",\r\n+        \"I'm having connection issues, but I'd love to help with your urban living questions!\"\r\n+      ];\r\n+      setMessages(prev => [...prev, { \r\n+        text: fallbackResponses[Math.floor(Math.random() * fallbackResponses.length)], \r\n+        sender: 'bot' \r\n+      }]);\r\n+    } finally {\r\n+      setIsTyping(false);\r\n+    }\r\n+  };\r\n+\r\n+  const handleSendMessage = async (e) => {\r\n+    e.preventDefault();\r\n+    if (inputValue.trim() && !isTyping) {\r\n+      // Add user message\r\n+      const userMessage = inputValue.trim();\r\n+      setMessages(prev => [...prev, { text: userMessage, sender: 'user' }]);\r\n+      setInputValue('');\r\n+      \r\n+      // Generate AI response\r\n+      await generateResponse(userMessage);\r\n+    }\r\n+  };\r\n+\r\n+  return (\r\n+    <div style={{\r\n+      position: 'fixed',\r\n+      bottom: '100px',\r\n+      right: '30px',\r\n+      width: '350px',\r\n+      maxWidth: '90%',\r\n+      backgroundColor: darkMode ? '#2d3748' : 'white',\r\n+      borderRadius: '16px',\r\n+      boxShadow: '0 10px 25px rgba(0, 0, 0, 0.2)',\r\n+      border: darkMode ? '1px solid #4a5568' : '1px solid #e2e8f0',\r\n+      zIndex: 1000,\r\n+      overflow: 'hidden',\r\n+      display: 'flex',\r\n+      flexDirection: 'column',\r\n+      maxHeight: '60vh'\r\n+    }}>\r\n+      {/* Chat header */}\r\n+      <div style={{\r\n+        padding: '1rem',\r\n+        backgroundColor: darkMode ? '#4a5568' : '#3b82f6',\r\n+        color: 'white',\r\n+        display: 'flex',\r\n+        justifyContent: 'space-between',\r\n+        alignItems: 'center'\r\n+      }}>\r\n+        <div style={{ display: 'flex', alignItems: 'center', gap: '0.5rem' }}>\r\n+          <span style={{ fontSize: '1.5rem' }}>ü§ñ</span>\r\n+          <h3 style={{ margin: 0 }}>UrbanBuddy AI</h3>\r\n+          {isTyping && (\r\n+            <span style={{ \r\n+              fontSize: '0.8rem',\r\n+              marginLeft: '0.5rem',\r\n+              opacity: 0.8\r\n+            }}>typing...</span>\r\n+          )}\r\n+        </div>\r\n+        <button \r\n+          onClick={onClose}\r\n+          style={{\r\n+            background: 'none',\r\n+            border: 'none',\r\n+            color: 'white',\r\n+            fontSize: '1.2rem',\r\n+            cursor: 'pointer'\r\n+          }}\r\n+        >\r\n+          √ó\r\n+        </button>\r\n+      </div>\r\n+      \r\n+      {/* Chat messages */}\r\n+      <div style={{\r\n+        flex: 1,\r\n+        padding: '1rem',\r\n+        overflowY: 'auto',\r\n+        display: 'flex',\r\n+        flexDirection: 'column',\r\n+        gap: '0.8rem'\r\n+      }}>\r\n+        {messages.map((msg, index) => (\r\n+          <div \r\n+            key={index}\r\n+            style={{\r\n+              alignSelf: msg.sender === 'user' ? 'flex-end' : 'flex-start',\r\n+              maxWidth: '80%',\r\n+              padding: '0.6rem 1rem',\r\n+              borderRadius: msg.sender === 'user' \r\n+                ? '18px 18px 0 18px' \r\n+                : '18px 18px 18px 0',\r\n+              backgroundColor: msg.sender === 'user'\r\n+                ? (darkMode ? '#4a5568' : '#3b82f6')\r\n+                : (darkMode ? '#4a5568' : '#e2e8f0'),\r\n+              color: msg.sender === 'user' ? 'white' : (darkMode ? 'white' : '#1e293b'),\r\n+              animation: msg.sender === 'bot' && index === messages.length - 1 \r\n+                ? 'fadeIn 0.3s ease' \r\n+                : 'none'\r\n+            }}\r\n+          >\r\n+            {msg.text}\r\n+          </div>\r\n+        ))}\r\n+        <div ref={chatEndRef} />\r\n+      </div>\r\n+      \r\n+      {/* Chat input */}\r\n+      <form onSubmit={handleSendMessage} style={{\r\n+        padding: '0.8rem',\r\n+        borderTop: darkMode ? '1px solid #4a5568' : '1px solid #e2e8f0',\r\n+        display: 'flex',\r\n+        gap: '0.5rem'\r\n+      }}>\r\n+        <input\r\n+          ref={inputRef}\r\n+          type=\"text\"\r\n+          value={inputValue}\r\n+          onChange={(e) => setInputValue(e.target.value)}\r\n+          placeholder=\"Ask me about urban living...\"\r\n+          disabled={isTyping}\r\n+          style={{\r\n+            flex: 1,\r\n+            padding: '0.6rem 1rem',\r\n+            borderRadius: '20px',\r\n+            border: darkMode ? '1px solid #4a5568' : '1px solid #e2e8f0',\r\n+            backgroundColor: darkMode ? '#2d3748' : 'white',\r\n+            color: darkMode ? 'white' : '#1e293b',\r\n+            outline: 'none',\r\n+            opacity: isTyping ? 0.7 : 1\r\n+          }}\r\n+        />\r\n+        <button \r\n+          type=\"submit\"\r\n+          disabled={isTyping}\r\n+          style={{\r\n+            background: isTyping \r\n+              ? (darkMode ? '#4a5568' : '#e2e8f0')\r\n+              : (darkMode ? '#4a5568' : '#3b82f6'),\r\n+            color: 'white',\r\n+            border: 'none',\r\n+            borderRadius: '50%',\r\n+            width: '40px',\r\n+            height: '40px',\r\n+            display: 'flex',\r\n+            alignItems: 'center',\r\n+            justifyContent: 'center',\r\n+            cursor: isTyping ? 'not-allowed' : 'pointer'\r\n+          }}\r\n+        >\r\n+          {isTyping ? '...' : '‚û§'}\r\n+        </button>\r\n+      </form>\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+// Main Home Component\r\n+export default function Home() {\r\n+  const navigate = useNavigate();\r\n+  const [searchQuery, setSearchQuery] = useState('');\r\n+  const [darkMode, setDarkMode] = useState(false);\r\n+  const [selectedService, setSelectedService] = useState(null);\r\n+  const [orderCount, setOrderCount] = useState(0);\r\n+  const [achievements, setAchievements] = useState([]);\r\n+  const [showChat, setShowChat] = useState(false);\r\n+\r\n+  const services = [\r\n+    { \r\n+      name: 'Transport', \r\n+      path: '/transport', \r\n+      icon: 'üöå', \r\n+      desc: 'Plan your multi-modal journey across the city',\r\n+      color: '#3b82f6',\r\n+      details: 'Find the best routes combining metro, buses, and bikes. Real-time updates and ticket purchasing available.'\r\n+    },\r\n+    { \r\n+      name: 'Food Delivery', \r\n+      path: '/food', \r\n+      icon: 'üçî', \r\n+      desc: 'Discover local restaurants and cafes',\r\n+      color: '#ef4444',\r\n+      details: 'Order from hundreds of restaurants with special discounts. Track your delivery in real-time.'\r\n+    },\r\n+    { \r\n+      name: 'Groceries', \r\n+      path: '/food', \r\n+      icon: 'üõí', \r\n+      desc: 'Get groceries delivered in minutes',\r\n+      color: '#10b981',\r\n+      details: 'Same-day delivery from local supermarkets. Schedule recurring orders for essentials.'\r\n+    },\r\n+    { \r\n+      name: 'Services', \r\n+      path: '/food', \r\n+      icon: 'üõ†Ô∏è', \r\n+      desc: 'Find urban services near you',\r\n+      color: '#8b5cf6',\r\n+      details: 'Book home services, repairs, and professional help with verified providers.'\r\n+    }\r\n+  ];\r\n+\r\n+  // Check for achievements\r\n+  useEffect(() => {\r\n+    if (orderCount === 1) {\r\n+      addAchievement('First Order!', 'üéâ');\r\n+    } else if (orderCount === 5) {\r\n+      addAchievement('Regular Customer!', 'üèÜ');\r\n+    } else if (orderCount === 10) {\r\n+      addAchievement('Super User!', 'üåü');\r\n+    }\r\n+  }, [orderCount]);\r\n+\r\n+  const addAchievement = (title, icon) => {\r\n+    if (!achievements.some(a => a.title === title)) {\r\n+      const newAchievement = { title, icon, id: Date.now() };\r\n+      setAchievements(prev => [...prev, newAchievement]);\r\n+      \r\n+      // Auto-hide achievement after 3 seconds\r\n+      setTimeout(() => {\r\n+        setAchievements(prev => prev.filter(a => a.id !== newAchievement.id));\r\n+      }, 3000);\r\n+    }\r\n+  };\r\n+\r\n+  const handleSearch = (e) => {\r\n+    e.preventDefault();\r\n+    if (searchQuery.trim()) {\r\n+      navigate(`/food?search=${encodeURIComponent(searchQuery)}`);\r\n+    }\r\n+  };\r\n+\r\n+  const toggleDarkMode = () => {\r\n+    setDarkMode(!darkMode);\r\n+  };\r\n+\r\n+  const openServicePopup = (service) => {\r\n+    setSelectedService(service);\r\n+    setOrderCount(prev => prev + 1);\r\n+  };\r\n+\r\n+  const closePopup = () => {\r\n+    setSelectedService(null);\r\n+  };\r\n+\r\n+  const toggleChat = () => {\r\n+    setShowChat(!showChat);\r\n+  };\r\n+\r\n+  return (\r\n+    <div style={{\r\n+      backgroundColor: darkMode ? '#1a202c' : '#f8fafc',\r\n+      minHeight: '100vh',\r\n+      paddingBottom: '3rem',\r\n+      color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+      transition: 'all 0.3s ease',\r\n+      position: 'relative'\r\n+    }}>\r\n+      {/* Theme Toggle Button */}\r\n+      <button \r\n+        onClick={toggleDarkMode} \r\n+        style={{\r\n+          position: 'fixed',\r\n+          top: '1.5rem',\r\n+          right: '1.5rem',\r\n+          background: darkMode ? '#4a5568' : '#e2e8f0',\r\n+          border: 'none',\r\n+          borderRadius: '50%',\r\n+          width: '40px',\r\n+          height: '40px',\r\n+          display: 'flex',\r\n+          alignItems: 'center',\r\n+          justifyContent: 'center',\r\n+          cursor: 'pointer',\r\n+          transition: 'all 0.3s ease',\r\n+          boxShadow: '0 2px 5px rgba(0, 0, 0, 0.2)',\r\n+          zIndex: 100\r\n+        }}\r\n+        aria-label={darkMode ? 'Switch to light mode' : 'Switch to dark mode'}\r\n+      >\r\n+        {darkMode ? '‚òÄÔ∏è' : 'üåô'}\r\n+      </button>\r\n+      \r\n+      {/* Hero Section with UrbanBuddy */}\r\n+      <section style={{\r\n+        background: darkMode \r\n+          ? 'linear-gradient(135deg, #2d3748 0%, #1a202c 100%)' \r\n+          : 'linear-gradient(135deg, #6b46c1 0%, #3b82f6 100%)',\r\n+        color: 'white',\r\n+        padding: '4rem 1rem',\r\n+        textAlign: 'center',\r\n+        borderRadius: '0 0 20px 20px',\r\n+        boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',\r\n+        position: 'relative',\r\n+        overflow: 'hidden',\r\n+        height: '300px'\r\n+      }}>\r\n+        <div style={{\r\n+          maxWidth: '800px',\r\n+          margin: '0 auto',\r\n+          position: 'relative',\r\n+          zIndex: 2\r\n+        }}>\r\n+          <h1 style={{\r\n+            fontSize: '3.5rem',\r\n+            fontWeight: '800',\r\n+            marginBottom: '0.5rem',\r\n+            textShadow: '2px 2px 4px rgba(0, 0, 0, 0.2)',\r\n+          }}>UrbanFlow</h1>\r\n+          <p style={{\r\n+            fontSize: '1.25rem',\r\n+            marginBottom: '2rem',\r\n+            opacity: 0.9,\r\n+          }}>Your seamless urban living companion</p>\r\n+          \r\n+          <form onSubmit={handleSearch} style={{\r\n+            display: 'flex',\r\n+            maxWidth: '600px',\r\n+            margin: '0 auto',\r\n+            borderRadius: '50px',\r\n+            overflow: 'hidden',\r\n+            boxShadow: '0 4px 10px rgba(0, 0, 0, 0.2)',\r\n+          }}>\r\n+            <input\r\n+              type=\"text\"\r\n+              placeholder=\"Search for restaurants, services...\"\r\n+              value={searchQuery}\r\n+              onChange={(e) => setSearchQuery(e.target.value)}\r\n+              style={{\r\n+                flex: 1,\r\n+                padding: '1rem 1.5rem',\r\n+                border: 'none',\r\n+                fontSize: '1rem',\r\n+                outline: 'none',\r\n+                backgroundColor: darkMode ? '#2d3748' : 'white',\r\n+                color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+              }}\r\n+            />\r\n+            <button type=\"submit\" style={{\r\n+              backgroundColor: darkMode ? '#4a5568' : '#1e40af',\r\n+              color: 'white',\r\n+              border: 'none',\r\n+              padding: '0 1.5rem',\r\n+              cursor: 'pointer',\r\n+              fontSize: '1.25rem',\r\n+              transition: 'background-color 0.2s'\r\n+            }}>\r\n+              <span>üîç</span>\r\n+            </button>\r\n+          </form>\r\n+        </div>\r\n+        <UrbanBuddy darkMode={darkMode} onChatOpen={toggleChat} />\r\n+      </section>\r\n+\r\n+      {/* Services Grid */}\r\n+      <section style={{\r\n+        padding: '2rem 1rem',\r\n+        maxWidth: '1200px',\r\n+        margin: '0 auto',\r\n+      }}>\r\n+        <h2 style={{\r\n+          fontSize: '2rem',\r\n+          fontWeight: '700',\r\n+          marginBottom: '1.5rem',\r\n+          color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+          textAlign: 'center',\r\n+        }}>What do you need today?</h2>\r\n+        <div style={{\r\n+          display: 'grid',\r\n+          gridTemplateColumns: 'repeat(auto-fit, minmax(250px, 1fr))',\r\n+          gap: '1.5rem',\r\n+          marginTop: '1rem',\r\n+        }}>\r\n+          {services.map((service) => (\r\n+            <div \r\n+              key={service.name} \r\n+              onClick={() => openServicePopup(service)}\r\n+              style={{ \r\n+                padding: '2rem 1.5rem',\r\n+                borderRadius: '16px',\r\n+                border: `2px solid ${service.color}`,\r\n+                textAlign: 'center',\r\n+                cursor: 'pointer',\r\n+                transition: 'transform 0.3s, box-shadow 0.3s',\r\n+                backgroundColor: darkMode \r\n+                  ? `${service.color}20` \r\n+                  : `${service.color}10`,\r\n+                ':hover': {\r\n+                  transform: 'translateY(-5px)',\r\n+                  boxShadow: '0 10px 20px rgba(0, 0, 0, 0.1)',\r\n+                }\r\n+              }}\r\n+            >\r\n+              <div style={{ \r\n+                fontSize: '3rem',\r\n+                marginBottom: '1rem',\r\n+                display: 'inline-block',\r\n+                animation: 'float 3s ease-in-out infinite'\r\n+              }}>{service.icon}</div>\r\n+              <h3 style={{fontSize: '1.5rem', fontWeight: '600', marginBottom: '0.5rem'}}>{service.name}</h3>\r\n+              <p style={{color: darkMode ? '#a0aec0' : '#64748b'}}>{service.desc}</p>\r\n+            </div>\r\n+          ))}\r\n+        </div>\r\n+      </section>\r\n+\r\n+      {/* Featured Section */}\r\n+      <section style={{\r\n+        padding: '2rem 1rem',\r\n+        maxWidth: '1200px',\r\n+        margin: '0 auto',\r\n+      }}>\r\n+        <h2 style={{\r\n+          fontSize: '2rem',\r\n+          fontWeight: '700',\r\n+          marginBottom: '1.5rem',\r\n+          color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+          textAlign: 'center',\r\n+        }}>Quick Access</h2>\r\n+        <div style={{\r\n+          display: 'flex',\r\n+          justifyContent: 'center',\r\n+          gap: '1rem',\r\n+          flexWrap: 'wrap',\r\n+        }}>\r\n+          <button \r\n+            onClick={() => navigate('/transport?from=home&to=downtown')}\r\n+            style={{\r\n+              padding: '0.75rem 1.5rem',\r\n+              borderRadius: '50px',\r\n+              border: 'none',\r\n+              backgroundColor: darkMode ? '#2d3748' : '#e2e8f0',\r\n+              color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+              fontWeight: '600',\r\n+              cursor: 'pointer',\r\n+              transition: 'all 0.2s',\r\n+              display: 'flex',\r\n+              alignItems: 'center',\r\n+              gap: '0.5rem',\r\n+              fontSize: '1rem'\r\n+            }}\r\n+          >\r\n+            üöï To Downtown\r\n+          </button>\r\n+          <button \r\n+            onClick={() => navigate('/food?category=fastfood')}\r\n+            style={{\r\n+              padding: '0.75rem 1.5rem',\r\n+              borderRadius: '50px',\r\n+              border: 'none',\r\n+              backgroundColor: darkMode ? '#2d3748' : '#e2e8f0',\r\n+              color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+              fontWeight: '600',\r\n+              cursor: 'pointer',\r\n+              transition: 'all 0.2s',\r\n+              display: 'flex',\r\n+              alignItems: 'center',\r\n+              gap: '0.5rem',\r\n+              fontSize: '1rem'\r\n+            }}\r\n+          >\r\n+            üçü Fast Food\r\n+          </button>\r\n+          <button \r\n+            onClick={() => navigate('/food?category=coffee')}\r\n+            style={{\r\n+              padding: '0.75rem 1.5rem',\r\n+              borderRadius: '50px',\r\n+              border: 'none',\r\n+              backgroundColor: darkMode ? '#2d3748' : '#e2e8f0',\r\n+              color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+              fontWeight: '600',\r\n+              cursor: 'pointer',\r\n+              transition: 'all 0.2s',\r\n+              display: 'flex',\r\n+              alignItems: 'center',\r\n+              gap: '0.5rem',\r\n+              fontSize: '1rem'\r\n+            }}\r\n+          >\r\n+            ‚òï Coffee Shops\r\n+          </button>\r\n+        </div>\r\n+      </section>\r\n+\r\n+      {/* Service Popup */}\r\n+      {selectedService && (\r\n+        <div style={{\r\n+          position: 'fixed',\r\n+          top: 0,\r\n+          left: 0,\r\n+          right: 0,\r\n+          bottom: 0,\r\n+          backgroundColor: 'rgba(0, 0, 0, 0.7)',\r\n+          display: 'flex',\r\n+          justifyContent: 'center',\r\n+          alignItems: 'center',\r\n+          zIndex: 1000,\r\n+        }} onClick={closePopup}>\r\n+          <div style={{\r\n+            backgroundColor: darkMode ? '#2d3748' : 'white',\r\n+            borderRadius: '16px',\r\n+            padding: '2rem',\r\n+            maxWidth: '500px',\r\n+            width: '90%',\r\n+            boxShadow: '0 10px 25px rgba(0, 0, 0, 0.2)',\r\n+            position: 'relative',\r\n+            border: darkMode ? '1px solid #4a5568' : '1px solid #e2e8f0',\r\n+          }} onClick={(e) => e.stopPropagation()}>\r\n+            <button style={{\r\n+              position: 'absolute',\r\n+              top: '1rem',\r\n+              right: '1rem',\r\n+              background: 'none',\r\n+              border: 'none',\r\n+              fontSize: '1.5rem',\r\n+              cursor: 'pointer',\r\n+              color: darkMode ? '#a0aec0' : '#64748b',\r\n+            }} onClick={closePopup}>√ó</button>\r\n+            <div style={{ \r\n+              display: 'flex', \r\n+              alignItems: 'center', \r\n+              gap: '1rem',\r\n+              marginBottom: '1.5rem'\r\n+            }}>\r\n+              <span style={{ fontSize: '2.5rem', animation: 'float 3s ease-in-out infinite' }}>{selectedService.icon}</span>\r\n+              <h3 style={{fontSize: '1.8rem', fontWeight: '700', marginBottom: '1rem', color: darkMode ? '#e2e8f0' : '#1e293b'}}>{selectedService.name}</h3>\r\n+            </div>\r\n+            <p style={{color: darkMode ? '#a0aec0' : '#64748b', fontSize: '1.1rem', lineHeight: '1.6', marginBottom: '2rem'}}>{selectedService.details}</p>\r\n+            <button \r\n+              style={{ \r\n+                padding: '0.75rem 1.5rem',\r\n+                borderRadius: '8px',\r\n+                border: 'none',\r\n+                backgroundColor: selectedService.color,\r\n+                color: 'white',\r\n+                fontWeight: '600',\r\n+                cursor: 'pointer',\r\n+                transition: 'all 0.2s',\r\n+                fontSize: '1rem'\r\n+              }}\r\n+              onClick={() => {\r\n+                navigate(selectedService.path);\r\n+                closePopup();\r\n+              }}\r\n+            >\r\n+              Explore {selectedService.name}\r\n+            </button>\r\n+          </div>\r\n+        </div>\r\n+      )}\r\n+\r\n+      {/* Achievements */}\r\n+      {achievements.map(achievement => (\r\n+        <div key={achievement.id} style={{\r\n+          position: 'fixed',\r\n+          bottom: '20px',\r\n+          right: '20px',\r\n+          background: darkMode ? '#2d3748' : 'white',\r\n+          color: darkMode ? 'white' : '#1e293b',\r\n+          padding: '1rem',\r\n+          borderRadius: '12px',\r\n+          boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',\r\n+          display: 'flex',\r\n+          alignItems: 'center',\r\n+          gap: '0.5rem',\r\n+          zIndex: 1000,\r\n+          animation: 'slideIn 0.5s forwards, fadeOut 0.5s forwards 2.5s'\r\n+        }}>\r\n+          <span style={{fontSize: '1.5rem'}}>{achievement.icon}</span>\r\n+          <span>{achievement.title}</span>\r\n+        </div>\r\n+      ))}\r\n+\r\n+      {/* Chat Modal */}\r\n+      {showChat && <ChatModal darkMode={darkMode} onClose={toggleChat} />}\r\n+\r\n+      {/* Footer with copyright */}\r\n+      <footer style={{\r\n+        textAlign: 'center',\r\n+        padding: '2rem 1rem',\r\n+        color: darkMode ? '#a0aec0' : '#64748b',\r\n+        fontSize: '0.9rem',\r\n+        marginTop: '2rem'\r\n+      }}>\r\n+        <p>¬© {new Date().getFullYear()} UrbanFlow - Created by Nick</p>\r\n+      </footer>\r\n+    </div>\r\n+  );\r\n+};\n\\ No newline at end of file\n"
                },
                {
                    "date": 1754462558418,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n import { useState, useEffect, useRef } from 'react';\r\n import { useNavigate } from 'react-router-dom';\r\n \r\n-// UrbanBuddy AI Assistant Component\r\n+// UrbanBuddy AI Assistant Component (unchanged)\r\n const UrbanBuddy = ({ darkMode, onChatOpen }) => {\r\n   const [position, setPosition] = useState({ x: 20, y: 50 });\r\n   const [expression, setExpression] = useState('üòä');\r\n   const [direction, setDirection] = useState(1);\r\n@@ -23,22 +23,19 @@\n     else if (month === 4) setCostume('üå∏');\r\n     else setCostume(null);\r\n   }, []);\r\n \r\n-  // Make the bot wander with more dynamic movement\r\n+  // Movement logic (unchanged)\r\n   useEffect(() => {\r\n     const moveInterval = setInterval(() => {\r\n       setPosition(prev => {\r\n         const now = Date.now();\r\n         const timeSinceLastInteraction = now - lastInteractionTime.current;\r\n-        \r\n-        // More active movement right after interaction\r\n         const speedMultiplier = timeSinceLastInteraction < 5000 ? 2 : 1;\r\n         \r\n         let newX = prev.x + (3 * direction * speedMultiplier);\r\n         let newY = prev.y + (Math.random() * 6 - 3);\r\n         \r\n-        // Bounce off edges\r\n         if (newX > window.innerWidth - 80) {\r\n           setDirection(-1);\r\n           triggerAnimation('spin');\r\n         }\r\n@@ -55,15 +52,14 @@\n \r\n     return () => clearInterval(moveInterval);\r\n   }, [direction]);\r\n \r\n-  // Change expressions randomly with more variety\r\n+  // Expressions (unchanged)\r\n   useEffect(() => {\r\n     const expressions = ['üòä', 'ü§î', 'üòÆ', 'üòé', 'üëã', 'ü§ñ', '‚ú®', 'üåü'];\r\n     const expressionInterval = setInterval(() => {\r\n       if (!isActive) {\r\n         setExpression(expressions[Math.floor(Math.random() * expressions.length)]);\r\n-        // Random animations when idle\r\n         if (Math.random() > 0.8) {\r\n           triggerAnimation(['bounce', 'spin', 'wobble'][Math.floor(Math.random() * 3)]);\r\n         }\r\n       }\r\n@@ -71,30 +67,21 @@\n     return () => clearInterval(expressionInterval);\r\n   }, [isActive]);\r\n \r\n   const triggerAnimation = (type) => {\r\n-    if (animationRef.current) {\r\n-      clearTimeout(animationRef.current);\r\n-    }\r\n+    if (animationRef.current) clearTimeout(animationRef.current);\r\n     \r\n     const botElement = botRef.current;\r\n     if (!botElement) return;\r\n     \r\n     botElement.style.animation = 'none';\r\n-    void botElement.offsetWidth; // Trigger reflow\r\n+    void botElement.offsetWidth;\r\n     \r\n     switch(type) {\r\n-      case 'spin':\r\n-        botElement.style.animation = 'spin 1s ease';\r\n-        break;\r\n-      case 'bounce':\r\n-        botElement.style.animation = 'bounce 0.5s ease';\r\n-        break;\r\n-      case 'wobble':\r\n-        botElement.style.animation = 'wobble 0.8s ease';\r\n-        break;\r\n-      default:\r\n-        botElement.style.animation = '';\r\n+      case 'spin': botElement.style.animation = 'spin 1s ease'; break;\r\n+      case 'bounce': botElement.style.animation = 'bounce 0.5s ease'; break;\r\n+      case 'wobble': botElement.style.animation = 'wobble 0.8s ease'; break;\r\n+      default: botElement.style.animation = '';\r\n     }\r\n     \r\n     animationRef.current = setTimeout(() => {\r\n       if (botElement) botElement.style.animation = '';\r\n@@ -105,19 +92,12 @@\n     lastInteractionTime.current = Date.now();\r\n     setIsActive(true);\r\n     triggerAnimation('bounce');\r\n     setExpression('üí°');\r\n-    \r\n-    // Trigger chat opening in parent component\r\n     onChatOpen();\r\n-    \r\n-    // Return to normal after a delay\r\n-    setTimeout(() => {\r\n-      setIsActive(false);\r\n-    }, 3000);\r\n+    setTimeout(() => setIsActive(false), 3000);\r\n   };\r\n \r\n-  // Custom animations\r\n   const animations = `\r\n     @keyframes spin {\r\n       0% { transform: rotate(0deg) scaleX(${direction}); }\r\n       100% { transform: rotate(360deg) scaleX(${direction}); }\r\n@@ -165,9 +145,8 @@\n           display: 'flex',\r\n           flexDirection: 'column',\r\n           alignItems: 'center'\r\n         }}>\r\n-          {/* Bot icon with costume */}\r\n           <div style={{\r\n             position: 'relative',\r\n             width: '60px',\r\n             height: '60px',\r\n@@ -196,942 +175,60 @@\n     </>\r\n   );\r\n };\r\n \r\n-// Chat Modal Component with Functional API Connection\r\n+// Updated Chat Modal using Hugging Face API\r\n const ChatModal = ({ darkMode, onClose }) => {\r\n   const [messages, setMessages] = useState([\r\n     { text: \"Hello! I'm UrbanBuddy, your AI assistant for urban living. How can I help you today?\", sender: 'bot' }\r\n   ]);\r\n   const [inputValue, setInputValue] = useState('');\r\n   const [isTyping, setIsTyping] = useState(false);\r\n   const chatEndRef = useRef(null);\r\n-  const inputRef = useRef(null);\r\n \r\n-  // Auto-scroll to bottom and focus input\r\n+  // Auto-scroll to bottom\r\n   useEffect(() => {\r\n     chatEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n-    inputRef.current?.focus();\r\n   }, [messages]);\r\n \r\n-  // Function to call the AI API\r\n+  // Generate response using Hugging Face API\r\n   const generateResponse = async (userMessage) => {\r\n     setIsTyping(true);\r\n     \r\n     try {\r\n-      // In a real app, you should call your own backend endpoint that then calls OpenAI\r\n-      // This is just for demonstration purposes\r\n-      const response = await fetch('https://api.openai.com/v1/chat/completions', {\r\n-        method: \"POST\",\r\n-        headers: { \r\n-          \"Content-Type\": \"application/json\",\r\n-          // Note: In production, never expose your API key in frontend code\r\n-          // This should be handled through your own backend\r\n-          \"Authorization\": `Bearer ${process.env.REACT_APP_OPENAI_API_KEY}` \r\n-        },\r\n-        body: JSON.stringify({\r\n-          model: \"gpt-3.5-turbo\",\r\n-          messages: [\r\n-            {\r\n-              role: \"system\",\r\n-              content: \"You are UrbanBuddy, a friendly AI assistant for urban living. \" +\r\n-                \"Provide helpful, concise answers (1-2 sentences) about city life, \" +\r\n-                \"transportation, food delivery, local services, and urban living tips. \" +\r\n-                \"Keep responses practical and urban-focused.\"\r\n-            },\r\n-            {\r\n-              role: \"user\",\r\n-              content: userMessage\r\n-            }\r\n-          ],\r\n-          temperature: 0.7,\r\n-          max_tokens: 150\r\n-        })\r\n-      });\r\n-      \r\n-      if (!response.ok) {\r\n-        throw new Error(`API request failed with status ${response.status}`);\r\n-      }\r\n-      \r\n-      const data = await response.json();\r\n-      const aiResponse = data.choices?.[0]?.message?.content || \r\n-        \"I'm having trouble thinking of a response right now. Could you try asking something else?\";\r\n-      \r\n-      setMessages(prev => [...prev, { \r\n-        text: aiResponse, \r\n-        sender: 'bot' \r\n-      }]);\r\n-    } catch (error) {\r\n-      console.error(\"API error:\", error);\r\n-      // Fallback to a local AI response if API fails\r\n-      const fallbackResponses = [\r\n-        \"I'm currently experiencing high demand. Try again in a moment!\",\r\n-        \"Let me think differently about that... Can you rephrase your question?\",\r\n-        \"I specialize in urban living tips. Ask me about transportation, food, or city services!\",\r\n-        \"I'm having connection issues, but I'd love to help with your urban living questions!\"\r\n-      ];\r\n-      setMessages(prev => [...prev, { \r\n-        text: fallbackResponses[Math.floor(Math.random() * fallbackResponses.length)], \r\n-        sender: 'bot' \r\n-      }]);\r\n-    } finally {\r\n-      setIsTyping(false);\r\n-    }\r\n-  };\r\n-\r\n-  const handleSendMessage = async (e) => {\r\n-    e.preventDefault();\r\n-    if (inputValue.trim() && !isTyping) {\r\n-      // Add user message\r\n-      const userMessage = inputValue.trim();\r\n-      setMessages(prev => [...prev, { text: userMessage, sender: 'user' }]);\r\n-      setInputValue('');\r\n-      \r\n-      // Generate AI response\r\n-      await generateResponse(userMessage);\r\n-    }\r\n-  };\r\n-\r\n-  return (\r\n-    <div style={{\r\n-      position: 'fixed',\r\n-      bottom: '100px',\r\n-      right: '30px',\r\n-      width: '350px',\r\n-      maxWidth: '90%',\r\n-      backgroundColor: darkMode ? '#2d3748' : 'white',\r\n-      borderRadius: '16px',\r\n-      boxShadow: '0 10px 25px rgba(0, 0, 0, 0.2)',\r\n-      border: darkMode ? '1px solid #4a5568' : '1px solid #e2e8f0',\r\n-      zIndex: 1000,\r\n-      overflow: 'hidden',\r\n-      display: 'flex',\r\n-      flexDirection: 'column',\r\n-      maxHeight: '60vh'\r\n-    }}>\r\n-      {/* Chat header */}\r\n-      <div style={{\r\n-        padding: '1rem',\r\n-        backgroundColor: darkMode ? '#4a5568' : '#3b82f6',\r\n-        color: 'white',\r\n-        display: 'flex',\r\n-        justifyContent: 'space-between',\r\n-        alignItems: 'center'\r\n-      }}>\r\n-        <div style={{ display: 'flex', alignItems: 'center', gap: '0.5rem' }}>\r\n-          <span style={{ fontSize: '1.5rem' }}>ü§ñ</span>\r\n-          <h3 style={{ margin: 0 }}>UrbanBuddy AI</h3>\r\n-          {isTyping && (\r\n-            <span style={{ \r\n-              fontSize: '0.8rem',\r\n-              marginLeft: '0.5rem',\r\n-              opacity: 0.8\r\n-            }}>typing...</span>\r\n-          )}\r\n-        </div>\r\n-        <button \r\n-          onClick={onClose}\r\n-          style={{\r\n-            background: 'none',\r\n-            border: 'none',\r\n-            color: 'white',\r\n-            fontSize: '1.2rem',\r\n-            cursor: 'pointer'\r\n-          }}\r\n-        >\r\n-          √ó\r\n-        </button>\r\n-      </div>\r\n-      \r\n-      {/* Chat messages */}\r\n-      <div style={{\r\n-        flex: 1,\r\n-        padding: '1rem',\r\n-        overflowY: 'auto',\r\n-        display: 'flex',\r\n-        flexDirection: 'column',\r\n-        gap: '0.8rem'\r\n-      }}>\r\n-        {messages.map((msg, index) => (\r\n-          <div \r\n-            key={index}\r\n-            style={{\r\n-              alignSelf: msg.sender === 'user' ? 'flex-end' : 'flex-start',\r\n-              maxWidth: '80%',\r\n-              padding: '0.6rem 1rem',\r\n-              borderRadius: msg.sender === 'user' \r\n-                ? '18px 18px 0 18px' \r\n-                : '18px 18px 18px 0',\r\n-              backgroundColor: msg.sender === 'user'\r\n-                ? (darkMode ? '#4a5568' : '#3b82f6')\r\n-                : (darkMode ? '#4a5568' : '#e2e8f0'),\r\n-              color: msg.sender === 'user' ? 'white' : (darkMode ? 'white' : '#1e293b'),\r\n-              animation: msg.sender === 'bot' && index === messages.length - 1 \r\n-                ? 'fadeIn 0.3s ease' \r\n-                : 'none'\r\n-            }}\r\n-          >\r\n-            {msg.text}\r\n-          </div>\r\n-        ))}\r\n-        <div ref={chatEndRef} />\r\n-      </div>\r\n-      \r\n-      {/* Chat input */}\r\n-      <form onSubmit={handleSendMessage} style={{\r\n-        padding: '0.8rem',\r\n-        borderTop: darkMode ? '1px solid #4a5568' : '1px solid #e2e8f0',\r\n-        display: 'flex',\r\n-        gap: '0.5rem'\r\n-      }}>\r\n-        <input\r\n-          ref={inputRef}\r\n-          type=\"text\"\r\n-          value={inputValue}\r\n-          onChange={(e) => setInputValue(e.target.value)}\r\n-          placeholder=\"Ask me about urban living...\"\r\n-          disabled={isTyping}\r\n-          style={{\r\n-            flex: 1,\r\n-            padding: '0.6rem 1rem',\r\n-            borderRadius: '20px',\r\n-            border: darkMode ? '1px solid #4a5568' : '1px solid #e2e8f0',\r\n-            backgroundColor: darkMode ? '#2d3748' : 'white',\r\n-            color: darkMode ? 'white' : '#1e293b',\r\n-            outline: 'none',\r\n-            opacity: isTyping ? 0.7 : 1\r\n-          }}\r\n-        />\r\n-        <button \r\n-          type=\"submit\"\r\n-          disabled={isTyping}\r\n-          style={{\r\n-            background: isTyping \r\n-              ? (darkMode ? '#4a5568' : '#e2e8f0')\r\n-              : (darkMode ? '#4a5568' : '#3b82f6'),\r\n-            color: 'white',\r\n-            border: 'none',\r\n-            borderRadius: '50%',\r\n-            width: '40px',\r\n-            height: '40px',\r\n-            display: 'flex',\r\n-            alignItems: 'center',\r\n-            justifyContent: 'center',\r\n-            cursor: isTyping ? 'not-allowed' : 'pointer'\r\n-          }}\r\n-        >\r\n-          {isTyping ? '...' : '‚û§'}\r\n-        </button>\r\n-      </form>\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-// Main Home Component\r\n-export default function Home() {\r\n-  const navigate = useNavigate();\r\n-  const [searchQuery, setSearchQuery] = useState('');\r\n-  const [darkMode, setDarkMode] = useState(false);\r\n-  const [selectedService, setSelectedService] = useState(null);\r\n-  const [orderCount, setOrderCount] = useState(0);\r\n-  const [achievements, setAchievements] = useState([]);\r\n-  const [showChat, setShowChat] = useState(false);\r\n-\r\n-  const services = [\r\n-    { \r\n-      name: 'Transport', \r\n-      path: '/transport', \r\n-      icon: 'üöå', \r\n-      desc: 'Plan your multi-modal journey across the city',\r\n-      color: '#3b82f6',\r\n-      details: 'Find the best routes combining metro, buses, and bikes. Real-time updates and ticket purchasing available.'\r\n-    },\r\n-    { \r\n-      name: 'Food Delivery', \r\n-      path: '/food', \r\n-      icon: 'üçî', \r\n-      desc: 'Discover local restaurants and cafes',\r\n-      color: '#ef4444',\r\n-      details: 'Order from hundreds of restaurants with special discounts. Track your delivery in real-time.'\r\n-    },\r\n-    { \r\n-      name: 'Groceries', \r\n-      path: '/food', \r\n-      icon: 'üõí', \r\n-      desc: 'Get groceries delivered in minutes',\r\n-      color: '#10b981',\r\n-      details: 'Same-day delivery from local supermarkets. Schedule recurring orders for essentials.'\r\n-    },\r\n-    { \r\n-      name: 'Services', \r\n-      path: '/food', \r\n-      icon: 'üõ†Ô∏è', \r\n-      desc: 'Find urban services near you',\r\n-      color: '#8b5cf6',\r\n-      details: 'Book home services, repairs, and professional help with verified providers.'\r\n-    }\r\n-  ];\r\n-\r\n-  // Check for achievements\r\n-  useEffect(() => {\r\n-    if (orderCount === 1) {\r\n-      addAchievement('First Order!', 'üéâ');\r\n-    } else if (orderCount === 5) {\r\n-      addAchievement('Regular Customer!', 'üèÜ');\r\n-    } else if (orderCount === 10) {\r\n-      addAchievement('Super User!', 'üåü');\r\n-    }\r\n-  }, [orderCount]);\r\n-\r\n-  const addAchievement = (title, icon) => {\r\n-    if (!achievements.some(a => a.title === title)) {\r\n-      const newAchievement = { title, icon, id: Date.now() };\r\n-      setAchievements(prev => [...prev, newAchievement]);\r\n-      \r\n-      // Auto-hide achievement after 3 seconds\r\n-      setTimeout(() => {\r\n-        setAchievements(prev => prev.filter(a => a.id !== newAchievement.id));\r\n-      }, 3000);\r\n-    }\r\n-  };\r\n-\r\n-  const handleSearch = (e) => {\r\n-    e.preventDefault();\r\n-    if (searchQuery.trim()) {\r\n-      navigate(`/food?search=${encodeURIComponent(searchQuery)}`);\r\n-    }\r\n-  };\r\n-\r\n-  const toggleDarkMode = () => {\r\n-    setDarkMode(!darkMode);\r\n-  };\r\n-\r\n-  const openServicePopup = (service) => {\r\n-    setSelectedService(service);\r\n-    setOrderCount(prev => prev + 1);\r\n-  };\r\n-\r\n-  const closePopup = () => {\r\n-    setSelectedService(null);\r\n-  };\r\n-\r\n-  const toggleChat = () => {\r\n-    setShowChat(!showChat);\r\n-  };\r\n-\r\n-  return (\r\n-    <div style={{\r\n-      backgroundColor: darkMode ? '#1a202c' : '#f8fafc',\r\n-      minHeight: '100vh',\r\n-      paddingBottom: '3rem',\r\n-      color: darkMode ? '#e2e8f0' : '#1e293b',\r\n-      transition: 'all 0.3s ease',\r\n-      position: 'relative'\r\n-    }}>\r\n-      {/* Theme Toggle Button */}\r\n-      <button \r\n-        onClick={toggleDarkMode} \r\n-        style={{\r\n-          position: 'fixed',\r\n-          top: '1.5rem',\r\n-          right: '1.5rem',\r\n-          background: darkMode ? '#4a5568' : '#e2e8f0',\r\n-          border: 'none',\r\n-          borderRadius: '50%',\r\n-          width: '40px',\r\n-          height: '40px',\r\n-          display: 'flex',\r\n-          alignItems: 'center',\r\n-          justifyContent: 'center',\r\n-          cursor: 'pointer',\r\n-          transition: 'all 0.3s ease',\r\n-          boxShadow: '0 2px 5px rgba(0, 0, 0, 0.2)',\r\n-          zIndex: 100\r\n-        }}\r\n-        aria-label={darkMode ? 'Switch to light mode' : 'Switch to dark mode'}\r\n-      >\r\n-        {darkMode ? '‚òÄÔ∏è' : 'üåô'}\r\n-      </button>\r\n-      \r\n-      {/* Hero Section with UrbanBuddy */}\r\n-      <section style={{\r\n-        background: darkMode \r\n-          ? 'linear-gradient(135deg, #2d3748 0%, #1a202c 100%)' \r\n-          : 'linear-gradient(135deg, #6b46c1 0%, #3b82f6 100%)',\r\n-        color: 'white',\r\n-        padding: '4rem 1rem',\r\n-        textAlign: 'center',\r\n-        borderRadius: '0 0 20px 20px',\r\n-        boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',\r\n-        position: 'relative',\r\n-        overflow: 'hidden',\r\n-        height: '300px'\r\n-      }}>\r\n-        <div style={{\r\n-          maxWidth: '800px',\r\n-          margin: '0 auto',\r\n-          position: 'relative',\r\n-          zIndex: 2\r\n-        }}>\r\n-          <h1 style={{\r\n-            fontSize: '3.5rem',\r\n-            fontWeight: '800',\r\n-            marginBottom: '0.5rem',\r\n-            textShadow: '2px 2px 4px rgba(0, 0, 0, 0.2)',\r\n-          }}>UrbanFlow</h1>\r\n-          <p style={{\r\n-            fontSize: '1.25rem',\r\n-            marginBottom: '2rem',\r\n-            opacity: 0.9,\r\n-          }}>Your seamless urban living companion</p>\r\n-          \r\n-          <form onSubmit={handleSearch} style={{\r\n-            display: 'flex',\r\n-            maxWidth: '600px',\r\n-            margin: '0 auto',\r\n-            borderRadius: '50px',\r\n-            overflow: 'hidden',\r\n-            boxShadow: '0 4px 10px rgba(0, 0, 0, 0.2)',\r\n-          }}>\r\n-            <input\r\n-              type=\"text\"\r\n-              placeholder=\"Search for restaurants, services...\"\r\n-              value={searchQuery}\r\n-              onChange={(e) => setSearchQuery(e.target.value)}\r\n-              style={{\r\n-                flex: 1,\r\n-                padding: '1rem 1.5rem',\r\n-                border: 'none',\r\n-                fontSize: '1rem',\r\n-                outline: 'none',\r\n-                backgroundColor: darkMode ? '#2d3748' : 'white',\r\n-                color: darkMode ? '#e2e8f0' : '#1e293b',\r\n-              }}\r\n-            />\r\n-            <button type=\"submit\" style={{\r\n-              backgroundColor: darkMode ? '#4a5568' : '#1e40af',\r\n-              color: 'white',\r\n-              border: 'none',\r\n-              padding: '0 1.5rem',\r\n-              cursor: 'pointer',\r\n-              fontSize: '1.25rem',\r\n-              transition: 'background-color 0.2s'\r\n-            }}>\r\n-              <span>üîç</span>\r\n-            </button>\r\n-          </form>\r\n-        </div>\r\n-        <UrbanBuddy darkMode={darkMode} onChatOpen={toggleChat} />\r\n-      </section>\r\n-\r\n-      {/* Services Grid */}\r\n-      <section style={{\r\n-        padding: '2rem 1rem',\r\n-        maxWidth: '1200px',\r\n-        margin: '0 auto',\r\n-      }}>\r\n-        <h2 style={{\r\n-          fontSize: '2rem',\r\n-          fontWeight: '700',\r\n-          marginBottom: '1.5rem',\r\n-          color: darkMode ? '#e2e8f0' : '#1e293b',\r\n-          textAlign: 'center',\r\n-        }}>What do you need today?</h2>\r\n-        <div style={{\r\n-          display: 'grid',\r\n-          gridTemplateColumns: 'repeat(auto-fit, minmax(250px, 1fr))',\r\n-          gap: '1.5rem',\r\n-          marginTop: '1rem',\r\n-        }}>\r\n-          {services.map((service) => (\r\n-            <div \r\n-              key={service.name} \r\n-              onClick={() => openServicePopup(service)}\r\n-              style={{ \r\n-                padding: '2rem 1.5rem',\r\n-                borderRadius: '16px',\r\n-                border: `2px solid ${service.color}`,\r\n-                textAlign: 'center',\r\n-                cursor: 'pointer',\r\n-                transition: 'transform 0.3s, box-shadow 0.3s',\r\n-                backgroundColor: darkMode \r\n-                  ? `${service.color}20` \r\n-                  : `${service.color}10`,\r\n-                ':hover': {\r\n-                  transform: 'translateY(-5px)',\r\n-                  boxShadow: '0 10px 20px rgba(0, 0, 0, 0.1)',\r\n-                }\r\n-              }}\r\n-            >\r\n-              <div style={{ \r\n-                fontSize: '3rem',\r\n-                marginBottom: '1rem',\r\n-                display: 'inline-block',\r\n-                animation: 'float 3s ease-in-out infinite'\r\n-              }}>{service.icon}</div>\r\n-              <h3 style={{fontSize: '1.5rem', fontWeight: '600', marginBottom: '0.5rem'}}>{service.name}</h3>\r\n-              <p style={{color: darkMode ? '#a0aec0' : '#64748b'}}>{service.desc}</p>\r\n-            </div>\r\n-          ))}\r\n-        </div>\r\n-      </section>\r\n-\r\n-      {/* Featured Section */}\r\n-      <section style={{\r\n-        padding: '2rem 1rem',\r\n-        maxWidth: '1200px',\r\n-        margin: '0 auto',\r\n-      }}>\r\n-        <h2 style={{\r\n-          fontSize: '2rem',\r\n-          fontWeight: '700',\r\n-          marginBottom: '1.5rem',\r\n-          color: darkMode ? '#e2e8f0' : '#1e293b',\r\n-          textAlign: 'center',\r\n-        }}>Quick Access</h2>\r\n-        <div style={{\r\n-          display: 'flex',\r\n-          justifyContent: 'center',\r\n-          gap: '1rem',\r\n-          flexWrap: 'wrap',\r\n-        }}>\r\n-          <button \r\n-            onClick={() => navigate('/transport?from=home&to=downtown')}\r\n-            style={{\r\n-              padding: '0.75rem 1.5rem',\r\n-              borderRadius: '50px',\r\n-              border: 'none',\r\n-              backgroundColor: darkMode ? '#2d3748' : '#e2e8f0',\r\n-              color: darkMode ? '#e2e8f0' : '#1e293b',\r\n-              fontWeight: '600',\r\n-              cursor: 'pointer',\r\n-              transition: 'all 0.2s',\r\n-              display: 'flex',\r\n-              alignItems: 'center',\r\n-              gap: '0.5rem',\r\n-              fontSize: '1rem'\r\n-            }}\r\n-          >\r\n-            üöï To Downtown\r\n-          </button>\r\n-          <button \r\n-            onClick={() => navigate('/food?category=fastfood')}\r\n-            style={{\r\n-              padding: '0.75rem 1.5rem',\r\n-              borderRadius: '50px',\r\n-              border: 'none',\r\n-              backgroundColor: darkMode ? '#2d3748' : '#e2e8f0',\r\n-              color: darkMode ? '#e2e8f0' : '#1e293b',\r\n-              fontWeight: '600',\r\n-              cursor: 'pointer',\r\n-              transition: 'all 0.2s',\r\n-              display: 'flex',\r\n-              alignItems: 'center',\r\n-              gap: '0.5rem',\r\n-              fontSize: '1rem'\r\n-            }}\r\n-          >\r\n-            üçü Fast Food\r\n-          </button>\r\n-          <button \r\n-            onClick={() => navigate('/food?category=coffee')}\r\n-            style={{\r\n-              padding: '0.75rem 1.5rem',\r\n-              borderRadius: '50px',\r\n-              border: 'none',\r\n-              backgroundColor: darkMode ? '#2d3748' : '#e2e8f0',\r\n-              color: darkMode ? '#e2e8f0' : '#1e293b',\r\n-              fontWeight: '600',\r\n-              cursor: 'pointer',\r\n-              transition: 'all 0.2s',\r\n-              display: 'flex',\r\n-              alignItems: 'center',\r\n-              gap: '0.5rem',\r\n-              fontSize: '1rem'\r\n-            }}\r\n-          >\r\n-            ‚òï Coffee Shops\r\n-          </button>\r\n-        </div>\r\n-      </section>\r\n-\r\n-      {/* Service Popup */}\r\n-      {selectedService && (\r\n-        <div style={{\r\n-          position: 'fixed',\r\n-          top: 0,\r\n-          left: 0,\r\n-          right: 0,\r\n-          bottom: 0,\r\n-          backgroundColor: 'rgba(0, 0, 0, 0.7)',\r\n-          display: 'flex',\r\n-          justifyContent: 'center',\r\n-          alignItems: 'center',\r\n-          zIndex: 1000,\r\n-        }} onClick={closePopup}>\r\n-          <div style={{\r\n-            backgroundColor: darkMode ? '#2d3748' : 'white',\r\n-            borderRadius: '16px',\r\n-            padding: '2rem',\r\n-            maxWidth: '500px',\r\n-            width: '90%',\r\n-            boxShadow: '0 10px 25px rgba(0, 0, 0, 0.2)',\r\n-            position: 'relative',\r\n-            border: darkMode ? '1px solid #4a5568' : '1px solid #e2e8f0',\r\n-          }} onClick={(e) => e.stopPropagation()}>\r\n-            <button style={{\r\n-              position: 'absolute',\r\n-              top: '1rem',\r\n-              right: '1rem',\r\n-              background: 'none',\r\n-              border: 'none',\r\n-              fontSize: '1.5rem',\r\n-              cursor: 'pointer',\r\n-              color: darkMode ? '#a0aec0' : '#64748b',\r\n-            }} onClick={closePopup}>√ó</button>\r\n-            <div style={{ \r\n-              display: 'flex', \r\n-              alignItems: 'center', \r\n-              gap: '1rem',\r\n-              marginBottom: '1.5rem'\r\n-            }}>\r\n-              <span style={{ fontSize: '2.5rem', animation: 'float 3s ease-in-out infinite' }}>{selectedService.icon}</span>\r\n-              <h3 style={{fontSize: '1.8rem', fontWeight: '700', marginBottom: '1rem', color: darkMode ? '#e2e8f0' : '#1e293b'}}>{selectedService.name}</h3>\r\n-            </div>\r\n-            <p style={{color: darkMode ? '#a0aec0' : '#64748b', fontSize: '1.1rem', lineHeight: '1.6', marginBottom: '2rem'}}>{selectedService.details}</p>\r\n-            <button \r\n-              style={{ \r\n-                padding: '0.75rem 1.5rem',\r\n-                borderRadius: '8px',\r\n-                border: 'none',\r\n-                backgroundColor: selectedService.color,\r\n-                color: 'white',\r\n-                fontWeight: '600',\r\n-                cursor: 'pointer',\r\n-                transition: 'all 0.2s',\r\n-                fontSize: '1rem'\r\n-              }}\r\n-              onClick={() => {\r\n-                navigate(selectedService.path);\r\n-                closePopup();\r\n-              }}\r\n-            >\r\n-              Explore {selectedService.name}\r\n-            </button>\r\n-          </div>\r\n-        </div>\r\n-      )}\r\n-\r\n-      {/* Achievements */}\r\n-      {achievements.map(achievement => (\r\n-        <div key={achievement.id} style={{\r\n-          position: 'fixed',\r\n-          bottom: '20px',\r\n-          right: '20px',\r\n-          background: darkMode ? '#2d3748' : 'white',\r\n-          color: darkMode ? 'white' : '#1e293b',\r\n-          padding: '1rem',\r\n-          borderRadius: '12px',\r\n-          boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',\r\n-          display: 'flex',\r\n-          alignItems: 'center',\r\n-          gap: '0.5rem',\r\n-          zIndex: 1000,\r\n-          animation: 'slideIn 0.5s forwards, fadeOut 0.5s forwards 2.5s'\r\n-        }}>\r\n-          <span style={{fontSize: '1.5rem'}}>{achievement.icon}</span>\r\n-          <span>{achievement.title}</span>\r\n-        </div>\r\n-      ))}\r\n-\r\n-      {/* Chat Modal */}\r\n-      {showChat && <ChatModal darkMode={darkMode} onClose={toggleChat} />}\r\n-\r\n-      {/* Footer with copyright */}\r\n-      <footer style={{\r\n-        textAlign: 'center',\r\n-        padding: '2rem 1rem',\r\n-        color: darkMode ? '#a0aec0' : '#64748b',\r\n-        fontSize: '0.9rem',\r\n-        marginTop: '2rem'\r\n-      }}>\r\n-        <p>¬© {new Date().getFullYear()} UrbanFlow - Created by Nick</p>\r\n-      </footer>\r\n-    </div>\r\n-  );\r\n-};\n-import { useState, useEffect, useRef } from 'react';\r\n-import { useNavigate } from 'react-router-dom';\r\n-\r\n-// UrbanBuddy AI Assistant Component\r\n-const UrbanBuddy = ({ darkMode, onChatOpen }) => {\r\n-  const [position, setPosition] = useState({ x: 20, y: 50 });\r\n-  const [expression, setExpression] = useState('üòä');\r\n-  const [direction, setDirection] = useState(1);\r\n-  const [costume, setCostume] = useState(null);\r\n-  const [isActive, setIsActive] = useState(false);\r\n-  const botRef = useRef(null);\r\n-  const animationRef = useRef(null);\r\n-  const lastInteractionTime = useRef(Date.now());\r\n-\r\n-  // Seasonal costumes\r\n-  useEffect(() => {\r\n-    const today = new Date();\r\n-    const month = today.getMonth() + 1;\r\n-    \r\n-    if (month === 12) setCostume('üéÑ');\r\n-    else if (month === 10) setCostume('üéÉ');\r\n-    else if (month === 2) setCostume('üíù');\r\n-    else if (month === 4) setCostume('üå∏');\r\n-    else setCostume(null);\r\n-  }, []);\r\n-\r\n-  // Make the bot wander with more dynamic movement\r\n-  useEffect(() => {\r\n-    const moveInterval = setInterval(() => {\r\n-      setPosition(prev => {\r\n-        const now = Date.now();\r\n-        const timeSinceLastInteraction = now - lastInteractionTime.current;\r\n-        \r\n-        // More active movement right after interaction\r\n-        const speedMultiplier = timeSinceLastInteraction < 5000 ? 2 : 1;\r\n-        \r\n-        let newX = prev.x + (3 * direction * speedMultiplier);\r\n-        let newY = prev.y + (Math.random() * 6 - 3);\r\n-        \r\n-        // Bounce off edges\r\n-        if (newX > window.innerWidth - 80) {\r\n-          setDirection(-1);\r\n-          triggerAnimation('spin');\r\n+      // Using Hugging Face's free inference API (GPT-2 model)\r\n+      const response = await fetch(\r\n+        'https://api-inference.huggingface.co/models/gpt2',\r\n+        {\r\n+          method: \"POST\",\r\n+          headers: { \"Content-Type\": \"application/json\" },\r\n+          body: JSON.stringify({ \r\n+            inputs: `You are UrbanBuddy, a friendly AI assistant for urban living. \r\n+            Provide helpful, concise answers about city life, transportation, \r\n+            and urban services. Keep responses under 2 sentences.\r\n+            \r\n+            User: ${userMessage}\r\n+            Assistant:`\r\n+          }),\r\n         }\r\n-        if (newX < 20) {\r\n-          setDirection(1);\r\n-          triggerAnimation('spin');\r\n-        }\r\n-        if (newY < 20) newY = 20;\r\n-        if (newY > window.innerHeight - 100) newY = window.innerHeight - 100;\r\n-        \r\n-        return { x: newX, y: newY };\r\n-      });\r\n-    }, 100);\r\n+      );\r\n \r\n-    return () => clearInterval(moveInterval);\r\n-  }, [direction]);\r\n-\r\n-  // Change expressions randomly with more variety\r\n-  useEffect(() => {\r\n-    const expressions = ['üòä', 'ü§î', 'üòÆ', 'üòé', 'üëã', 'ü§ñ', '‚ú®', 'üåü'];\r\n-    const expressionInterval = setInterval(() => {\r\n-      if (!isActive) {\r\n-        setExpression(expressions[Math.floor(Math.random() * expressions.length)]);\r\n-        // Random animations when idle\r\n-        if (Math.random() > 0.8) {\r\n-          triggerAnimation(['bounce', 'spin', 'wobble'][Math.floor(Math.random() * 3)]);\r\n-        }\r\n-      }\r\n-    }, 3000);\r\n-    return () => clearInterval(expressionInterval);\r\n-  }, [isActive]);\r\n-\r\n-  const triggerAnimation = (type) => {\r\n-    if (animationRef.current) {\r\n-      clearTimeout(animationRef.current);\r\n-    }\r\n-    \r\n-    const botElement = botRef.current;\r\n-    if (!botElement) return;\r\n-    \r\n-    botElement.style.animation = 'none';\r\n-    void botElement.offsetWidth; // Trigger reflow\r\n-    \r\n-    switch(type) {\r\n-      case 'spin':\r\n-        botElement.style.animation = 'spin 1s ease';\r\n-        break;\r\n-      case 'bounce':\r\n-        botElement.style.animation = 'bounce 0.5s ease';\r\n-        break;\r\n-      case 'wobble':\r\n-        botElement.style.animation = 'wobble 0.8s ease';\r\n-        break;\r\n-      default:\r\n-        botElement.style.animation = '';\r\n-    }\r\n-    \r\n-    animationRef.current = setTimeout(() => {\r\n-      if (botElement) botElement.style.animation = '';\r\n-    }, 1000);\r\n-  };\r\n-\r\n-  const handleClick = () => {\r\n-    lastInteractionTime.current = Date.now();\r\n-    setIsActive(true);\r\n-    triggerAnimation('bounce');\r\n-    setExpression('üí°');\r\n-    \r\n-    // Trigger chat opening in parent component\r\n-    onChatOpen();\r\n-    \r\n-    // Return to normal after a delay\r\n-    setTimeout(() => {\r\n-      setIsActive(false);\r\n-    }, 3000);\r\n-  };\r\n-\r\n-  // Custom animations\r\n-  const animations = `\r\n-    @keyframes spin {\r\n-      0% { transform: rotate(0deg) scaleX(${direction}); }\r\n-      100% { transform: rotate(360deg) scaleX(${direction}); }\r\n-    }\r\n-    @keyframes bounce {\r\n-      0%, 100% { transform: translateY(0) scaleX(${direction}); }\r\n-      50% { transform: translateY(-20px) scaleX(${direction}); }\r\n-    }\r\n-    @keyframes wobble {\r\n-      0%, 100% { transform: rotate(0deg) scaleX(${direction}); }\r\n-      25% { transform: rotate(5deg) scaleX(${direction}); }\r\n-      75% { transform: rotate(-5deg) scaleX(${direction}); }\r\n-    }\r\n-    @keyframes float {\r\n-      0% { transform: translateY(0px) scaleX(${direction}); }\r\n-      50% { transform: translateY(-10px) scaleX(${direction}); }\r\n-      100% { transform: translateY(0px) scaleX(${direction}); }\r\n-    }\r\n-  `;\r\n-\r\n-  return (\r\n-    <>\r\n-      <style>{animations}</style>\r\n-      <div \r\n-        ref={botRef}\r\n-        onClick={handleClick}\r\n-        style={{\r\n-          position: 'fixed',\r\n-          left: `${position.x}px`,\r\n-          top: `${position.y}px`,\r\n-          fontSize: '2.5rem',\r\n-          cursor: 'pointer',\r\n-          transition: 'all 0.3s ease',\r\n-          transform: `scaleX(${direction})`,\r\n-          zIndex: 100,\r\n-          filter: darkMode \r\n-            ? 'drop-shadow(0 0 8px rgba(255,255,255,0.7))' \r\n-            : 'drop-shadow(0 0 8px rgba(0,0,0,0.3))',\r\n-          userSelect: 'none',\r\n-          animation: 'float 4s ease-in-out infinite'\r\n-        }}\r\n-      >\r\n-        <div style={{ \r\n-          position: 'relative',\r\n-          display: 'flex',\r\n-          flexDirection: 'column',\r\n-          alignItems: 'center'\r\n-        }}>\r\n-          {/* Bot icon with costume */}\r\n-          <div style={{\r\n-            position: 'relative',\r\n-            width: '60px',\r\n-            height: '60px',\r\n-            backgroundColor: darkMode ? '#4a5568' : '#3b82f6',\r\n-            borderRadius: '50%',\r\n-            display: 'flex',\r\n-            justifyContent: 'center',\r\n-            alignItems: 'center',\r\n-            color: 'white'\r\n-          }}>\r\n-            <span style={{ fontSize: '1.8rem' }}>{expression}</span>\r\n-            {costume && (\r\n-              <span style={{\r\n-                position: 'absolute',\r\n-                top: '-15px',\r\n-                right: '-10px',\r\n-                fontSize: '1.5rem',\r\n-                transform: 'rotate(15deg)'\r\n-              }}>\r\n-                {costume}\r\n-              </span>\r\n-            )}\r\n-          </div>\r\n-        </div>\r\n-      </div>\r\n-    </>\r\n-  );\r\n-};\r\n-\r\n-// Chat Modal Component with Functional API Connection\r\n-const ChatModal = ({ darkMode, onClose }) => {\r\n-  const [messages, setMessages] = useState([\r\n-    { text: \"Hello! I'm UrbanBuddy, your AI assistant for urban living. How can I help you today?\", sender: 'bot' }\r\n-  ]);\r\n-  const [inputValue, setInputValue] = useState('');\r\n-  const [isTyping, setIsTyping] = useState(false);\r\n-  const chatEndRef = useRef(null);\r\n-  const inputRef = useRef(null);\r\n-\r\n-  // Auto-scroll to bottom and focus input\r\n-  useEffect(() => {\r\n-    chatEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n-    inputRef.current?.focus();\r\n-  }, [messages]);\r\n-\r\n-  // Function to call the AI API\r\n-  const generateResponse = async (userMessage) => {\r\n-    setIsTyping(true);\r\n-    \r\n-    try {\r\n-      // Using a free AI API endpoint (no API key needed)\r\n-      const response = await fetch('https://api.openai.com/v1/chat/completions', {\r\n-        method: \"POST\",\r\n-        headers: { \r\n-          \"Content-Type\": \"application/json\",\r\n-          // Note: In a production app, you should proxy this through your backend\r\n-          // to keep your API key secure. This is just for demonstration.\r\n-          \"Authorization\": `Bearer YOUR_OPENAI_API_KEY` \r\n-        },\r\n-        body: JSON.stringify({\r\n-          model: \"gpt-3.5-turbo\",\r\n-          messages: [\r\n-            {\r\n-              role: \"system\",\r\n-              content: \"You are UrbanBuddy, a friendly AI assistant for urban living. \" +\r\n-                \"Provide helpful, concise answers (1-2 sentences) about city life, \" +\r\n-                \"transportation, food delivery, local services, and urban living tips. \" +\r\n-                \"Keep responses practical and urban-focused.\"\r\n-            },\r\n-            {\r\n-              role: \"user\",\r\n-              content: userMessage\r\n-            }\r\n-          ],\r\n-          temperature: 0.7,\r\n-          max_tokens: 150\r\n-        })\r\n-      });\r\n+      if (!response.ok) throw new Error(\"API request failed\");\r\n       \r\n-      if (!response.ok) {\r\n-        throw new Error(`API request failed with status ${response.status}`);\r\n-      }\r\n-      \r\n       const data = await response.json();\r\n-      const aiResponse = data.choices?.[0]?.message?.content || \r\n-        \"I'm having trouble thinking of a response right now. Could you try asking something else?\";\r\n+      const aiResponse = data[0]?.generated_text?.split('Assistant:')[1]?.trim() || \r\n+        \"I'm having trouble responding. Could you ask something else?\";\r\n       \r\n-      setMessages(prev => [...prev, { \r\n-        text: aiResponse, \r\n-        sender: 'bot' \r\n-      }]);\r\n+      setMessages(prev => [...prev, { text: aiResponse, sender: 'bot' }]);\r\n     } catch (error) {\r\n       console.error(\"API error:\", error);\r\n-      // Fallback to a local AI response if API fails\r\n-      const fallbackResponses = [\r\n-        \"I'm currently experiencing high demand. Try again in a moment!\",\r\n-        \"Let me think differently about that... Can you rephrase your question?\",\r\n-        \"I specialize in urban living tips. Ask me about transportation, food, or city services!\",\r\n-        \"I'm having connection issues, but I'd love to help with your urban living questions!\"\r\n+      const fallbacks = [\r\n+        \"I'm currently busy helping others. Try again in a moment!\",\r\n+        \"Let me think differently about that... Can you rephrase?\",\r\n+        \"I specialize in urban living tips. Ask me about city services!\",\r\n       ];\r\n       setMessages(prev => [...prev, { \r\n-        text: fallbackResponses[Math.floor(Math.random() * fallbackResponses.length)], \r\n+        text: fallbacks[Math.floor(Math.random() * fallbacks.length)], \r\n         sender: 'bot' \r\n       }]);\r\n     } finally {\r\n       setIsTyping(false);\r\n@@ -1140,14 +237,11 @@\n \r\n   const handleSendMessage = async (e) => {\r\n     e.preventDefault();\r\n     if (inputValue.trim() && !isTyping) {\r\n-      // Add user message\r\n       const userMessage = inputValue.trim();\r\n       setMessages(prev => [...prev, { text: userMessage, sender: 'user' }]);\r\n       setInputValue('');\r\n-      \r\n-      // Generate AI response\r\n       await generateResponse(userMessage);\r\n     }\r\n   };\r\n \r\n@@ -1179,15 +273,9 @@\n       }}>\r\n         <div style={{ display: 'flex', alignItems: 'center', gap: '0.5rem' }}>\r\n           <span style={{ fontSize: '1.5rem' }}>ü§ñ</span>\r\n           <h3 style={{ margin: 0 }}>UrbanBuddy AI</h3>\r\n-          {isTyping && (\r\n-            <span style={{ \r\n-              fontSize: '0.8rem',\r\n-              marginLeft: '0.5rem',\r\n-              opacity: 0.8\r\n-            }}>typing...</span>\r\n-          )}\r\n+          {isTyping && <span style={{ fontSize: '0.8rem', marginLeft: '0.5rem', opacity: 0.8 }}>typing...</span>}\r\n         </div>\r\n         <button \r\n           onClick={onClose}\r\n           style={{\r\n@@ -1217,18 +305,13 @@\n             style={{\r\n               alignSelf: msg.sender === 'user' ? 'flex-end' : 'flex-start',\r\n               maxWidth: '80%',\r\n               padding: '0.6rem 1rem',\r\n-              borderRadius: msg.sender === 'user' \r\n-                ? '18px 18px 0 18px' \r\n-                : '18px 18px 18px 0',\r\n+              borderRadius: msg.sender === 'user' ? '18px 18px 0 18px' : '18px 18px 18px 0',\r\n               backgroundColor: msg.sender === 'user'\r\n                 ? (darkMode ? '#4a5568' : '#3b82f6')\r\n                 : (darkMode ? '#4a5568' : '#e2e8f0'),\r\n               color: msg.sender === 'user' ? 'white' : (darkMode ? 'white' : '#1e293b'),\r\n-              animation: msg.sender === 'bot' && index === messages.length - 1 \r\n-                ? 'fadeIn 0.3s ease' \r\n-                : 'none'\r\n             }}\r\n           >\r\n             {msg.text}\r\n           </div>\r\n@@ -1243,13 +326,12 @@\n         display: 'flex',\r\n         gap: '0.5rem'\r\n       }}>\r\n         <input\r\n-          ref={inputRef}\r\n           type=\"text\"\r\n           value={inputValue}\r\n           onChange={(e) => setInputValue(e.target.value)}\r\n-          placeholder=\"Ask me about urban living...\"\r\n+          placeholder=\"Ask about urban living...\"\r\n           disabled={isTyping}\r\n           style={{\r\n             flex: 1,\r\n             padding: '0.6rem 1rem',\r\n@@ -1257,9 +339,8 @@\n             border: darkMode ? '1px solid #4a5568' : '1px solid #e2e8f0',\r\n             backgroundColor: darkMode ? '#2d3748' : 'white',\r\n             color: darkMode ? 'white' : '#1e293b',\r\n             outline: 'none',\r\n-            opacity: isTyping ? 0.7 : 1\r\n           }}\r\n         />\r\n         <button \r\n           type=\"submit\"\r\n@@ -1332,53 +413,34 @@\n   ];\r\n \r\n   // Check for achievements\r\n   useEffect(() => {\r\n-    if (orderCount === 1) {\r\n-      addAchievement('First Order!', 'üéâ');\r\n-    } else if (orderCount === 5) {\r\n-      addAchievement('Regular Customer!', 'üèÜ');\r\n-    } else if (orderCount === 10) {\r\n-      addAchievement('Super User!', 'üåü');\r\n-    }\r\n+    if (orderCount === 1) addAchievement('First Order!', 'üéâ');\r\n+    else if (orderCount === 5) addAchievement('Regular Customer!', 'üèÜ');\r\n+    else if (orderCount === 10) addAchievement('Super User!', 'üåü');\r\n   }, [orderCount]);\r\n \r\n   const addAchievement = (title, icon) => {\r\n     if (!achievements.some(a => a.title === title)) {\r\n       const newAchievement = { title, icon, id: Date.now() };\r\n       setAchievements(prev => [...prev, newAchievement]);\r\n-      \r\n-      // Auto-hide achievement after 3 seconds\r\n-      setTimeout(() => {\r\n-        setAchievements(prev => prev.filter(a => a.id !== newAchievement.id));\r\n-      }, 3000);\r\n+      setTimeout(() => setAchievements(prev => prev.filter(a => a.id !== newAchievement.id)), 3000);\r\n     }\r\n   };\r\n \r\n   const handleSearch = (e) => {\r\n     e.preventDefault();\r\n-    if (searchQuery.trim()) {\r\n-      navigate(`/food?search=${encodeURIComponent(searchQuery)}`);\r\n-    }\r\n+    if (searchQuery.trim()) navigate(`/food?search=${encodeURIComponent(searchQuery)}`);\r\n   };\r\n \r\n-  const toggleDarkMode = () => {\r\n-    setDarkMode(!darkMode);\r\n-  };\r\n-\r\n+  const toggleDarkMode = () => setDarkMode(!darkMode);\r\n   const openServicePopup = (service) => {\r\n     setSelectedService(service);\r\n     setOrderCount(prev => prev + 1);\r\n   };\r\n+  const closePopup = () => setSelectedService(null);\r\n+  const toggleChat = () => setShowChat(!showChat);\r\n \r\n-  const closePopup = () => {\r\n-    setSelectedService(null);\r\n-  };\r\n-\r\n-  const toggleChat = () => {\r\n-    setShowChat(!showChat);\r\n-  };\r\n-\r\n   return (\r\n     <div style={{\r\n       backgroundColor: darkMode ? '#1a202c' : '#f8fafc',\r\n       minHeight: '100vh',\r\n@@ -1386,9 +448,9 @@\n       color: darkMode ? '#e2e8f0' : '#1e293b',\r\n       transition: 'all 0.3s ease',\r\n       position: 'relative'\r\n     }}>\r\n-      {/* Theme Toggle Button */}\r\n+      {/* Theme Toggle */}\r\n       <button \r\n         onClick={toggleDarkMode} \r\n         style={{\r\n           position: 'fixed',\r\n@@ -1406,14 +468,13 @@\n           transition: 'all 0.3s ease',\r\n           boxShadow: '0 2px 5px rgba(0, 0, 0, 0.2)',\r\n           zIndex: 100\r\n         }}\r\n-        aria-label={darkMode ? 'Switch to light mode' : 'Switch to dark mode'}\r\n       >\r\n         {darkMode ? '‚òÄÔ∏è' : 'üåô'}\r\n       </button>\r\n       \r\n-      {/* Hero Section with UrbanBuddy */}\r\n+      {/* Hero Section */}\r\n       <section style={{\r\n         background: darkMode \r\n           ? 'linear-gradient(135deg, #2d3748 0%, #1a202c 100%)' \r\n           : 'linear-gradient(135deg, #6b46c1 0%, #3b82f6 100%)',\r\n@@ -1431,19 +492,10 @@\n           margin: '0 auto',\r\n           position: 'relative',\r\n           zIndex: 2\r\n         }}>\r\n-          <h1 style={{\r\n-            fontSize: '3.5rem',\r\n-            fontWeight: '800',\r\n-            marginBottom: '0.5rem',\r\n-            textShadow: '2px 2px 4px rgba(0, 0, 0, 0.2)',\r\n-          }}>UrbanFlow</h1>\r\n-          <p style={{\r\n-            fontSize: '1.25rem',\r\n-            marginBottom: '2rem',\r\n-            opacity: 0.9,\r\n-          }}>Your seamless urban living companion</p>\r\n+          <h1 style={{ fontSize: '3.5rem', fontWeight: '800', marginBottom: '0.5rem' }}>UrbanFlow</h1>\r\n+          <p style={{ fontSize: '1.25rem', marginBottom: '2rem', opacity: 0.9 }}>Your seamless urban living companion</p>\r\n           \r\n           <form onSubmit={handleSearch} style={{\r\n             display: 'flex',\r\n             maxWidth: '600px',\r\n@@ -1473,9 +525,8 @@\n               border: 'none',\r\n               padding: '0 1.5rem',\r\n               cursor: 'pointer',\r\n               fontSize: '1.25rem',\r\n-              transition: 'background-color 0.2s'\r\n             }}>\r\n               <span>üîç</span>\r\n             </button>\r\n           </form>\r\n@@ -1483,20 +534,12 @@\n         <UrbanBuddy darkMode={darkMode} onChatOpen={toggleChat} />\r\n       </section>\r\n \r\n       {/* Services Grid */}\r\n-      <section style={{\r\n-        padding: '2rem 1rem',\r\n-        maxWidth: '1200px',\r\n-        margin: '0 auto',\r\n-      }}>\r\n-        <h2 style={{\r\n-          fontSize: '2rem',\r\n-          fontWeight: '700',\r\n-          marginBottom: '1.5rem',\r\n-          color: darkMode ? '#e2e8f0' : '#1e293b',\r\n-          textAlign: 'center',\r\n-        }}>What do you need today?</h2>\r\n+      <section style={{ padding: '2rem 1rem', maxWidth: '1200px', margin: '0 auto' }}>\r\n+        <h2 style={{ fontSize: '2rem', fontWeight: '700', marginBottom: '1.5rem', textAlign: 'center' }}>\r\n+          What do you need today?\r\n+        </h2>\r\n         <div style={{\r\n           display: 'grid',\r\n           gridTemplateColumns: 'repeat(auto-fit, minmax(250px, 1fr))',\r\n           gap: '1.5rem',\r\n@@ -1504,3160 +547,39 @@\n         }}>\r\n           {services.map((service) => (\r\n             <div \r\n               key={service.name} \r\n-              style={{ \r\n-                padding: '2rem 1.5rem',\r\n-                borderRadius: '16px',\r\n-                border: `2px solid ${service.color}`,\r\n-                textAlign: 'center',\r\n-                cursor: 'pointer',\r\n-                transition: 'transform 0.3s, box-shadow 0.3s',\r\n-                backgroundColor: darkMode \r\n-                  ? `${service.color}20` \r\n-                  : `${service.color}10`,\r\n-                ':hover': {\r\n-                  transform: 'translateY(-5px)',\r\n-                  boxShadow: '0 10px 20px rgba(0, 0, 0, 0.1)',\r\n-                }\r\n-              }}\r\n               onClick={() => openServicePopup(service)}\r\n-            >\r\n-              <div style={{ \r\n-                fontSize: '3rem',\r\n-                marginBottom: '1rem',\r\n-                display: 'inline-block',\r\n-                animation: 'float 3s ease-in-out infinite'\r\n-              }}>{service.icon}</div>\r\n-              <h3 style={{fontSize: '1.5rem', fontWeight: '600', marginBottom: '0.5rem'}}>{service.name}</h3>\r\n-              <p style={{color: darkMode ? '#a0aec0' : '#64748b'}}>{service.desc}</p>\r\n-            </div>\r\n-          ))}\r\n-        </div>\r\n-      </section>\r\n-\r\n-      {/* Featured Section */}\r\n-      <section style={{\r\n-        padding: '2rem 1rem',\r\n-        maxWidth: '1200px',\r\n-        margin: '0 auto',\r\n-      }}>\r\n-        <h2 style={{\r\n-          fontSize: '2rem',\r\n-          fontWeight: '700',\r\n-          marginBottom: '1.5rem',\r\n-          color: darkMode ? '#e2e8f0' : '#1e293b',\r\n-          textAlign: 'center',\r\n-        }}>Quick Access</h2>\r\n-        <div style={{\r\n-          display: 'flex',\r\n-          justifyContent: 'center',\r\n-          gap: '1rem',\r\n-          flexWrap: 'wrap',\r\n-        }}>\r\n-          <button \r\n-            onClick={() => navigate('/transport?from=home&to=downtown')}\r\n-            style={{\r\n-              padding: '0.75rem 1.5rem',\r\n-              borderRadius: '50px',\r\n-              border: 'none',\r\n-              backgroundColor: darkMode ? '#2d3748' : '#e2e8f0',\r\n-              color: darkMode ? '#e2e8f0' : '#1e293b',\r\n-              fontWeight: '600',\r\n-              cursor: 'pointer',\r\n-              transition: 'all 0.2s',\r\n-              display: 'flex',\r\n-              alignItems: 'center',\r\n-              gap: '0.5rem',\r\n-              fontSize: '1rem'\r\n-            }}\r\n-          >\r\n-            üöï To Downtown\r\n-          </button>\r\n-          <button \r\n-            onClick={() => navigate('/food?category=fastfood')}\r\n-            style={{\r\n-              padding: '0.75rem 1.5rem',\r\n-              borderRadius: '50px',\r\n-              border: 'none',\r\n-              backgroundColor: darkMode ? '#2d3748' : '#e2e8f0',\r\n-              color: darkMode ? '#e2e8f0' : '#1e293b',\r\n-              fontWeight: '600',\r\n-              cursor: 'pointer',\r\n-              transition: 'all 0.2s',\r\n-              display: 'flex',\r\n-              alignItems: 'center',\r\n-              gap: '0.5rem',\r\n-              fontSize: '1rem'\r\n-            }}\r\n-          >\r\n-            üçü Fast Food\r\n-          </button>\r\n-          <button \r\n-            onClick={() => navigate('/food?category=coffee')}\r\n-            style={{\r\n-              padding: '0.75rem 1.5rem',\r\n-              borderRadius: '50px',\r\n-              border: 'none',\r\n-              backgroundColor: darkMode ? '#2d3748' : '#e2e8f0',\r\n-              color: darkMode ? '#e2e8f0' : '#1e293b',\r\n-              fontWeight: '600',\r\n-              cursor: 'pointer',\r\n-              transition: 'all 0.2s',\r\n-              display: 'flex',\r\n-              alignItems: 'center',\r\n-              gap: '0.5rem',\r\n-              fontSize: '1rem'\r\n-            }}\r\n-          >\r\n-            ‚òï Coffee Shops\r\n-          </button>\r\n-        </div>\r\n-      </section>\r\n-\r\n-      {/* Service Popup */}\r\n-      {selectedService && (\r\n-        <div style={{\r\n-          position: 'fixed',\r\n-          top: 0,\r\n-          left: 0,\r\n-          right: 0,\r\n-          bottom: 0,\r\n-          backgroundColor: 'rgba(0, 0, 0, 0.7)',\r\n-          display: 'flex',\r\n-          justifyContent: 'center',\r\n-          alignItems: 'center',\r\n-          zIndex: 1000,\r\n-        }} onClick={closePopup}>\r\n-          <div style={{\r\n-            backgroundColor: darkMode ? '#2d3748' : 'white',\r\n-            borderRadius: '16px',\r\n-            padding: '2rem',\r\n-            maxWidth: '500px',\r\n-            width: '90%',\r\n-            boxShadow: '0 10px 25px rgba(0, 0, 0, 0.2)',\r\n-            position: 'relative',\r\n-            border: darkMode ? '1px solid #4a5568' : '1px solid #e2e8f0',\r\n-          }} onClick={(e) => e.stopPropagation()}>\r\n-            <button style={{\r\n-              position: 'absolute',\r\n-              top: '1rem',\r\n-              right: '1rem',\r\n-              background: 'none',\r\n-              border: 'none',\r\n-              fontSize: '1.5rem',\r\n-              cursor: 'pointer',\r\n-              color: darkMode ? '#a0aec0' : '#64748b',\r\n-            }} onClick={closePopup}>√ó</button>\r\n-            <div style={{ \r\n-              display: 'flex', \r\n-              alignItems: 'center', \r\n-              gap: '1rem',\r\n-              marginBottom: '1.5rem'\r\n-            }}>\r\n-              <span style={{ fontSize: '2.5rem', animation: 'float 3s ease-in-out infinite' }}>{selectedService.icon}</span>\r\n-              <h3 style={{fontSize: '1.8rem', fontWeight: '700', marginBottom: '1rem', color: darkMode ? '#e2e8f0' : '#1e293b'}}>{selectedService.name}</h3>\r\n-            </div>\r\n-            <p style={{color: darkMode ? '#a0aec0' : '#64748b', fontSize: '1.1rem', lineHeight: '1.6', marginBottom: '2rem'}}>{selectedService.details}</p>\r\n-            <button \r\n               style={{ \r\n-                padding: '0.75rem 1.5rem',\r\n-                borderRadius: '8px',\r\n-                border: 'none',\r\n-                backgroundColor: selectedService.color,\r\n-                color: 'white',\r\n-                fontWeight: '600',\r\n-                cursor: 'pointer',\r\n-                transition: 'all 0.2s',\r\n-                fontSize: '1rem'\r\n-              }}\r\n-              onClick={() => {\r\n-                navigate(selectedService.path);\r\n-                closePopup();\r\n-              }}\r\n-            >\r\n-              Explore {selectedService.name}\r\n-            </button>\r\n-          </div>\r\n-        </div>\r\n-      )}\r\n-\r\n-      {/* Achievements */}\r\n-      {achievements.map(achievement => (\r\n-        <div key={achievement.id} style={{\r\n-          position: 'fixed',\r\n-          bottom: '20px',\r\n-          right: '20px',\r\n-          background: darkMode ? '#2d3748' : 'white',\r\n-          color: darkMode ? 'white' : '#1e293b',\r\n-          padding: '1rem',\r\n-          borderRadius: '12px',\r\n-          boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',\r\n-          display: 'flex',\r\n-          alignItems: 'center',\r\n-          gap: '0.5rem',\r\n-          zIndex: 1000,\r\n-          animation: 'slideIn 0.5s forwards, fadeOut 0.5s forwards 2.5s'\r\n-        }}>\r\n-          <span style={{fontSize: '1.5rem'}}>{achievement.icon}</span>\r\n-          <span>{achievement.title}</span>\r\n-        </div>\r\n-      ))}\r\n-\r\n-      {/* Chat Modal */}\r\n-      {showChat && <ChatModal darkMode={darkMode} onClose={toggleChat} />}\r\n-\r\n-      {/* Footer with copyright */}\r\n-      <footer style={{\r\n-        textAlign: 'center',\r\n-        padding: '2rem 1rem',\r\n-        color: darkMode ? '#a0aec0' : '#64748b',\r\n-        fontSize: '0.9rem',\r\n-        marginTop: '2rem'\r\n-      }}>\r\n-        <p>¬© {new Date().getFullYear()} UrbanFlow - Created by Nick</p>\r\n-      </footer>\r\n-    </div>\r\n-  );\r\n-};\n-import { useState, useEffect, useRef } from 'react';\r\n-import { useNavigate } from 'react-router-dom';\r\n-\r\n-// UrbanBuddy AI Assistant Component\r\n-const UrbanBuddy = ({ darkMode, onChatOpen }) => {\r\n-  const [position, setPosition] = useState({ x: 20, y: 50 });\r\n-  const [expression, setExpression] = useState('üòä');\r\n-  const [direction, setDirection] = useState(1);\r\n-  const [costume, setCostume] = useState(null);\r\n-  const [isActive, setIsActive] = useState(false);\r\n-  const botRef = useRef(null);\r\n-  const animationRef = useRef(null);\r\n-  const lastInteractionTime = useRef(Date.now());\r\n-\r\n-  // Seasonal costumes\r\n-  useEffect(() => {\r\n-    const today = new Date();\r\n-    const month = today.getMonth() + 1;\r\n-    \r\n-    if (month === 12) setCostume('üéÑ');\r\n-    else if (month === 10) setCostume('üéÉ');\r\n-    else if (month === 2) setCostume('üíù');\r\n-    else if (month === 4) setCostume('üå∏');\r\n-    else setCostume(null);\r\n-  }, []);\r\n-\r\n-  // Make the bot wander with more dynamic movement\r\n-  useEffect(() => {\r\n-    const moveInterval = setInterval(() => {\r\n-      setPosition(prev => {\r\n-        const now = Date.now();\r\n-        const timeSinceLastInteraction = now - lastInteractionTime.current;\r\n-        \r\n-        // More active movement right after interaction\r\n-        const speedMultiplier = timeSinceLastInteraction < 5000 ? 2 : 1;\r\n-        \r\n-        let newX = prev.x + (3 * direction * speedMultiplier);\r\n-        let newY = prev.y + (Math.random() * 6 - 3);\r\n-        \r\n-        // Bounce off edges\r\n-        if (newX > window.innerWidth - 80) {\r\n-          setDirection(-1);\r\n-          triggerAnimation('spin');\r\n-        }\r\n-        if (newX < 20) {\r\n-          setDirection(1);\r\n-          triggerAnimation('spin');\r\n-        }\r\n-        if (newY < 20) newY = 20;\r\n-        if (newY > window.innerHeight - 100) newY = window.innerHeight - 100;\r\n-        \r\n-        return { x: newX, y: newY };\r\n-      });\r\n-    }, 100);\r\n-\r\n-    return () => clearInterval(moveInterval);\r\n-  }, [direction]);\r\n-\r\n-  // Change expressions randomly with more variety\r\n-  useEffect(() => {\r\n-    const expressions = ['üòä', 'ü§î', 'üòÆ', 'üòé', 'üëã', 'ü§ñ', '‚ú®', 'üåü'];\r\n-    const expressionInterval = setInterval(() => {\r\n-      if (!isActive) {\r\n-        setExpression(expressions[Math.floor(Math.random() * expressions.length)]);\r\n-        // Random animations when idle\r\n-        if (Math.random() > 0.8) {\r\n-          triggerAnimation(['bounce', 'spin', 'wobble'][Math.floor(Math.random() * 3)]);\r\n-        }\r\n-      }\r\n-    }, 3000);\r\n-    return () => clearInterval(expressionInterval);\r\n-  }, [isActive]);\r\n-\r\n-  const triggerAnimation = (type) => {\r\n-    if (animationRef.current) {\r\n-      clearTimeout(animationRef.current);\r\n-    }\r\n-    \r\n-    const botElement = botRef.current;\r\n-    if (!botElement) return;\r\n-    \r\n-    botElement.style.animation = 'none';\r\n-    void botElement.offsetWidth; // Trigger reflow\r\n-    \r\n-    switch(type) {\r\n-      case 'spin':\r\n-        botElement.style.animation = 'spin 1s ease';\r\n-        break;\r\n-      case 'bounce':\r\n-        botElement.style.animation = 'bounce 0.5s ease';\r\n-        break;\r\n-      case 'wobble':\r\n-        botElement.style.animation = 'wobble 0.8s ease';\r\n-        break;\r\n-      default:\r\n-        botElement.style.animation = '';\r\n-    }\r\n-    \r\n-    animationRef.current = setTimeout(() => {\r\n-      if (botElement) botElement.style.animation = '';\r\n-    }, 1000);\r\n-  };\r\n-\r\n-  const handleClick = () => {\r\n-    lastInteractionTime.current = Date.now();\r\n-    setIsActive(true);\r\n-    triggerAnimation('bounce');\r\n-    setExpression('üí°');\r\n-    \r\n-    // Trigger chat opening in parent component\r\n-    onChatOpen();\r\n-    \r\n-    // Return to normal after a delay\r\n-    setTimeout(() => {\r\n-      setIsActive(false);\r\n-    }, 3000);\r\n-  };\r\n-\r\n-  // Custom animations\r\n-  const animations = `\r\n-    @keyframes spin {\r\n-      0% { transform: rotate(0deg) scaleX(${direction}); }\r\n-      100% { transform: rotate(360deg) scaleX(${direction}); }\r\n-    }\r\n-    @keyframes bounce {\r\n-      0%, 100% { transform: translateY(0) scaleX(${direction}); }\r\n-      50% { transform: translateY(-20px) scaleX(${direction}); }\r\n-    }\r\n-    @keyframes wobble {\r\n-      0%, 100% { transform: rotate(0deg) scaleX(${direction}); }\r\n-      25% { transform: rotate(5deg) scaleX(${direction}); }\r\n-      75% { transform: rotate(-5deg) scaleX(${direction}); }\r\n-    }\r\n-    @keyframes float {\r\n-      0% { transform: translateY(0px) scaleX(${direction}); }\r\n-      50% { transform: translateY(-10px) scaleX(${direction}); }\r\n-      100% { transform: translateY(0px) scaleX(${direction}); }\r\n-    }\r\n-  `;\r\n-\r\n-  return (\r\n-    <>\r\n-      <style>{animations}</style>\r\n-      <div \r\n-        ref={botRef}\r\n-        onClick={handleClick}\r\n-        style={{\r\n-          position: 'fixed',\r\n-          left: `${position.x}px`,\r\n-          top: `${position.y}px`,\r\n-          fontSize: '2.5rem',\r\n-          cursor: 'pointer',\r\n-          transition: 'all 0.3s ease',\r\n-          transform: `scaleX(${direction})`,\r\n-          zIndex: 100,\r\n-          filter: darkMode \r\n-            ? 'drop-shadow(0 0 8px rgba(255,255,255,0.7))' \r\n-            : 'drop-shadow(0 0 8px rgba(0,0,0,0.3))',\r\n-          userSelect: 'none',\r\n-          animation: 'float 4s ease-in-out infinite'\r\n-        }}\r\n-      >\r\n-        <div style={{ \r\n-          position: 'relative',\r\n-          display: 'flex',\r\n-          flexDirection: 'column',\r\n-          alignItems: 'center'\r\n-        }}>\r\n-          {/* Bot icon with costume */}\r\n-          <div style={{\r\n-            position: 'relative',\r\n-            width: '60px',\r\n-            height: '60px',\r\n-            backgroundColor: darkMode ? '#4a5568' : '#3b82f6',\r\n-            borderRadius: '50%',\r\n-            display: 'flex',\r\n-            justifyContent: 'center',\r\n-            alignItems: 'center',\r\n-            color: 'white'\r\n-          }}>\r\n-            <span style={{ fontSize: '1.8rem' }}>{expression}</span>\r\n-            {costume && (\r\n-              <span style={{\r\n-                position: 'absolute',\r\n-                top: '-15px',\r\n-                right: '-10px',\r\n-                fontSize: '1.5rem',\r\n-                transform: 'rotate(15deg)'\r\n-              }}>\r\n-                {costume}\r\n-              </span>\r\n-            )}\r\n-          </div>\r\n-        </div>\r\n-      </div>\r\n-    </>\r\n-  );\r\n-};\r\n-\r\n-// Chat Modal Component with Functional API Connection\r\n-const ChatModal = ({ darkMode, onClose }) => {\r\n-  const [messages, setMessages] = useState([\r\n-    { text: \"Hello! I'm UrbanBuddy, your AI assistant for urban living. How can I help you today?\", sender: 'bot' }\r\n-  ]);\r\n-  const [inputValue, setInputValue] = useState('');\r\n-  const [isTyping, setIsTyping] = useState(false);\r\n-  const chatEndRef = useRef(null);\r\n-  const inputRef = useRef(null);\r\n-\r\n-  // Auto-scroll to bottom and focus input\r\n-  useEffect(() => {\r\n-    chatEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n-    inputRef.current?.focus();\r\n-  }, [messages]);\r\n-\r\n-  // Function to call the AI API\r\n-  const generateResponse = async (userMessage) => {\r\n-    setIsTyping(true);\r\n-    \r\n-    try {\r\n-      // Using a free AI API endpoint (no API key needed)\r\n-      const response = await fetch('https://api.openai.com/v1/chat/completions', {\r\n-        method: \"POST\",\r\n-        headers: { \r\n-          \"Content-Type\": \"application/json\",\r\n-          // Note: In a production app, you should proxy this through your backend\r\n-          // to keep your API key secure. This is just for demonstration.\r\n-          \"Authorization\": `Bearer YOUR_OPENAI_API_KEY` \r\n-        },\r\n-        body: JSON.stringify({\r\n-          model: \"gpt-3.5-turbo\",\r\n-          messages: [\r\n-            {\r\n-              role: \"system\",\r\n-              content: \"You are UrbanBuddy, a friendly AI assistant for urban living. \" +\r\n-                \"Provide helpful, concise answers (1-2 sentences) about city life, \" +\r\n-                \"transportation, food delivery, local services, and urban living tips. \" +\r\n-                \"Keep responses practical and urban-focused.\"\r\n-            },\r\n-            {\r\n-              role: \"user\",\r\n-              content: userMessage\r\n-            }\r\n-          ],\r\n-          temperature: 0.7,\r\n-          max_tokens: 150\r\n-        })\r\n-      });\r\n-      \r\n-      if (!response.ok) {\r\n-        throw new Error(`API request failed with status ${response.status}`);\r\n-      }\r\n-      \r\n-      const data = await response.json();\r\n-      const aiResponse = data.choices?.[0]?.message?.content || \r\n-        \"I'm having trouble thinking of a response right now. Could you try asking something else?\";\r\n-      \r\n-      setMessages(prev => [...prev, { \r\n-        text: aiResponse, \r\n-        sender: 'bot' \r\n-      }]);\r\n-    } catch (error) {\r\n-      console.error(\"API error:\", error);\r\n-      // Fallback to a local AI response if API fails\r\n-      const fallbackResponses = [\r\n-        \"I'm currently experiencing high demand. Try again in a moment!\",\r\n-        \"Let me think differently about that... Can you rephrase your question?\",\r\n-        \"I specialize in urban living tips. Ask me about transportation, food, or city services!\",\r\n-        \"I'm having connection issues, but I'd love to help with your urban living questions!\"\r\n-      ];\r\n-      setMessages(prev => [...prev, { \r\n-        text: fallbackResponses[Math.floor(Math.random() * fallbackResponses.length)], \r\n-        sender: 'bot' \r\n-      }]);\r\n-    } finally {\r\n-      setIsTyping(false);\r\n-    }\r\n-  };\r\n-\r\n-  const handleSendMessage = async (e) => {\r\n-    e.preventDefault();\r\n-    if (inputValue.trim() && !isTyping) {\r\n-      // Add user message\r\n-      const userMessage = inputValue.trim();\r\n-      setMessages(prev => [...prev, { text: userMessage, sender: 'user' }]);\r\n-      setInputValue('');\r\n-      \r\n-      // Generate AI response\r\n-      await generateResponse(userMessage);\r\n-    }\r\n-  };\r\n-\r\n-  return (\r\n-    <div style={{\r\n-      position: 'fixed',\r\n-      bottom: '100px',\r\n-      right: '30px',\r\n-      width: '350px',\r\n-      maxWidth: '90%',\r\n-      backgroundColor: darkMode ? '#2d3748' : 'white',\r\n-      borderRadius: '16px',\r\n-      boxShadow: '0 10px 25px rgba(0, 0, 0, 0.2)',\r\n-      border: darkMode ? '1px solid #4a5568' : '1px solid #e2e8f0',\r\n-      zIndex: 1000,\r\n-      overflow: 'hidden',\r\n-      display: 'flex',\r\n-      flexDirection: 'column',\r\n-      maxHeight: '60vh'\r\n-    }}>\r\n-      {/* Chat header */}\r\n-      <div style={{\r\n-        padding: '1rem',\r\n-        backgroundColor: darkMode ? '#4a5568' : '#3b82f6',\r\n-        color: 'white',\r\n-        display: 'flex',\r\n-        justifyContent: 'space-between',\r\n-        alignItems: 'center'\r\n-      }}>\r\n-        <div style={{ display: 'flex', alignItems: 'center', gap: '0.5rem' }}>\r\n-          <span style={{ fontSize: '1.5rem' }}>ü§ñ</span>\r\n-          <h3 style={{ margin: 0 }}>UrbanBuddy AI</h3>\r\n-          {isTyping && (\r\n-            <span style={{ \r\n-              fontSize: '0.8rem',\r\n-              marginLeft: '0.5rem',\r\n-              opacity: 0.8\r\n-            }}>typing...</span>\r\n-          )}\r\n-        </div>\r\n-        <button \r\n-          onClick={onClose}\r\n-          style={{\r\n-            background: 'none',\r\n-            border: 'none',\r\n-            color: 'white',\r\n-            fontSize: '1.2rem',\r\n-            cursor: 'pointer'\r\n-          }}\r\n-        >\r\n-          √ó\r\n-        </button>\r\n-      </div>\r\n-      \r\n-      {/* Chat messages */}\r\n-      <div style={{\r\n-        flex: 1,\r\n-        padding: '1rem',\r\n-        overflowY: 'auto',\r\n-        display: 'flex',\r\n-        flexDirection: 'column',\r\n-        gap: '0.8rem'\r\n-      }}>\r\n-        {messages.map((msg, index) => (\r\n-          <div \r\n-            key={index}\r\n-            style={{\r\n-              alignSelf: msg.sender === 'user' ? 'flex-end' : 'flex-start',\r\n-              maxWidth: '80%',\r\n-              padding: '0.6rem 1rem',\r\n-              borderRadius: msg.sender === 'user' \r\n-                ? '18px 18px 0 18px' \r\n-                : '18px 18px 18px 0',\r\n-              backgroundColor: msg.sender === 'user'\r\n-                ? (darkMode ? '#4a5568' : '#3b82f6')\r\n-                : (darkMode ? '#4a5568' : '#e2e8f0'),\r\n-              color: msg.sender === 'user' ? 'white' : (darkMode ? 'white' : '#1e293b'),\r\n-              animation: msg.sender === 'bot' && index === messages.length - 1 \r\n-                ? 'fadeIn 0.3s ease' \r\n-                : 'none'\r\n-            }}\r\n-          >\r\n-            {msg.text}\r\n-          </div>\r\n-        ))}\r\n-        <div ref={chatEndRef} />\r\n-      </div>\r\n-      \r\n-      {/* Chat input */}\r\n-      <form onSubmit={handleSendMessage} style={{\r\n-        padding: '0.8rem',\r\n-        borderTop: darkMode ? '1px solid #4a5568' : '1px solid #e2e8f0',\r\n-        display: 'flex',\r\n-        gap: '0.5rem'\r\n-      }}>\r\n-        <input\r\n-          ref={inputRef}\r\n-          type=\"text\"\r\n-          value={inputValue}\r\n-          onChange={(e) => setInputValue(e.target.value)}\r\n-          placeholder=\"Ask me about urban living...\"\r\n-          disabled={isTyping}\r\n-          style={{\r\n-            flex: 1,\r\n-            padding: '0.6rem 1rem',\r\n-            borderRadius: '20px',\r\n-            border: darkMode ? '1px solid #4a5568' : '1px solid #e2e8f0',\r\n-            backgroundColor: darkMode ? '#2d3748' : 'white',\r\n-            color: darkMode ? 'white' : '#1e293b',\r\n-            outline: 'none',\r\n-            opacity: isTyping ? 0.7 : 1\r\n-          }}\r\n-        />\r\n-        <button \r\n-          type=\"submit\"\r\n-          disabled={isTyping}\r\n-          style={{\r\n-            background: isTyping \r\n-              ? (darkMode ? '#4a5568' : '#e2e8f0')\r\n-              : (darkMode ? '#4a5568' : '#3b82f6'),\r\n-            color: 'white',\r\n-            border: 'none',\r\n-            borderRadius: '50%',\r\n-            width: '40px',\r\n-            height: '40px',\r\n-            display: 'flex',\r\n-            alignItems: 'center',\r\n-            justifyContent: 'center',\r\n-            cursor: isTyping ? 'not-allowed' : 'pointer'\r\n-          }}\r\n-        >\r\n-          {isTyping ? '...' : '‚û§'}\r\n-        </button>\r\n-      </form>\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-// Main Home Component with all enhancements\r\n-export default function Home() {\r\n-  const navigate = useNavigate();\r\n-  const [searchQuery, setSearchQuery] = useState('');\r\n-  const [darkMode, setDarkMode] = useState(() => {\r\n-    // Check localStorage for saved theme preference\r\n-    const savedTheme = localStorage.getItem('urbanflow-theme');\r\n-    return savedTheme ? savedTheme === 'dark' : false;\r\n-  });\r\n-  const [selectedService, setSelectedService] = useState(null);\r\n-  const [orderCount, setOrderCount] = useState(0);\r\n-  const [achievements, setAchievements] = useState([]);\r\n-  const [showChat, setShowChat] = useState(false);\r\n-\r\n-  const services = [\r\n-    { \r\n-      name: 'Transport', \r\n-      path: '/transport', \r\n-      icon: 'üöå', \r\n-      desc: 'Plan your multi-modal journey across the city',\r\n-      color: '#3b82f6',\r\n-      details: 'Find the best routes combining metro, buses, and bikes. Real-time updates and ticket purchasing available.'\r\n-    },\r\n-    { \r\n-      name: 'Food Delivery', \r\n-      path: '/food', \r\n-      icon: 'üçî', \r\n-      desc: 'Discover local restaurants and cafes',\r\n-      color: '#ef4444',\r\n-      details: 'Order from hundreds of restaurants with special discounts. Track your delivery in real-time.'\r\n-    },\r\n-    { \r\n-      name: 'Groceries', \r\n-      path: '/food', \r\n-      icon: 'üõí', \r\n-      desc: 'Get groceries delivered in minutes',\r\n-      color: '#10b981',\r\n-      details: 'Same-day delivery from local supermarkets. Schedule recurring orders for essentials.'\r\n-    },\r\n-    { \r\n-      name: 'Services', \r\n-      path: '/food', \r\n-      icon: 'üõ†Ô∏è', \r\n-      desc: 'Find urban services near you',\r\n-      color: '#8b5cf6',\r\n-      details: 'Book home services, repairs, and professional help with verified providers.'\r\n-    }\r\n-  ];\r\n-\r\n-  // Check for achievements\r\n-  useEffect(() => {\r\n-    if (orderCount === 1) {\r\n-      addAchievement('First Order!', 'üéâ');\r\n-    } else if (orderCount === 5) {\r\n-      addAchievement('Regular Customer!', 'üèÜ');\r\n-    } else if (orderCount === 10) {\r\n-      addAchievement('Super User!', 'üåü');\r\n-    }\r\n-  }, [orderCount]);\r\n-\r\n-  // Save theme preference to localStorage\r\n-  useEffect(() => {\r\n-    localStorage.setItem('urbanflow-theme', darkMode ? 'dark' : 'light');\r\n-    document.documentElement.classList.toggle('dark', darkMode);\r\n-  }, [darkMode]);\r\n-\r\n-  const addAchievement = (title, icon) => {\r\n-    if (!achievements.some(a => a.title === title)) {\r\n-      const newAchievement = { title, icon, id: Date.now() };\r\n-      setAchievements(prev => [...prev, newAchievement]);\r\n-      \r\n-      // Auto-hide achievement after 3 seconds\r\n-      setTimeout(() => {\r\n-        setAchievements(prev => prev.filter(a => a.id !== newAchievement.id));\r\n-      }, 3000);\r\n-    }\r\n-  };\r\n-\r\n-  const handleSearch = (e) => {\r\n-    e.preventDefault();\r\n-    if (searchQuery.trim()) {\r\n-      navigate(`/food?search=${encodeURIComponent(searchQuery)}`);\r\n-    }\r\n-  };\r\n-\r\n-  const toggleDarkMode = () => {\r\n-    setDarkMode(!darkMode);\r\n-  };\r\n-\r\n-  const openServicePopup = (service) => {\r\n-    setSelectedService(service);\r\n-    setOrderCount(prev => prev + 1);\r\n-  };\r\n-\r\n-  const closePopup = () => {\r\n-    setSelectedService(null);\r\n-  };\r\n-\r\n-  const toggleChat = () => {\r\n-    setShowChat(!showChat);\r\n-  };\r\n-\r\n-  return (\r\n-    <div style={{\r\n-      backgroundColor: darkMode ? '#1a202c' : '#f8fafc',\r\n-      minHeight: '100vh',\r\n-      paddingBottom: '3rem',\r\n-      color: darkMode ? '#e2e8f0' : '#1e293b',\r\n-      transition: 'all 0.3s ease',\r\n-      position: 'relative'\r\n-    }}>\r\n-      {/* Theme Toggle Button - Fixed in top bar */}\r\n-      <div style={{\r\n-        position: 'fixed',\r\n-        top: 0,\r\n-        left: 0,\r\n-        right: 0,\r\n-        height: '50px',\r\n-        backgroundColor: darkMode ? '#2d3748' : '#ffffff',\r\n-        boxShadow: '0 2px 10px rgba(0, 0, 0, 0.1)',\r\n-        display: 'flex',\r\n-        alignItems: 'center',\r\n-        justifyContent: 'flex-end',\r\n-        padding: '0 1.5rem',\r\n-        zIndex: 1000\r\n-      }}>\r\n-        <button \r\n-          onClick={toggleDarkMode} \r\n-          style={{\r\n-            background: 'none',\r\n-            border: 'none',\r\n-            borderRadius: '50%',\r\n-            width: '40px',\r\n-            height: '40px',\r\n-            display: 'flex',\r\n-            alignItems: 'center',\r\n-            justifyContent: 'center',\r\n-            cursor: 'pointer',\r\n-            transition: 'all 0.3s ease',\r\n-            color: darkMode ? '#e2e8f0' : '#1e293b',\r\n-            fontSize: '1.2rem'\r\n-          }}\r\n-          aria-label={darkMode ? 'Switch to light mode' : 'Switch to dark mode'}\r\n-        >\r\n-          {darkMode ? '‚òÄÔ∏è' : 'üåô'}\r\n-        </button>\r\n-      </div>\r\n-      \r\n-      {/* Hero Section with UrbanBuddy */}\r\n-      <section style={{\r\n-        background: darkMode \r\n-          ? 'linear-gradient(135deg, #2d3748 0%, #1a202c 100%)' \r\n-          : 'linear-gradient(135deg, #6b46c1 0%, #3b82f6 100%)',\r\n-        color: 'white',\r\n-        padding: '6rem 1rem 4rem',\r\n-        textAlign: 'center',\r\n-        borderRadius: '0 0 20px 20px',\r\n-        boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',\r\n-        position: 'relative',\r\n-        overflow: 'hidden',\r\n-        height: '300px'\r\n-      }}>\r\n-        <div style={{\r\n-          maxWidth: '800px',\r\n-          margin: '0 auto',\r\n-          position: 'relative',\r\n-          zIndex: 2\r\n-        }}>\r\n-          <h1 style={{\r\n-            fontSize: '3.5rem',\r\n-            fontWeight: '800',\r\n-            marginBottom: '0.5rem',\r\n-            textShadow: '2px 2px 4px rgba(0, 0, 0, 0.2)',\r\n-          }}>UrbanFlow</h1>\r\n-          <p style={{\r\n-            fontSize: '1.25rem',\r\n-            marginBottom: '2rem',\r\n-            opacity: 0.9,\r\n-          }}>Your seamless urban living companion</p>\r\n-          \r\n-          <form onSubmit={handleSearch} style={{\r\n-            display: 'flex',\r\n-            maxWidth: '600px',\r\n-            margin: '0 auto',\r\n-            borderRadius: '50px',\r\n-            overflow: 'hidden',\r\n-            boxShadow: '0 4px 10px rgba(0, 0, 0, 0.2)',\r\n-          }}>\r\n-            <input\r\n-              type=\"text\"\r\n-              placeholder=\"Search for restaurants, services...\"\r\n-              value={searchQuery}\r\n-              onChange={(e) => setSearchQuery(e.target.value)}\r\n-              style={{\r\n-                flex: 1,\r\n-                padding: '1rem 1.5rem',\r\n-                border: 'none',\r\n-                fontSize: '1rem',\r\n-                outline: 'none',\r\n-                backgroundColor: darkMode ? '#2d3748' : 'white',\r\n-                color: darkMode ? '#e2e8f0' : '#1e293b',\r\n-              }}\r\n-            />\r\n-            <button type=\"submit\" style={{\r\n-              backgroundColor: darkMode ? '#4a5568' : '#1e40af',\r\n-              color: 'white',\r\n-              border: 'none',\r\n-              padding: '0 1.5rem',\r\n-              cursor: 'pointer',\r\n-              fontSize: '1.25rem',\r\n-              transition: 'background-color 0.2s'\r\n-            }}>\r\n-              <span>üîç</span>\r\n-            </button>\r\n-          </form>\r\n-        </div>\r\n-        <UrbanBuddy darkMode={darkMode} onChatOpen={toggleChat} />\r\n-      </section>\r\n-\r\n-      {/* Services Grid with Enhanced Hover Effects */}\r\n-      <section style={{\r\n-        padding: '2rem 1rem',\r\n-        maxWidth: '1200px',\r\n-        margin: '0 auto',\r\n-      }}>\r\n-        <h2 style={{\r\n-          fontSize: '2rem',\r\n-          fontWeight: '700',\r\n-          marginBottom: '1.5rem',\r\n-          color: darkMode ? '#e2e8f0' : '#1e293b',\r\n-          textAlign: 'center',\r\n-        }}>What do you need today?</h2>\r\n-        <div style={{\r\n-          display: 'grid',\r\n-          gridTemplateColumns: 'repeat(auto-fit, minmax(250px, 1fr))',\r\n-          gap: '1.5rem',\r\n-          marginTop: '1rem',\r\n-        }}>\r\n-          {services.map((service) => (\r\n-            <div \r\n-              key={service.name} \r\n-              style={{ \r\n                 padding: '2rem 1.5rem',\r\n                 borderRadius: '16px',\r\n                 border: `2px solid ${service.color}`,\r\n                 textAlign: 'center',\r\n                 cursor: 'pointer',\r\n-                transition: 'all 0.3s ease',\r\n-                backgroundColor: darkMode \r\n-                  ? `${service.color}20` \r\n-                  : `${service.color}10`,\r\n-                ':hover': {\r\n-                  transform: 'translateY(-5px)',\r\n-                  boxShadow: `0 10px 20px ${darkMode ? 'rgba(0,0,0,0.3)' : 'rgba(0,0,0,0.1)'}`,\r\n-                  backgroundColor: darkMode \r\n-                    ? `${service.color}30` \r\n-                    : `${service.color}20`,\r\n-                }\r\n-              }}\r\n-              onClick={() => openServicePopup(service)}\r\n-            >\r\n-              <div style={{ \r\n-                fontSize: '3rem',\r\n-                marginBottom: '1rem',\r\n-                display: 'inline-block',\r\n-                animation: 'float 3s ease-in-out infinite'\r\n-              }}>{service.icon}</div>\r\n-              <h3 style={{fontSize: '1.5rem', fontWeight: '600', marginBottom: '0.5rem'}}>{service.name}</h3>\r\n-              <p style={{color: darkMode ? '#a0aec0' : '#64748b'}}>{service.desc}</p>\r\n-            </div>\r\n-          ))}\r\n-        </div>\r\n-      </section>\r\n-\r\n-      {/* Featured Section */}\r\n-      <section style={{\r\n-        padding: '2rem 1rem',\r\n-        maxWidth: '1200px',\r\n-        margin: '0 auto',\r\n-      }}>\r\n-        <h2 style={{\r\n-          fontSize: '2rem',\r\n-          fontWeight: '700',\r\n-          marginBottom: '1.5rem',\r\n-          color: darkMode ? '#e2e8f0' : '#1e293b',\r\n-          textAlign: 'center',\r\n-        }}>Quick Access</h2>\r\n-        <div style={{\r\n-          display: 'flex',\r\n-          justifyContent: 'center',\r\n-          gap: '1rem',\r\n-          flexWrap: 'wrap',\r\n-        }}>\r\n-          <button \r\n-            onClick={() => navigate('/transport?from=home&to=downtown')}\r\n-            style={{\r\n-              padding: '0.75rem 1.5rem',\r\n-              borderRadius: '50px',\r\n-              border: 'none',\r\n-              backgroundColor: darkMode ? '#2d3748' : '#e2e8f0',\r\n-              color: darkMode ? '#e2e8f0' : '#1e293b',\r\n-              fontWeight: '600',\r\n-              cursor: 'pointer',\r\n-              transition: 'all 0.2s',\r\n-              display: 'flex',\r\n-              alignItems: 'center',\r\n-              gap: '0.5rem',\r\n-              fontSize: '1rem',\r\n-              ':hover': {\r\n-                backgroundColor: darkMode ? '#4a5568' : '#d1d5db',\r\n-              }\r\n-            }}\r\n-          >\r\n-            üöï To Downtown\r\n-          </button>\r\n-          <button \r\n-            onClick={() => navigate('/food?category=fastfood')}\r\n-            style={{\r\n-              padding: '0.75rem 1.5rem',\r\n-              borderRadius: '50px',\r\n-              border: 'none',\r\n-              backgroundColor: darkMode ? '#2d3748' : '#e2e8f0',\r\n-              color: darkMode ? '#e2e8f0' : '#1e293b',\r\n-              fontWeight: '600',\r\n-              cursor: 'pointer',\r\n-              transition: 'all 0.2s',\r\n-              display: 'flex',\r\n-              alignItems: 'center',\r\n-              gap: '0.5rem',\r\n-              fontSize: '1rem',\r\n-              ':hover': {\r\n-                backgroundColor: darkMode ? '#4a5568' : '#d1d5db',\r\n-              }\r\n-            }}\r\n-          >\r\n-            üçü Fast Food\r\n-          </button>\r\n-          <button \r\n-            onClick={() => navigate('/food?category=coffee')}\r\n-            style={{\r\n-              padding: '0.75rem 1.5rem',\r\n-              borderRadius: '50px',\r\n-              border: 'none',\r\n-              backgroundColor: darkMode ? '#2d3748' : '#e2e8f0',\r\n-              color: darkMode ? '#e2e8f0' : '#1e293b',\r\n-              fontWeight: '600',\r\n-              cursor: 'pointer',\r\n-              transition: 'all 0.2s',\r\n-              display: 'flex',\r\n-              alignItems: 'center',\r\n-              gap: '0.5rem',\r\n-              fontSize: '1rem',\r\n-              ':hover': {\r\n-                backgroundColor: darkMode ? '#4a5568' : '#d1d5db',\r\n-              }\r\n-            }}\r\n-          >\r\n-            ‚òï Coffee Shops\r\n-          </button>\r\n-        </div>\r\n-      </section>\r\n-\r\n-      {/* Service Popup */}\r\n-      {selectedService && (\r\n-        <div style={{\r\n-          position: 'fixed',\r\n-          top: 0,\r\n-          left: 0,\r\n-          right: 0,\r\n-          bottom: 0,\r\n-          backgroundColor: 'rgba(0, 0, 0, 0.7)',\r\n-          display: 'flex',\r\n-          justifyContent: 'center',\r\n-          alignItems: 'center',\r\n-          zIndex: 1000,\r\n-        }} onClick={closePopup}>\r\n-          <div style={{\r\n-            backgroundColor: darkMode ? '#2d3748' : 'white',\r\n-            borderRadius: '16px',\r\n-            padding: '2rem',\r\n-            maxWidth: '500px',\r\n-            width: '90%',\r\n-            boxShadow: '0 10px 25px rgba(0, 0, 0, 0.2)',\r\n-            position: 'relative',\r\n-            border: darkMode ? '1px solid #4a5568' : '1px solid #e2e8f0',\r\n-          }} onClick={(e) => e.stopPropagation()}>\r\n-            <button style={{\r\n-              position: 'absolute',\r\n-              top: '1rem',\r\n-              right: '1rem',\r\n-              background: 'none',\r\n-              border: 'none',\r\n-              fontSize: '1.5rem',\r\n-              cursor: 'pointer',\r\n-              color: darkMode ? '#a0aec0' : '#64748b',\r\n-            }} onClick={closePopup}>√ó</button>\r\n-            <div style={{ \r\n-              display: 'flex', \r\n-              alignItems: 'center', \r\n-              gap: '1rem',\r\n-              marginBottom: '1.5rem'\r\n-            }}>\r\n-              <span style={{ fontSize: '2.5rem', animation: 'float 3s ease-in-out infinite' }}>{selectedService.icon}</span>\r\n-              <h3 style={{fontSize: '1.8rem', fontWeight: '700', marginBottom: '1rem', color: darkMode ? '#e2e8f0' : '#1e293b'}}>{selectedService.name}</h3>\r\n-            </div>\r\n-            <p style={{color: darkMode ? '#a0aec0' : '#64748b', fontSize: '1.1rem', lineHeight: '1.6', marginBottom: '2rem'}}>{selectedService.details}</p>\r\n-            <button \r\n-              style={{ \r\n-                padding: '0.75rem 1.5rem',\r\n-                borderRadius: '8px',\r\n-                border: 'none',\r\n-                backgroundColor: selectedService.color,\r\n-                color: 'white',\r\n-                fontWeight: '600',\r\n-                cursor: 'pointer',\r\n-                transition: 'all 0.2s',\r\n-                fontSize: '1rem',\r\n-                ':hover': {\r\n-                  opacity: 0.9,\r\n-                  transform: 'translateY(-2px)'\r\n-                }\r\n-              }}\r\n-              onClick={() => {\r\n-                navigate(selectedService.path);\r\n-                closePopup();\r\n-              }}\r\n-            >\r\n-              Explore {selectedService.name}\r\n-            </button>\r\n-          </div>\r\n-        </div>\r\n-      )}\r\n-\r\n-      {/* Achievements */}\r\n-      {achievements.map(achievement => (\r\n-        <div key={achievement.id} style={{\r\n-          position: 'fixed',\r\n-          bottom: '20px',\r\n-          right: '20px',\r\n-          background: darkMode ? '#2d3748' : 'white',\r\n-          color: darkMode ? 'white' : '#1e293b',\r\n-          padding: '1rem',\r\n-          borderRadius: '12px',\r\n-          boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',\r\n-          display: 'flex',\r\n-          alignItems: 'center',\r\n-          gap: '0.5rem',\r\n-          zIndex: 1000,\r\n-          animation: 'slideIn 0.5s forwards, fadeOut 0.5s forwards 2.5s'\r\n-        }}>\r\n-          <span style={{fontSize: '1.5rem'}}>{achievement.icon}</span>\r\n-          <span>{achievement.title}</span>\r\n-        </div>\r\n-      ))}\r\n-\r\n-      {/* Chat Modal */}\r\n-      {showChat && <ChatModal darkMode={darkMode} onClose={toggleChat} />}\r\n-\r\n-      {/* Footer with copyright */}\r\n-      <footer style={{\r\n-        textAlign: 'center',\r\n-        padding: '2rem 1rem',\r\n-        color: darkMode ? '#a0aec0' : '#64748b',\r\n-        fontSize: '0.9rem',\r\n-        marginTop: '2rem'\r\n-      }}>\r\n-        <p>¬© {new Date().getFullYear()} UrbanFlow - Created by Nick</p>\r\n-      </footer>\r\n-\r\n-      {/* Global Styles */}\r\n-      <style>{`\r\n-        @keyframes fadeIn {\r\n-          from { opacity: 0; transform: translateY(10px); }\r\n-          to { opacity: 1; transform: translateY(0); }\r\n-        }\r\n-        @keyframes slideIn {\r\n-          from { transform: translateX(100%); }\r\n-          to { transform: translateX(0); }\r\n-        }\r\n-        @keyframes fadeOut {\r\n-          from { opacity: 1; }\r\n-          to { opacity: 0; }\r\n-        }\r\n-      `}</style>\r\n-    </div>\r\n-  );\r\n-};\n-import { useState, useEffect, useRef } from 'react';\r\n-import { useNavigate } from 'react-router-dom';\r\n-\r\n-// UrbanBuddy AI Assistant Component\r\n-const UrbanBuddy = ({ darkMode, onChatOpen }) => {\r\n-  const [position, setPosition] = useState({ x: 20, y: 50 });\r\n-  const [expression, setExpression] = useState('üòä');\r\n-  const [direction, setDirection] = useState(1);\r\n-  const [costume, setCostume] = useState(null);\r\n-  const [isActive, setIsActive] = useState(false);\r\n-  const botRef = useRef(null);\r\n-  const animationRef = useRef(null);\r\n-  const lastInteractionTime = useRef(Date.now());\r\n-\r\n-  // Seasonal costumes\r\n-  useEffect(() => {\r\n-    const today = new Date();\r\n-    const month = today.getMonth() + 1;\r\n-    \r\n-    if (month === 12) setCostume('üéÑ');\r\n-    else if (month === 10) setCostume('üéÉ');\r\n-    else if (month === 2) setCostume('üíù');\r\n-    else if (month === 4) setCostume('üå∏');\r\n-    else setCostume(null);\r\n-  }, []);\r\n-\r\n-  // Make the bot wander with more dynamic movement\r\n-  useEffect(() => {\r\n-    const moveInterval = setInterval(() => {\r\n-      setPosition(prev => {\r\n-        const now = Date.now();\r\n-        const timeSinceLastInteraction = now - lastInteractionTime.current;\r\n-        \r\n-        // More active movement right after interaction\r\n-        const speedMultiplier = timeSinceLastInteraction < 5000 ? 2 : 1;\r\n-        \r\n-        let newX = prev.x + (3 * direction * speedMultiplier);\r\n-        let newY = prev.y + (Math.random() * 6 - 3);\r\n-        \r\n-        // Bounce off edges\r\n-        if (newX > window.innerWidth - 80) {\r\n-          setDirection(-1);\r\n-          triggerAnimation('spin');\r\n-        }\r\n-        if (newX < 20) {\r\n-          setDirection(1);\r\n-          triggerAnimation('spin');\r\n-        }\r\n-        if (newY < 20) newY = 20;\r\n-        if (newY > window.innerHeight - 100) newY = window.innerHeight - 100;\r\n-        \r\n-        return { x: newX, y: newY };\r\n-      });\r\n-    }, 100);\r\n-\r\n-    return () => clearInterval(moveInterval);\r\n-  }, [direction]);\r\n-\r\n-  // Change expressions randomly with more variety\r\n-  useEffect(() => {\r\n-    const expressions = ['üòä', 'ü§î', 'üòÆ', 'üòé', 'üëã', 'ü§ñ', '‚ú®', 'üåü'];\r\n-    const expressionInterval = setInterval(() => {\r\n-      if (!isActive) {\r\n-        setExpression(expressions[Math.floor(Math.random() * expressions.length)]);\r\n-        // Random animations when idle\r\n-        if (Math.random() > 0.8) {\r\n-          triggerAnimation(['bounce', 'spin', 'wobble'][Math.floor(Math.random() * 3)]);\r\n-        }\r\n-      }\r\n-    }, 3000);\r\n-    return () => clearInterval(expressionInterval);\r\n-  }, [isActive]);\r\n-\r\n-  const triggerAnimation = (type) => {\r\n-    if (animationRef.current) {\r\n-      clearTimeout(animationRef.current);\r\n-    }\r\n-    \r\n-    const botElement = botRef.current;\r\n-    if (!botElement) return;\r\n-    \r\n-    botElement.style.animation = 'none';\r\n-    void botElement.offsetWidth; // Trigger reflow\r\n-    \r\n-    switch(type) {\r\n-      case 'spin':\r\n-        botElement.style.animation = 'spin 1s ease';\r\n-        break;\r\n-      case 'bounce':\r\n-        botElement.style.animation = 'bounce 0.5s ease';\r\n-        break;\r\n-      case 'wobble':\r\n-        botElement.style.animation = 'wobble 0.8s ease';\r\n-        break;\r\n-      default:\r\n-        botElement.style.animation = '';\r\n-    }\r\n-    \r\n-    animationRef.current = setTimeout(() => {\r\n-      if (botElement) botElement.style.animation = '';\r\n-    }, 1000);\r\n-  };\r\n-\r\n-  const handleClick = () => {\r\n-    lastInteractionTime.current = Date.now();\r\n-    setIsActive(true);\r\n-    triggerAnimation('bounce');\r\n-    setExpression('üí°');\r\n-    \r\n-    // Trigger chat opening in parent component\r\n-    onChatOpen();\r\n-    \r\n-    // Return to normal after a delay\r\n-    setTimeout(() => {\r\n-      setIsActive(false);\r\n-    }, 3000);\r\n-  };\r\n-\r\n-  // Custom animations\r\n-  const animations = `\r\n-    @keyframes spin {\r\n-      0% { transform: rotate(0deg) scaleX(${direction}); }\r\n-      100% { transform: rotate(360deg) scaleX(${direction}); }\r\n-    }\r\n-    @keyframes bounce {\r\n-      0%, 100% { transform: translateY(0) scaleX(${direction}); }\r\n-      50% { transform: translateY(-20px) scaleX(${direction}); }\r\n-    }\r\n-    @keyframes wobble {\r\n-      0%, 100% { transform: rotate(0deg) scaleX(${direction}); }\r\n-      25% { transform: rotate(5deg) scaleX(${direction}); }\r\n-      75% { transform: rotate(-5deg) scaleX(${direction}); }\r\n-    }\r\n-    @keyframes float {\r\n-      0% { transform: translateY(0px) scaleX(${direction}); }\r\n-      50% { transform: translateY(-10px) scaleX(${direction}); }\r\n-      100% { transform: translateY(0px) scaleX(${direction}); }\r\n-    }\r\n-  `;\r\n-\r\n-  return (\r\n-    <>\r\n-      <style>{animations}</style>\r\n-      <div \r\n-        ref={botRef}\r\n-        onClick={handleClick}\r\n-        style={{\r\n-          position: 'fixed',\r\n-          left: `${position.x}px`,\r\n-          top: `${position.y}px`,\r\n-          fontSize: '2.5rem',\r\n-          cursor: 'pointer',\r\n-          transition: 'all 0.3s ease',\r\n-          transform: `scaleX(${direction})`,\r\n-          zIndex: 100,\r\n-          filter: darkMode \r\n-            ? 'drop-shadow(0 0 8px rgba(255,255,255,0.7))' \r\n-            : 'drop-shadow(0 0 8px rgba(0,0,0,0.3))',\r\n-          userSelect: 'none',\r\n-          animation: 'float 4s ease-in-out infinite'\r\n-        }}\r\n-      >\r\n-        <div style={{ \r\n-          position: 'relative',\r\n-          display: 'flex',\r\n-          flexDirection: 'column',\r\n-          alignItems: 'center'\r\n-        }}>\r\n-          {/* Bot icon with costume */}\r\n-          <div style={{\r\n-            position: 'relative',\r\n-            width: '60px',\r\n-            height: '60px',\r\n-            backgroundColor: darkMode ? '#4a5568' : '#3b82f6',\r\n-            borderRadius: '50%',\r\n-            display: 'flex',\r\n-            justifyContent: 'center',\r\n-            alignItems: 'center',\r\n-            color: 'white'\r\n-          }}>\r\n-            <span style={{ fontSize: '1.8rem' }}>{expression}</span>\r\n-            {costume && (\r\n-              <span style={{\r\n-                position: 'absolute',\r\n-                top: '-15px',\r\n-                right: '-10px',\r\n-                fontSize: '1.5rem',\r\n-                transform: 'rotate(15deg)'\r\n-              }}>\r\n-                {costume}\r\n-              </span>\r\n-            )}\r\n-          </div>\r\n-        </div>\r\n-      </div>\r\n-    </>\r\n-  );\r\n-};\r\n-\r\n-// Chat Modal Component with Direct Gemini API Connection\r\n-const ChatModal = ({ darkMode, onClose }) => {\r\n-  const [messages, setMessages] = useState([\r\n-    { text: \"Hello! I'm UrbanBuddy, your AI assistant powered by Gemini. How can I help you with urban living today?\", sender: 'bot' }\r\n-  ]);\r\n-  const [inputValue, setInputValue] = useState('');\r\n-  const [isTyping, setIsTyping] = useState(false);\r\n-  const chatEndRef = useRef(null);\r\n-  const inputRef = useRef(null);\r\n-\r\n-  // Auto-scroll to bottom and focus input\r\n-  useEffect(() => {\r\n-    chatEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n-    inputRef.current?.focus();\r\n-  }, [messages]);\r\n-\r\n-  // Direct API call to Gemini through a proxy\r\n-  const generateResponse = async (userMessage) => {\r\n-    setIsTyping(true);\r\n-    \r\n-    try {\r\n-      // Using a public AI API gateway (no API key needed)\r\n-      const response = await fetch('https://gemini-proxy.vercel.app/api/generate', {\r\n-        method: \"POST\",\r\n-        headers: { \r\n-          \"Content-Type\": \"application/json\",\r\n-        },\r\n-        body: JSON.stringify({\r\n-          prompt: `You are UrbanBuddy, a friendly AI assistant for urban living. \r\n-          Respond to this query about city life: ${userMessage}\r\n-          Keep responses concise (1-2 sentences) and helpful.`\r\n-        })\r\n-      });\r\n-      \r\n-      const data = await response.json();\r\n-      \r\n-      setMessages(prev => [...prev, { \r\n-        text: data.response || \"I'm here to help with urban living questions!\", \r\n-        sender: 'bot' \r\n-      }]);\r\n-    } catch (error) {\r\n-      console.error(\"API error:\", error);\r\n-      setMessages(prev => [...prev, { \r\n-        text: \"I'm having trouble connecting right now. Try again later!\", \r\n-        sender: 'bot' \r\n-      }]);\r\n-    } finally {\r\n-      setIsTyping(false);\r\n-    }\r\n-  };\r\n-\r\n-  const handleSendMessage = async (e) => {\r\n-    e.preventDefault();\r\n-    if (inputValue.trim() && !isTyping) {\r\n-      // Add user message\r\n-      const userMessage = inputValue.trim();\r\n-      setMessages(prev => [...prev, { text: userMessage, sender: 'user' }]);\r\n-      setInputValue('');\r\n-      \r\n-      // Generate AI response\r\n-      await generateResponse(userMessage);\r\n-    }\r\n-  };\r\n-\r\n-  return (\r\n-    <div style={{\r\n-      position: 'fixed',\r\n-      bottom: '100px',\r\n-      right: '30px',\r\n-      width: '350px',\r\n-      maxWidth: '90%',\r\n-      backgroundColor: darkMode ? '#2d3748' : 'white',\r\n-      borderRadius: '16px',\r\n-      boxShadow: '0 10px 25px rgba(0, 0, 0, 0.2)',\r\n-      border: darkMode ? '1px solid #4a5568' : '1px solid #e2e8f0',\r\n-      zIndex: 1000,\r\n-      overflow: 'hidden',\r\n-      display: 'flex',\r\n-      flexDirection: 'column',\r\n-      maxHeight: '60vh'\r\n-    }}>\r\n-      {/* Chat header */}\r\n-      <div style={{\r\n-        padding: '1rem',\r\n-        backgroundColor: darkMode ? '#4a5568' : '#3b82f6',\r\n-        color: 'white',\r\n-        display: 'flex',\r\n-        justifyContent: 'space-between',\r\n-        alignItems: 'center'\r\n-      }}>\r\n-        <div style={{ display: 'flex', alignItems: 'center', gap: '0.5rem' }}>\r\n-          <span style={{ fontSize: '1.5rem' }}>ü§ñ</span>\r\n-          <h3 style={{ margin: 0 }}>UrbanBuddy AI</h3>\r\n-          {isTyping && (\r\n-            <span style={{ \r\n-              fontSize: '0.8rem',\r\n-              marginLeft: '0.5rem',\r\n-              opacity: 0.8\r\n-            }}>typing...</span>\r\n-          )}\r\n-        </div>\r\n-        <button \r\n-          onClick={onClose}\r\n-          style={{\r\n-            background: 'none',\r\n-            border: 'none',\r\n-            color: 'white',\r\n-            fontSize: '1.2rem',\r\n-            cursor: 'pointer'\r\n-          }}\r\n-        >\r\n-          √ó\r\n-        </button>\r\n-      </div>\r\n-      \r\n-      {/* Chat messages */}\r\n-      <div style={{\r\n-        flex: 1,\r\n-        padding: '1rem',\r\n-        overflowY: 'auto',\r\n-        display: 'flex',\r\n-        flexDirection: 'column',\r\n-        gap: '0.8rem'\r\n-      }}>\r\n-        {messages.map((msg, index) => (\r\n-          <div \r\n-            key={index}\r\n-            style={{\r\n-              alignSelf: msg.sender === 'user' ? 'flex-end' : 'flex-start',\r\n-              maxWidth: '80%',\r\n-              padding: '0.6rem 1rem',\r\n-              borderRadius: msg.sender === 'user' \r\n-                ? '18px 18px 0 18px' \r\n-                : '18px 18px 18px 0',\r\n-              backgroundColor: msg.sender === 'user'\r\n-                ? (darkMode ? '#4a5568' : '#3b82f6')\r\n-                : (darkMode ? '#4a5568' : '#e2e8f0'),\r\n-              color: msg.sender === 'user' ? 'white' : (darkMode ? 'white' : '#1e293b'),\r\n-              animation: msg.sender === 'bot' && index === messages.length - 1 \r\n-                ? 'fadeIn 0.3s ease' \r\n-                : 'none'\r\n-            }}\r\n-          >\r\n-            {msg.text}\r\n-          </div>\r\n-        ))}\r\n-        <div ref={chatEndRef} />\r\n-      </div>\r\n-      \r\n-      {/* Chat input */}\r\n-      <form onSubmit={handleSendMessage} style={{\r\n-        padding: '0.8rem',\r\n-        borderTop: darkMode ? '1px solid #4a5568' : '1px solid #e2e8f0',\r\n-        display: 'flex',\r\n-        gap: '0.5rem'\r\n-      }}>\r\n-        <input\r\n-          ref={inputRef}\r\n-          type=\"text\"\r\n-          value={inputValue}\r\n-          onChange={(e) => setInputValue(e.target.value)}\r\n-          placeholder=\"Ask me about urban living...\"\r\n-          disabled={isTyping}\r\n-          style={{\r\n-            flex: 1,\r\n-            padding: '0.6rem 1rem',\r\n-            borderRadius: '20px',\r\n-            border: darkMode ? '1px solid #4a5568' : '1px solid #e2e8f0',\r\n-            backgroundColor: darkMode ? '#2d3748' : 'white',\r\n-            color: darkMode ? 'white' : '#1e293b',\r\n-            outline: 'none',\r\n-            opacity: isTyping ? 0.7 : 1\r\n-          }}\r\n-        />\r\n-        <button \r\n-          type=\"submit\"\r\n-          disabled={isTyping}\r\n-          style={{\r\n-            background: isTyping \r\n-              ? (darkMode ? '#4a5568' : '#e2e8f0')\r\n-              : (darkMode ? '#4a5568' : '#3b82f6'),\r\n-            color: 'white',\r\n-            border: 'none',\r\n-            borderRadius: '50%',\r\n-            width: '40px',\r\n-            height: '40px',\r\n-            display: 'flex',\r\n-            alignItems: 'center',\r\n-            justifyContent: 'center',\r\n-            cursor: isTyping ? 'not-allowed' : 'pointer'\r\n-          }}\r\n-        >\r\n-          {isTyping ? '...' : '‚û§'}\r\n-        </button>\r\n-      </form>\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-// Main Home Component\r\n-export default function Home() {\r\n-  const navigate = useNavigate();\r\n-  const [searchQuery, setSearchQuery] = useState('');\r\n-  const [darkMode, setDarkMode] = useState(false);\r\n-  const [selectedService, setSelectedService] = useState(null);\r\n-  const [orderCount, setOrderCount] = useState(0);\r\n-  const [achievements, setAchievements] = useState([]);\r\n-  const [showChat, setShowChat] = useState(false);\r\n-\r\n-  const services = [\r\n-    { \r\n-      name: 'Transport', \r\n-      path: '/transport', \r\n-      icon: 'üöå', \r\n-      desc: 'Plan your multi-modal journey across the city',\r\n-      color: '#3b82f6',\r\n-      details: 'Find the best routes combining metro, buses, and bikes. Real-time updates and ticket purchasing available.'\r\n-    },\r\n-    { \r\n-      name: 'Food Delivery', \r\n-      path: '/food', \r\n-      icon: 'üçî', \r\n-      desc: 'Discover local restaurants and cafes',\r\n-      color: '#ef4444',\r\n-      details: 'Order from hundreds of restaurants with special discounts. Track your delivery in real-time.'\r\n-    },\r\n-    { \r\n-      name: 'Groceries', \r\n-      path: '/food', \r\n-      icon: 'üõí', \r\n-      desc: 'Get groceries delivered in minutes',\r\n-      color: '#10b981',\r\n-      details: 'Same-day delivery from local supermarkets. Schedule recurring orders for essentials.'\r\n-    },\r\n-    { \r\n-      name: 'Services', \r\n-      path: '/food', \r\n-      icon: 'üõ†Ô∏è', \r\n-      desc: 'Find urban services near you',\r\n-      color: '#8b5cf6',\r\n-      details: 'Book home services, repairs, and professional help with verified providers.'\r\n-    }\r\n-  ];\r\n-\r\n-  // Check for achievements\r\n-  useEffect(() => {\r\n-    if (orderCount === 1) {\r\n-      addAchievement('First Order!', 'üéâ');\r\n-    } else if (orderCount === 5) {\r\n-      addAchievement('Regular Customer!', 'üèÜ');\r\n-    } else if (orderCount === 10) {\r\n-      addAchievement('Super User!', 'üåü');\r\n-    }\r\n-  }, [orderCount]);\r\n-\r\n-  const addAchievement = (title, icon) => {\r\n-    if (!achievements.some(a => a.title === title)) {\r\n-      const newAchievement = { title, icon, id: Date.now() };\r\n-      setAchievements(prev => [...prev, newAchievement]);\r\n-      \r\n-      // Auto-hide achievement after 3 seconds\r\n-      setTimeout(() => {\r\n-        setAchievements(prev => prev.filter(a => a.id !== newAchievement.id));\r\n-      }, 3000);\r\n-    }\r\n-  };\r\n-\r\n-  const handleSearch = (e) => {\r\n-    e.preventDefault();\r\n-    if (searchQuery.trim()) {\r\n-      navigate(`/food?search=${encodeURIComponent(searchQuery)}`);\r\n-    }\r\n-  };\r\n-\r\n-  const toggleDarkMode = () => {\r\n-    setDarkMode(!darkMode);\r\n-  };\r\n-\r\n-  const openServicePopup = (service) => {\r\n-    setSelectedService(service);\r\n-    setOrderCount(prev => prev + 1);\r\n-  };\r\n-\r\n-  const closePopup = () => {\r\n-    setSelectedService(null);\r\n-  };\r\n-\r\n-  const toggleChat = () => {\r\n-    setShowChat(!showChat);\r\n-  };\r\n-\r\n-  return (\r\n-    <div style={{\r\n-      backgroundColor: darkMode ? '#1a202c' : '#f8fafc',\r\n-      minHeight: '100vh',\r\n-      paddingBottom: '3rem',\r\n-      color: darkMode ? '#e2e8f0' : '#1e293b',\r\n-      transition: 'all 0.3s ease',\r\n-      position: 'relative'\r\n-    }}>\r\n-      {/* Theme Toggle Button */}\r\n-      <button \r\n-        onClick={toggleDarkMode} \r\n-        style={{\r\n-          position: 'fixed',\r\n-          top: '1.5rem',\r\n-          right: '1.5rem',\r\n-          background: darkMode ? '#4a5568' : '#e2e8f0',\r\n-          border: 'none',\r\n-          borderRadius: '50%',\r\n-          width: '40px',\r\n-          height: '40px',\r\n-          display: 'flex',\r\n-          alignItems: 'center',\r\n-          justifyContent: 'center',\r\n-          cursor: 'pointer',\r\n-          transition: 'all 0.3s ease',\r\n-          boxShadow: '0 2px 5px rgba(0, 0, 0, 0.2)',\r\n-          zIndex: 100\r\n-        }}\r\n-        aria-label={darkMode ? 'Switch to light mode' : 'Switch to dark mode'}\r\n-      >\r\n-        {darkMode ? '‚òÄÔ∏è' : 'üåô'}\r\n-      </button>\r\n-      \r\n-      {/* Hero Section with UrbanBuddy */}\r\n-      <section style={{\r\n-        background: darkMode \r\n-          ? 'linear-gradient(135deg, #2d3748 0%, #1a202c 100%)' \r\n-          : 'linear-gradient(135deg, #6b46c1 0%, #3b82f6 100%)',\r\n-        color: 'white',\r\n-        padding: '4rem 1rem',\r\n-        textAlign: 'center',\r\n-        borderRadius: '0 0 20px 20px',\r\n-        boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',\r\n-        position: 'relative',\r\n-        overflow: 'hidden',\r\n-        height: '300px'\r\n-      }}>\r\n-        <div style={{\r\n-          maxWidth: '800px',\r\n-          margin: '0 auto',\r\n-          position: 'relative',\r\n-          zIndex: 2\r\n-        }}>\r\n-          <h1 style={{\r\n-            fontSize: '3.5rem',\r\n-            fontWeight: '800',\r\n-            marginBottom: '0.5rem',\r\n-            textShadow: '2px 2px 4px rgba(0, 0, 0, 0.2)',\r\n-          }}>UrbanFlow</h1>\r\n-          <p style={{\r\n-            fontSize: '1.25rem',\r\n-            marginBottom: '2rem',\r\n-            opacity: 0.9,\r\n-          }}>Your seamless urban living companion</p>\r\n-          \r\n-          <form onSubmit={handleSearch} style={{\r\n-            display: 'flex',\r\n-            maxWidth: '600px',\r\n-            margin: '0 auto',\r\n-            borderRadius: '50px',\r\n-            overflow: 'hidden',\r\n-            boxShadow: '0 4px 10px rgba(0, 0, 0, 0.2)',\r\n-          }}>\r\n-            <input\r\n-              type=\"text\"\r\n-              placeholder=\"Search for restaurants, services...\"\r\n-              value={searchQuery}\r\n-              onChange={(e) => setSearchQuery(e.target.value)}\r\n-              style={{\r\n-                flex: 1,\r\n-                padding: '1rem 1.5rem',\r\n-                border: 'none',\r\n-                fontSize: '1rem',\r\n-                outline: 'none',\r\n-                backgroundColor: darkMode ? '#2d3748' : 'white',\r\n-                color: darkMode ? '#e2e8f0' : '#1e293b',\r\n-              }}\r\n-            />\r\n-            <button type=\"submit\" style={{\r\n-              backgroundColor: darkMode ? '#4a5568' : '#1e40af',\r\n-              color: 'white',\r\n-              border: 'none',\r\n-              padding: '0 1.5rem',\r\n-              cursor: 'pointer',\r\n-              fontSize: '1.25rem',\r\n-              transition: 'background-color 0.2s'\r\n-            }}>\r\n-              <span>üîç</span>\r\n-            </button>\r\n-          </form>\r\n-        </div>\r\n-        <UrbanBuddy darkMode={darkMode} onChatOpen={toggleChat} />\r\n-      </section>\r\n-\r\n-      {/* Services Grid */}\r\n-      <section style={{\r\n-        padding: '2rem 1rem',\r\n-        maxWidth: '1200px',\r\n-        margin: '0 auto',\r\n-      }}>\r\n-        <h2 style={{\r\n-          fontSize: '2rem',\r\n-          fontWeight: '700',\r\n-          marginBottom: '1.5rem',\r\n-          color: darkMode ? '#e2e8f0' : '#1e293b',\r\n-          textAlign: 'center',\r\n-        }}>What do you need today?</h2>\r\n-        <div style={{\r\n-          display: 'grid',\r\n-          gridTemplateColumns: 'repeat(auto-fit, minmax(250px, 1fr))',\r\n-          gap: '1.5rem',\r\n-          marginTop: '1rem',\r\n-        }}>\r\n-          {services.map((service) => (\r\n-            <div \r\n-              key={service.name} \r\n-              style={{ \r\n-                padding: '2rem 1.5rem',\r\n-                borderRadius: '16px',\r\n-                border: `2px solid ${service.color}`,\r\n-                textAlign: 'center',\r\n-                cursor: 'pointer',\r\n                 transition: 'transform 0.3s, box-shadow 0.3s',\r\n-                backgroundColor: darkMode \r\n-                  ? `${service.color}20` \r\n-                  : `${service.color}10`,\r\n+                backgroundColor: darkMode ? `${service.color}20` : `${service.color}10`,\r\n                 ':hover': {\r\n                   transform: 'translateY(-5px)',\r\n                   boxShadow: '0 10px 20px rgba(0, 0, 0, 0.1)',\r\n                 }\r\n               }}\r\n-              onClick={() => openServicePopup(service)}\r\n             >\r\n-              <div style={{ \r\n-                fontSize: '3rem',\r\n-                marginBottom: '1rem',\r\n-                display: 'inline-block',\r\n-                animation: 'float 3s ease-in-out infinite'\r\n-              }}>{service.icon}</div>\r\n+              <div style={{ fontSize: '3rem', marginBottom: '1rem', animation: 'float 3s ease-in-out infinite' }}>\r\n+                {service.icon}\r\n+              </div>\r\n               <h3 style={{fontSize: '1.5rem', fontWeight: '600', marginBottom: '0.5rem'}}>{service.name}</h3>\r\n               <p style={{color: darkMode ? '#a0aec0' : '#64748b'}}>{service.desc}</p>\r\n             </div>\r\n           ))}\r\n         </div>\r\n       </section>\r\n \r\n-      {/* Featured Section */}\r\n-      <section style={{\r\n-        padding: '2rem 1rem',\r\n-        maxWidth: '1200px',\r\n-        margin: '0 auto',\r\n-      }}>\r\n-        <h2 style={{\r\n-          fontSize: '2rem',\r\n-          fontWeight: '700',\r\n-          marginBottom: '1.5rem',\r\n-          color: darkMode ? '#e2e8f0' : '#1e293b',\r\n-          textAlign: 'center',\r\n-        }}>Quick Access</h2>\r\n-        <div style={{\r\n-          display: 'flex',\r\n-          justifyContent: 'center',\r\n-          gap: '1rem',\r\n-          flexWrap: 'wrap',\r\n-        }}>\r\n-          <button \r\n-            onClick={() => navigate('/transport?from=home&to=downtown')}\r\n-            style={{\r\n-              padding: '0.75rem 1.5rem',\r\n-              borderRadius: '50px',\r\n-              border: 'none',\r\n-              backgroundColor: darkMode ? '#2d3748' : '#e2e8f0',\r\n-              color: darkMode ? '#e2e8f0' : '#1e293b',\r\n-              fontWeight: '600',\r\n-              cursor: 'pointer',\r\n-              transition: 'all 0.2s',\r\n-              display: 'flex',\r\n-              alignItems: 'center',\r\n-              gap: '0.5rem',\r\n-              fontSize: '1rem'\r\n-            }}\r\n-          >\r\n-            üöï To Downtown\r\n-          </button>\r\n-          <button \r\n-            onClick={() => navigate('/food?category=fastfood')}\r\n-            style={{\r\n-              padding: '0.75rem 1.5rem',\r\n-              borderRadius: '50px',\r\n-              border: 'none',\r\n-              backgroundColor: darkMode ? '#2d3748' : '#e2e8f0',\r\n-              color: darkMode ? '#e2e8f0' : '#1e293b',\r\n-              fontWeight: '600',\r\n-              cursor: 'pointer',\r\n-              transition: 'all 0.2s',\r\n-              display: 'flex',\r\n-              alignItems: 'center',\r\n-              gap: '0.5rem',\r\n-              fontSize: '1rem'\r\n-            }}\r\n-          >\r\n-            üçü Fast Food\r\n-          </button>\r\n-          <button \r\n-            onClick={() => navigate('/food?category=coffee')}\r\n-            style={{\r\n-              padding: '0.75rem 1.5rem',\r\n-              borderRadius: '50px',\r\n-              border: 'none',\r\n-              backgroundColor: darkMode ? '#2d3748' : '#e2e8f0',\r\n-              color: darkMode ? '#e2e8f0' : '#1e293b',\r\n-              fontWeight: '600',\r\n-              cursor: 'pointer',\r\n-              transition: 'all 0.2s',\r\n-              display: 'flex',\r\n-              alignItems: 'center',\r\n-              gap: '0.5rem',\r\n-              fontSize: '1rem'\r\n-            }}\r\n-          >\r\n-            ‚òï Coffee Shops\r\n-          </button>\r\n-        </div>\r\n-      </section>\r\n-\r\n-      {/* Service Popup */}\r\n-      {selectedService && (\r\n-        <div style={{\r\n-          position: 'fixed',\r\n-          top: 0,\r\n-          left: 0,\r\n-          right: 0,\r\n-          bottom: 0,\r\n-          backgroundColor: 'rgba(0, 0, 0, 0.7)',\r\n-          display: 'flex',\r\n-          justifyContent: 'center',\r\n-          alignItems: 'center',\r\n-          zIndex: 1000,\r\n-        }} onClick={closePopup}>\r\n-          <div style={{\r\n-            backgroundColor: darkMode ? '#2d3748' : 'white',\r\n-            borderRadius: '16px',\r\n-            padding: '2rem',\r\n-            maxWidth: '500px',\r\n-            width: '90%',\r\n-            boxShadow: '0 10px 25px rgba(0, 0, 0, 0.2)',\r\n-            position: 'relative',\r\n-            border: darkMode ? '1px solid #4a5568' : '1px solid #e2e8f0',\r\n-          }} onClick={(e) => e.stopPropagation()}>\r\n-            <button style={{\r\n-              position: 'absolute',\r\n-              top: '1rem',\r\n-              right: '1rem',\r\n-              background: 'none',\r\n-              border: 'none',\r\n-              fontSize: '1.5rem',\r\n-              cursor: 'pointer',\r\n-              color: darkMode ? '#a0aec0' : '#64748b',\r\n-            }} onClick={closePopup}>√ó</button>\r\n-            <div style={{ \r\n-              display: 'flex', \r\n-              alignItems: 'center', \r\n-              gap: '1rem',\r\n-              marginBottom: '1.5rem'\r\n-            }}>\r\n-              <span style={{ fontSize: '2.5rem', animation: 'float 3s ease-in-out infinite' }}>{selectedService.icon}</span>\r\n-              <h3 style={{fontSize: '1.8rem', fontWeight: '700', marginBottom: '1rem', color: darkMode ? '#e2e8f0' : '#1e293b'}}>{selectedService.name}</h3>\r\n-            </div>\r\n-            <p style={{color: darkMode ? '#a0aec0' : '#64748b', fontSize: '1.1rem', lineHeight: '1.6', marginBottom: '2rem'}}>{selectedService.details}</p>\r\n-            <button \r\n-              style={{ \r\n-                padding: '0.75rem 1.5rem',\r\n-                borderRadius: '8px',\r\n-                border: 'none',\r\n-                backgroundColor: selectedService.color,\r\n-                color: 'white',\r\n-                fontWeight: '600',\r\n-                cursor: 'pointer',\r\n-                transition: 'all 0.2s',\r\n-                fontSize: '1rem'\r\n-              }}\r\n-              onClick={() => {\r\n-                navigate(selectedService.path);\r\n-                closePopup();\r\n-              }}\r\n-            >\r\n-              Explore {selectedService.name}\r\n-            </button>\r\n-          </div>\r\n-        </div>\r\n-      )}\r\n-\r\n-      {/* Achievements */}\r\n-      {achievements.map(achievement => (\r\n-        <div key={achievement.id} style={{\r\n-          position: 'fixed',\r\n-          bottom: '20px',\r\n-          right: '20px',\r\n-          background: darkMode ? '#2d3748' : 'white',\r\n-          color: darkMode ? 'white' : '#1e293b',\r\n-          padding: '1rem',\r\n-          borderRadius: '12px',\r\n-          boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',\r\n-          display: 'flex',\r\n-          alignItems: 'center',\r\n-          gap: '0.5rem',\r\n-          zIndex: 1000,\r\n-          animation: 'slideIn 0.5s forwards, fadeOut 0.5s forwards 2.5s'\r\n-        }}>\r\n-          <span style={{fontSize: '1.5rem'}}>{achievement.icon}</span>\r\n-          <span>{achievement.title}</span>\r\n-        </div>\r\n-      ))}\r\n-\r\n-      {/* Chat Modal */}\r\n-      {showChat && <ChatModal darkMode={darkMode} onClose={toggleChat} />}\r\n-\r\n-      {/* Footer with copyright */}\r\n-      <footer style={{\r\n-        textAlign: 'center',\r\n-        padding: '2rem 1rem',\r\n-        color: darkMode ? '#a0aec0' : '#64748b',\r\n-        fontSize: '0.9rem',\r\n-        marginTop: '2rem'\r\n-      }}>\r\n-        <p>¬© {new Date().getFullYear()} UrbanFlow - Created by Nick</p>\r\n-      </footer>\r\n-    </div>\r\n-  );\r\n-};\n-import { useState, useEffect, useRef } from 'react';\r\n-import { useNavigate } from 'react-router-dom';\r\n-\r\n-// UrbanBuddy AI Assistant Component with proper bot icon\r\n-const UrbanBuddy = ({ darkMode, onChatOpen }) => {\r\n-  const [position, setPosition] = useState({ x: 20, y: 50 });\r\n-  const [direction, setDirection] = useState(1);\r\n-  const botRef = useRef(null);\r\n-  const lastInteractionTime = useRef(Date.now());\r\n-\r\n-  useEffect(() => {\r\n-    const moveInterval = setInterval(() => {\r\n-      setPosition(prev => {\r\n-        const now = Date.now();\r\n-        const timeSinceLastInteraction = now - lastInteractionTime.current;\r\n-        const speedMultiplier = timeSinceLastInteraction < 5000 ? 2 : 1;\r\n-        \r\n-        let newX = prev.x + (3 * direction * speedMultiplier);\r\n-        let newY = prev.y + (Math.random() * 6 - 3);\r\n-        \r\n-        if (newX > window.innerWidth - 80) setDirection(-1);\r\n-        if (newX < 20) setDirection(1);\r\n-        if (newY < 20) newY = 20;\r\n-        if (newY > window.innerHeight - 100) newY = window.innerHeight - 100;\r\n-        \r\n-        return { x: newX, y: newY };\r\n-      });\r\n-    }, 100);\r\n-\r\n-    return () => clearInterval(moveInterval);\r\n-  }, [direction]);\r\n-\r\n-  const handleClick = () => {\r\n-    lastInteractionTime.current = Date.now();\r\n-    onChatOpen();\r\n-  };\r\n-\r\n-  return (\r\n-    <div \r\n-      ref={botRef}\r\n-      onClick={handleClick}\r\n-      style={{\r\n-        position: 'fixed',\r\n-        left: `${position.x}px`,\r\n-        top: `${position.y}px`,\r\n-        fontSize: '2.5rem',\r\n-        cursor: 'pointer',\r\n-        transition: 'all 0.3s ease',\r\n-        transform: `scaleX(${direction})`,\r\n-        zIndex: 100,\r\n-        filter: darkMode \r\n-          ? 'drop-shadow(0 0 8px rgba(255,255,255,0.7))' \r\n-          : 'drop-shadow(0 0 8px rgba(0,0,0,0.3))',\r\n-        userSelect: 'none',\r\n-        animation: 'float 4s ease-in-out infinite'\r\n-      }}\r\n-    >\r\n-      <div style={{ \r\n-        position: 'relative',\r\n-        display: 'flex',\r\n-        flexDirection: 'column',\r\n-        alignItems: 'center'\r\n-      }}>\r\n-        <div style={{\r\n-          width: '60px',\r\n-          height: '60px',\r\n-          backgroundColor: darkMode ? '#4a5568' : '#3b82f6',\r\n-          borderRadius: '50%',\r\n-          display: 'flex',\r\n-          justifyContent: 'center',\r\n-          alignItems: 'center',\r\n-          color: 'white'\r\n-        }}>\r\n-          <span style={{ fontSize: '1.8rem' }}>ü§ñ</span>\r\n-        </div>\r\n-      </div>\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-// Chat Modal Component with Gemini API Connection\r\n-const ChatModal = ({ darkMode, onClose }) => {\r\n-  const [messages, setMessages] = useState([\r\n-    { text: \"Hello! I'm UrbanBuddy, your AI assistant. How can I help you with urban services today?\", sender: 'bot' }\r\n-  ]);\r\n-  const [inputValue, setInputValue] = useState('');\r\n-  const [isTyping, setIsTyping] = useState(false);\r\n-  const chatEndRef = useRef(null);\r\n-  const inputRef = useRef(null);\r\n-\r\n-  useEffect(() => {\r\n-    chatEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n-    inputRef.current?.focus();\r\n-  }, [messages]);\r\n-\r\n-  const generateResponse = async (userMessage) => {\r\n-    setIsTyping(true);\r\n-    \r\n-    try {\r\n-      const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent?key=${process.env.REACT_APP_GEMINI_API_KEY}`, {\r\n-        method: \"POST\",\r\n-        headers: { \"Content-Type\": \"application/json\" },\r\n-        body: JSON.stringify({\r\n-          contents: [{\r\n-            parts: [{\r\n-              text: `As UrbanBuddy, a friendly AI assistant for urban services, provide a helpful 1-2 sentence response to this query: ${userMessage}`\r\n-            }]\r\n-          }]\r\n-        })\r\n-      });\r\n-      \r\n-      const data = await response.json();\r\n-      const botResponse = data.candidates?.[0]?.content?.parts?.[0]?.text || \r\n-                         \"I can help with transport, food, and other urban services!\";\r\n-      \r\n-      setMessages(prev => [...prev, { text: botResponse, sender: 'bot' }]);\r\n-    } catch (error) {\r\n-      console.error(\"API error:\", error);\r\n-      setMessages(prev => [...prev, { \r\n-        text: \"Connection issue - please try again later\", \r\n-        sender: 'bot' \r\n-      }]);\r\n-    } finally {\r\n-      setIsTyping(false);\r\n-    }\r\n-  };\r\n-\r\n-  const handleSendMessage = async (e) => {\r\n-    e.preventDefault();\r\n-    if (inputValue.trim() && !isTyping) {\r\n-      const userMessage = inputValue.trim();\r\n-      setMessages(prev => [...prev, { text: userMessage, sender: 'user' }]);\r\n-      setInputValue('');\r\n-      await generateResponse(userMessage);\r\n-    }\r\n-  };\r\n-\r\n-  return (\r\n-    <div style={{\r\n-      position: 'fixed',\r\n-      bottom: '100px',\r\n-      right: '30px',\r\n-      width: '350px',\r\n-      maxWidth: '90%',\r\n-      backgroundColor: darkMode ? '#2d3748' : 'white',\r\n-      borderRadius: '16px',\r\n-      boxShadow: '0 10px 25px rgba(0, 0, 0, 0.2)',\r\n-      zIndex: 1000,\r\n-      overflow: 'hidden',\r\n-      display: 'flex',\r\n-      flexDirection: 'column',\r\n-      maxHeight: '60vh'\r\n-    }}>\r\n-      <div style={{\r\n-        padding: '1rem',\r\n-        backgroundColor: darkMode ? '#4a5568' : '#3b82f6',\r\n-        color: 'white',\r\n-        display: 'flex',\r\n-        justifyContent: 'space-between',\r\n-        alignItems: 'center'\r\n-      }}>\r\n-        <div style={{ display: 'flex', alignItems: 'center', gap: '0.5rem' }}>\r\n-          <span style={{ fontSize: '1.5rem' }}>ü§ñ</span>\r\n-          <h3 style={{ margin: 0 }}>UrbanBuddy</h3>\r\n-          {isTyping && <span style={{ fontSize: '0.8rem', opacity: 0.8 }}>typing...</span>}\r\n-        </div>\r\n-        <button \r\n-          onClick={onClose}\r\n-          style={{\r\n-            background: 'none',\r\n-            border: 'none',\r\n-            color: 'white',\r\n-            fontSize: '1.2rem',\r\n-            cursor: 'pointer'\r\n-          }}\r\n-        >\r\n-          √ó\r\n-        </button>\r\n-      </div>\r\n-      \r\n-      <div style={{\r\n-        flex: 1,\r\n-        padding: '1rem',\r\n-        overflowY: 'auto',\r\n-        display: 'flex',\r\n-        flexDirection: 'column',\r\n-        gap: '0.8rem'\r\n-      }}>\r\n-        {messages.map((msg, index) => (\r\n-          <div \r\n-            key={index}\r\n-            style={{\r\n-              alignSelf: msg.sender === 'user' ? 'flex-end' : 'flex-start',\r\n-              maxWidth: '80%',\r\n-              padding: '0.6rem 1rem',\r\n-              borderRadius: msg.sender === 'user' \r\n-                ? '18px 18px 0 18px' \r\n-                : '18px 18px 18px 0',\r\n-              backgroundColor: msg.sender === 'user'\r\n-                ? (darkMode ? '#4a5568' : '#3b82f6')\r\n-                : (darkMode ? '#4a5568' : '#e2e8f0'),\r\n-              color: msg.sender === 'user' ? 'white' : (darkMode ? 'white' : '#1e293b'),\r\n-            }}\r\n-          >\r\n-            {msg.text}\r\n-          </div>\r\n-        ))}\r\n-        <div ref={chatEndRef} />\r\n-      </div>\r\n-      \r\n-      <form onSubmit={handleSendMessage} style={{\r\n-        padding: '0.8rem',\r\n-        borderTop: darkMode ? '1px solid #4a5568' : '1px solid #e2e8f0',\r\n-        display: 'flex',\r\n-        gap: '0.5rem'\r\n-      }}>\r\n-        <input\r\n-          ref={inputRef}\r\n-          type=\"text\"\r\n-          value={inputValue}\r\n-          onChange={(e) => setInputValue(e.target.value)}\r\n-          placeholder=\"Ask about urban services...\"\r\n-          disabled={isTyping}\r\n-          style={{\r\n-            flex: 1,\r\n-            padding: '0.6rem 1rem',\r\n-            borderRadius: '20px',\r\n-            border: darkMode ? '1px solid #4a5568' : '1px solid #e2e8f0',\r\n-            backgroundColor: darkMode ? '#2d3748' : 'white',\r\n-            color: darkMode ? 'white' : '#1e293b',\r\n-            outline: 'none'\r\n-          }}\r\n-        />\r\n-        <button \r\n-          type=\"submit\"\r\n-          disabled={isTyping}\r\n-          style={{\r\n-            background: isTyping \r\n-              ? (darkMode ? '#4a5568' : '#e2e8f0')\r\n-              : (darkMode ? '#4a5568' : '#3b82f6'),\r\n-            color: 'white',\r\n-            border: 'none',\r\n-            borderRadius: '50%',\r\n-            width: '40px',\r\n-            height: '40px',\r\n-            display: 'flex',\r\n-            alignItems: 'center',\r\n-            justifyContent: 'center',\r\n-            cursor: isTyping ? 'not-allowed' : 'pointer'\r\n-          }}\r\n-        >\r\n-          {isTyping ? '...' : '‚û§'}\r\n-        </button>\r\n-      </form>\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-// Main Home Component\r\n-export default function Home() {\r\n-  const navigate = useNavigate();\r\n-  const [darkMode, setDarkMode] = useState(false);\r\n-  const [showChat, setShowChat] = useState(false);\r\n-  const [searchQuery, setSearchQuery] = useState('');\r\n-  const [selectedService, setSelectedService] = useState(null);\r\n-  const [orderCount, setOrderCount] = useState(0);\r\n-  const [achievements, setAchievements] = useState([]);\r\n-\r\n-  const services = [\r\n-    { \r\n-      name: 'Transport', \r\n-      path: '/transport', \r\n-      icon: 'üöå', \r\n-      desc: 'Plan your multi-modal journey across the city',\r\n-      color: '#3b82f6'\r\n-    },\r\n-    { \r\n-      name: 'Food Delivery', \r\n-      path: '/food', \r\n-      icon: 'üçî', \r\n-      desc: 'Discover local restaurants and cafes',\r\n-      color: '#ef4444'\r\n-    },\r\n-    { \r\n-      name: 'Groceries', \r\n-      path: '/groceries', \r\n-      icon: 'üõí', \r\n-      desc: 'Get groceries delivered in minutes',\r\n-      color: '#10b981'\r\n-    },\r\n-    { \r\n-      name: 'Services', \r\n-      path: '/services', \r\n-      icon: 'üõ†Ô∏è', \r\n-      desc: 'Find urban services near you',\r\n-      color: '#8b5cf6'\r\n-    }\r\n-  ];\r\n-\r\n-  useEffect(() => {\r\n-    if (orderCount === 1) {\r\n-      addAchievement('First Order!', 'üéâ');\r\n-    } else if (orderCount === 5) {\r\n-      addAchievement('Regular Customer!', 'üèÜ');\r\n-    }\r\n-  }, [orderCount]);\r\n-\r\n-  const addAchievement = (title, icon) => {\r\n-    const newAchievement = { title, icon, id: Date.now() };\r\n-    setAchievements(prev => [...prev, newAchievement]);\r\n-    setTimeout(() => {\r\n-      setAchievements(prev => prev.filter(a => a.id !== newAchievement.id));\r\n-    }, 3000);\r\n-  };\r\n-\r\n-  const handleSearch = (e) => {\r\n-    e.preventDefault();\r\n-    if (searchQuery.trim()) {\r\n-      navigate(`/search?q=${encodeURIComponent(searchQuery)}`);\r\n-    }\r\n-  };\r\n-\r\n-  return (\r\n-    <div style={{\r\n-      backgroundColor: darkMode ? '#1a202c' : '#f8fafc',\r\n-      minHeight: '100vh',\r\n-      color: darkMode ? '#e2e8f0' : '#1e293b',\r\n-      transition: 'all 0.3s ease'\r\n-    }}>\r\n-      {/* Header */}\r\n-      <header style={{\r\n-        background: darkMode \r\n-          ? 'linear-gradient(135deg, #2d3748 0%, #1a202c 100%)' \r\n-          : 'linear-gradient(135deg, #6b46c1 0%, #3b82f6 100%)',\r\n-        color: 'white',\r\n-        padding: '3rem 1rem',\r\n-        textAlign: 'center',\r\n-        borderRadius: '0 0 20px 20px',\r\n-        position: 'relative'\r\n-      }}>\r\n-        <h1 style={{ fontSize: '2.5rem', fontWeight: '800', marginBottom: '0.5rem' }}>UrbanFlow</h1>\r\n-        <p style={{ fontSize: '1.1rem', opacity: 0.9 }}>Your urban services companion</p>\r\n-        \r\n-        <form onSubmit={handleSearch} style={{\r\n-          display: 'flex',\r\n-          maxWidth: '600px',\r\n-          margin: '2rem auto 0',\r\n-          borderRadius: '50px',\r\n-          overflow: 'hidden',\r\n-          boxShadow: '0 4px 10px rgba(0, 0, 0, 0.2)',\r\n-        }}>\r\n-          <input\r\n-            type=\"text\"\r\n-            placeholder=\"Search for services...\"\r\n-            value={searchQuery}\r\n-            onChange={(e) => setSearchQuery(e.target.value)}\r\n-            style={{\r\n-              flex: 1,\r\n-              padding: '0.8rem 1.5rem',\r\n-              border: 'none',\r\n-              fontSize: '1rem',\r\n-              outline: 'none'\r\n-            }}\r\n-          />\r\n-          <button type=\"submit\" style={{\r\n-            backgroundColor: darkMode ? '#4a5568' : '#1e40af',\r\n-            color: 'white',\r\n-            border: 'none',\r\n-            padding: '0 1.5rem',\r\n-            cursor: 'pointer'\r\n-          }}>\r\n-            üîç\r\n-          </button>\r\n-        </form>\r\n-      </header>\r\n-\r\n-      {/* Services */}\r\n+      {/* Quick Access Buttons */}\r\n       <section style={{ padding: '2rem 1rem', maxWidth: '1200px', margin: '0 auto' }}>\r\n-        <h2 style={{ fontSize: '1.8rem', textAlign: 'center', marginBottom: '2rem' }}>\r\n-          Urban Services\r\n+        <h2 style={{ fontSize: '2rem', fontWeight: '700', marginBottom: '1.5rem', textAlign: 'center' }}>\r\n+          Quick Access\r\n         </h2>\r\n-        <div style={{\r\n-          display: 'grid',\r\n-          gridTemplateColumns: 'repeat(auto-fit, minmax(250px, 1fr))',\r\n-          gap: '1.5rem'\r\n-        }}>\r\n-          {services.map(service => (\r\n-            <div \r\n-              key={service.name}\r\n-              onClick={() => {\r\n-                setSelectedService(service);\r\n-                setOrderCount(prev => prev + 1);\r\n-              }}\r\n-              style={{\r\n-                padding: '1.5rem',\r\n-                borderRadius: '12px',\r\n-                background: darkMode ? '#2d3748' : 'white',\r\n-                boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',\r\n-                textAlign: 'center',\r\n-                cursor: 'pointer',\r\n-                transition: 'transform 0.2s',\r\n-                ':hover': {\r\n-                  transform: 'translateY(-5px)'\r\n-                }\r\n-              }}\r\n-            >\r\n-              <div style={{ \r\n-                fontSize: '2.5rem',\r\n-                marginBottom: '1rem',\r\n-                color: service.color\r\n-              }}>\r\n-                {service.icon}\r\n-              </div>\r\n-              <h3 style={{ fontSize: '1.3rem', marginBottom: '0.5rem' }}>{service.name}</h3>\r\n-              <p style={{ color: darkMode ? '#a0aec0' : '#64748b' }}>{service.desc}</p>\r\n-            </div>\r\n-          ))}\r\n-        </div>\r\n-      </section>\r\n-\r\n-      {/* Service Modal */}\r\n-      {selectedService && (\r\n-        <div style={{\r\n-          position: 'fixed',\r\n-          top: 0,\r\n-          left: 0,\r\n-          right: 0,\r\n-          bottom: 0,\r\n-          backgroundColor: 'rgba(0, 0, 0, 0.7)',\r\n-          display: 'flex',\r\n-          justifyContent: 'center',\r\n-          alignItems: 'center',\r\n-          zIndex: 1000\r\n-        }} onClick={() => setSelectedService(null)}>\r\n-          <div style={{\r\n-            backgroundColor: darkMode ? '#2d3748' : 'white',\r\n-            borderRadius: '16px',\r\n-            padding: '2rem',\r\n-            maxWidth: '500px',\r\n-            width: '90%',\r\n-            textAlign: 'center'\r\n-          }} onClick={e => e.stopPropagation()}>\r\n-            <div style={{ fontSize: '3rem', marginBottom: '1rem', color: selectedService.color }}>\r\n-              {selectedService.icon}\r\n-            </div>\r\n-            <h3 style={{ fontSize: '1.8rem', marginBottom: '1rem' }}>{selectedService.name}</h3>\r\n-            <p style={{ marginBottom: '2rem', color: darkMode ? '#a0aec0' : '#64748b' }}>\r\n-              {selectedService.desc}\r\n-            </p>\r\n-            <button \r\n-              onClick={() => navigate(selectedService.path)}\r\n-              style={{\r\n-                padding: '0.8rem 1.5rem',\r\n-                backgroundColor: selectedService.color,\r\n-                color: 'white',\r\n-                border: 'none',\r\n-                borderRadius: '8px',\r\n-                cursor: 'pointer',\r\n-                fontSize: '1rem'\r\n-              }}\r\n-            >\r\n-              Explore {selectedService.name}\r\n-            </button>\r\n-          </div>\r\n-        </div>\r\n-      )}\r\n-\r\n-      {/* Achievements */}\r\n-      {achievements.map(achievement => (\r\n-        <div key={achievement.id} style={{\r\n-          position: 'fixed',\r\n-          bottom: '20px',\r\n-          right: '20px',\r\n-          background: darkMode ? '#2d3748' : 'white',\r\n-          color: darkMode ? 'white' : '#1e293b',\r\n-          padding: '1rem',\r\n-          borderRadius: '12px',\r\n-          boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',\r\n-          display: 'flex',\r\n-          alignItems: 'center',\r\n-          gap: '0.5rem',\r\n-          zIndex: 1000\r\n-        }}>\r\n-          <span style={{ fontSize: '1.5rem' }}>{achievement.icon}</span>\r\n-          <span>{achievement.title}</span>\r\n-        </div>\r\n-      ))}\r\n-\r\n-      {/* Theme Toggle */}\r\n-      <button \r\n-        onClick={() => setDarkMode(!darkMode)}\r\n-        style={{\r\n-          position: 'fixed',\r\n-          bottom: '20px',\r\n-          left: '20px',\r\n-          width: '50px',\r\n-          height: '50px',\r\n-          borderRadius: '50%',\r\n-          background: darkMode ? '#4a5568' : '#e2e8f0',\r\n-          border: 'none',\r\n-          cursor: 'pointer',\r\n-          fontSize: '1.5rem',\r\n-          display: 'flex',\r\n-          alignItems: 'center',\r\n-          justifyContent: 'center',\r\n-          zIndex: 100\r\n-        }}\r\n-      >\r\n-        {darkMode ? '‚òÄÔ∏è' : 'üåô'}\r\n-      </button>\r\n-\r\n-      {/* AI Components */}\r\n-      <UrbanBuddy darkMode={darkMode} onChatOpen={() => setShowChat(true)} />\r\n-      {showChat && <ChatModal darkMode={darkMode} onClose={() => setShowChat(false)} />}\r\n-\r\n-      {/* Footer */}\r\n-      <footer style={{\r\n-        textAlign: 'center',\r\n-        padding: '2rem 1rem',\r\n-        marginTop: '2rem',\r\n-        color: darkMode ? '#a0aec0' : '#64748b'\r\n-      }}>\r\n-        <p>¬© {new Date().getFullYear()} UrbanFlow - Urban Services Platform</p>\r\n-      </footer>\r\n-    </div>\r\n-  );\r\n-}\n-import { useState, useEffect, useRef } from 'react';\r\n-import { useNavigate } from 'react-router-dom';\r\n-\r\n-// UrbanBuddy AI Assistant Component\r\n-const UrbanBuddy = ({ darkMode, onChatOpen }) => {\r\n-  const [position, setPosition] = useState({ x: 20, y: 50 });\r\n-  const [expression, setExpression] = useState('üòä');\r\n-  const [direction, setDirection] = useState(1);\r\n-  const [costume, setCostume] = useState(null);\r\n-  const [isActive, setIsActive] = useState(false);\r\n-  const botRef = useRef(null);\r\n-  const animationRef = useRef(null);\r\n-  const lastInteractionTime = useRef(Date.now());\r\n-\r\n-  // Seasonal costumes\r\n-  useEffect(() => {\r\n-    const today = new Date();\r\n-    const month = today.getMonth() + 1;\r\n-    \r\n-    if (month === 12) setCostume('üéÑ');\r\n-    else if (month === 10) setCostume('üéÉ');\r\n-    else if (month === 2) setCostume('üíù');\r\n-    else if (month === 4) setCostume('üå∏');\r\n-    else setCostume(null);\r\n-  }, []);\r\n-\r\n-  // Make the bot wander with more dynamic movement\r\n-  useEffect(() => {\r\n-    const moveInterval = setInterval(() => {\r\n-      setPosition(prev => {\r\n-        const now = Date.now();\r\n-        const timeSinceLastInteraction = now - lastInteractionTime.current;\r\n-        \r\n-        // More active movement right after interaction\r\n-        const speedMultiplier = timeSinceLastInteraction < 5000 ? 2 : 1;\r\n-        \r\n-        let newX = prev.x + (3 * direction * speedMultiplier);\r\n-        let newY = prev.y + (Math.random() * 6 - 3);\r\n-        \r\n-        // Bounce off edges\r\n-        if (newX > window.innerWidth - 80) {\r\n-          setDirection(-1);\r\n-          triggerAnimation('spin');\r\n-        }\r\n-        if (newX < 20) {\r\n-          setDirection(1);\r\n-          triggerAnimation('spin');\r\n-        }\r\n-        if (newY < 20) newY = 20;\r\n-        if (newY > window.innerHeight - 100) newY = window.innerHeight - 100;\r\n-        \r\n-        return { x: newX, y: newY };\r\n-      });\r\n-    }, 100);\r\n-\r\n-    return () => clearInterval(moveInterval);\r\n-  }, [direction]);\r\n-\r\n-  // Change expressions randomly with more variety\r\n-  useEffect(() => {\r\n-    const expressions = ['üòä', 'ü§î', 'üòÆ', 'üòé', 'üëã', 'ü§ñ', '‚ú®', 'üåü'];\r\n-    const expressionInterval = setInterval(() => {\r\n-      if (!isActive) {\r\n-        setExpression(expressions[Math.floor(Math.random() * expressions.length)]);\r\n-        // Random animations when idle\r\n-        if (Math.random() > 0.8) {\r\n-          triggerAnimation(['bounce', 'spin', 'wobble'][Math.floor(Math.random() * 3)]);\r\n-        }\r\n-      }\r\n-    }, 3000);\r\n-    return () => clearInterval(expressionInterval);\r\n-  }, [isActive]);\r\n-\r\n-  const triggerAnimation = (type) => {\r\n-    if (animationRef.current) {\r\n-      clearTimeout(animationRef.current);\r\n-    }\r\n-    \r\n-    const botElement = botRef.current;\r\n-    if (!botElement) return;\r\n-    \r\n-    botElement.style.animation = 'none';\r\n-    void botElement.offsetWidth; // Trigger reflow\r\n-    \r\n-    switch(type) {\r\n-      case 'spin':\r\n-        botElement.style.animation = 'spin 1s ease';\r\n-        break;\r\n-      case 'bounce':\r\n-        botElement.style.animation = 'bounce 0.5s ease';\r\n-        break;\r\n-      case 'wobble':\r\n-        botElement.style.animation = 'wobble 0.8s ease';\r\n-        break;\r\n-      default:\r\n-        botElement.style.animation = '';\r\n-    }\r\n-    \r\n-    animationRef.current = setTimeout(() => {\r\n-      if (botElement) botElement.style.animation = '';\r\n-    }, 1000);\r\n-  };\r\n-\r\n-  const handleClick = () => {\r\n-    lastInteractionTime.current = Date.now();\r\n-    setIsActive(true);\r\n-    triggerAnimation('bounce');\r\n-    setExpression('üí°');\r\n-    \r\n-    // Trigger chat opening in parent component\r\n-    onChatOpen();\r\n-    \r\n-    // Return to normal after a delay\r\n-    setTimeout(() => {\r\n-      setIsActive(false);\r\n-    }, 3000);\r\n-  };\r\n-\r\n-  // Custom animations\r\n-  const animations = `\r\n-    @keyframes spin {\r\n-      0% { transform: rotate(0deg) scaleX(${direction}); }\r\n-      100% { transform: rotate(360deg) scaleX(${direction}); }\r\n-    }\r\n-    @keyframes bounce {\r\n-      0%, 100% { transform: translateY(0) scaleX(${direction}); }\r\n-      50% { transform: translateY(-20px) scaleX(${direction}); }\r\n-    }\r\n-    @keyframes wobble {\r\n-      0%, 100% { transform: rotate(0deg) scaleX(${direction}); }\r\n-      25% { transform: rotate(5deg) scaleX(${direction}); }\r\n-      75% { transform: rotate(-5deg) scaleX(${direction}); }\r\n-    }\r\n-    @keyframes float {\r\n-      0% { transform: translateY(0px) scaleX(${direction}); }\r\n-      50% { transform: translateY(-10px) scaleX(${direction}); }\r\n-      100% { transform: translateY(0px) scaleX(${direction}); }\r\n-    }\r\n-  `;\r\n-\r\n-  return (\r\n-    <>\r\n-      <style>{animations}</style>\r\n-      <div \r\n-        ref={botRef}\r\n-        onClick={handleClick}\r\n-        style={{\r\n-          position: 'fixed',\r\n-          left: `${position.x}px`,\r\n-          top: `${position.y}px`,\r\n-          fontSize: '2.5rem',\r\n-          cursor: 'pointer',\r\n-          transition: 'all 0.3s ease',\r\n-          transform: `scaleX(${direction})`,\r\n-          zIndex: 100,\r\n-          filter: darkMode \r\n-            ? 'drop-shadow(0 0 8px rgba(255,255,255,0.7))' \r\n-            : 'drop-shadow(0 0 8px rgba(0,0,0,0.3))',\r\n-          userSelect: 'none',\r\n-          animation: 'float 4s ease-in-out infinite'\r\n-        }}\r\n-      >\r\n-        <div style={{ \r\n-          position: 'relative',\r\n-          display: 'flex',\r\n-          flexDirection: 'column',\r\n-          alignItems: 'center'\r\n-        }}>\r\n-          {/* Bot icon with costume */}\r\n-          <div style={{\r\n-            position: 'relative',\r\n-            width: '60px',\r\n-            height: '60px',\r\n-            backgroundColor: darkMode ? '#4a5568' : '#3b82f6',\r\n-            borderRadius: '50%',\r\n-            display: 'flex',\r\n-            justifyContent: 'center',\r\n-            alignItems: 'center',\r\n-            color: 'white'\r\n-          }}>\r\n-            <span style={{ fontSize: '1.8rem' }}>{expression}</span>\r\n-            {costume && (\r\n-              <span style={{\r\n-                position: 'absolute',\r\n-                top: '-15px',\r\n-                right: '-10px',\r\n-                fontSize: '1.5rem',\r\n-                transform: 'rotate(15deg)'\r\n-              }}>\r\n-                {costume}\r\n-              </span>\r\n-            )}\r\n-          </div>\r\n-        </div>\r\n-      </div>\r\n-    </>\r\n-  );\r\n-};\r\n-\r\n-// Chat Modal Component with Direct Gemini API Connection\r\n-const ChatModal = ({ darkMode, onClose }) => {\r\n-  const [messages, setMessages] = useState([\r\n-    { text: \"Hello! I'm UrbanBuddy, your AI assistant powered by Gemini. How can I help you with urban living today?\", sender: 'bot' }\r\n-  ]);\r\n-  const [inputValue, setInputValue] = useState('');\r\n-  const [isTyping, setIsTyping] = useState(false);\r\n-  const chatEndRef = useRef(null);\r\n-  const inputRef = useRef(null);\r\n-\r\n-  // Auto-scroll to bottom and focus input\r\n-  useEffect(() => {\r\n-    chatEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n-    inputRef.current?.focus();\r\n-  }, [messages]);\r\n-\r\n-  // Direct API call to Gemini through a proxy\r\n-  const generateResponse = async (userMessage) => {\r\n-    setIsTyping(true);\r\n-    \r\n-    try {\r\n-      // Using a public AI API gateway (no API key needed)\r\n-      const response = await fetch('https://gemini-proxy.vercel.app/api/generate', {\r\n-        method: \"POST\",\r\n-        headers: { \r\n-          \"Content-Type\": \"application/json\",\r\n-        },\r\n-        body: JSON.stringify({\r\n-          prompt: `You are UrbanBuddy, a friendly AI assistant for urban living. \r\n-          Respond to this query about city life: ${userMessage}\r\n-          Keep responses concise (1-2 sentences) and helpful.`\r\n-        })\r\n-      });\r\n-      \r\n-      const data = await response.json();\r\n-      \r\n-      setMessages(prev => [...prev, { \r\n-        text: data.response || \"I'm here to help with urban living questions!\", \r\n-        sender: 'bot' \r\n-      }]);\r\n-    } catch (error) {\r\n-      console.error(\"API error:\", error);\r\n-      setMessages(prev => [...prev, { \r\n-        text: \"I'm having trouble connecting right now. Try again later!\", \r\n-        sender: 'bot' \r\n-      }]);\r\n-    } finally {\r\n-      setIsTyping(false);\r\n-    }\r\n-  };\r\n-\r\n-  const handleSendMessage = async (e) => {\r\n-    e.preventDefault();\r\n-    if (inputValue.trim() && !isTyping) {\r\n-      // Add user message\r\n-      const userMessage = inputValue.trim();\r\n-      setMessages(prev => [...prev, { text: userMessage, sender: 'user' }]);\r\n-      setInputValue('');\r\n-      \r\n-      // Generate AI response\r\n-      await generateResponse(userMessage);\r\n-    }\r\n-  };\r\n-\r\n-  return (\r\n-    <div style={{\r\n-      position: 'fixed',\r\n-      bottom: '100px',\r\n-      right: '30px',\r\n-      width: '350px',\r\n-      maxWidth: '90%',\r\n-      backgroundColor: darkMode ? '#2d3748' : 'white',\r\n-      borderRadius: '16px',\r\n-      boxShadow: '0 10px 25px rgba(0, 0, 0, 0.2)',\r\n-      border: darkMode ? '1px solid #4a5568' : '1px solid #e2e8f0',\r\n-      zIndex: 1000,\r\n-      overflow: 'hidden',\r\n-      display: 'flex',\r\n-      flexDirection: 'column',\r\n-      maxHeight: '60vh'\r\n-    }}>\r\n-      {/* Chat header */}\r\n-      <div style={{\r\n-        padding: '1rem',\r\n-        backgroundColor: darkMode ? '#4a5568' : '#3b82f6',\r\n-        color: 'white',\r\n-        display: 'flex',\r\n-        justifyContent: 'space-between',\r\n-        alignItems: 'center'\r\n-      }}>\r\n-        <div style={{ display: 'flex', alignItems: 'center', gap: '0.5rem' }}>\r\n-          <span style={{ fontSize: '1.5rem' }}>ü§ñ</span>\r\n-          <h3 style={{ margin: 0 }}>UrbanBuddy AI</h3>\r\n-          {isTyping && (\r\n-            <span style={{ \r\n-              fontSize: '0.8rem',\r\n-              marginLeft: '0.5rem',\r\n-              opacity: 0.8\r\n-            }}>typing...</span>\r\n-          )}\r\n-        </div>\r\n-        <button \r\n-          onClick={onClose}\r\n-          style={{\r\n-            background: 'none',\r\n-            border: 'none',\r\n-            color: 'white',\r\n-            fontSize: '1.2rem',\r\n-            cursor: 'pointer'\r\n-          }}\r\n-        >\r\n-          √ó\r\n-        </button>\r\n-      </div>\r\n-      \r\n-      {/* Chat messages */}\r\n-      <div style={{\r\n-        flex: 1,\r\n-        padding: '1rem',\r\n-        overflowY: 'auto',\r\n-        display: 'flex',\r\n-        flexDirection: 'column',\r\n-        gap: '0.8rem'\r\n-      }}>\r\n-        {messages.map((msg, index) => (\r\n-          <div \r\n-            key={index}\r\n-            style={{\r\n-              alignSelf: msg.sender === 'user' ? 'flex-end' : 'flex-start',\r\n-              maxWidth: '80%',\r\n-              padding: '0.6rem 1rem',\r\n-              borderRadius: msg.sender === 'user' \r\n-                ? '18px 18px 0 18px' \r\n-                : '18px 18px 18px 0',\r\n-              backgroundColor: msg.sender === 'user'\r\n-                ? (darkMode ? '#4a5568' : '#3b82f6')\r\n-                : (darkMode ? '#4a5568' : '#e2e8f0'),\r\n-              color: msg.sender === 'user' ? 'white' : (darkMode ? 'white' : '#1e293b'),\r\n-              animation: msg.sender === 'bot' && index === messages.length - 1 \r\n-                ? 'fadeIn 0.3s ease' \r\n-                : 'none'\r\n-            }}\r\n-          >\r\n-            {msg.text}\r\n-          </div>\r\n-        ))}\r\n-        <div ref={chatEndRef} />\r\n-      </div>\r\n-      \r\n-      {/* Chat input */}\r\n-      <form onSubmit={handleSendMessage} style={{\r\n-        padding: '0.8rem',\r\n-        borderTop: darkMode ? '1px solid #4a5568' : '1px solid #e2e8f0',\r\n-        display: 'flex',\r\n-        gap: '0.5rem'\r\n-      }}>\r\n-        <input\r\n-          ref={inputRef}\r\n-          type=\"text\"\r\n-          value={inputValue}\r\n-          onChange={(e) => setInputValue(e.target.value)}\r\n-          placeholder=\"Ask me about urban living...\"\r\n-          disabled={isTyping}\r\n-          style={{\r\n-            flex: 1,\r\n-            padding: '0.6rem 1rem',\r\n-            borderRadius: '20px',\r\n-            border: darkMode ? '1px solid #4a5568' : '1px solid #e2e8f0',\r\n-            backgroundColor: darkMode ? '#2d3748' : 'white',\r\n-            color: darkMode ? 'white' : '#1e293b',\r\n-            outline: 'none',\r\n-            opacity: isTyping ? 0.7 : 1\r\n-          }}\r\n-        />\r\n-        <button \r\n-          type=\"submit\"\r\n-          disabled={isTyping}\r\n-          style={{\r\n-            background: isTyping \r\n-              ? (darkMode ? '#4a5568' : '#e2e8f0')\r\n-              : (darkMode ? '#4a5568' : '#3b82f6'),\r\n-            color: 'white',\r\n-            border: 'none',\r\n-            borderRadius: '50%',\r\n-            width: '40px',\r\n-            height: '40px',\r\n-            display: 'flex',\r\n-            alignItems: 'center',\r\n-            justifyContent: 'center',\r\n-            cursor: isTyping ? 'not-allowed' : 'pointer'\r\n-          }}\r\n-        >\r\n-          {isTyping ? '...' : '‚û§'}\r\n-        </button>\r\n-      </form>\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-// Main Home Component\r\n-export default function Home() {\r\n-  const navigate = useNavigate();\r\n-  const [searchQuery, setSearchQuery] = useState('');\r\n-  const [darkMode, setDarkMode] = useState(false);\r\n-  const [selectedService, setSelectedService] = useState(null);\r\n-  const [orderCount, setOrderCount] = useState(0);\r\n-  const [achievements, setAchievements] = useState([]);\r\n-  const [showChat, setShowChat] = useState(false);\r\n-\r\n-  const services = [\r\n-    { \r\n-      name: 'Transport', \r\n-      path: '/transport', \r\n-      icon: 'üöå', \r\n-      desc: 'Plan your multi-modal journey across the city',\r\n-      color: '#3b82f6',\r\n-      details: 'Find the best routes combining metro, buses, and bikes. Real-time updates and ticket purchasing available.'\r\n-    },\r\n-    { \r\n-      name: 'Food Delivery', \r\n-      path: '/food', \r\n-      icon: 'üçî', \r\n-      desc: 'Discover local restaurants and cafes',\r\n-      color: '#ef4444',\r\n-      details: 'Order from hundreds of restaurants with special discounts. Track your delivery in real-time.'\r\n-    },\r\n-    { \r\n-      name: 'Groceries', \r\n-      path: '/food', \r\n-      icon: 'üõí', \r\n-      desc: 'Get groceries delivered in minutes',\r\n-      color: '#10b981',\r\n-      details: 'Same-day delivery from local supermarkets. Schedule recurring orders for essentials.'\r\n-    },\r\n-    { \r\n-      name: 'Services', \r\n-      path: '/food', \r\n-      icon: 'üõ†Ô∏è', \r\n-      desc: 'Find urban services near you',\r\n-      color: '#8b5cf6',\r\n-      details: 'Book home services, repairs, and professional help with verified providers.'\r\n-    }\r\n-  ];\r\n-\r\n-  // Check for achievements\r\n-  useEffect(() => {\r\n-    if (orderCount === 1) {\r\n-      addAchievement('First Order!', 'üéâ');\r\n-    } else if (orderCount === 5) {\r\n-      addAchievement('Regular Customer!', 'üèÜ');\r\n-    } else if (orderCount === 10) {\r\n-      addAchievement('Super User!', 'üåü');\r\n-    }\r\n-  }, [orderCount]);\r\n-\r\n-  const addAchievement = (title, icon) => {\r\n-    if (!achievements.some(a => a.title === title)) {\r\n-      const newAchievement = { title, icon, id: Date.now() };\r\n-      setAchievements(prev => [...prev, newAchievement]);\r\n-      \r\n-      // Auto-hide achievement after 3 seconds\r\n-      setTimeout(() => {\r\n-        setAchievements(prev => prev.filter(a => a.id !== newAchievement.id));\r\n-      }, 3000);\r\n-    }\r\n-  };\r\n-\r\n-  const handleSearch = (e) => {\r\n-    e.preventDefault();\r\n-    if (searchQuery.trim()) {\r\n-      navigate(`/food?search=${encodeURIComponent(searchQuery)}`);\r\n-    }\r\n-  };\r\n-\r\n-  const toggleDarkMode = () => {\r\n-    setDarkMode(!darkMode);\r\n-  };\r\n-\r\n-  const openServicePopup = (service) => {\r\n-    setSelectedService(service);\r\n-    setOrderCount(prev => prev + 1);\r\n-  };\r\n-\r\n-  const closePopup = () => {\r\n-    setSelectedService(null);\r\n-  };\r\n-\r\n-  const toggleChat = () => {\r\n-    setShowChat(!showChat);\r\n-  };\r\n-\r\n-  return (\r\n-    <div style={{\r\n-      backgroundColor: darkMode ? '#1a202c' : '#f8fafc',\r\n-      minHeight: '100vh',\r\n-      paddingBottom: '3rem',\r\n-      color: darkMode ? '#e2e8f0' : '#1e293b',\r\n-      transition: 'all 0.3s ease',\r\n-      position: 'relative'\r\n-    }}>\r\n-      {/* Theme Toggle Button */}\r\n-      <button \r\n-        onClick={toggleDarkMode} \r\n-        style={{\r\n-          position: 'fixed',\r\n-          top: '1.5rem',\r\n-          right: '1.5rem',\r\n-          background: darkMode ? '#4a5568' : '#e2e8f0',\r\n-          border: 'none',\r\n-          borderRadius: '50%',\r\n-          width: '40px',\r\n-          height: '40px',\r\n-          display: 'flex',\r\n-          alignItems: 'center',\r\n-          justifyContent: 'center',\r\n-          cursor: 'pointer',\r\n-          transition: 'all 0.3s ease',\r\n-          boxShadow: '0 2px 5px rgba(0, 0, 0, 0.2)',\r\n-          zIndex: 100\r\n-        }}\r\n-        aria-label={darkMode ? 'Switch to light mode' : 'Switch to dark mode'}\r\n-      >\r\n-        {darkMode ? '‚òÄÔ∏è' : 'üåô'}\r\n-      </button>\r\n-      \r\n-      {/* Hero Section with UrbanBuddy */}\r\n-      <section style={{\r\n-        background: darkMode \r\n-          ? 'linear-gradient(135deg, #2d3748 0%, #1a202c 100%)' \r\n-          : 'linear-gradient(135deg, #6b46c1 0%, #3b82f6 100%)',\r\n-        color: 'white',\r\n-        padding: '4rem 1rem',\r\n-        textAlign: 'center',\r\n-        borderRadius: '0 0 20px 20px',\r\n-        boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',\r\n-        position: 'relative',\r\n-        overflow: 'hidden',\r\n-        height: '300px'\r\n-      }}>\r\n-        <div style={{\r\n-          maxWidth: '800px',\r\n-          margin: '0 auto',\r\n-          position: 'relative',\r\n-          zIndex: 2\r\n-        }}>\r\n-          <h1 style={{\r\n-            fontSize: '3.5rem',\r\n-            fontWeight: '800',\r\n-            marginBottom: '0.5rem',\r\n-            textShadow: '2px 2px 4px rgba(0, 0, 0, 0.2)',\r\n-          }}>UrbanFlow</h1>\r\n-          <p style={{\r\n-            fontSize: '1.25rem',\r\n-            marginBottom: '2rem',\r\n-            opacity: 0.9,\r\n-          }}>Your seamless urban living companion</p>\r\n-          \r\n-          <form onSubmit={handleSearch} style={{\r\n-            display: 'flex',\r\n-            maxWidth: '600px',\r\n-            margin: '0 auto',\r\n-            borderRadius: '50px',\r\n-            overflow: 'hidden',\r\n-            boxShadow: '0 4px 10px rgba(0, 0, 0, 0.2)',\r\n-          }}>\r\n-            <input\r\n-              type=\"text\"\r\n-              placeholder=\"Search for restaurants, services...\"\r\n-              value={searchQuery}\r\n-              onChange={(e) => setSearchQuery(e.target.value)}\r\n-              style={{\r\n-                flex: 1,\r\n-                padding: '1rem 1.5rem',\r\n-                border: 'none',\r\n-                fontSize: '1rem',\r\n-                outline: 'none',\r\n-                backgroundColor: darkMode ? '#2d3748' : 'white',\r\n-                color: darkMode ? '#e2e8f0' : '#1e293b',\r\n-              }}\r\n-            />\r\n-            <button type=\"submit\" style={{\r\n-              backgroundColor: darkMode ? '#4a5568' : '#1e40af',\r\n-              color: 'white',\r\n-              border: 'none',\r\n-              padding: '0 1.5rem',\r\n-              cursor: 'pointer',\r\n-              fontSize: '1.25rem',\r\n-              transition: 'background-color 0.2s'\r\n-            }}>\r\n-              <span>üîç</span>\r\n-            </button>\r\n-          </form>\r\n-        </div>\r\n-        <UrbanBuddy darkMode={darkMode} onChatOpen={toggleChat} />\r\n-      </section>\r\n-\r\n-      {/* Services Grid */}\r\n-      <section style={{\r\n-        padding: '2rem 1rem',\r\n-        maxWidth: '1200px',\r\n-        margin: '0 auto',\r\n-      }}>\r\n-        <h2 style={{\r\n-          fontSize: '2rem',\r\n-          fontWeight: '700',\r\n-          marginBottom: '1.5rem',\r\n-          color: darkMode ? '#e2e8f0' : '#1e293b',\r\n-          textAlign: 'center',\r\n-        }}>What do you need today?</h2>\r\n-        <div style={{\r\n-          display: 'grid',\r\n-          gridTemplateColumns: 'repeat(auto-fit, minmax(250px, 1fr))',\r\n-          gap: '1.5rem',\r\n-          marginTop: '1rem',\r\n-        }}>\r\n-          {services.map((service) => (\r\n-            <div \r\n-              key={service.name} \r\n-              style={{ \r\n-                padding: '2rem 1.5rem',\r\n-                borderRadius: '16px',\r\n-                border: `2px solid ${service.color}`,\r\n-                textAlign: 'center',\r\n-                cursor: 'pointer',\r\n-                transition: 'transform 0.3s, box-shadow 0.3s',\r\n-                backgroundColor: darkMode \r\n-                  ? `${service.color}20` \r\n-                  : `${service.color}10`,\r\n-                ':hover': {\r\n-                  transform: 'translateY(-5px)',\r\n-                  boxShadow: '0 10px 20px rgba(0, 0, 0, 0.1)',\r\n-                }\r\n-              }}\r\n-              onClick={() => openServicePopup(service)}\r\n-            >\r\n-              <div style={{ \r\n-                fontSize: '3rem',\r\n-                marginBottom: '1rem',\r\n-                display: 'inline-block',\r\n-                animation: 'float 3s ease-in-out infinite'\r\n-              }}>{service.icon}</div>\r\n-              <h3 style={{fontSize: '1.5rem', fontWeight: '600', marginBottom: '0.5rem'}}>{service.name}</h3>\r\n-              <p style={{color: darkMode ? '#a0aec0' : '#64748b'}}>{service.desc}</p>\r\n-            </div>\r\n-          ))}\r\n-        </div>\r\n-      </section>\r\n-\r\n-      {/* Featured Section */}\r\n-      <section style={{\r\n-        padding: '2rem 1rem',\r\n-        maxWidth: '1200px',\r\n-        margin: '0 auto',\r\n-      }}>\r\n-        <h2 style={{\r\n-          fontSize: '2rem',\r\n-          fontWeight: '700',\r\n-          marginBottom: '1.5rem',\r\n-          color: darkMode ? '#e2e8f0' : '#1e293b',\r\n-          textAlign: 'center',\r\n-        }}>Quick Access</h2>\r\n-        <div style={{\r\n-          display: 'flex',\r\n-          justifyContent: 'center',\r\n-          gap: '1rem',\r\n-          flexWrap: 'wrap',\r\n-        }}>\r\n+        <div style={{ display: 'flex', justifyContent: 'center', gap: '1rem', flexWrap: 'wrap' }}>\r\n           <button \r\n             onClick={() => navigate('/transport?from=home&to=downtown')}\r\n             style={{\r\n               padding: '0.75rem 1.5rem',\r\n@@ -4750,18 +672,15 @@\n               fontSize: '1.5rem',\r\n               cursor: 'pointer',\r\n               color: darkMode ? '#a0aec0' : '#64748b',\r\n             }} onClick={closePopup}>√ó</button>\r\n-            <div style={{ \r\n-              display: 'flex', \r\n-              alignItems: 'center', \r\n-              gap: '1rem',\r\n-              marginBottom: '1.5rem'\r\n-            }}>\r\n+            <div style={{ display: 'flex', alignItems: 'center', gap: '1rem', marginBottom: '1.5rem' }}>\r\n               <span style={{ fontSize: '2.5rem', animation: 'float 3s ease-in-out infinite' }}>{selectedService.icon}</span>\r\n-              <h3 style={{fontSize: '1.8rem', fontWeight: '700', marginBottom: '1rem', color: darkMode ? '#e2e8f0' : '#1e293b'}}>{selectedService.name}</h3>\r\n+              <h3 style={{fontSize: '1.8rem', fontWeight: '700', marginBottom: '1rem'}}>{selectedService.name}</h3>\r\n             </div>\r\n-            <p style={{color: darkMode ? '#a0aec0' : '#64748b', fontSize: '1.1rem', lineHeight: '1.6', marginBottom: '2rem'}}>{selectedService.details}</p>\r\n+            <p style={{color: darkMode ? '#a0aec0' : '#64748b', fontSize: '1.1rem', lineHeight: '1.6', marginBottom: '2rem'}}>\r\n+              {selectedService.details}\r\n+            </p>\r\n             <button \r\n               style={{ \r\n                 padding: '0.75rem 1.5rem',\r\n                 borderRadius: '8px',\r\n@@ -4808,9 +727,9 @@\n \r\n       {/* Chat Modal */}\r\n       {showChat && <ChatModal darkMode={darkMode} onClose={toggleChat} />}\r\n \r\n-      {/* Footer with copyright */}\r\n+      {/* Footer */}\r\n       <footer style={{\r\n         textAlign: 'center',\r\n         padding: '2rem 1rem',\r\n         color: darkMode ? '#a0aec0' : '#64748b',\r\n@@ -4820,2460 +739,5 @@\n         <p>¬© {new Date().getFullYear()} UrbanFlow - Created by Nick</p>\r\n       </footer>\r\n     </div>\r\n   );\r\n-};\n-import { useState, useEffect, useRef } from 'react';\r\n-import { useNavigate } from 'react-router-dom';\r\n-\r\n-// UrbanBuddy AI Assistant Component\r\n-const UrbanBuddy = ({ darkMode, onChatOpen }) => {\r\n-  const [position, setPosition] = useState({ x: 20, y: 50 });\r\n-  const [expression, setExpression] = useState('üòä');\r\n-  const [direction, setDirection] = useState(1);\r\n-  const [costume, setCostume] = useState(null);\r\n-  const [isActive, setIsActive] = useState(false);\r\n-  const botRef = useRef(null);\r\n-  const animationRef = useRef(null);\r\n-  const lastInteractionTime = useRef(Date.now());\r\n-\r\n-  // Seasonal costumes\r\n-  useEffect(() => {\r\n-    const today = new Date();\r\n-    const month = today.getMonth() + 1;\r\n-    \r\n-    if (month === 12) setCostume('üéÑ');\r\n-    else if (month === 10) setCostume('üéÉ');\r\n-    else if (month === 2) setCostume('üíù');\r\n-    else if (month === 4) setCostume('üå∏');\r\n-    else setCostume(null);\r\n-  }, []);\r\n-\r\n-  // Make the bot wander with more dynamic movement\r\n-  useEffect(() => {\r\n-    const moveInterval = setInterval(() => {\r\n-      setPosition(prev => {\r\n-        const now = Date.now();\r\n-        const timeSinceLastInteraction = now - lastInteractionTime.current;\r\n-        \r\n-        // More active movement right after interaction\r\n-        const speedMultiplier = timeSinceLastInteraction < 5000 ? 2 : 1;\r\n-        \r\n-        let newX = prev.x + (3 * direction * speedMultiplier);\r\n-        let newY = prev.y + (Math.random() * 6 - 3);\r\n-        \r\n-        // Bounce off edges\r\n-        if (newX > window.innerWidth - 80) {\r\n-          setDirection(-1);\r\n-          triggerAnimation('spin');\r\n-        }\r\n-        if (newX < 20) {\r\n-          setDirection(1);\r\n-          triggerAnimation('spin');\r\n-        }\r\n-        if (newY < 20) newY = 20;\r\n-        if (newY > window.innerHeight - 100) newY = window.innerHeight - 100;\r\n-        \r\n-        return { x: newX, y: newY };\r\n-      });\r\n-    }, 100);\r\n-\r\n-    return () => clearInterval(moveInterval);\r\n-  }, [direction]);\r\n-\r\n-  // Change expressions randomly with more variety\r\n-  useEffect(() => {\r\n-    const expressions = ['üòä', 'ü§î', 'üòÆ', 'üòé', 'üëã', 'ü§ñ', '‚ú®', 'üåü'];\r\n-    const expressionInterval = setInterval(() => {\r\n-      if (!isActive) {\r\n-        setExpression(expressions[Math.floor(Math.random() * expressions.length)]);\r\n-        // Random animations when idle\r\n-        if (Math.random() > 0.8) {\r\n-          triggerAnimation(['bounce', 'spin', 'wobble'][Math.floor(Math.random() * 3)]);\r\n-        }\r\n-      }\r\n-    }, 3000);\r\n-    return () => clearInterval(expressionInterval);\r\n-  }, [isActive]);\r\n-\r\n-  const triggerAnimation = (type) => {\r\n-    if (animationRef.current) {\r\n-      clearTimeout(animationRef.current);\r\n-    }\r\n-    \r\n-    const botElement = botRef.current;\r\n-    if (!botElement) return;\r\n-    \r\n-    botElement.style.animation = 'none';\r\n-    void botElement.offsetWidth; // Trigger reflow\r\n-    \r\n-    switch(type) {\r\n-      case 'spin':\r\n-        botElement.style.animation = 'spin 1s ease';\r\n-        break;\r\n-      case 'bounce':\r\n-        botElement.style.animation = 'bounce 0.5s ease';\r\n-        break;\r\n-      case 'wobble':\r\n-        botElement.style.animation = 'wobble 0.8s ease';\r\n-        break;\r\n-      default:\r\n-        botElement.style.animation = '';\r\n-    }\r\n-    \r\n-    animationRef.current = setTimeout(() => {\r\n-      if (botElement) botElement.style.animation = '';\r\n-    }, 1000);\r\n-  };\r\n-\r\n-  const handleClick = () => {\r\n-    lastInteractionTime.current = Date.now();\r\n-    setIsActive(true);\r\n-    triggerAnimation('bounce');\r\n-    setExpression('üí°');\r\n-    \r\n-    // Trigger chat opening in parent component\r\n-    onChatOpen();\r\n-    \r\n-    // Return to normal after a delay\r\n-    setTimeout(() => {\r\n-      setIsActive(false);\r\n-    }, 3000);\r\n-  };\r\n-\r\n-  // Custom animations\r\n-  const animations = `\r\n-    @keyframes spin {\r\n-      0% { transform: rotate(0deg) scaleX(${direction}); }\r\n-      100% { transform: rotate(360deg) scaleX(${direction}); }\r\n-    }\r\n-    @keyframes bounce {\r\n-      0%, 100% { transform: translateY(0) scaleX(${direction}); }\r\n-      50% { transform: translateY(-20px) scaleX(${direction}); }\r\n-    }\r\n-    @keyframes wobble {\r\n-      0%, 100% { transform: rotate(0deg) scaleX(${direction}); }\r\n-      25% { transform: rotate(5deg) scaleX(${direction}); }\r\n-      75% { transform: rotate(-5deg) scaleX(${direction}); }\r\n-    }\r\n-    @keyframes float {\r\n-      0% { transform: translateY(0px) scaleX(${direction}); }\r\n-      50% { transform: translateY(-10px) scaleX(${direction}); }\r\n-      100% { transform: translateY(0px) scaleX(${direction}); }\r\n-    }\r\n-  `;\r\n-\r\n-  return (\r\n-    <>\r\n-      <style>{animations}</style>\r\n-      <div \r\n-        ref={botRef}\r\n-        onClick={handleClick}\r\n-        style={{\r\n-          position: 'fixed',\r\n-          left: `${position.x}px`,\r\n-          top: `${position.y}px`,\r\n-          fontSize: '2.5rem',\r\n-          cursor: 'pointer',\r\n-          transition: 'all 0.3s ease',\r\n-          transform: `scaleX(${direction})`,\r\n-          zIndex: 100,\r\n-          filter: darkMode \r\n-            ? 'drop-shadow(0 0 8px rgba(255,255,255,0.7))' \r\n-            : 'drop-shadow(0 0 8px rgba(0,0,0,0.3))',\r\n-          userSelect: 'none',\r\n-          animation: 'float 4s ease-in-out infinite'\r\n-        }}\r\n-      >\r\n-        <div style={{ \r\n-          position: 'relative',\r\n-          display: 'flex',\r\n-          flexDirection: 'column',\r\n-          alignItems: 'center'\r\n-        }}>\r\n-          {/* Bot icon with costume */}\r\n-          <div style={{\r\n-            position: 'relative',\r\n-            width: '60px',\r\n-            height: '60px',\r\n-            backgroundColor: darkMode ? '#4a5568' : '#3b82f6',\r\n-            borderRadius: '50%',\r\n-            display: 'flex',\r\n-            justifyContent: 'center',\r\n-            alignItems: 'center',\r\n-            color: 'white'\r\n-          }}>\r\n-            <span style={{ fontSize: '1.8rem' }}>{expression}</span>\r\n-            {costume && (\r\n-              <span style={{\r\n-                position: 'absolute',\r\n-                top: '-15px',\r\n-                right: '-10px',\r\n-                fontSize: '1.5rem',\r\n-                transform: 'rotate(15deg)'\r\n-              }}>\r\n-                {costume}\r\n-              </span>\r\n-            )}\r\n-          </div>\r\n-        </div>\r\n-      </div>\r\n-    </>\r\n-  );\r\n-};\r\n-\r\n-// Chat Modal Component with Direct Gemini API Connection\r\n-const ChatModal = ({ darkMode, onClose }) => {\r\n-  const [messages, setMessages] = useState([\r\n-    { text: \"Hello! I'm UrbanBuddy, your AI assistant powered by Gemini. How can I help you with urban living today?\", sender: 'bot' }\r\n-  ]);\r\n-  const [inputValue, setInputValue] = useState('');\r\n-  const [isTyping, setIsTyping] = useState(false);\r\n-  const chatEndRef = useRef(null);\r\n-  const inputRef = useRef(null);\r\n-\r\n-  // Auto-scroll to bottom and focus input\r\n-  useEffect(() => {\r\n-    chatEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n-    inputRef.current?.focus();\r\n-  }, [messages]);\r\n-\r\n-  // Direct API call to Gemini through a proxy\r\n-  const generateResponse = async (userMessage) => {\r\n-    setIsTyping(true);\r\n-    \r\n-    try {\r\n-      // Using a public AI API gateway (no API key needed)\r\n-      const response = await fetch('https://gemini-proxy.vercel.app/api/generate', {\r\n-        method: \"POST\",\r\n-        headers: { \r\n-          \"Content-Type\": \"application/json\",\r\n-        },\r\n-        body: JSON.stringify({\r\n-          prompt: `You are UrbanBuddy, a friendly AI assistant for urban living. \r\n-          Respond to this query about city life: ${userMessage}\r\n-          Keep responses concise (1-2 sentences) and helpful.`\r\n-        })\r\n-      });\r\n-      \r\n-      const data = await response.json();\r\n-      \r\n-      setMessages(prev => [...prev, { \r\n-        text: data.response || \"I'm here to help with urban living questions!\", \r\n-        sender: 'bot' \r\n-      }]);\r\n-    } catch (error) {\r\n-      console.error(\"API error:\", error);\r\n-      setMessages(prev => [...prev, { \r\n-        text: \"I'm having trouble connecting right now. Try again later!\", \r\n-        sender: 'bot' \r\n-      }]);\r\n-    } finally {\r\n-      setIsTyping(false);\r\n-    }\r\n-  };\r\n-\r\n-  const handleSendMessage = async (e) => {\r\n-    e.preventDefault();\r\n-    if (inputValue.trim() && !isTyping) {\r\n-      // Add user message\r\n-      const userMessage = inputValue.trim();\r\n-      setMessages(prev => [...prev, { text: userMessage, sender: 'user' }]);\r\n-      setInputValue('');\r\n-      \r\n-      // Generate AI response\r\n-      await generateResponse(userMessage);\r\n-    }\r\n-  };\r\n-\r\n-  return (\r\n-    <div style={{\r\n-      position: 'fixed',\r\n-      bottom: '100px',\r\n-      right: '30px',\r\n-      width: '350px',\r\n-      maxWidth: '90%',\r\n-      backgroundColor: darkMode ? '#2d3748' : 'white',\r\n-      borderRadius: '16px',\r\n-      boxShadow: '0 10px 25px rgba(0, 0, 0, 0.2)',\r\n-      border: darkMode ? '1px solid #4a5568' : '1px solid #e2e8f0',\r\n-      zIndex: 1000,\r\n-      overflow: 'hidden',\r\n-      display: 'flex',\r\n-      flexDirection: 'column',\r\n-      maxHeight: '60vh'\r\n-    }}>\r\n-      {/* Chat header */}\r\n-      <div style={{\r\n-        padding: '1rem',\r\n-        backgroundColor: darkMode ? '#4a5568' : '#3b82f6',\r\n-        color: 'white',\r\n-        display: 'flex',\r\n-        justifyContent: 'space-between',\r\n-        alignItems: 'center'\r\n-      }}>\r\n-        <div style={{ display: 'flex', alignItems: 'center', gap: '0.5rem' }}>\r\n-          <span style={{ fontSize: '1.5rem' }}>ü§ñ</span>\r\n-          <h3 style={{ margin: 0 }}>UrbanBuddy AI</h3>\r\n-          {isTyping && (\r\n-            <span style={{ \r\n-              fontSize: '0.8rem',\r\n-              marginLeft: '0.5rem',\r\n-              opacity: 0.8\r\n-            }}>typing...</span>\r\n-          )}\r\n-        </div>\r\n-        <button \r\n-          onClick={onClose}\r\n-          style={{\r\n-            background: 'none',\r\n-            border: 'none',\r\n-            color: 'white',\r\n-            fontSize: '1.2rem',\r\n-            cursor: 'pointer'\r\n-          }}\r\n-        >\r\n-          √ó\r\n-        </button>\r\n-      </div>\r\n-      \r\n-      {/* Chat messages */}\r\n-      <div style={{\r\n-        flex: 1,\r\n-        padding: '1rem',\r\n-        overflowY: 'auto',\r\n-        display: 'flex',\r\n-        flexDirection: 'column',\r\n-        gap: '0.8rem'\r\n-      }}>\r\n-        {messages.map((msg, index) => (\r\n-          <div \r\n-            key={index}\r\n-            style={{\r\n-              alignSelf: msg.sender === 'user' ? 'flex-end' : 'flex-start',\r\n-              maxWidth: '80%',\r\n-              padding: '0.6rem 1rem',\r\n-              borderRadius: msg.sender === 'user' \r\n-                ? '18px 18px 0 18px' \r\n-                : '18px 18px 18px 0',\r\n-              backgroundColor: msg.sender === 'user'\r\n-                ? (darkMode ? '#4a5568' : '#3b82f6')\r\n-                : (darkMode ? '#4a5568' : '#e2e8f0'),\r\n-              color: msg.sender === 'user' ? 'white' : (darkMode ? 'white' : '#1e293b'),\r\n-              animation: msg.sender === 'bot' && index === messages.length - 1 \r\n-                ? 'fadeIn 0.3s ease' \r\n-                : 'none'\r\n-            }}\r\n-          >\r\n-            {msg.text}\r\n-          </div>\r\n-        ))}\r\n-        <div ref={chatEndRef} />\r\n-      </div>\r\n-      \r\n-      {/* Chat input */}\r\n-      <form onSubmit={handleSendMessage} style={{\r\n-        padding: '0.8rem',\r\n-        borderTop: darkMode ? '1px solid #4a5568' : '1px solid #e2e8f0',\r\n-        display: 'flex',\r\n-        gap: '0.5rem'\r\n-      }}>\r\n-        <input\r\n-          ref={inputRef}\r\n-          type=\"text\"\r\n-          value={inputValue}\r\n-          onChange={(e) => setInputValue(e.target.value)}\r\n-          placeholder=\"Ask me about urban living...\"\r\n-          disabled={isTyping}\r\n-          style={{\r\n-            flex: 1,\r\n-            padding: '0.6rem 1rem',\r\n-            borderRadius: '20px',\r\n-            border: darkMode ? '1px solid #4a5568' : '1px solid #e2e8f0',\r\n-            backgroundColor: darkMode ? '#2d3748' : 'white',\r\n-            color: darkMode ? 'white' : '#1e293b',\r\n-            outline: 'none',\r\n-            opacity: isTyping ? 0.7 : 1\r\n-          }}\r\n-        />\r\n-        <button \r\n-          type=\"submit\"\r\n-          disabled={isTyping}\r\n-          style={{\r\n-            background: isTyping \r\n-              ? (darkMode ? '#4a5568' : '#e2e8f0')\r\n-              : (darkMode ? '#4a5568' : '#3b82f6'),\r\n-            color: 'white',\r\n-            border: 'none',\r\n-            borderRadius: '50%',\r\n-            width: '40px',\r\n-            height: '40px',\r\n-            display: 'flex',\r\n-            alignItems: 'center',\r\n-            justifyContent: 'center',\r\n-            cursor: isTyping ? 'not-allowed' : 'pointer'\r\n-          }}\r\n-        >\r\n-          {isTyping ? '...' : '‚û§'}\r\n-        </button>\r\n-      </form>\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-// Main Home Component\r\n-export default function Home() {\r\n-  const navigate = useNavigate();\r\n-  const [searchQuery, setSearchQuery] = useState('');\r\n-  const [darkMode, setDarkMode] = useState(false);\r\n-  const [selectedService, setSelectedService] = useState(null);\r\n-  const [orderCount, setOrderCount] = useState(0);\r\n-  const [achievements, setAchievements] = useState([]);\r\n-  const [showChat, setShowChat] = useState(false);\r\n-\r\n-  const services = [\r\n-    { \r\n-      name: 'Transport', \r\n-      path: '/transport', \r\n-      icon: 'üöå', \r\n-      desc: 'Plan your multi-modal journey across the city',\r\n-      color: '#3b82f6',\r\n-      details: 'Find the best routes combining metro, buses, and bikes. Real-time updates and ticket purchasing available.'\r\n-    },\r\n-    { \r\n-      name: 'Food Delivery', \r\n-      path: '/food', \r\n-      icon: 'üçî', \r\n-      desc: 'Discover local restaurants and cafes',\r\n-      color: '#ef4444',\r\n-      details: 'Order from hundreds of restaurants with special discounts. Track your delivery in real-time.'\r\n-    },\r\n-    { \r\n-      name: 'Groceries', \r\n-      path: '/food', \r\n-      icon: 'üõí', \r\n-      desc: 'Get groceries delivered in minutes',\r\n-      color: '#10b981',\r\n-      details: 'Same-day delivery from local supermarkets. Schedule recurring orders for essentials.'\r\n-    },\r\n-    { \r\n-      name: 'Services', \r\n-      path: '/food', \r\n-      icon: 'üõ†Ô∏è', \r\n-      desc: 'Find urban services near you',\r\n-      color: '#8b5cf6',\r\n-      details: 'Book home services, repairs, and professional help with verified providers.'\r\n-    }\r\n-  ];\r\n-\r\n-  // Check for achievements\r\n-  useEffect(() => {\r\n-    if (orderCount === 1) {\r\n-      addAchievement('First Order!', 'üéâ');\r\n-    } else if (orderCount === 5) {\r\n-      addAchievement('Regular Customer!', 'üèÜ');\r\n-    } else if (orderCount === 10) {\r\n-      addAchievement('Super User!', 'üåü');\r\n-    }\r\n-  }, [orderCount]);\r\n-\r\n-  const addAchievement = (title, icon) => {\r\n-    if (!achievements.some(a => a.title === title)) {\r\n-      const newAchievement = { title, icon, id: Date.now() };\r\n-      setAchievements(prev => [...prev, newAchievement]);\r\n-      \r\n-      // Auto-hide achievement after 3 seconds\r\n-      setTimeout(() => {\r\n-        setAchievements(prev => prev.filter(a => a.id !== newAchievement.id));\r\n-      }, 3000);\r\n-    }\r\n-  };\r\n-\r\n-  const handleSearch = (e) => {\r\n-    e.preventDefault();\r\n-    if (searchQuery.trim()) {\r\n-      navigate(`/food?search=${encodeURIComponent(searchQuery)}`);\r\n-    }\r\n-  };\r\n-\r\n-  const toggleDarkMode = () => {\r\n-    setDarkMode(!darkMode);\r\n-  };\r\n-\r\n-  const openServicePopup = (service) => {\r\n-    setSelectedService(service);\r\n-    setOrderCount(prev => prev + 1);\r\n-  };\r\n-\r\n-  const closePopup = () => {\r\n-    setSelectedService(null);\r\n-  };\r\n-\r\n-  const toggleChat = () => {\r\n-    setShowChat(!showChat);\r\n-  };\r\n-\r\n-  return (\r\n-    <div style={{\r\n-      backgroundColor: darkMode ? '#1a202c' : '#f8fafc',\r\n-      minHeight: '100vh',\r\n-      paddingBottom: '3rem',\r\n-      color: darkMode ? '#e2e8f0' : '#1e293b',\r\n-      transition: 'all 0.3s ease',\r\n-      position: 'relative'\r\n-    }}>\r\n-      {/* Theme Toggle Button */}\r\n-      <button \r\n-        onClick={toggleDarkMode} \r\n-        style={{\r\n-          position: 'fixed',\r\n-          top: '1.5rem',\r\n-          right: '1.5rem',\r\n-          background: darkMode ? '#4a5568' : '#e2e8f0',\r\n-          border: 'none',\r\n-          borderRadius: '50%',\r\n-          width: '40px',\r\n-          height: '40px',\r\n-          display: 'flex',\r\n-          alignItems: 'center',\r\n-          justifyContent: 'center',\r\n-          cursor: 'pointer',\r\n-          transition: 'all 0.3s ease',\r\n-          boxShadow: '0 2px 5px rgba(0, 0, 0, 0.2)',\r\n-          zIndex: 100\r\n-        }}\r\n-        aria-label={darkMode ? 'Switch to light mode' : 'Switch to dark mode'}\r\n-      >\r\n-        {darkMode ? '‚òÄÔ∏è' : 'üåô'}\r\n-      </button>\r\n-      \r\n-      {/* Hero Section with UrbanBuddy */}\r\n-      <section style={{\r\n-        background: darkMode \r\n-          ? 'linear-gradient(135deg, #2d3748 0%, #1a202c 100%)' \r\n-          : 'linear-gradient(135deg, #6b46c1 0%, #3b82f6 100%)',\r\n-        color: 'white',\r\n-        padding: '4rem 1rem',\r\n-        textAlign: 'center',\r\n-        borderRadius: '0 0 20px 20px',\r\n-        boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',\r\n-        position: 'relative',\r\n-        overflow: 'hidden',\r\n-        height: '300px'\r\n-      }}>\r\n-        <div style={{\r\n-          maxWidth: '800px',\r\n-          margin: '0 auto',\r\n-          position: 'relative',\r\n-          zIndex: 2\r\n-        }}>\r\n-          <h1 style={{\r\n-            fontSize: '3.5rem',\r\n-            fontWeight: '800',\r\n-            marginBottom: '0.5rem',\r\n-            textShadow: '2px 2px 4px rgba(0, 0, 0, 0.2)',\r\n-          }}>UrbanFlow</h1>\r\n-          <p style={{\r\n-            fontSize: '1.25rem',\r\n-            marginBottom: '2rem',\r\n-            opacity: 0.9,\r\n-          }}>Your seamless urban living companion</p>\r\n-          \r\n-          <form onSubmit={handleSearch} style={{\r\n-            display: 'flex',\r\n-            maxWidth: '600px',\r\n-            margin: '0 auto',\r\n-            borderRadius: '50px',\r\n-            overflow: 'hidden',\r\n-            boxShadow: '0 4px 10px rgba(0, 0, 0, 0.2)',\r\n-          }}>\r\n-            <input\r\n-              type=\"text\"\r\n-              placeholder=\"Search for restaurants, services...\"\r\n-              value={searchQuery}\r\n-              onChange={(e) => setSearchQuery(e.target.value)}\r\n-              style={{\r\n-                flex: 1,\r\n-                padding: '1rem 1.5rem',\r\n-                border: 'none',\r\n-                fontSize: '1rem',\r\n-                outline: 'none',\r\n-                backgroundColor: darkMode ? '#2d3748' : 'white',\r\n-                color: darkMode ? '#e2e8f0' : '#1e293b',\r\n-              }}\r\n-            />\r\n-            <button type=\"submit\" style={{\r\n-              backgroundColor: darkMode ? '#4a5568' : '#1e40af',\r\n-              color: 'white',\r\n-              border: 'none',\r\n-              padding: '0 1.5rem',\r\n-              cursor: 'pointer',\r\n-              fontSize: '1.25rem',\r\n-              transition: 'background-color 0.2s'\r\n-            }}>\r\n-              <span>üîç</span>\r\n-            </button>\r\n-          </form>\r\n-        </div>\r\n-        <UrbanBuddy darkMode={darkMode} onChatOpen={toggleChat} />\r\n-      </section>\r\n-\r\n-      {/* Services Grid */}\r\n-      <section style={{\r\n-        padding: '2rem 1rem',\r\n-        maxWidth: '1200px',\r\n-        margin: '0 auto',\r\n-      }}>\r\n-        <h2 style={{\r\n-          fontSize: '2rem',\r\n-          fontWeight: '700',\r\n-          marginBottom: '1.5rem',\r\n-          color: darkMode ? '#e2e8f0' : '#1e293b',\r\n-          textAlign: 'center',\r\n-        }}>What do you need today?</h2>\r\n-        <div style={{\r\n-          display: 'grid',\r\n-          gridTemplateColumns: 'repeat(auto-fit, minmax(250px, 1fr))',\r\n-          gap: '1.5rem',\r\n-          marginTop: '1rem',\r\n-        }}>\r\n-          {services.map((service) => (\r\n-            <div \r\n-              key={service.name} \r\n-              style={{ \r\n-                padding: '2rem 1.5rem',\r\n-                borderRadius: '16px',\r\n-                border: `2px solid ${service.color}`,\r\n-                textAlign: 'center',\r\n-                cursor: 'pointer',\r\n-                transition: 'transform 0.3s, box-shadow 0.3s',\r\n-                backgroundColor: darkMode \r\n-                  ? `${service.color}20` \r\n-                  : `${service.color}10`,\r\n-                ':hover': {\r\n-                  transform: 'translateY(-5px)',\r\n-                  boxShadow: '0 10px 20px rgba(0, 0, 0, 0.1)',\r\n-                }\r\n-              }}\r\n-              onClick={() => openServicePopup(service)}\r\n-            >\r\n-              <div style={{ \r\n-                fontSize: '3rem',\r\n-                marginBottom: '1rem',\r\n-                display: 'inline-block',\r\n-                animation: 'float 3s ease-in-out infinite'\r\n-              }}>{service.icon}</div>\r\n-              <h3 style={{fontSize: '1.5rem', fontWeight: '600', marginBottom: '0.5rem'}}>{service.name}</h3>\r\n-              <p style={{color: darkMode ? '#a0aec0' : '#64748b'}}>{service.desc}</p>\r\n-            </div>\r\n-          ))}\r\n-        </div>\r\n-      </section>\r\n-\r\n-      {/* Featured Section */}\r\n-      <section style={{\r\n-        padding: '2rem 1rem',\r\n-        maxWidth: '1200px',\r\n-        margin: '0 auto',\r\n-      }}>\r\n-        <h2 style={{\r\n-          fontSize: '2rem',\r\n-          fontWeight: '700',\r\n-          marginBottom: '1.5rem',\r\n-          color: darkMode ? '#e2e8f0' : '#1e293b',\r\n-          textAlign: 'center',\r\n-        }}>Quick Access</h2>\r\n-        <div style={{\r\n-          display: 'flex',\r\n-          justifyContent: 'center',\r\n-          gap: '1rem',\r\n-          flexWrap: 'wrap',\r\n-        }}>\r\n-          <button \r\n-            onClick={() => navigate('/transport?from=home&to=downtown')}\r\n-            style={{\r\n-              padding: '0.75rem 1.5rem',\r\n-              borderRadius: '50px',\r\n-              border: 'none',\r\n-              backgroundColor: darkMode ? '#2d3748' : '#e2e8f0',\r\n-              color: darkMode ? '#e2e8f0' : '#1e293b',\r\n-              fontWeight: '600',\r\n-              cursor: 'pointer',\r\n-              transition: 'all 0.2s',\r\n-              display: 'flex',\r\n-              alignItems: 'center',\r\n-              gap: '0.5rem',\r\n-              fontSize: '1rem'\r\n-            }}\r\n-          >\r\n-            üöï To Downtown\r\n-          </button>\r\n-          <button \r\n-            onClick={() => navigate('/food?category=fastfood')}\r\n-            style={{\r\n-              padding: '0.75rem 1.5rem',\r\n-              borderRadius: '50px',\r\n-              border: 'none',\r\n-              backgroundColor: darkMode ? '#2d3748' : '#e2e8f0',\r\n-              color: darkMode ? '#e2e8f0' : '#1e293b',\r\n-              fontWeight: '600',\r\n-              cursor: 'pointer',\r\n-              transition: 'all 0.2s',\r\n-              display: 'flex',\r\n-              alignItems: 'center',\r\n-              gap: '0.5rem',\r\n-              fontSize: '1rem'\r\n-            }}\r\n-          >\r\n-            üçü Fast Food\r\n-          </button>\r\n-          <button \r\n-            onClick={() => navigate('/food?category=coffee')}\r\n-            style={{\r\n-              padding: '0.75rem 1.5rem',\r\n-              borderRadius: '50px',\r\n-              border: 'none',\r\n-              backgroundColor: darkMode ? '#2d3748' : '#e2e8f0',\r\n-              color: darkMode ? '#e2e8f0' : '#1e293b',\r\n-              fontWeight: '600',\r\n-              cursor: 'pointer',\r\n-              transition: 'all 0.2s',\r\n-              display: 'flex',\r\n-              alignItems: 'center',\r\n-              gap: '0.5rem',\r\n-              fontSize: '1rem'\r\n-            }}\r\n-          >\r\n-            ‚òï Coffee Shops\r\n-          </button>\r\n-        </div>\r\n-      </section>\r\n-\r\n-      {/* Service Popup */}\r\n-      {selectedService && (\r\n-        <div style={{\r\n-          position: 'fixed',\r\n-          top: 0,\r\n-          left: 0,\r\n-          right: 0,\r\n-          bottom: 0,\r\n-          backgroundColor: 'rgba(0, 0, 0, 0.7)',\r\n-          display: 'flex',\r\n-          justifyContent: 'center',\r\n-          alignItems: 'center',\r\n-          zIndex: 1000,\r\n-        }} onClick={closePopup}>\r\n-          <div style={{\r\n-            backgroundColor: darkMode ? '#2d3748' : 'white',\r\n-            borderRadius: '16px',\r\n-            padding: '2rem',\r\n-            maxWidth: '500px',\r\n-            width: '90%',\r\n-            boxShadow: '0 10px 25px rgba(0, 0, 0, 0.2)',\r\n-            position: 'relative',\r\n-            border: darkMode ? '1px solid #4a5568' : '1px solid #e2e8f0',\r\n-          }} onClick={(e) => e.stopPropagation()}>\r\n-            <button style={{\r\n-              position: 'absolute',\r\n-              top: '1rem',\r\n-              right: '1rem',\r\n-              background: 'none',\r\n-              border: 'none',\r\n-              fontSize: '1.5rem',\r\n-              cursor: 'pointer',\r\n-              color: darkMode ? '#a0aec0' : '#64748b',\r\n-            }} onClick={closePopup}>√ó</button>\r\n-            <div style={{ \r\n-              display: 'flex', \r\n-              alignItems: 'center', \r\n-              gap: '1rem',\r\n-              marginBottom: '1.5rem'\r\n-            }}>\r\n-              <span style={{ fontSize: '2.5rem', animation: 'float 3s ease-in-out infinite' }}>{selectedService.icon}</span>\r\n-              <h3 style={{fontSize: '1.8rem', fontWeight: '700', marginBottom: '1rem', color: darkMode ? '#e2e8f0' : '#1e293b'}}>{selectedService.name}</h3>\r\n-            </div>\r\n-            <p style={{color: darkMode ? '#a0aec0' : '#64748b', fontSize: '1.1rem', lineHeight: '1.6', marginBottom: '2rem'}}>{selectedService.details}</p>\r\n-            <button \r\n-              style={{ \r\n-                padding: '0.75rem 1.5rem',\r\n-                borderRadius: '8px',\r\n-                border: 'none',\r\n-                backgroundColor: selectedService.color,\r\n-                color: 'white',\r\n-                fontWeight: '600',\r\n-                cursor: 'pointer',\r\n-                transition: 'all 0.2s',\r\n-                fontSize: '1rem'\r\n-              }}\r\n-              onClick={() => {\r\n-                navigate(selectedService.path);\r\n-                closePopup();\r\n-              }}\r\n-            >\r\n-              Explore {selectedService.name}\r\n-            </button>\r\n-          </div>\r\n-        </div>\r\n-      )}\r\n-\r\n-      {/* Achievements */}\r\n-      {achievements.map(achievement => (\r\n-        <div key={achievement.id} style={{\r\n-          position: 'fixed',\r\n-          bottom: '20px',\r\n-          right: '20px',\r\n-          background: darkMode ? '#2d3748' : 'white',\r\n-          color: darkMode ? 'white' : '#1e293b',\r\n-          padding: '1rem',\r\n-          borderRadius: '12px',\r\n-          boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',\r\n-          display: 'flex',\r\n-          alignItems: 'center',\r\n-          gap: '0.5rem',\r\n-          zIndex: 1000,\r\n-          animation: 'slideIn 0.5s forwards, fadeOut 0.5s forwards 2.5s'\r\n-        }}>\r\n-          <span style={{fontSize: '1.5rem'}}>{achievement.icon}</span>\r\n-          <span>{achievement.title}</span>\r\n-        </div>\r\n-      ))}\r\n-\r\n-      {/* Chat Modal */}\r\n-      {showChat && <ChatModal darkMode={darkMode} onClose={toggleChat} />}\r\n-\r\n-      {/* Footer with copyright */}\r\n-      <footer style={{\r\n-        textAlign: 'center',\r\n-        padding: '2rem 1rem',\r\n-        color: darkMode ? '#a0aec0' : '#64748b',\r\n-        fontSize: '0.9rem',\r\n-        marginTop: '2rem'\r\n-      }}>\r\n-        <p>¬© {new Date().getFullYear()} UrbanFlow - Created by Nick</p>\r\n-      </footer>\r\n-    </div>\r\n-  );\r\n-};\n-import { useState, useEffect, useRef } from 'react';\r\n-import { useNavigate } from 'react-router-dom';\r\n-\r\n-// UrbanBuddy AI Assistant Component\r\n-const UrbanBuddy = ({ darkMode, onChatOpen }) => {\r\n-  const [position, setPosition] = useState({ x: 20, y: 50 });\r\n-  const [isActive, setIsActive] = useState(false);\r\n-  const botRef = useRef(null);\r\n-  const animationRef = useRef(null);\r\n-  const lastInteractionTime = useRef(Date.now());\r\n-\r\n-  // Make the bot wander with more dynamic movement\r\n-  useEffect(() => {\r\n-    const moveInterval = setInterval(() => {\r\n-      setPosition(prev => {\r\n-        const now = Date.now();\r\n-        const timeSinceLastInteraction = now - lastInteractionTime.current;\r\n-        \r\n-        // More active movement right after interaction\r\n-        const speedMultiplier = timeSinceLastInteraction < 5000 ? 2 : 1;\r\n-        \r\n-        let newX = prev.x + (3 * speedMultiplier);\r\n-        let newY = prev.y + (Math.random() * 6 - 3);\r\n-        \r\n-        // Bounce off edges\r\n-        if (newX > window.innerWidth - 80) {\r\n-          newX = window.innerWidth - 80;\r\n-          triggerAnimation('spin');\r\n-        }\r\n-        if (newX < 20) {\r\n-          newX = 20;\r\n-          triggerAnimation('spin');\r\n-        }\r\n-        if (newY < 20) newY = 20;\r\n-        if (newY > window.innerHeight - 100) newY = window.innerHeight - 100;\r\n-        \r\n-        return { x: newX, y: newY };\r\n-      });\r\n-    }, 100);\r\n-\r\n-    return () => clearInterval(moveInterval);\r\n-  }, []);\r\n-\r\n-  const triggerAnimation = (type) => {\r\n-    if (animationRef.current) {\r\n-      clearTimeout(animationRef.current);\r\n-    }\r\n-    \r\n-    const botElement = botRef.current;\r\n-    if (!botElement) return;\r\n-    \r\n-    botElement.style.animation = 'none';\r\n-    void botElement.offsetWidth; // Trigger reflow\r\n-    \r\n-    switch(type) {\r\n-      case 'spin':\r\n-        botElement.style.animation = 'spin 1s ease';\r\n-        break;\r\n-      case 'bounce':\r\n-        botElement.style.animation = 'bounce 0.5s ease';\r\n-        break;\r\n-      case 'wobble':\r\n-        botElement.style.animation = 'wobble 0.8s ease';\r\n-        break;\r\n-      default:\r\n-        botElement.style.animation = '';\r\n-    }\r\n-    \r\n-    animationRef.current = setTimeout(() => {\r\n-      if (botElement) botElement.style.animation = '';\r\n-    }, 1000);\r\n-  };\r\n-\r\n-  const handleClick = () => {\r\n-    lastInteractionTime.current = Date.now();\r\n-    setIsActive(true);\r\n-    triggerAnimation('bounce');\r\n-    \r\n-    // Trigger chat opening in parent component\r\n-    onChatOpen();\r\n-    \r\n-    // Return to normal after a delay\r\n-    setTimeout(() => {\r\n-      setIsActive(false);\r\n-    }, 3000);\r\n-  };\r\n-\r\n-  // Custom animations\r\n-  const animations = `\r\n-    @keyframes spin {\r\n-      0% { transform: rotate(0deg); }\r\n-      100% { transform: rotate(360deg); }\r\n-    }\r\n-    @keyframes bounce {\r\n-      0%, 100% { transform: translateY(0); }\r\n-      50% { transform: translateY(-20px); }\r\n-    }\r\n-    @keyframes wobble {\r\n-      0%, 100% { transform: rotate(0deg); }\r\n-      25% { transform: rotate(5deg); }\r\n-      75% { transform: rotate(-5deg); }\r\n-    }\r\n-    @keyframes float {\r\n-      0% { transform: translateY(0px); }\r\n-      50% { transform: translateY(-10px); }\r\n-      100% { transform: translateY(0px); }\r\n-    }\r\n-  `;\r\n-\r\n-  return (\r\n-    <>\r\n-      <style>{animations}</style>\r\n-      <div \r\n-        ref={botRef}\r\n-        onClick={handleClick}\r\n-        style={{\r\n-          position: 'fixed',\r\n-          left: `${position.x}px`,\r\n-          top: `${position.y}px`,\r\n-          fontSize: '2.5rem',\r\n-          cursor: 'pointer',\r\n-          transition: 'all 0.3s ease',\r\n-          zIndex: 100,\r\n-          filter: darkMode \r\n-            ? 'drop-shadow(0 0 8px rgba(255,255,255,0.7))' \r\n-            : 'drop-shadow(0 0 8px rgba(0,0,0,0.3))',\r\n-          userSelect: 'none',\r\n-          animation: 'float 4s ease-in-out infinite'\r\n-        }}\r\n-      >\r\n-        <div style={{ \r\n-          position: 'relative',\r\n-          display: 'flex',\r\n-          flexDirection: 'column',\r\n-          alignItems: 'center'\r\n-        }}>\r\n-          {/* Bot icon */}\r\n-          <div style={{\r\n-            position: 'relative',\r\n-            width: '60px',\r\n-            height: '60px',\r\n-            backgroundColor: darkMode ? '#4a5568' : '#3b82f6',\r\n-            borderRadius: '50%',\r\n-            display: 'flex',\r\n-            justifyContent: 'center',\r\n-            alignItems: 'center',\r\n-            color: 'white'\r\n-          }}>\r\n-            <span style={{ fontSize: '1.8rem' }}>ü§ñ</span>\r\n-          </div>\r\n-        </div>\r\n-      </div>\r\n-    </>\r\n-  );\r\n-};\r\n-\r\n-// Chat Modal Component with Simulated AI\r\n-const ChatModal = ({ darkMode, onClose }) => {\r\n-  const [messages, setMessages] = useState([\r\n-    { text: \"Hello! I'm UrbanBuddy, your AI assistant for urban living. How can I help you today?\", sender: 'bot' }\r\n-  ]);\r\n-  const [inputValue, setInputValue] = useState('');\r\n-  const [isTyping, setIsTyping] = useState(false);\r\n-  const chatEndRef = useRef(null);\r\n-  const inputRef = useRef(null);\r\n-\r\n-  // Auto-scroll to bottom and focus input\r\n-  useEffect(() => {\r\n-    chatEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n-    inputRef.current?.focus();\r\n-  }, [messages]);\r\n-\r\n-  // Simulated AI responses\r\n-  const generateResponse = async (userMessage) => {\r\n-    setIsTyping(true);\r\n-    \r\n-    // Simulate API delay\r\n-    await new Promise(resolve => setTimeout(resolve, 1000));\r\n-    \r\n-    // Create context-aware responses\r\n-    const responses = {\r\n-      'transport': \"For transport options, I can suggest checking the Transport section for real-time bus schedules and bike sharing locations.\",\r\n-      'food': \"For food delivery, we partner with local restaurants. Check the Food Delivery section for current promotions!\",\r\n-      'groceries': \"You can get groceries delivered within 30 minutes from our partner stores in your area.\",\r\n-      'services': \"Urban services like plumbing, electrical, and cleaning can be booked directly in the Services section.\",\r\n-      'hello': \"Hi there! How can I assist with your urban living needs today?\",\r\n-      'help': \"I can help with transport, food delivery, groceries, and urban services. What do you need?\",\r\n-      'default': \"I'm here to help with urban living questions! Try asking about transport, food delivery, or other city services.\"\r\n-    };\r\n-    \r\n-    // Check for keywords in the message\r\n-    const lowerMsg = userMessage.toLowerCase();\r\n-    let response = responses.default;\r\n-    \r\n-    if (lowerMsg.includes('transport') || lowerMsg.includes('bus') || lowerMsg.includes('metro')) {\r\n-      response = responses.transport;\r\n-    } else if (lowerMsg.includes('food') || lowerMsg.includes('restaurant') || lowerMsg.includes('eat')) {\r\n-      response = responses.food;\r\n-    } else if (lowerMsg.includes('grocery') || lowerMsg.includes('shopping')) {\r\n-      response = responses.groceries;\r\n-    } else if (lowerMsg.includes('service') || lowerMsg.includes('repair') || lowerMsg.includes('help')) {\r\n-      response = responses.services;\r\n-    } else if (lowerMsg.includes('hello') || lowerMsg.includes('hi')) {\r\n-      response = responses.hello;\r\n-    } else if (lowerMsg.includes('help')) {\r\n-      response = responses.help;\r\n-    }\r\n-    \r\n-    setMessages(prev => [...prev, { text: response, sender: 'bot' }]);\r\n-    setIsTyping(false);\r\n-  };\r\n-\r\n-  const handleSendMessage = async (e) => {\r\n-    e.preventDefault();\r\n-    if (inputValue.trim() && !isTyping) {\r\n-      // Add user message\r\n-      const userMessage = inputValue.trim();\r\n-      setMessages(prev => [...prev, { text: userMessage, sender: 'user' }]);\r\n-      setInputValue('');\r\n-      \r\n-      // Generate AI response\r\n-      await generateResponse(userMessage);\r\n-    }\r\n-  };\r\n-\r\n-  return (\r\n-    <div style={{\r\n-      position: 'fixed',\r\n-      bottom: '100px',\r\n-      right: '30px',\r\n-      width: '350px',\r\n-      maxWidth: '90%',\r\n-      backgroundColor: darkMode ? '#2d3748' : 'white',\r\n-      borderRadius: '16px',\r\n-      boxShadow: '0 10px 25px rgba(0, 0, 0, 0.2)',\r\n-      border: darkMode ? '1px solid #4a5568' : '1px solid #e2e8f0',\r\n-      zIndex: 1000,\r\n-      overflow: 'hidden',\r\n-      display: 'flex',\r\n-      flexDirection: 'column',\r\n-      maxHeight: '60vh'\r\n-    }}>\r\n-      {/* Chat header */}\r\n-      <div style={{\r\n-        padding: '1rem',\r\n-        backgroundColor: darkMode ? '#4a5568' : '#3b82f6',\r\n-        color: 'white',\r\n-        display: 'flex',\r\n-        justifyContent: 'space-between',\r\n-        alignItems: 'center'\r\n-      }}>\r\n-        <div style={{ display: 'flex', alignItems: 'center', gap: '0.5rem' }}>\r\n-          <span style={{ fontSize: '1.5rem' }}>ü§ñ</span>\r\n-          <h3 style={{ margin: 0 }}>UrbanBuddy AI</h3>\r\n-          {isTyping && (\r\n-            <span style={{ \r\n-              fontSize: '0.8rem',\r\n-              marginLeft: '0.5rem',\r\n-              opacity: 0.8\r\n-            }}>typing...</span>\r\n-          )}\r\n-        </div>\r\n-        <button \r\n-          onClick={onClose}\r\n-          style={{\r\n-            background: 'none',\r\n-            border: 'none',\r\n-            color: 'white',\r\n-            fontSize: '1.2rem',\r\n-            cursor: 'pointer'\r\n-          }}\r\n-        >\r\n-          √ó\r\n-        </button>\r\n-      </div>\r\n-      \r\n-      {/* Chat messages */}\r\n-      <div style={{\r\n-        flex: 1,\r\n-        padding: '1rem',\r\n-        overflowY: 'auto',\r\n-        display: 'flex',\r\n-        flexDirection: 'column',\r\n-        gap: '0.8rem'\r\n-      }}>\r\n-        {messages.map((msg, index) => (\r\n-          <div \r\n-            key={index}\r\n-            style={{\r\n-              alignSelf: msg.sender === 'user' ? 'flex-end' : 'flex-start',\r\n-              maxWidth: '80%',\r\n-              padding: '0.6rem 1rem',\r\n-              borderRadius: msg.sender === 'user' \r\n-                ? '18px 18px 0 18px' \r\n-                : '18px 18px 18px 0',\r\n-              backgroundColor: msg.sender === 'user'\r\n-                ? (darkMode ? '#4a5568' : '#3b82f6')\r\n-                : (darkMode ? '#4a5568' : '#e2e8f0'),\r\n-              color: msg.sender === 'user' ? 'white' : (darkMode ? 'white' : '#1e293b'),\r\n-              animation: msg.sender === 'bot' && index === messages.length - 1 \r\n-                ? 'fadeIn 0.3s ease' \r\n-                : 'none'\r\n-            }}\r\n-          >\r\n-            {msg.text}\r\n-          </div>\r\n-        ))}\r\n-        <div ref={chatEndRef} />\r\n-      </div>\r\n-      \r\n-      {/* Chat input */}\r\n-      <form onSubmit={handleSendMessage} style={{\r\n-        padding: '0.8rem',\r\n-        borderTop: darkMode ? '1px solid #4a5568' : '1px solid #e2e8f0',\r\n-        display: 'flex',\r\n-        gap: '0.5rem'\r\n-      }}>\r\n-        <input\r\n-          ref={inputRef}\r\n-          type=\"text\",\r\n-          value={inputValue},\r\n-          onChange={(e) => setInputValue(e.target.value)},\r\n-          placeholder=\"Ask me about urban living...\",\r\n-          disabled={isTyping},\r\n-          style={{\r\n-            flex: 1,\r\n-            padding: '0.6rem 1rem',\r\n-            borderRadius: '20px',\r\n-            border: darkMode ? '1px solid #4a5568' : '1px solid #e2e8f0',\r\n-            backgroundColor: darkMode ? '#2d3748' : 'white',\r\n-            color: darkMode ? 'white' : '#1e293b',\r\n-            outline: 'none',\r\n-            opacity: isTyping ? 0.7 : 1\r\n-          }}\r\n-        />\r\n-        <button \r\n-          type=\"submit\",\r\n-          disabled={isTyping},\r\n-          style={{\r\n-            background: isTyping \r\n-              ? (darkMode ? '#4a5568' : '#e2e8f0')\r\n-              : (darkMode ? '#4a5568' : '#3b82f6'),\r\n-            color: 'white',\r\n-            border: 'none',\r\n-            borderRadius: '50%',\r\n-            width: '40px',\r\n-            height: '40px',\r\n-            display: 'flex',\r\n-            alignItems: 'center',\r\n-            justifyContent: 'center',\r\n-            cursor: isTyping ? 'not-allowed' : 'pointer'\r\n-          }}\r\n-        >\r\n-          {isTyping ? '...' : '‚û§'}\r\n-        </button>\r\n-      </form>\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-// Main Home Component\r\n-export default function Home() {\r\n-  const navigate = useNavigate();\r\n-  const [searchQuery, setSearchQuery] = useState('');\r\n-  const [darkMode, setDarkMode] = useState(false);\r\n-  const [selectedService, setSelectedService] = useState(null);\r\n-  const [orderCount, setOrderCount] = useState(0);\r\n-  const [achievements, setAchievements] = useState([]);\r\n-  const [showChat, setShowChat] = useState(false);\r\n-\r\n-  const services = [\r\n-    { \r\n-      name: 'Transport', \r\n-      path: '/transport', \r\n-      icon: 'üöå', \r\n-      desc: 'Plan your multi-modal journey across the city',\r\n-      color: '#3b82f6',\r\n-      details: 'Find the best routes combining metro, buses, and bikes. Real-time updates and ticket purchasing available.'\r\n-    },\r\n-    { \r\n-      name: 'Food Delivery', \r\n-      path: '/food', \r\n-      icon: 'üçî', \r\n-      desc: 'Discover local restaurants and cafes',\r\n-      color: '#ef4444',\r\n-      details: 'Order from hundreds of restaurants with special discounts. Track your delivery in real-time.'\r\n-    },\r\n-    { \r\n-      name: 'Groceries', \r\n-      path: '/food', \r\n-      icon: 'üõí', \r\n-      desc: 'Get groceries delivered in minutes',\r\n-      color: '#10b981',\r\n-      details: 'Same-day delivery from local supermarkets. Schedule recurring orders for essentials.'\r\n-    },\r\n-    { \r\n-      name: 'Services', \r\n-      path: '/food', \r\n-      icon: 'üõ†Ô∏è', \r\n-      desc: 'Find urban services near you',\r\n-      color: '#8b5cf6',\r\n-      details: 'Book home services, repairs, and professional help with verified providers.'\r\n-    }\r\n-  ];\r\n-\r\n-  // Check for achievements\r\n-  useEffect(() => {\r\n-    if (orderCount === 1) {\r\n-      addAchievement('First Order!', 'üéâ');\r\n-    } else if (orderCount === 5) {\r\n-      addAchievement('Regular Customer!', 'üèÜ');\r\n-    } else if (orderCount === 10) {\r\n-      addAchievement('Super User!', 'üåü');\r\n-    }\r\n-  }, [orderCount]);\r\n-\r\n-  const addAchievement = (title, icon) => {\r\n-    if (!achievements.some(a => a.title === title)) {\r\n-      const newAchievement = { title, icon, id: Date.now() };\r\n-      setAchievements(prev => [...prev, newAchievement]);\r\n-      \r\n-      // Auto-hide achievement after 3 seconds\r\n-      setTimeout(() => {\r\n-        setAchievements(prev => prev.filter(a => a.id !== newAchievement.id));\r\n-      }, 3000);\r\n-    }\r\n-  };\r\n-\r\n-  const handleSearch = (e) => {\r\n-    e.preventDefault();\r\n-    if (searchQuery.trim()) {\r\n-      navigate(`/food?search=${encodeURIComponent(searchQuery)}`);\r\n-    }\r\n-  };\r\n-\r\n-  const toggleDarkMode = () => {\r\n-    setDarkMode(!darkMode);\r\n-  };\r\n-\r\n-  const openServicePopup = (service) => {\r\n-    setSelectedService(service);\r\n-    setOrderCount(prev => prev + 1);\r\n-  };\r\n-\r\n-  const closePopup = () => {\r\n-    setSelectedService(null);\r\n-  };\r\n-\r\n-  const toggleChat = () => {\r\n-    setShowChat(!showChat);\r\n-  };\r\n-\r\n-  return (\r\n-    <div style={{\r\n-      backgroundColor: darkMode ? '#1a202c' : '#f8fafc',\r\n-      minHeight: '100vh',\r\n-      paddingBottom: '3rem',\r\n-      color: darkMode ? '#e2e8f0' : '#1e293b',\r\n-      transition: 'all 0.3s ease',\r\n-      position: 'relative'\r\n-    }}>\r\n-      {/* Theme Toggle Button */}\r\n-      <button \r\n-        onClick={toggleDarkMode} \r\n-        style={{\r\n-          position: 'fixed',\r\n-          top: '1.5rem',\r\n-          right: '1.5rem',\r\n-          background: darkMode ? '#4a5568' : '#e2e8f0',\r\n-          border: 'none',\r\n-          borderRadius: '50%',\r\n-          width: '40px',\r\n-          height: '40px',\r\n-          display: 'flex',\r\n-          alignItems: 'center',\r\n-          justifyContent: 'center',\r\n-          cursor: 'pointer',\r\n-          transition: 'all 0.3s ease',\r\n-          boxShadow: '0 2px 5px rgba(0, 0, 0, 0.2)',\r\n-          zIndex: 100\r\n-        }}\r\n-        aria-label={darkMode ? 'Switch to light mode' : 'Switch to dark mode'}\r\n-      >\r\n-        {darkMode ? '‚òÄÔ∏è' : 'üåô'}\r\n-      </button>\r\n-      \r\n-      {/* Hero Section with UrbanBuddy */}\r\n-      <section style={{\r\n-        background: darkMode \r\n-          ? 'linear-gradient(135deg, #1f2937 0%, #111827 100%)' \r\n-          : 'linear-gradient(135deg, #6366f1 0%, #8b5cf6 100%)',\r\n-        color: 'white',\r\n-        padding: '4rem 1rem',\r\n-        textAlign: 'center',\r\n-        borderRadius: '0 0 20px 20px',\r\n-        boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',\r\n-        position: 'relative',\r\n-        overflow: 'hidden',\r\n-        height: '300px'\r\n-      }}>\r\n-        <div style={{\r\n-          maxWidth: '800px',\r\n-          margin: '0 auto',\r\n-          position: 'relative',\r\n-          zIndex: 2\r\n-        }}>\r\n-          <h1 style={{\r\n-            fontSize: '3.5rem',\r\n-            fontWeight: '800',\r\n-            marginBottom: '0.5rem',\r\n-            textShadow: '2px 2px 4px rgba(0, 0, 0, 0.2)',\r\n-          }}>UrbanFlow</h1>\r\n-          <p style={{\r\n-            fontSize: '1.25rem',\r\n-            marginBottom: '2rem',\r\n-            opacity: 0.9,\r\n-          }}>Your seamless urban living companion</p>\r\n-          \r\n-          <form onSubmit={handleSearch} style={{\r\n-            display: 'flex',\r\n-            maxWidth: '600px',\r\n-            margin: '0 auto',\r\n-            borderRadius: '50px',\r\n-            overflow: 'hidden',\r\n-            boxShadow: '0 4px 10px rgba(0, 0, 0, 0.2)',\r\n-          }}>\r\n-            <input\r\n-              type=\"text\",\r\n-              placeholder=\"Search for restaurants, services...\",\r\n-              value={searchQuery},\r\n-              onChange={(e) => setSearchQuery(e.target.value)},\r\n-              style={{\r\n-                flex: 1,\r\n-                padding: '1rem 1.5rem',\r\n-                border: 'none',\r\n-                fontSize: '1rem',\r\n-                outline: 'none',\r\n-                backgroundColor: darkMode ? '#2d3748' : 'white',\r\n-                color: darkMode ? '#e2e8f0' : '#1e293b',\r\n-              }}\r\n-            />\r\n-            <button type=\"submit\" style={{\r\n-              backgroundColor: darkMode ? '#4a5568' : '#1e40af',\r\n-              color: 'white',\r\n-              border: 'none',\r\n-              padding: '0 1.5rem',\r\n-              cursor: 'pointer',\r\n-              fontSize: '1.25rem',\r\n-              transition: 'background-color 0.2s'\r\n-            }}>\r\n-              <span>üîç</span>\r\n-            </button>\r\n-          </form>\r\n-        </div>\r\n-        <UrbanBuddy darkMode={darkMode} onChatOpen={toggleChat} />\r\n-      </section>\r\n-\r\n-      {/* Services Grid */}\r\n-      <section style={{\r\n-        padding: '2rem 1rem',\r\n-        maxWidth: '1200px',\r\n-        margin: '0 auto',\r\n-      }}>\r\n-        <h2 style={{\r\n-          fontSize: '2rem',\r\n-          fontWeight: '700',\r\n-          marginBottom: '1.5rem',\r\n-          color: darkMode ? '#e2e8f0' : '#1e293b',\r\n-          textAlign: 'center',\r\n-        }}>What do you need today?</h2>\r\n-        <div style={{\r\n-          display: 'grid',\r\n-          gridTemplateColumns: 'repeat(auto-fit, minmax(250px, 1fr))',\r\n-          gap: '1.5rem',\r\n-          marginTop: '1rem',\r\n-        }}>\r\n-          {services.map((service) => (\r\n-            <div \r\n-              key={service.name} \r\n-              style={{ \r\n-                padding: '2rem 1.5rem',\r\n-                borderRadius: '16px',\r\n-                border: `2px solid ${service.color}`,\r\n-                textAlign: 'center',\r\n-                cursor: 'pointer',\r\n-                transition: 'transform 0.3s, box-shadow 0.3s',\r\n-                backgroundColor: darkMode \r\n-                  ? `${service.color}20` \r\n-                  : `${service.color}10`,\r\n-                ':hover': {\r\n-                  transform: 'translateY(-5px)',\r\n-                  boxShadow: '0 10px 20px rgba(0, 0, 0, 0.1)',\r\n-                }\r\n-              }}\r\n-              onClick={() => openServicePopup(service)}\r\n-            >\r\n-              <div style={{ \r\n-                fontSize: '3rem',\r\n-                marginBottom: '1rem',\r\n-                display: 'inline-block',\r\n-                animation: 'float 3s ease-in-out infinite'\r\n-              }}>{service.icon}</div>\r\n-              <h3 style={{fontSize: '1.5rem', fontWeight: '600', marginBottom: '0.5rem'}}>{service.name}</h3>\r\n-              <p style={{color: darkMode ? '#a0aec0' : '#64748b'}}>{service.desc}</p>\r\n-            </div>\r\n-          ))}\r\n-        </div>\r\n-      </section>\r\n-\r\n-      {/* Featured Section */}\r\n-      <section style={{\r\n-        padding: '2rem 1rem',\r\n-        maxWidth: '1200px',\r\n-        margin: '0 auto',\r\n-      }}>\r\n-        <h2 style={{\r\n-          fontSize: '2rem',\r\n-          fontWeight: '700',\r\n-          marginBottom: '1.5rem',\r\n-          color: darkMode ? '#e2e8f0' : '#1e293b',\r\n-          textAlign: 'center',\r\n-        }}>Quick Access</h2>\r\n-        <div style={{\r\n-          display: 'flex',\r\n-          justifyContent: 'center',\r\n-          gap: '1rem',\r\n-          flexWrap: 'wrap',\r\n-        }}>\r\n-          <button \r\n-            onClick={() => navigate('/transport?from=home&to=downtown')}\r\n-            style={{\r\n-              padding: '0.75rem 1.5rem',\r\n-              borderRadius: '50px',\r\n-              border: 'none',\r\n-              backgroundColor: darkMode ? '#2d3748' : '#e2e8f0',\r\n-              color: darkMode ? '#e2e8f0' : '#1e293b',\r\n-              fontWeight: '600',\r\n-              cursor: 'pointer',\r\n-              transition: 'all 0.2s',\r\n-              display: 'flex',\r\n-              alignItems: 'center',\r\n-              gap: '0.5rem',\r\n-              fontSize: '1rem'\r\n-            }}\r\n-          >\r\n-            üöï To Downtown\r\n-          </button>\r\n-          <button \r\n-            onClick={() => navigate('/food?category=fastfood')}\r\n-            style={{\r\n-              padding: '0.75rem 1.5rem',\r\n-              borderRadius: '50px',\r\n-              border: 'none',\r\n-              backgroundColor: darkMode ? '#2d3748' : '#e2e8f0',\r\n-              color: darkMode ? '#e2e8f0' : '#1e293b',\r\n-              fontWeight: '600',\r\n-              cursor: 'pointer',\r\n-              transition: 'all 0.2s',\r\n-              display: 'flex',\r\n-              alignItems: 'center',\r\n-              gap: '0.5rem',\r\n-              fontSize: '1rem'\r\n-            }}\r\n-          >\r\n-            üçü Fast Food\r\n-          </button>\r\n-          <button \r\n-            onClick={() => navigate('/food?category=coffee')}\r\n-            style={{\r\n-              padding: '0.75rem 1.5rem',\r\n-              borderRadius: '50px',\r\n-              border: 'none',\r\n-              backgroundColor: darkMode ? '#2d3748' : '#e2e8f0',\r\n-              color: darkMode ? '#e2e8f0' : '#1e293b',\r\n-              fontWeight: '600',\r\n-              cursor: 'pointer',\r\n-              transition: 'all 0.2s',\r\n-              display: 'flex',\r\n-              alignItems: 'center',\r\n-              gap: '0.5rem',\r\n-              fontSize: '1rem'\r\n-            }}\r\n-          >\r\n-            ‚òï Coffee Shops\r\n-          </button>\r\n-        </div>\r\n-      </section>\r\n-\r\n-      {/* Service Popup */}\r\n-      {selectedService && (\r\n-        <div style={{\r\n-          position: 'fixed',\r\n-          top: 0,\r\n-          left: 0,\r\n-          right: 0,\r\n-          bottom: 0,\r\n-          backgroundColor: 'rgba(0, 0, 0, 0.7)',\r\n-          display: 'flex',\r\n-          justifyContent: 'center',\r\n-          alignItems: 'center',\r\n-          zIndex: 1000,\r\n-        }} onClick={closePopup}>\r\n-          <div style={{\r\n-            backgroundColor: darkMode ? '#2d3748' : 'white',\r\n-            borderRadius: '16px',\r\n-            padding: '2rem',\r\n-            maxWidth: '500px',\r\n-            width: '90%',\r\n-            boxShadow: '0 10px 25px rgba(0, 0, 0, 0.2)',\r\n-            position: 'relative',\r\n-            border: darkMode ? '1px solid #4a5568' : '1px solid #e2e8f0',\r\n-          }} onClick={(e) => e.stopPropagation()}>\r\n-            <button style={{\r\n-              position: 'absolute',\r\n-              top: '1rem',\r\n-              right: '1rem',\r\n-              background: 'none',\r\n-              border: 'none',\r\n-              fontSize: '1.5rem',\r\n-              cursor: 'pointer',\r\n-              color: darkMode ? '#a0aec0' : '#64748b',\r\n-            }} onClick={closePopup}>√ó</button>\r\n-            <div style={{ \r\n-              display: 'flex', \r\n-              alignItems: 'center', \r\n-              gap: '1rem',\r\n-              marginBottom: '1.5rem'\r\n-            }}>\r\n-              <span style={{ fontSize: '2.5rem', animation: 'float 3s ease-in-out infinite' }}>{selectedService.icon}</span>\r\n-              <h3 style={{fontSize: '1.8rem', fontWeight: '700', marginBottom: '1rem', color: darkMode ? '#e2e8f0' : '#1e293b'}}>{selectedService.name}</h3>\r\n-            </div>\r\n-            <p style={{color: darkMode ? '#a0aec0' : '#64748b', fontSize: '1.1rem', lineHeight: '1.6', marginBottom: '2rem'}}>{selectedService.details}</p>\r\n-            <button \r\n-              style={{ \r\n-                padding: '0.75rem 1.5rem',\r\n-                borderRadius: '8px',\r\n-                border: 'none',\r\n-                backgroundColor: selectedService.color,\r\n-                color: 'white',\r\n-                fontWeight: '600',\r\n-                cursor: 'pointer',\r\n-                transition: 'all 0.2s',\r\n-                fontSize: '1rem'\r\n-              }}\r\n-              onClick={() => {\r\n-                navigate(selectedService.path);\r\n-                closePopup();\r\n-              }}\r\n-            >\r\n-              Explore {selectedService.name}\r\n-            </button>\r\n-          </div>\r\n-        </div>\r\n-      )}\r\n-\r\n-      {/* Achievements */}\r\n-      {achievements.map(achievement => (\r\n-        <div key={achievement.id} style={{\r\n-          position: 'fixed',\r\n-          bottom: '20px',\r\n-          right: '20px',\r\n-          background: darkMode ? '#2d3748' : 'white',\r\n-          color: darkMode ? 'white' : '#1e293b',\r\n-          padding: '1rem',\r\n-          borderRadius: '12px',\r\n-          boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',\r\n-          display: 'flex',\r\n-          alignItems: 'center',\r\n-          gap: '0.5rem',\r\n-          zIndex: 1000,\r\n-          animation: 'slideIn 0.5s forwards, fadeOut 0.5s forwards 2.5s'\r\n-        }}>\r\n-          <span style={{fontSize: '1.5rem'}}>{achievement.icon}</span>\r\n-          <span>{achievement.title}</span>\r\n-        </div>\r\n-      ))}\r\n-\r\n-      {/* Chat Modal */}\r\n-      {showChat && <ChatModal darkMode={darkMode} onClose={toggleChat} />}\r\n-\r\n-      {/* Footer with copyright */}\r\n-      <footer style={{\r\n-        textAlign: 'center',\r\n-        padding: '2rem 1rem',\r\n-        color: darkMode ? '#a0aec0' : '#64748b',\r\n-        fontSize: '0.9rem',\r\n-        marginTop: '2rem'\r\n-      }}>\r\n-        <p>¬© {new Date().getFullYear()} UrbanFlow - Created by Nick</p>\r\n-      </footer>\r\n-    </div>\r\n-  );\r\n-};\n-import { useState, useEffect, useRef } from 'react';\r\n-import { useNavigate } from 'react-router-dom';\r\n-\r\n-// UrbanBuddy AI Assistant Component\r\n-const UrbanBuddy = ({ darkMode, onChatOpen }) => {\r\n-  const [position, setPosition] = useState({ x: 20, y: 50 });\r\n-  const [expression, setExpression] = useState('üòä');\r\n-  const [direction, setDirection] = useState(1);\r\n-  const [costume, setCostume] = useState(null);\r\n-  const [isActive, setIsActive] = useState(false);\r\n-  const botRef = useRef(null);\r\n-  const animationRef = useRef(null);\r\n-  const lastInteractionTime = useRef(Date.now());\r\n-\r\n-  // Seasonal costumes\r\n-  useEffect(() => {\r\n-    const today = new Date();\r\n-    const month = today.getMonth() + 1;\r\n-    \r\n-    if (month === 12) setCostume('üéÑ');\r\n-    else if (month === 10) setCostume('üéÉ');\r\n-    else if (month === 2) setCostume('üíù');\r\n-    else if (month === 4) setCostume('üå∏');\r\n-    else setCostume(null);\r\n-  }, []);\r\n-\r\n-  // Make the bot wander with more dynamic movement\r\n-  useEffect(() => {\r\n-    const moveInterval = setInterval(() => {\r\n-      setPosition(prev => {\r\n-        const now = Date.now();\r\n-        const timeSinceLastInteraction = now - lastInteractionTime.current;\r\n-        \r\n-        // More active movement right after interaction\r\n-        const speedMultiplier = timeSinceLastInteraction < 5000 ? 2 : 1;\r\n-        \r\n-        let newX = prev.x + (3 * direction * speedMultiplier);\r\n-        let newY = prev.y + (Math.random() * 6 - 3);\r\n-        \r\n-        // Bounce off edges\r\n-        if (newX > window.innerWidth - 80) {\r\n-          setDirection(-1);\r\n-          triggerAnimation('spin');\r\n-        }\r\n-        if (newX < 20) {\r\n-          setDirection(1);\r\n-          triggerAnimation('spin');\r\n-        }\r\n-        if (newY < 20) newY = 20;\r\n-        if (newY > window.innerHeight - 100) newY = window.innerHeight - 100;\r\n-        \r\n-        return { x: newX, y: newY };\r\n-      });\r\n-    }, 100);\r\n-\r\n-    return () => clearInterval(moveInterval);\r\n-  }, [direction]);\r\n-\r\n-  // Change expressions randomly with more variety\r\n-  useEffect(() => {\r\n-    const expressions = ['üòä', 'ü§î', 'üòÆ', 'üòé', 'üëã', 'ü§ñ', '‚ú®', 'üåü'];\r\n-    const expressionInterval = setInterval(() => {\r\n-      if (!isActive) {\r\n-        setExpression(expressions[Math.floor(Math.random() * expressions.length)]);\r\n-        // Random animations when idle\r\n-        if (Math.random() > 0.8) {\r\n-          triggerAnimation(['bounce', 'spin', 'wobble'][Math.floor(Math.random() * 3)]);\r\n-        }\r\n-      }\r\n-    }, 3000);\r\n-    return () => clearInterval(expressionInterval);\r\n-  }, [isActive]);\r\n-\r\n-  const triggerAnimation = (type) => {\r\n-    if (animationRef.current) {\r\n-      clearTimeout(animationRef.current);\r\n-    }\r\n-    \r\n-    const botElement = botRef.current;\r\n-    if (!botElement) return;\r\n-    \r\n-    botElement.style.animation = 'none';\r\n-    void botElement.offsetWidth; // Trigger reflow\r\n-    \r\n-    switch(type) {\r\n-      case 'spin':\r\n-        botElement.style.animation = 'spin 1s ease';\r\n-        break;\r\n-      case 'bounce':\r\n-        botElement.style.animation = 'bounce 0.5s ease';\r\n-        break;\r\n-      case 'wobble':\r\n-        botElement.style.animation = 'wobble 0.8s ease';\r\n-        break;\r\n-      default:\r\n-        botElement.style.animation = '';\r\n-    }\r\n-    \r\n-    animationRef.current = setTimeout(() => {\r\n-      if (botElement) botElement.style.animation = '';\r\n-    }, 1000);\r\n-  };\r\n-\r\n-  const handleClick = () => {\r\n-    lastInteractionTime.current = Date.now();\r\n-    setIsActive(true);\r\n-    triggerAnimation('bounce');\r\n-    setExpression('üí°');\r\n-    \r\n-    // Trigger chat opening in parent component\r\n-    onChatOpen();\r\n-    \r\n-    // Return to normal after a delay\r\n-    setTimeout(() => {\r\n-      setIsActive(false);\r\n-    }, 3000);\r\n-  };\r\n-\r\n-  // Custom animations\r\n-  const animations = `\r\n-    @keyframes spin {\r\n-      0% { transform: rotate(0deg) scaleX(${direction}); }\r\n-      100% { transform: rotate(360deg) scaleX(${direction}); }\r\n-    }\r\n-    @keyframes bounce {\r\n-      0%, 100% { transform: translateY(0) scaleX(${direction}); }\r\n-      50% { transform: translateY(-20px) scaleX(${direction}); }\r\n-    }\r\n-    @keyframes wobble {\r\n-      0%, 100% { transform: rotate(0deg) scaleX(${direction}); }\r\n-      25% { transform: rotate(5deg) scaleX(${direction}); }\r\n-      75% { transform: rotate(-5deg) scaleX(${direction}); }\r\n-    }\r\n-    @keyframes float {\r\n-      0% { transform: translateY(0px) scaleX(${direction}); }\r\n-      50% { transform: translateY(-10px) scaleX(${direction}); }\r\n-      100% { transform: translateY(0px) scaleX(${direction}); }\r\n-    }\r\n-  `;\r\n-\r\n-  return (\r\n-    <>\r\n-      <style>{animations}</style>\r\n-      <div \r\n-        ref={botRef}\r\n-        onClick={handleClick}\r\n-        style={{\r\n-          position: 'fixed',\r\n-          left: `${position.x}px`,\r\n-          top: `${position.y}px`,\r\n-          fontSize: '2.5rem',\r\n-          cursor: 'pointer',\r\n-          transition: 'all 0.3s ease',\r\n-          transform: `scaleX(${direction})`,\r\n-          zIndex: 100,\r\n-          filter: darkMode \r\n-            ? 'drop-shadow(0 0 8px rgba(255,255,255,0.7))' \r\n-            : 'drop-shadow(0 0 8px rgba(0,0,0,0.3))',\r\n-          userSelect: 'none',\r\n-          animation: 'float 4s ease-in-out infinite'\r\n-        }}\r\n-      >\r\n-        <div style={{ \r\n-          position: 'relative',\r\n-          display: 'flex',\r\n-          flexDirection: 'column',\r\n-          alignItems: 'center'\r\n-        }}>\r\n-          {/* Bot icon with costume */}\r\n-          <div style={{\r\n-            position: 'relative',\r\n-            width: '60px',\r\n-            height: '60px',\r\n-            backgroundColor: darkMode ? '#4a5568' : '#3b82f6',\r\n-            borderRadius: '50%',\r\n-            display: 'flex',\r\n-            justifyContent: 'center',\r\n-            alignItems: 'center',\r\n-            color: 'white'\r\n-          }}>\r\n-            <span style={{ fontSize: '1.8rem' }}>{expression}</span>\r\n-            {costume && (\r\n-              <span style={{\r\n-                position: 'absolute',\r\n-                top: '-15px',\r\n-                right: '-10px',\r\n-                fontSize: '1.5rem',\r\n-                transform: 'rotate(15deg)'\r\n-              }}>\r\n-                {costume}\r\n-              </span>\r\n-            )}\r\n-          </div>\r\n-        </div>\r\n-      </div>\r\n-    </>\r\n-  );\r\n-};\r\n-\r\n-// Chat Modal Component with Direct Gemini API Connection\r\n-const ChatModal = ({ darkMode, onClose }) => {\r\n-  const [messages, setMessages] = useState([\r\n-    { text: \"Hello! I'm UrbanBuddy, your AI assistant powered by Gemini. How can I help you with urban living today?\", sender: 'bot' }\r\n-  ]);\r\n-  const [inputValue, setInputValue] = useState('');\r\n-  const [isTyping, setIsTyping] = useState(false);\r\n-  const chatEndRef = useRef(null);\r\n-  const inputRef = useRef(null);\r\n-\r\n-  // Auto-scroll to bottom and focus input\r\n-  useEffect(() => {\r\n-    chatEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n-    inputRef.current?.focus();\r\n-  }, [messages]);\r\n-\r\n-  // Direct API call to Gemini through a proxy\r\n-  const generateResponse = async (userMessage) => {\r\n-    setIsTyping(true);\r\n-    \r\n-    try {\r\n-      // Using a public AI API gateway (no API key needed)\r\n-      const response = await fetch('https://gemini-proxy.vercel.app/api/generate', {\r\n-        method: \"POST\",\r\n-        headers: { \r\n-          \"Content-Type\": \"application/json\",\r\n-        },\r\n-        body: JSON.stringify({\r\n-          prompt: `You are UrbanBuddy, a friendly AI assistant for urban living. \r\n-          Respond to this query about city life: ${userMessage}\r\n-          Keep responses concise (1-2 sentences) and helpful.`\r\n-        })\r\n-      });\r\n-      \r\n-      const data = await response.json();\r\n-      \r\n-      setMessages(prev => [...prev, { \r\n-        text: data.response || \"I'm here to help with urban living questions!\", \r\n-        sender: 'bot' \r\n-      }]);\r\n-    } catch (error) {\r\n-      console.error(\"API error:\", error);\r\n-      setMessages(prev => [...prev, { \r\n-        text: \"I'm having trouble connecting right now. Try again later!\", \r\n-        sender: 'bot' \r\n-      }]);\r\n-    } finally {\r\n-      setIsTyping(false);\r\n-    }\r\n-  };\r\n-\r\n-  const handleSendMessage = async (e) => {\r\n-    e.preventDefault();\r\n-    if (inputValue.trim() && !isTyping) {\r\n-      // Add user message\r\n-      const userMessage = inputValue.trim();\r\n-      setMessages(prev => [...prev, { text: userMessage, sender: 'user' }]);\r\n-      setInputValue('');\r\n-      \r\n-      // Generate AI response\r\n-      await generateResponse(userMessage);\r\n-    }\r\n-  };\r\n-\r\n-  return (\r\n-    <div style={{\r\n-      position: 'fixed',\r\n-      bottom: '100px',\r\n-      right: '30px',\r\n-      width: '350px',\r\n-      maxWidth: '90%',\r\n-      backgroundColor: darkMode ? '#2d3748' : 'white',\r\n-      borderRadius: '16px',\r\n-      boxShadow: '0 10px 25px rgba(0, 0, 0, 0.2)',\r\n-      border: darkMode ? '1px solid #4a5568' : '1px solid #e2e8f0',\r\n-      zIndex: 1000,\r\n-      overflow: 'hidden',\r\n-      display: 'flex',\r\n-      flexDirection: 'column',\r\n-      maxHeight: '60vh'\r\n-    }}>\r\n-      {/* Chat header */}\r\n-      <div style={{\r\n-        padding: '1rem',\r\n-        backgroundColor: darkMode ? '#4a5568' : '#3b82f6',\r\n-        color: 'white',\r\n-        display: 'flex',\r\n-        justifyContent: 'space-between',\r\n-        alignItems: 'center'\r\n-      }}>\r\n-        <div style={{ display: 'flex', alignItems: 'center', gap: '0.5rem' }}>\r\n-          <span style={{ fontSize: '1.5rem' }}>ü§ñ</span>\r\n-          <h3 style={{ margin: 0 }}>UrbanBuddy AI</h3>\r\n-          {isTyping && (\r\n-            <span style={{ \r\n-              fontSize: '0.8rem',\r\n-              marginLeft: '0.5rem',\r\n-              opacity: 0.8\r\n-            }}>typing...</span>\r\n-          )}\r\n-        </div>\r\n-        <button \r\n-          onClick={onClose}\r\n-          style={{\r\n-            background: 'none',\r\n-            border: 'none',\r\n-            color: 'white',\r\n-            fontSize: '1.2rem',\r\n-            cursor: 'pointer'\r\n-          }}\r\n-        >\r\n-          √ó\r\n-        </button>\r\n-      </div>\r\n-      \r\n-      {/* Chat messages */}\r\n-      <div style={{\r\n-        flex: 1,\r\n-        padding: '1rem',\r\n-        overflowY: 'auto',\r\n-        display: 'flex',\r\n-        flexDirection: 'column',\r\n-        gap: '0.8rem'\r\n-      }}>\r\n-        {messages.map((msg, index) => (\r\n-          <div \r\n-            key={index}\r\n-            style={{\r\n-              alignSelf: msg.sender === 'user' ? 'flex-end' : 'flex-start',\r\n-              maxWidth: '80%',\r\n-              padding: '0.6rem 1rem',\r\n-              borderRadius: msg.sender === 'user' \r\n-                ? '18px 18px 0 18px' \r\n-                : '18px 18px 18px 0',\r\n-              backgroundColor: msg.sender === 'user'\r\n-                ? (darkMode ? '#4a5568' : '#3b82f6')\r\n-                : (darkMode ? '#4a5568' : '#e2e8f0'),\r\n-              color: msg.sender === 'user' ? 'white' : (darkMode ? 'white' : '#1e293b'),\r\n-              animation: msg.sender === 'bot' && index === messages.length - 1 \r\n-                ? 'fadeIn 0.3s ease' \r\n-                : 'none'\r\n-            }}\r\n-          >\r\n-            {msg.text}\r\n-          </div>\r\n-        ))}\r\n-        <div ref={chatEndRef} />\r\n-      </div>\r\n-      \r\n-      {/* Chat input */}\r\n-      <form onSubmit={handleSendMessage} style={{\r\n-        padding: '0.8rem',\r\n-        borderTop: darkMode ? '1px solid #4a5568' : '1px solid #e2e8f0',\r\n-        display: 'flex',\r\n-        gap: '0.5rem'\r\n-      }}>\r\n-        <input\r\n-          ref={inputRef}\r\n-          type=\"text\"\r\n-          value={inputValue}\r\n-          onChange={(e) => setInputValue(e.target.value)}\r\n-          placeholder=\"Ask me about urban living...\"\r\n-          disabled={isTyping}\r\n-          style={{\r\n-            flex: 1,\r\n-            padding: '0.6rem 1rem',\r\n-            borderRadius: '20px',\r\n-            border: darkMode ? '1px solid #4a5568' : '1px solid #e2e8f0',\r\n-            backgroundColor: darkMode ? '#2d3748' : 'white',\r\n-            color: darkMode ? 'white' : '#1e293b',\r\n-            outline: 'none',\r\n-            opacity: isTyping ? 0.7 : 1\r\n-          }}\r\n-        />\r\n-        <button \r\n-          type=\"submit\"\r\n-          disabled={isTyping}\r\n-          style={{\r\n-            background: isTyping \r\n-              ? (darkMode ? '#4a5568' : '#e2e8f0')\r\n-              : (darkMode ? '#4a5568' : '#3b82f6'),\r\n-            color: 'white',\r\n-            border: 'none',\r\n-            borderRadius: '50%',\r\n-            width: '40px',\r\n-            height: '40px',\r\n-            display: 'flex',\r\n-            alignItems: 'center',\r\n-            justifyContent: 'center',\r\n-            cursor: isTyping ? 'not-allowed' : 'pointer'\r\n-          }}\r\n-        >\r\n-          {isTyping ? '...' : '‚û§'}\r\n-        </button>\r\n-      </form>\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-// Main Home Component\r\n-export default function Home() {\r\n-  const navigate = useNavigate();\r\n-  const [searchQuery, setSearchQuery] = useState('');\r\n-  const [darkMode, setDarkMode] = useState(false);\r\n-  const [selectedService, setSelectedService] = useState(null);\r\n-  const [orderCount, setOrderCount] = useState(0);\r\n-  const [achievements, setAchievements] = useState([]);\r\n-  const [showChat, setShowChat] = useState(false);\r\n-\r\n-  const services = [\r\n-    { \r\n-      name: 'Transport', \r\n-      path: '/transport', \r\n-      icon: 'üöå', \r\n-      desc: 'Plan your multi-modal journey across the city',\r\n-      color: '#3b82f6',\r\n-      details: 'Find the best routes combining metro, buses, and bikes. Real-time updates and ticket purchasing available.'\r\n-    },\r\n-    { \r\n-      name: 'Food Delivery', \r\n-      path: '/food', \r\n-      icon: 'üçî', \r\n-      desc: 'Discover local restaurants and cafes',\r\n-      color: '#ef4444',\r\n-      details: 'Order from hundreds of restaurants with special discounts. Track your delivery in real-time.'\r\n-    },\r\n-    { \r\n-      name: 'Groceries', \r\n-      path: '/food', \r\n-      icon: 'üõí', \r\n-      desc: 'Get groceries delivered in minutes',\r\n-      color: '#10b981',\r\n-      details: 'Same-day delivery from local supermarkets. Schedule recurring orders for essentials.'\r\n-    },\r\n-    { \r\n-      name: 'Services', \r\n-      path: '/food', \r\n-      icon: 'üõ†Ô∏è', \r\n-      desc: 'Find urban services near you',\r\n-      color: '#8b5cf6',\r\n-      details: 'Book home services, repairs, and professional help with verified providers.'\r\n-    }\r\n-  ];\r\n-\r\n-  // Check for achievements\r\n-  useEffect(() => {\r\n-    if (orderCount === 1) {\r\n-      addAchievement('First Order!', 'üéâ');\r\n-    } else if (orderCount === 5) {\r\n-      addAchievement('Regular Customer!', 'üèÜ');\r\n-    } else if (orderCount === 10) {\r\n-      addAchievement('Super User!', 'üåü');\r\n-    }\r\n-  }, [orderCount]);\r\n-\r\n-  const addAchievement = (title, icon) => {\r\n-    if (!achievements.some(a => a.title === title)) {\r\n-      const newAchievement = { title, icon, id: Date.now() };\r\n-      setAchievements(prev => [...prev, newAchievement]);\r\n-      \r\n-      // Auto-hide achievement after 3 seconds\r\n-      setTimeout(() => {\r\n-        setAchievements(prev => prev.filter(a => a.id !== newAchievement.id));\r\n-      }, 3000);\r\n-    }\r\n-  };\r\n-\r\n-  const handleSearch = (e) => {\r\n-    e.preventDefault();\r\n-    if (searchQuery.trim()) {\r\n-      navigate(`/food?search=${encodeURIComponent(searchQuery)}`);\r\n-    }\r\n-  };\r\n-\r\n-  const toggleDarkMode = () => {\r\n-    setDarkMode(!darkMode);\r\n-  };\r\n-\r\n-  const openServicePopup = (service) => {\r\n-    setSelectedService(service);\r\n-    setOrderCount(prev => prev + 1);\r\n-  };\r\n-\r\n-  const closePopup = () => {\r\n-    setSelectedService(null);\r\n-  };\r\n-\r\n-  const toggleChat = () => {\r\n-    setShowChat(!showChat);\r\n-  };\r\n-\r\n-  return (\r\n-    <div style={{\r\n-      backgroundColor: darkMode ? '#1a202c' : '#f8fafc',\r\n-      minHeight: '100vh',\r\n-      paddingBottom: '3rem',\r\n-      color: darkMode ? '#e2e8f0' : '#1e293b',\r\n-      transition: 'all 0.3s ease',\r\n-      position: 'relative'\r\n-    }}>\r\n-      {/* Theme Toggle Button */}\r\n-      <button \r\n-        onClick={toggleDarkMode} \r\n-        style={{\r\n-          position: 'fixed',\r\n-          top: '1.5rem',\r\n-          right: '1.5rem',\r\n-          background: darkMode ? '#4a5568' : '#e2e8f0',\r\n-          border: 'none',\r\n-          borderRadius: '50%',\r\n-          width: '40px',\r\n-          height: '40px',\r\n-          display: 'flex',\r\n-          alignItems: 'center',\r\n-          justifyContent: 'center',\r\n-          cursor: 'pointer',\r\n-          transition: 'all 0.3s ease',\r\n-          boxShadow: '0 2px 5px rgba(0, 0, 0, 0.2)',\r\n-          zIndex: 100\r\n-        }}\r\n-        aria-label={darkMode ? 'Switch to light mode' : 'Switch to dark mode'}\r\n-      >\r\n-        {darkMode ? '‚òÄÔ∏è' : 'üåô'}\r\n-      </button>\r\n-      \r\n-      {/* Hero Section with UrbanBuddy */}\r\n-      <section style={{\r\n-        background: darkMode \r\n-          ? 'linear-gradient(135deg, #2d3748 0%, #1a202c 100%)' \r\n-          : 'linear-gradient(135deg, #6b46c1 0%, #3b82f6 100%)',\r\n-        color: 'white',\r\n-        padding: '4rem 1rem',\r\n-        textAlign: 'center',\r\n-        borderRadius: '0 0 20px 20px',\r\n-        boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',\r\n-        position: 'relative',\r\n-        overflow: 'hidden',\r\n-        height: '300px'\r\n-      }}>\r\n-        <div style={{\r\n-          maxWidth: '800px',\r\n-          margin: '0 auto',\r\n-          position: 'relative',\r\n-          zIndex: 2\r\n-        }}>\r\n-          <h1 style={{\r\n-            fontSize: '3.5rem',\r\n-            fontWeight: '800',\r\n-            marginBottom: '0.5rem',\r\n-            textShadow: '2px 2px 4px rgba(0, 0, 0, 0.2)',\r\n-          }}>UrbanFlow</h1>\r\n-          <p style={{\r\n-            fontSize: '1.25rem',\r\n-            marginBottom: '2rem',\r\n-            opacity: 0.9,\r\n-          }}>Your seamless urban living companion</p>\r\n-          \r\n-          <form onSubmit={handleSearch} style={{\r\n-            display: 'flex',\r\n-            maxWidth: '600px',\r\n-            margin: '0 auto',\r\n-            borderRadius: '50px',\r\n-            overflow: 'hidden',\r\n-            boxShadow: '0 4px 10px rgba(0, 0, 0, 0.2)',\r\n-          }}>\r\n-            <input\r\n-              type=\"text\"\r\n-              placeholder=\"Search for restaurants, services...\"\r\n-              value={searchQuery}\r\n-              onChange={(e) => setSearchQuery(e.target.value)}\r\n-              style={{\r\n-                flex: 1,\r\n-                padding: '1rem 1.5rem',\r\n-                border: 'none',\r\n-                fontSize: '1rem',\r\n-                outline: 'none',\r\n-                backgroundColor: darkMode ? '#2d3748' : 'white',\r\n-                color: darkMode ? '#e2e8f0' : '#1e293b',\r\n-              }}\r\n-            />\r\n-            <button type=\"submit\" style={{\r\n-              backgroundColor: darkMode ? '#4a5568' : '#1e40af',\r\n-              color: 'white',\r\n-              border: 'none',\r\n-              padding: '0 1.5rem',\r\n-              cursor: 'pointer',\r\n-              fontSize: '1.25rem',\r\n-              transition: 'background-color 0.2s'\r\n-            }}>\r\n-              <span>üîç</span>\r\n-            </button>\r\n-          </form>\r\n-        </div>\r\n-        <UrbanBuddy darkMode={darkMode} onChatOpen={toggleChat} />\r\n-      </section>\r\n-\r\n-      {/* Services Grid */}\r\n-      <section style={{\r\n-        padding: '2rem 1rem',\r\n-        maxWidth: '1200px',\r\n-        margin: '0 auto',\r\n-      }}>\r\n-        <h2 style={{\r\n-          fontSize: '2rem',\r\n-          fontWeight: '700',\r\n-          marginBottom: '1.5rem',\r\n-          color: darkMode ? '#e2e8f0' : '#1e293b',\r\n-          textAlign: 'center',\r\n-        }}>What do you need today?</h2>\r\n-        <div style={{\r\n-          display: 'grid',\r\n-          gridTemplateColumns: 'repeat(auto-fit, minmax(250px, 1fr))',\r\n-          gap: '1.5rem',\r\n-          marginTop: '1rem',\r\n-        }}>\r\n-          {services.map((service) => (\r\n-            <div \r\n-              key={service.name} \r\n-              style={{ \r\n-                padding: '2rem 1.5rem',\r\n-                borderRadius: '16px',\r\n-                border: `2px solid ${service.color}`,\r\n-                textAlign: 'center',\r\n-                cursor: 'pointer',\r\n-                transition: 'transform 0.3s, box-shadow 0.3s',\r\n-                backgroundColor: darkMode \r\n-                  ? `${service.color}20` \r\n-                  : `${service.color}10`,\r\n-                ':hover': {\r\n-                  transform: 'translateY(-5px)',\r\n-                  boxShadow: '0 10px 20px rgba(0, 0, 0, 0.1)',\r\n-                }\r\n-              }}\r\n-              onClick={() => openServicePopup(service)}\r\n-            >\r\n-              <div style={{ \r\n-                fontSize: '3rem',\r\n-                marginBottom: '1rem',\r\n-                display: 'inline-block',\r\n-                animation: 'float 3s ease-in-out infinite'\r\n-              }}>{service.icon}</div>\r\n-              <h3 style={{fontSize: '1.5rem', fontWeight: '600', marginBottom: '0.5rem'}}>{service.name}</h3>\r\n-              <p style={{color: darkMode ? '#a0aec0' : '#64748b'}}>{service.desc}</p>\r\n-            </div>\r\n-          ))}\r\n-        </div>\r\n-      </section>\r\n-\r\n-      {/* Featured Section */}\r\n-      <section style={{\r\n-        padding: '2rem 1rem',\r\n-        maxWidth: '1200px',\r\n-        margin: '0 auto',\r\n-      }}>\r\n-        <h2 style={{\r\n-          fontSize: '2rem',\r\n-          fontWeight: '700',\r\n-          marginBottom: '1.5rem',\r\n-          color: darkMode ? '#e2e8f0' : '#1e293b',\r\n-          textAlign: 'center',\r\n-        }}>Quick Access</h2>\r\n-        <div style={{\r\n-          display: 'flex',\r\n-          justifyContent: 'center',\r\n-          gap: '1rem',\r\n-          flexWrap: 'wrap',\r\n-        }}>\r\n-          <button \r\n-            onClick={() => navigate('/transport?from=home&to=downtown')}\r\n-            style={{\r\n-              padding: '0.75rem 1.5rem',\r\n-              borderRadius: '50px',\r\n-              border: 'none',\r\n-              backgroundColor: darkMode ? '#2d3748' : '#e2e8f0',\r\n-              color: darkMode ? '#e2e8f0' : '#1e293b',\r\n-              fontWeight: '600',\r\n-              cursor: 'pointer',\r\n-              transition: 'all 0.2s',\r\n-              display: 'flex',\r\n-              alignItems: 'center',\r\n-              gap: '0.5rem',\r\n-              fontSize: '1rem'\r\n-            }}\r\n-          >\r\n-            üöï To Downtown\r\n-          </button>\r\n-          <button \r\n-            onClick={() => navigate('/food?category=fastfood')}\r\n-            style={{\r\n-              padding: '0.75rem 1.5rem',\r\n-              borderRadius: '50px',\r\n-              border: 'none',\r\n-              backgroundColor: darkMode ? '#2d3748' : '#e2e8f0',\r\n-              color: darkMode ? '#e2e8f0' : '#1e293b',\r\n-              fontWeight: '600',\r\n-              cursor: 'pointer',\r\n-              transition: 'all 0.2s',\r\n-              display: 'flex',\r\n-              alignItems: 'center',\r\n-              gap: '0.5rem',\r\n-              fontSize: '1rem'\r\n-            }}\r\n-          >\r\n-            üçü Fast Food\r\n-          </button>\r\n-          <button \r\n-            onClick={() => navigate('/food?category=coffee')}\r\n-            style={{\r\n-              padding: '0.75rem 1.5rem',\r\n-              borderRadius: '50px',\r\n-              border: 'none',\r\n-              backgroundColor: darkMode ? '#2d3748' : '#e2e8f0',\r\n-              color: darkMode ? '#e2e8f0' : '#1e293b',\r\n-              fontWeight: '600',\r\n-              cursor: 'pointer',\r\n-              transition: 'all 0.2s',\r\n-              display: 'flex',\r\n-              alignItems: 'center',\r\n-              gap: '0.5rem',\r\n-              fontSize: '1rem'\r\n-            }}\r\n-          >\r\n-            ‚òï Coffee Shops\r\n-          </button>\r\n-        </div>\r\n-      </section>\r\n-\r\n-      {/* Service Popup */}\r\n-      {selectedService && (\r\n-        <div style={{\r\n-          position: 'fixed',\r\n-          top: 0,\r\n-          left: 0,\r\n-          right: 0,\r\n-          bottom: 0,\r\n-          backgroundColor: 'rgba(0, 0, 0, 0.7)',\r\n-          display: 'flex',\r\n-          justifyContent: 'center',\r\n-          alignItems: 'center',\r\n-          zIndex: 1000,\r\n-        }} onClick={closePopup}>\r\n-          <div style={{\r\n-            backgroundColor: darkMode ? '#2d3748' : 'white',\r\n-            borderRadius: '16px',\r\n-            padding: '2rem',\r\n-            maxWidth: '500px',\r\n-            width: '90%',\r\n-            boxShadow: '0 10px 25px rgba(0, 0, 0, 0.2)',\r\n-            position: 'relative',\r\n-            border: darkMode ? '1px solid #4a5568' : '1px solid #e2e8f0',\r\n-          }} onClick={(e) => e.stopPropagation()}>\r\n-            <button style={{\r\n-              position: 'absolute',\r\n-              top: '1rem',\r\n-              right: '1rem',\r\n-              background: 'none',\r\n-              border: 'none',\r\n-              fontSize: '1.5rem',\r\n-              cursor: 'pointer',\r\n-              color: darkMode ? '#a0aec0' : '#64748b',\r\n-            }} onClick={closePopup}>√ó</button>\r\n-            <div style={{ \r\n-              display: 'flex', \r\n-              alignItems: 'center', \r\n-              gap: '1rem',\r\n-              marginBottom: '1.5rem'\r\n-            }}>\r\n-              <span style={{ fontSize: '2.5rem', animation: 'float 3s ease-in-out infinite' }}>{selectedService.icon}</span>\r\n-              <h3 style={{fontSize: '1.8rem', fontWeight: '700', marginBottom: '1rem', color: darkMode ? '#e2e8f0' : '#1e293b'}}>{selectedService.name}</h3>\r\n-            </div>\r\n-            <p style={{color: darkMode ? '#a0aec0' : '#64748b', fontSize: '1.1rem', lineHeight: '1.6', marginBottom: '2rem'}}>{selectedService.details}</p>\r\n-            <button \r\n-              style={{ \r\n-                padding: '0.75rem 1.5rem',\r\n-                borderRadius: '8px',\r\n-                border: 'none',\r\n-                backgroundColor: selectedService.color,\r\n-                color: 'white',\r\n-                fontWeight: '600',\r\n-                cursor: 'pointer',\r\n-                transition: 'all 0.2s',\r\n-                fontSize: '1rem'\r\n-              }}\r\n-              onClick={() => {\r\n-                navigate(selectedService.path);\r\n-                closePopup();\r\n-              }}\r\n-            >\r\n-              Explore {selectedService.name}\r\n-            </button>\r\n-          </div>\r\n-        </div>\r\n-      )}\r\n-\r\n-      {/* Achievements */}\r\n-      {achievements.map(achievement => (\r\n-        <div key={achievement.id} style={{\r\n-          position: 'fixed',\r\n-          bottom: '20px',\r\n-          right: '20px',\r\n-          background: darkMode ? '#2d3748' : 'white',\r\n-          color: darkMode ? 'white' : '#1e293b',\r\n-          padding: '1rem',\r\n-          borderRadius: '12px',\r\n-          boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',\r\n-          display: 'flex',\r\n-          alignItems: 'center',\r\n-          gap: '0.5rem',\r\n-          zIndex: 1000,\r\n-          animation: 'slideIn 0.5s forwards, fadeOut 0.5s forwards 2.5s'\r\n-        }}>\r\n-          <span style={{fontSize: '1.5rem'}}>{achievement.icon}</span>\r\n-          <span>{achievement.title}</span>\r\n-        </div>\r\n-      ))}\r\n-\r\n-      {/* Chat Modal */}\r\n-      {showChat && <ChatModal darkMode={darkMode} onClose={toggleChat} />}\r\n-\r\n-      {/* Footer with copyright */}\r\n-      <footer style={{\r\n-        textAlign: 'center',\r\n-        padding: '2rem 1rem',\r\n-        color: darkMode ? '#a0aec0' : '#64748b',\r\n-        fontSize: '0.9rem',\r\n-        marginTop: '2rem'\r\n-      }}>\r\n-        <p>¬© {new Date().getFullYear()} UrbanFlow - Created by Nick</p>\r\n-      </footer>\r\n-    </div>\r\n-  );\r\n };\n\\ No newline at end of file\n"
                },
                {
                    "date": 1754463532142,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,186 +1,451 @@\n-import { useState, useEffect, useRef } from 'react';\r\n+import React, { useState, useEffect, useRef } from 'react';\r\n import { useNavigate } from 'react-router-dom';\r\n \r\n-// UrbanBuddy AI Assistant Component (unchanged)\r\n-const UrbanBuddy = ({ darkMode, onChatOpen }) => {\r\n-  const [position, setPosition] = useState({ x: 20, y: 50 });\r\n-  const [expression, setExpression] = useState('üòä');\r\n-  const [direction, setDirection] = useState(1);\r\n-  const [costume, setCostume] = useState(null);\r\n-  const [isActive, setIsActive] = useState(false);\r\n-  const botRef = useRef(null);\r\n-  const animationRef = useRef(null);\r\n-  const lastInteractionTime = useRef(Date.now());\r\n+const App = () => {\r\n+  const [isLogin, setIsLogin] = useState(true);\r\n+  const [email, setEmail] = useState('');\r\n+  const [password, setPassword] = useState('');\r\n+  const [showChat, setShowChat] = useState(false);\r\n+  const [darkMode, setDarkMode] = useState(false);\r\n+  const [selectedService, setSelectedService] = useState(null);\r\n+  const navigate = useNavigate();\r\n \r\n-  // Seasonal costumes\r\n-  useEffect(() => {\r\n-    const today = new Date();\r\n-    const month = today.getMonth() + 1;\r\n-    \r\n-    if (month === 12) setCostume('üéÑ');\r\n-    else if (month === 10) setCostume('üéÉ');\r\n-    else if (month === 2) setCostume('üíù');\r\n-    else if (month === 4) setCostume('üå∏');\r\n-    else setCostume(null);\r\n-  }, []);\r\n-\r\n-  // Movement logic (unchanged)\r\n-  useEffect(() => {\r\n-    const moveInterval = setInterval(() => {\r\n-      setPosition(prev => {\r\n-        const now = Date.now();\r\n-        const timeSinceLastInteraction = now - lastInteractionTime.current;\r\n-        const speedMultiplier = timeSinceLastInteraction < 5000 ? 2 : 1;\r\n-        \r\n-        let newX = prev.x + (3 * direction * speedMultiplier);\r\n-        let newY = prev.y + (Math.random() * 6 - 3);\r\n-        \r\n-        if (newX > window.innerWidth - 80) {\r\n-          setDirection(-1);\r\n-          triggerAnimation('spin');\r\n-        }\r\n-        if (newX < 20) {\r\n-          setDirection(1);\r\n-          triggerAnimation('spin');\r\n-        }\r\n-        if (newY < 20) newY = 20;\r\n-        if (newY > window.innerHeight - 100) newY = window.innerHeight - 100;\r\n-        \r\n-        return { x: newX, y: newY };\r\n-      });\r\n-    }, 100);\r\n-\r\n-    return () => clearInterval(moveInterval);\r\n-  }, [direction]);\r\n-\r\n-  // Expressions (unchanged)\r\n-  useEffect(() => {\r\n-    const expressions = ['üòä', 'ü§î', 'üòÆ', 'üòé', 'üëã', 'ü§ñ', '‚ú®', 'üåü'];\r\n-    const expressionInterval = setInterval(() => {\r\n-      if (!isActive) {\r\n-        setExpression(expressions[Math.floor(Math.random() * expressions.length)]);\r\n-        if (Math.random() > 0.8) {\r\n-          triggerAnimation(['bounce', 'spin', 'wobble'][Math.floor(Math.random() * 3)]);\r\n-        }\r\n-      }\r\n-    }, 3000);\r\n-    return () => clearInterval(expressionInterval);\r\n-  }, [isActive]);\r\n-\r\n-  const triggerAnimation = (type) => {\r\n-    if (animationRef.current) clearTimeout(animationRef.current);\r\n-    \r\n-    const botElement = botRef.current;\r\n-    if (!botElement) return;\r\n-    \r\n-    botElement.style.animation = 'none';\r\n-    void botElement.offsetWidth;\r\n-    \r\n-    switch(type) {\r\n-      case 'spin': botElement.style.animation = 'spin 1s ease'; break;\r\n-      case 'bounce': botElement.style.animation = 'bounce 0.5s ease'; break;\r\n-      case 'wobble': botElement.style.animation = 'wobble 0.8s ease'; break;\r\n-      default: botElement.style.animation = '';\r\n+  const services = [\r\n+    { \r\n+      name: 'Transport', \r\n+      icon: 'üöå', \r\n+      desc: 'Plan your multi-modal journey across the city',\r\n+      color: '#3b82f6',\r\n+      details: 'Find the best routes combining metro, buses, and bikes.'\r\n+    },\r\n+    { \r\n+      name: 'Food Delivery', \r\n+      icon: 'üçî', \r\n+      desc: 'Discover local restaurants and cafes',\r\n+      color: '#ef4444',\r\n+      details: 'Order from hundreds of restaurants with special discounts.'\r\n+    },\r\n+    { \r\n+      name: 'Groceries', \r\n+      icon: 'üõí', \r\n+      desc: 'Get groceries delivered in minutes',\r\n+      color: '#10b981',\r\n+      details: 'Same-day delivery from local supermarkets.'\r\n+    },\r\n+    { \r\n+      name: 'Services', \r\n+      icon: 'üõ†Ô∏è', \r\n+      desc: 'Find urban services near you',\r\n+      color: '#8b5cf6',\r\n+      details: 'Book home services and repairs with verified providers.'\r\n     }\r\n-    \r\n-    animationRef.current = setTimeout(() => {\r\n-      if (botElement) botElement.style.animation = '';\r\n-    }, 1000);\r\n-  };\r\n+  ];\r\n \r\n-  const handleClick = () => {\r\n-    lastInteractionTime.current = Date.now();\r\n-    setIsActive(true);\r\n-    triggerAnimation('bounce');\r\n-    setExpression('üí°');\r\n-    onChatOpen();\r\n-    setTimeout(() => setIsActive(false), 3000);\r\n+  const handleSubmit = (e) => {\r\n+    e.preventDefault();\r\n+    // For demo, we'll just show the chat and services\r\n+    setShowChat(true);\r\n   };\r\n \r\n-  const animations = `\r\n-    @keyframes spin {\r\n-      0% { transform: rotate(0deg) scaleX(${direction}); }\r\n-      100% { transform: rotate(360deg) scaleX(${direction}); }\r\n-    }\r\n-    @keyframes bounce {\r\n-      0%, 100% { transform: translateY(0) scaleX(${direction}); }\r\n-      50% { transform: translateY(-20px) scaleX(${direction}); }\r\n-    }\r\n-    @keyframes wobble {\r\n-      0%, 100% { transform: rotate(0deg) scaleX(${direction}); }\r\n-      25% { transform: rotate(5deg) scaleX(${direction}); }\r\n-      75% { transform: rotate(-5deg) scaleX(${direction}); }\r\n-    }\r\n-    @keyframes float {\r\n-      0% { transform: translateY(0px) scaleX(${direction}); }\r\n-      50% { transform: translateY(-10px) scaleX(${direction}); }\r\n-      100% { transform: translateY(0px) scaleX(${direction}); }\r\n-    }\r\n-  `;\r\n+  const toggleDarkMode = () => setDarkMode(!darkMode);\r\n+  const openServicePopup = (service) => setSelectedService(service);\r\n+  const closePopup = () => setSelectedService(null);\r\n \r\n   return (\r\n-    <>\r\n-      <style>{animations}</style>\r\n-      <div \r\n-        ref={botRef}\r\n-        onClick={handleClick}\r\n+    <div style={{\r\n+      backgroundColor: darkMode ? '#1a202c' : '#f8fafc',\r\n+      minHeight: '100vh',\r\n+      color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+      transition: 'all 0.3s ease',\r\n+      position: 'relative'\r\n+    }}>\r\n+      {/* Theme Toggle */}\r\n+      <button \r\n+        onClick={toggleDarkMode} \r\n         style={{\r\n           position: 'fixed',\r\n-          left: `${position.x}px`,\r\n-          top: `${position.y}px`,\r\n-          fontSize: '2.5rem',\r\n+          top: '1.5rem',\r\n+          right: '1.5rem',\r\n+          background: darkMode ? '#4a5568' : '#e2e8f0',\r\n+          border: 'none',\r\n+          borderRadius: '50%',\r\n+          width: '40px',\r\n+          height: '40px',\r\n+          display: 'flex',\r\n+          alignItems: 'center',\r\n+          justifyContent: 'center',\r\n           cursor: 'pointer',\r\n-          transition: 'all 0.3s ease',\r\n-          transform: `scaleX(${direction})`,\r\n-          zIndex: 100,\r\n-          filter: darkMode \r\n-            ? 'drop-shadow(0 0 8px rgba(255,255,255,0.7))' \r\n-            : 'drop-shadow(0 0 8px rgba(0,0,0,0.3))',\r\n-          userSelect: 'none',\r\n-          animation: 'float 4s ease-in-out infinite'\r\n+          zIndex: 100\r\n         }}\r\n       >\r\n+        {darkMode ? '‚òÄÔ∏è' : 'üåô'}\r\n+      </button>\r\n+\r\n+      {/* Header */}\r\n+      <header style={{\r\n+        position: 'absolute',\r\n+        top: '0',\r\n+        width: '100%',\r\n+        display: 'flex',\r\n+        justifyContent: 'space-between',\r\n+        padding: '1.5rem 2rem',\r\n+        boxSizing: 'border-box',\r\n+        zIndex: 10\r\n+      }}>\r\n         <div style={{ \r\n-          position: 'relative',\r\n-          display: 'flex',\r\n-          flexDirection: 'column',\r\n-          alignItems: 'center'\r\n+          fontSize: '1.5rem', \r\n+          fontWeight: 'bold', \r\n+          color: darkMode ? '#e2e8f0' : '#333' \r\n         }}>\r\n+          USOCIAL\r\n+        </div>\r\n+        <nav style={{ display: 'flex', gap: '1.5rem' }}>\r\n+          <button style={{\r\n+            background: 'none',\r\n+            border: 'none',\r\n+            cursor: 'pointer',\r\n+            color: darkMode ? '#e2e8f0' : '#333',\r\n+            fontWeight: '500'\r\n+          }}>Selected Works</button>\r\n+          <button style={{\r\n+            background: 'none',\r\n+            border: 'none',\r\n+            cursor: 'pointer',\r\n+            color: darkMode ? '#e2e8f0' : '#333',\r\n+            fontWeight: '500'\r\n+          }}>Sign Up</button>\r\n+          <button style={{\r\n+            background: 'none',\r\n+            border: 'none',\r\n+            cursor: 'pointer',\r\n+            color: darkMode ? '#e2e8f0' : '#333',\r\n+            fontWeight: '500'\r\n+          }}>Join Us</button>\r\n+        </nav>\r\n+      </header>\r\n+\r\n+      {/* Main Content */}\r\n+      <main style={{\r\n+        display: 'flex',\r\n+        flexDirection: 'column',\r\n+        alignItems: 'center',\r\n+        justifyContent: 'center',\r\n+        minHeight: '100vh',\r\n+        padding: '2rem',\r\n+        boxSizing: 'border-box',\r\n+        position: 'relative',\r\n+        zIndex: 1\r\n+      }}>\r\n+        {/* Auth Form */}\r\n+        {!showChat ? (\r\n           <div style={{\r\n-            position: 'relative',\r\n-            width: '60px',\r\n-            height: '60px',\r\n-            backgroundColor: darkMode ? '#4a5568' : '#3b82f6',\r\n-            borderRadius: '50%',\r\n             display: 'flex',\r\n-            justifyContent: 'center',\r\n+            flexDirection: 'column',\r\n             alignItems: 'center',\r\n-            color: 'white'\r\n+            width: '100%',\r\n+            maxWidth: '400px',\r\n+            padding: '2rem',\r\n+            backgroundColor: darkMode ? '#2d3748' : 'white',\r\n+            borderRadius: '12px',\r\n+            boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)'\r\n           }}>\r\n-            <span style={{ fontSize: '1.8rem' }}>{expression}</span>\r\n-            {costume && (\r\n-              <span style={{\r\n-                position: 'absolute',\r\n-                top: '-15px',\r\n-                right: '-10px',\r\n-                fontSize: '1.5rem',\r\n-                transform: 'rotate(15deg)'\r\n+            <h1 style={{\r\n+              fontSize: '2rem',\r\n+              fontWeight: 'bold',\r\n+              marginBottom: '0.5rem',\r\n+              color: darkMode ? '#e2e8f0' : '#333',\r\n+              textAlign: 'center'\r\n+            }}>Hi Designer</h1>\r\n+            <p style={{\r\n+              fontSize: '1rem',\r\n+              color: darkMode ? '#a0aec0' : '#666',\r\n+              marginBottom: '2rem',\r\n+              textAlign: 'center'\r\n+            }}>Welcome to USOCIAL</p>\r\n+\r\n+            <form onSubmit={handleSubmit} style={{ width: '100%' }}>\r\n+              <div style={{ marginBottom: '1.5rem' }}>\r\n+                <label htmlFor=\"email\" style={{\r\n+                  display: 'block',\r\n+                  marginBottom: '0.5rem',\r\n+                  fontSize: '0.9rem',\r\n+                  color: darkMode ? '#a0aec0' : '#555'\r\n+                }}>Email</label>\r\n+                <input\r\n+                  type=\"email\"\r\n+                  id=\"email\"\r\n+                  value={email}\r\n+                  onChange={(e) => setEmail(e.target.value)}\r\n+                  required\r\n+                  style={{\r\n+                    width: '100%',\r\n+                    padding: '0.8rem 1rem',\r\n+                    borderRadius: '8px',\r\n+                    border: `1px solid ${darkMode ? '#4a5568' : '#ddd'}`,\r\n+                    backgroundColor: darkMode ? '#2d3748' : 'white',\r\n+                    color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+                    fontSize: '1rem',\r\n+                    boxSizing: 'border-box'\r\n+                  }}\r\n+                />\r\n+              </div>\r\n+\r\n+              <div style={{ marginBottom: '1.5rem' }}>\r\n+                <label htmlFor=\"password\" style={{\r\n+                  display: 'block',\r\n+                  marginBottom: '0.5rem',\r\n+                  fontSize: '0.9rem',\r\n+                  color: darkMode ? '#a0aec0' : '#555'\r\n+                }}>Password</label>\r\n+                <input\r\n+                  type=\"password\"\r\n+                  id=\"password\"\r\n+                  value={password}\r\n+                  onChange={(e) => setPassword(e.target.value)}\r\n+                  required\r\n+                  style={{\r\n+                    width: '100%',\r\n+                    padding: '0.8rem 1rem',\r\n+                    borderRadius: '8px',\r\n+                    border: `1px solid ${darkMode ? '#4a5568' : '#ddd'}`,\r\n+                    backgroundColor: darkMode ? '#2d3748' : 'white',\r\n+                    color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+                    fontSize: '1rem',\r\n+                    boxSizing: 'border-box'\r\n+                  }}\r\n+                />\r\n+              </div>\r\n+\r\n+              <div style={{\r\n+                display: 'flex',\r\n+                justifyContent: 'space-between',\r\n+                alignItems: 'center',\r\n+                marginBottom: '1.5rem'\r\n               }}>\r\n-                {costume}\r\n-              </span>\r\n-            )}\r\n+                <button type=\"button\" style={{\r\n+                  background: 'none',\r\n+                  border: 'none',\r\n+                  color: darkMode ? '#a0aec0' : '#666',\r\n+                  cursor: 'pointer',\r\n+                  fontSize: '0.9rem',\r\n+                  textDecoration: 'underline'\r\n+                }}>\r\n+                  Forgot password?\r\n+                </button>\r\n+              </div>\r\n+\r\n+              <button type=\"submit\" style={{\r\n+                width: '100%',\r\n+                padding: '0.8rem',\r\n+                backgroundColor: darkMode ? '#4a5568' : '#333',\r\n+                color: 'white',\r\n+                border: 'none',\r\n+                borderRadius: '8px',\r\n+                fontSize: '1rem',\r\n+                fontWeight: '600',\r\n+                cursor: 'pointer',\r\n+                marginBottom: '1rem',\r\n+                transition: 'background-color 0.2s'\r\n+              }}>\r\n+                {isLogin ? 'Login' : 'Sign Up'}\r\n+              </button>\r\n+\r\n+              <button type=\"button\" style={{\r\n+                width: '100%',\r\n+                padding: '0.8rem',\r\n+                backgroundColor: darkMode ? '#2d3748' : '#f8f9fa',\r\n+                color: darkMode ? '#e2e8f0' : '#333',\r\n+                border: `1px solid ${darkMode ? '#4a5568' : '#ddd'}`,\r\n+                borderRadius: '8px',\r\n+                fontSize: '1rem',\r\n+                fontWeight: '600',\r\n+                cursor: 'pointer',\r\n+                display: 'flex',\r\n+                alignItems: 'center',\r\n+                justifyContent: 'center',\r\n+                gap: '0.5rem',\r\n+                marginBottom: '1.5rem'\r\n+              }}>\r\n+                <svg width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n+                  <path d=\"M22.56 12.25C22.56 11.47 22.49 10.72 22.36 10H12V14.255H18.08C17.8 15.63 16.92 16.795 15.68 17.575V20.335H19.28C21.36 18.42 22.56 15.6 22.56 12.25Z\" fill=\"#4285F4\"/>\r\n+                  <path d=\"M12 23C14.96 23 17.46 22.015 19.28 20.335L15.68 17.575C14.71 18.235 13.48 18.625 12 18.625C9.16 18.625 6.72 16.69 5.84 14.09H2.18V16.94C4 20.535 7.7 23 12 23Z\" fill=\"#34A853\"/>\r\n+                  <path d=\"M5.84 14.09C5.62 13.43 5.5 12.725 5.5 12C5.5 11.275 5.62 10.57 5.84 9.91V7.06H2.18C1.43 8.555 1 10.245 1 12C1 13.755 1.43 15.445 2.18 16.94L5.84 14.09Z\" fill=\"#FBBC05\"/>\r\n+                  <path d=\"M12 5.375C13.615 5.375 15.065 5.93 16.205 7.02L19.36 3.865C17.455 2.09 14.955 1 12 1C7.7 1 4 3.465 2.18 7.06L5.84 9.91C6.72 7.31 9.16 5.375 12 5.375Z\" fill=\"#EA4335\"/>\r\n+                </svg>\r\n+                Login with Google\r\n+              </button>\r\n+\r\n+              <p style={{ textAlign: 'center', color: darkMode ? '#a0aec0' : '#666' }}>\r\n+                {isLogin ? \"Don't have an account? \" : \"Already have an account? \"}\r\n+                <button \r\n+                  type=\"button\" \r\n+                  onClick={() => setIsLogin(!isLogin)}\r\n+                  style={{\r\n+                    background: 'none',\r\n+                    border: 'none',\r\n+                    color: darkMode ? '#e2e8f0' : '#333',\r\n+                    cursor: 'pointer',\r\n+                    fontWeight: '600',\r\n+                    textDecoration: 'underline'\r\n+                  }}\r\n+                >\r\n+                  {isLogin ? 'Sign up' : 'Login'}\r\n+                </button>\r\n+              </p>\r\n+            </form>\r\n           </div>\r\n+        ) : (\r\n+          <div style={{\r\n+            width: '100%',\r\n+            maxWidth: '1200px',\r\n+            padding: '2rem',\r\n+            marginTop: '4rem'\r\n+          }}>\r\n+            <h2 style={{ \r\n+              fontSize: '2rem', \r\n+              fontWeight: '700', \r\n+              marginBottom: '1.5rem', \r\n+              textAlign: 'center',\r\n+              color: darkMode ? '#e2e8f0' : '#1e293b'\r\n+            }}>\r\n+              Our Services\r\n+            </h2>\r\n+            <div style={{\r\n+              display: 'grid',\r\n+              gridTemplateColumns: 'repeat(auto-fit, minmax(250px, 1fr))',\r\n+              gap: '1.5rem',\r\n+              marginTop: '1rem',\r\n+            }}>\r\n+              {services.map((service) => (\r\n+                <div \r\n+                  key={service.name} \r\n+                  onClick={() => openServicePopup(service)}\r\n+                  style={{ \r\n+                    padding: '2rem 1.5rem',\r\n+                    borderRadius: '16px',\r\n+                    border: `2px solid ${service.color}`,\r\n+                    textAlign: 'center',\r\n+                    cursor: 'pointer',\r\n+                    transition: 'transform 0.3s, box-shadow 0.3s',\r\n+                    backgroundColor: darkMode ? `${service.color}20` : `${service.color}10`,\r\n+                    ':hover': {\r\n+                      transform: 'translateY(-5px)',\r\n+                      boxShadow: '0 10px 20px rgba(0, 0, 0, 0.1)',\r\n+                    }\r\n+                  }}\r\n+                >\r\n+                  <div style={{ fontSize: '3rem', marginBottom: '1rem' }}>\r\n+                    {service.icon}\r\n+                  </div>\r\n+                  <h3 style={{fontSize: '1.5rem', fontWeight: '600', marginBottom: '0.5rem'}}>\r\n+                    {service.name}\r\n+                  </h3>\r\n+                  <p style={{color: darkMode ? '#a0aec0' : '#64748b'}}>\r\n+                    {service.desc}\r\n+                  </p>\r\n+                </div>\r\n+              ))}\r\n+            </div>\r\n+          </div>\r\n+        )}\r\n+      </main>\r\n+\r\n+      {/* Footer */}\r\n+      <footer style={{\r\n+        position: 'absolute',\r\n+        bottom: '1rem',\r\n+        left: 0,\r\n+        right: 0,\r\n+        textAlign: 'center',\r\n+        color: darkMode ? '#a0aec0' : '#999',\r\n+        fontSize: '0.9rem'\r\n+      }}>\r\n+        Andrew.us ‚Ä¢ U.K. Illustration\r\n+      </footer>\r\n+\r\n+      {/* Service Popup */}\r\n+      {selectedService && (\r\n+        <div style={{\r\n+          position: 'fixed',\r\n+          top: 0,\r\n+          left: 0,\r\n+          right: 0,\r\n+          bottom: 0,\r\n+          backgroundColor: 'rgba(0, 0, 0, 0.7)',\r\n+          display: 'flex',\r\n+          justifyContent: 'center',\r\n+          alignItems: 'center',\r\n+          zIndex: 1000,\r\n+        }} onClick={closePopup}>\r\n+          <div style={{\r\n+            backgroundColor: darkMode ? '#2d3748' : 'white',\r\n+            borderRadius: '16px',\r\n+            padding: '2rem',\r\n+            maxWidth: '500px',\r\n+            width: '90%',\r\n+            boxShadow: '0 10px 25px rgba(0, 0, 0, 0.2)',\r\n+            position: 'relative',\r\n+            border: darkMode ? '1px solid #4a5568' : '1px solid #e2e8f0',\r\n+          }} onClick={(e) => e.stopPropagation()}>\r\n+            <button style={{\r\n+              position: 'absolute',\r\n+              top: '1rem',\r\n+              right: '1rem',\r\n+              background: 'none',\r\n+              border: 'none',\r\n+              fontSize: '1.5rem',\r\n+              cursor: 'pointer',\r\n+              color: darkMode ? '#a0aec0' : '#64748b',\r\n+            }} onClick={closePopup}>√ó</button>\r\n+            <div style={{ display: 'flex', alignItems: 'center', gap: '1rem', marginBottom: '1.5rem' }}>\r\n+              <span style={{ fontSize: '2.5rem' }}>{selectedService.icon}</span>\r\n+              <h3 style={{fontSize: '1.8rem', fontWeight: '700', marginBottom: '1rem'}}>\r\n+                {selectedService.name}\r\n+              </h3>\r\n+            </div>\r\n+            <p style={{\r\n+              color: darkMode ? '#a0aec0' : '#64748b', \r\n+              fontSize: '1.1rem', \r\n+              lineHeight: '1.6', \r\n+              marginBottom: '2rem'\r\n+            }}>\r\n+              {selectedService.details}\r\n+            </p>\r\n+            <button \r\n+              style={{ \r\n+                padding: '0.75rem 1.5rem',\r\n+                borderRadius: '8px',\r\n+                border: 'none',\r\n+                backgroundColor: selectedService.color,\r\n+                color: 'white',\r\n+                fontWeight: '600',\r\n+                cursor: 'pointer',\r\n+                transition: 'all 0.2s',\r\n+                fontSize: '1rem'\r\n+              }}\r\n+              onClick={() => {\r\n+                // In a real app, you would navigate to the service page\r\n+                console.log(`Navigating to ${selectedService.name} service`);\r\n+                closePopup();\r\n+              }}\r\n+            >\r\n+              Explore {selectedService.name}\r\n+            </button>\r\n+          </div>\r\n         </div>\r\n-      </div>\r\n-    </>\r\n+      )}\r\n+\r\n+      {/* Chat Modal */}\r\n+      {showChat && <ChatModal darkMode={darkMode} onClose={() => setShowChat(false)} />}\r\n+    </div>\r\n   );\r\n };\r\n \r\n-// Updated Chat Modal using Hugging Face API\r\n+// Chat Modal Component\r\n const ChatModal = ({ darkMode, onClose }) => {\r\n   const [messages, setMessages] = useState([\r\n-    { text: \"Hello! I'm UrbanBuddy, your AI assistant for urban living. How can I help you today?\", sender: 'bot' }\r\n+    { text: \"Hello! I'm your USOCIAL assistant. How can I help you today?\", sender: 'bot' }\r\n   ]);\r\n   const [inputValue, setInputValue] = useState('');\r\n   const [isTyping, setIsTyping] = useState(false);\r\n   const chatEndRef = useRef(null);\r\n@@ -189,46 +454,39 @@\n   useEffect(() => {\r\n     chatEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n   }, [messages]);\r\n \r\n-  // Generate response using Hugging Face API\r\n+  // Generate response\r\n   const generateResponse = async (userMessage) => {\r\n     setIsTyping(true);\r\n     \r\n     try {\r\n-      // Using Hugging Face's free inference API (GPT-2 model)\r\n-      const response = await fetch(\r\n-        'https://api-inference.huggingface.co/models/gpt2',\r\n-        {\r\n-          method: \"POST\",\r\n-          headers: { \"Content-Type\": \"application/json\" },\r\n-          body: JSON.stringify({ \r\n-            inputs: `You are UrbanBuddy, a friendly AI assistant for urban living. \r\n-            Provide helpful, concise answers about city life, transportation, \r\n-            and urban services. Keep responses under 2 sentences.\r\n-            \r\n-            User: ${userMessage}\r\n-            Assistant:`\r\n-          }),\r\n-        }\r\n-      );\r\n-\r\n-      if (!response.ok) throw new Error(\"API request failed\");\r\n+      // Simulate API call with timeout\r\n+      await new Promise(resolve => setTimeout(resolve, 1000));\r\n       \r\n-      const data = await response.json();\r\n-      const aiResponse = data[0]?.generated_text?.split('Assistant:')[1]?.trim() || \r\n-        \"I'm having trouble responding. Could you ask something else?\";\r\n+      // Simple response logic\r\n+      let response;\r\n+      if (userMessage.toLowerCase().includes('help')) {\r\n+        response = \"I can help with account issues, design tips, and platform questions. What specifically do you need?\";\r\n+      } else if (userMessage.toLowerCase().includes('service')) {\r\n+        response = \"We offer transport, food delivery, groceries, and urban services. Which one interests you?\";\r\n+      } else if (userMessage.toLowerCase().includes('design')) {\r\n+        response = \"For design assistance, check our tutorials or connect with other designers in the community!\";\r\n+      } else {\r\n+        const responses = [\r\n+          \"That's interesting! Tell me more about what you're looking for.\",\r\n+          \"I specialize in helping with USOCIAL features. How can I assist?\",\r\n+          \"Let me check that for you. Could you provide more details?\",\r\n+          \"I'd be happy to help with that. What specifically do you need to know?\"\r\n+        ];\r\n+        response = responses[Math.floor(Math.random() * responses.length)];\r\n+      }\r\n       \r\n-      setMessages(prev => [...prev, { text: aiResponse, sender: 'bot' }]);\r\n+      setMessages(prev => [...prev, { text: response, sender: 'bot' }]);\r\n     } catch (error) {\r\n-      console.error(\"API error:\", error);\r\n-      const fallbacks = [\r\n-        \"I'm currently busy helping others. Try again in a moment!\",\r\n-        \"Let me think differently about that... Can you rephrase?\",\r\n-        \"I specialize in urban living tips. Ask me about city services!\",\r\n-      ];\r\n+      console.error(\"Error:\", error);\r\n       setMessages(prev => [...prev, { \r\n-        text: fallbacks[Math.floor(Math.random() * fallbacks.length)], \r\n+        text: \"Sorry, I'm having trouble responding. Please try again.\", \r\n         sender: 'bot' \r\n       }]);\r\n     } finally {\r\n       setIsTyping(false);\r\n@@ -264,17 +522,17 @@\n     }}>\r\n       {/* Chat header */}\r\n       <div style={{\r\n         padding: '1rem',\r\n-        backgroundColor: darkMode ? '#4a5568' : '#3b82f6',\r\n+        backgroundColor: darkMode ? '#4a5568' : '#333',\r\n         color: 'white',\r\n         display: 'flex',\r\n         justifyContent: 'space-between',\r\n         alignItems: 'center'\r\n       }}>\r\n         <div style={{ display: 'flex', alignItems: 'center', gap: '0.5rem' }}>\r\n           <span style={{ fontSize: '1.5rem' }}>ü§ñ</span>\r\n-          <h3 style={{ margin: 0 }}>UrbanBuddy AI</h3>\r\n+          <h3 style={{ margin: 0 }}>USOCIAL Assistant</h3>\r\n           {isTyping && <span style={{ fontSize: '0.8rem', marginLeft: '0.5rem', opacity: 0.8 }}>typing...</span>}\r\n         </div>\r\n         <button \r\n           onClick={onClose}\r\n@@ -307,11 +565,11 @@\n               maxWidth: '80%',\r\n               padding: '0.6rem 1rem',\r\n               borderRadius: msg.sender === 'user' ? '18px 18px 0 18px' : '18px 18px 18px 0',\r\n               backgroundColor: msg.sender === 'user'\r\n-                ? (darkMode ? '#4a5568' : '#3b82f6')\r\n-                : (darkMode ? '#4a5568' : '#e2e8f0'),\r\n-              color: msg.sender === 'user' ? 'white' : (darkMode ? 'white' : '#1e293b'),\r\n+                ? (darkMode ? '#4a5568' : '#333')\r\n+                : (darkMode ? '#4a5568' : '#f0f0f0'),\r\n+              color: msg.sender === 'user' ? 'white' : (darkMode ? 'white' : '#333'),\r\n             }}\r\n           >\r\n             {msg.text}\r\n           </div>\r\n@@ -329,17 +587,17 @@\n         <input\r\n           type=\"text\"\r\n           value={inputValue}\r\n           onChange={(e) => setInputValue(e.target.value)}\r\n-          placeholder=\"Ask about urban living...\"\r\n+          placeholder=\"Ask me anything...\"\r\n           disabled={isTyping}\r\n           style={{\r\n             flex: 1,\r\n             padding: '0.6rem 1rem',\r\n             borderRadius: '20px',\r\n             border: darkMode ? '1px solid #4a5568' : '1px solid #e2e8f0',\r\n             backgroundColor: darkMode ? '#2d3748' : 'white',\r\n-            color: darkMode ? 'white' : '#1e293b',\r\n+            color: darkMode ? '#e2e8f0' : '#333',\r\n             outline: 'none',\r\n           }}\r\n         />\r\n         <button \r\n@@ -347,9 +605,9 @@\n           disabled={isTyping}\r\n           style={{\r\n             background: isTyping \r\n               ? (darkMode ? '#4a5568' : '#e2e8f0')\r\n-              : (darkMode ? '#4a5568' : '#3b82f6'),\r\n+              : (darkMode ? '#4a5568' : '#333'),\r\n             color: 'white',\r\n             border: 'none',\r\n             borderRadius: '50%',\r\n             width: '40px',\r\n@@ -366,378 +624,5 @@\n     </div>\r\n   );\r\n };\r\n \r\n-// Main Home Component (unchanged)\r\n-export default function Home() {\r\n-  const navigate = useNavigate();\r\n-  const [searchQuery, setSearchQuery] = useState('');\r\n-  const [darkMode, setDarkMode] = useState(false);\r\n-  const [selectedService, setSelectedService] = useState(null);\r\n-  const [orderCount, setOrderCount] = useState(0);\r\n-  const [achievements, setAchievements] = useState([]);\r\n-  const [showChat, setShowChat] = useState(false);\r\n-\r\n-  const services = [\r\n-    { \r\n-      name: 'Transport', \r\n-      path: '/transport', \r\n-      icon: 'üöå', \r\n-      desc: 'Plan your multi-modal journey across the city',\r\n-      color: '#3b82f6',\r\n-      details: 'Find the best routes combining metro, buses, and bikes. Real-time updates and ticket purchasing available.'\r\n-    },\r\n-    { \r\n-      name: 'Food Delivery', \r\n-      path: '/food', \r\n-      icon: 'üçî', \r\n-      desc: 'Discover local restaurants and cafes',\r\n-      color: '#ef4444',\r\n-      details: 'Order from hundreds of restaurants with special discounts. Track your delivery in real-time.'\r\n-    },\r\n-    { \r\n-      name: 'Groceries', \r\n-      path: '/food', \r\n-      icon: 'üõí', \r\n-      desc: 'Get groceries delivered in minutes',\r\n-      color: '#10b981',\r\n-      details: 'Same-day delivery from local supermarkets. Schedule recurring orders for essentials.'\r\n-    },\r\n-    { \r\n-      name: 'Services', \r\n-      path: '/food', \r\n-      icon: 'üõ†Ô∏è', \r\n-      desc: 'Find urban services near you',\r\n-      color: '#8b5cf6',\r\n-      details: 'Book home services, repairs, and professional help with verified providers.'\r\n-    }\r\n-  ];\r\n-\r\n-  // Check for achievements\r\n-  useEffect(() => {\r\n-    if (orderCount === 1) addAchievement('First Order!', 'üéâ');\r\n-    else if (orderCount === 5) addAchievement('Regular Customer!', 'üèÜ');\r\n-    else if (orderCount === 10) addAchievement('Super User!', 'üåü');\r\n-  }, [orderCount]);\r\n-\r\n-  const addAchievement = (title, icon) => {\r\n-    if (!achievements.some(a => a.title === title)) {\r\n-      const newAchievement = { title, icon, id: Date.now() };\r\n-      setAchievements(prev => [...prev, newAchievement]);\r\n-      setTimeout(() => setAchievements(prev => prev.filter(a => a.id !== newAchievement.id)), 3000);\r\n-    }\r\n-  };\r\n-\r\n-  const handleSearch = (e) => {\r\n-    e.preventDefault();\r\n-    if (searchQuery.trim()) navigate(`/food?search=${encodeURIComponent(searchQuery)}`);\r\n-  };\r\n-\r\n-  const toggleDarkMode = () => setDarkMode(!darkMode);\r\n-  const openServicePopup = (service) => {\r\n-    setSelectedService(service);\r\n-    setOrderCount(prev => prev + 1);\r\n-  };\r\n-  const closePopup = () => setSelectedService(null);\r\n-  const toggleChat = () => setShowChat(!showChat);\r\n-\r\n-  return (\r\n-    <div style={{\r\n-      backgroundColor: darkMode ? '#1a202c' : '#f8fafc',\r\n-      minHeight: '100vh',\r\n-      paddingBottom: '3rem',\r\n-      color: darkMode ? '#e2e8f0' : '#1e293b',\r\n-      transition: 'all 0.3s ease',\r\n-      position: 'relative'\r\n-    }}>\r\n-      {/* Theme Toggle */}\r\n-      <button \r\n-        onClick={toggleDarkMode} \r\n-        style={{\r\n-          position: 'fixed',\r\n-          top: '1.5rem',\r\n-          right: '1.5rem',\r\n-          background: darkMode ? '#4a5568' : '#e2e8f0',\r\n-          border: 'none',\r\n-          borderRadius: '50%',\r\n-          width: '40px',\r\n-          height: '40px',\r\n-          display: 'flex',\r\n-          alignItems: 'center',\r\n-          justifyContent: 'center',\r\n-          cursor: 'pointer',\r\n-          transition: 'all 0.3s ease',\r\n-          boxShadow: '0 2px 5px rgba(0, 0, 0, 0.2)',\r\n-          zIndex: 100\r\n-        }}\r\n-      >\r\n-        {darkMode ? '‚òÄÔ∏è' : 'üåô'}\r\n-      </button>\r\n-      \r\n-      {/* Hero Section */}\r\n-      <section style={{\r\n-        background: darkMode \r\n-          ? 'linear-gradient(135deg, #2d3748 0%, #1a202c 100%)' \r\n-          : 'linear-gradient(135deg, #6b46c1 0%, #3b82f6 100%)',\r\n-        color: 'white',\r\n-        padding: '4rem 1rem',\r\n-        textAlign: 'center',\r\n-        borderRadius: '0 0 20px 20px',\r\n-        boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',\r\n-        position: 'relative',\r\n-        overflow: 'hidden',\r\n-        height: '300px'\r\n-      }}>\r\n-        <div style={{\r\n-          maxWidth: '800px',\r\n-          margin: '0 auto',\r\n-          position: 'relative',\r\n-          zIndex: 2\r\n-        }}>\r\n-          <h1 style={{ fontSize: '3.5rem', fontWeight: '800', marginBottom: '0.5rem' }}>UrbanFlow</h1>\r\n-          <p style={{ fontSize: '1.25rem', marginBottom: '2rem', opacity: 0.9 }}>Your seamless urban living companion</p>\r\n-          \r\n-          <form onSubmit={handleSearch} style={{\r\n-            display: 'flex',\r\n-            maxWidth: '600px',\r\n-            margin: '0 auto',\r\n-            borderRadius: '50px',\r\n-            overflow: 'hidden',\r\n-            boxShadow: '0 4px 10px rgba(0, 0, 0, 0.2)',\r\n-          }}>\r\n-            <input\r\n-              type=\"text\"\r\n-              placeholder=\"Search for restaurants, services...\"\r\n-              value={searchQuery}\r\n-              onChange={(e) => setSearchQuery(e.target.value)}\r\n-              style={{\r\n-                flex: 1,\r\n-                padding: '1rem 1.5rem',\r\n-                border: 'none',\r\n-                fontSize: '1rem',\r\n-                outline: 'none',\r\n-                backgroundColor: darkMode ? '#2d3748' : 'white',\r\n-                color: darkMode ? '#e2e8f0' : '#1e293b',\r\n-              }}\r\n-            />\r\n-            <button type=\"submit\" style={{\r\n-              backgroundColor: darkMode ? '#4a5568' : '#1e40af',\r\n-              color: 'white',\r\n-              border: 'none',\r\n-              padding: '0 1.5rem',\r\n-              cursor: 'pointer',\r\n-              fontSize: '1.25rem',\r\n-            }}>\r\n-              <span>üîç</span>\r\n-            </button>\r\n-          </form>\r\n-        </div>\r\n-        <UrbanBuddy darkMode={darkMode} onChatOpen={toggleChat} />\r\n-      </section>\r\n-\r\n-      {/* Services Grid */}\r\n-      <section style={{ padding: '2rem 1rem', maxWidth: '1200px', margin: '0 auto' }}>\r\n-        <h2 style={{ fontSize: '2rem', fontWeight: '700', marginBottom: '1.5rem', textAlign: 'center' }}>\r\n-          What do you need today?\r\n-        </h2>\r\n-        <div style={{\r\n-          display: 'grid',\r\n-          gridTemplateColumns: 'repeat(auto-fit, minmax(250px, 1fr))',\r\n-          gap: '1.5rem',\r\n-          marginTop: '1rem',\r\n-        }}>\r\n-          {services.map((service) => (\r\n-            <div \r\n-              key={service.name} \r\n-              onClick={() => openServicePopup(service)}\r\n-              style={{ \r\n-                padding: '2rem 1.5rem',\r\n-                borderRadius: '16px',\r\n-                border: `2px solid ${service.color}`,\r\n-                textAlign: 'center',\r\n-                cursor: 'pointer',\r\n-                transition: 'transform 0.3s, box-shadow 0.3s',\r\n-                backgroundColor: darkMode ? `${service.color}20` : `${service.color}10`,\r\n-                ':hover': {\r\n-                  transform: 'translateY(-5px)',\r\n-                  boxShadow: '0 10px 20px rgba(0, 0, 0, 0.1)',\r\n-                }\r\n-              }}\r\n-            >\r\n-              <div style={{ fontSize: '3rem', marginBottom: '1rem', animation: 'float 3s ease-in-out infinite' }}>\r\n-                {service.icon}\r\n-              </div>\r\n-              <h3 style={{fontSize: '1.5rem', fontWeight: '600', marginBottom: '0.5rem'}}>{service.name}</h3>\r\n-              <p style={{color: darkMode ? '#a0aec0' : '#64748b'}}>{service.desc}</p>\r\n-            </div>\r\n-          ))}\r\n-        </div>\r\n-      </section>\r\n-\r\n-      {/* Quick Access Buttons */}\r\n-      <section style={{ padding: '2rem 1rem', maxWidth: '1200px', margin: '0 auto' }}>\r\n-        <h2 style={{ fontSize: '2rem', fontWeight: '700', marginBottom: '1.5rem', textAlign: 'center' }}>\r\n-          Quick Access\r\n-        </h2>\r\n-        <div style={{ display: 'flex', justifyContent: 'center', gap: '1rem', flexWrap: 'wrap' }}>\r\n-          <button \r\n-            onClick={() => navigate('/transport?from=home&to=downtown')}\r\n-            style={{\r\n-              padding: '0.75rem 1.5rem',\r\n-              borderRadius: '50px',\r\n-              border: 'none',\r\n-              backgroundColor: darkMode ? '#2d3748' : '#e2e8f0',\r\n-              color: darkMode ? '#e2e8f0' : '#1e293b',\r\n-              fontWeight: '600',\r\n-              cursor: 'pointer',\r\n-              transition: 'all 0.2s',\r\n-              display: 'flex',\r\n-              alignItems: 'center',\r\n-              gap: '0.5rem',\r\n-              fontSize: '1rem'\r\n-            }}\r\n-          >\r\n-            üöï To Downtown\r\n-          </button>\r\n-          <button \r\n-            onClick={() => navigate('/food?category=fastfood')}\r\n-            style={{\r\n-              padding: '0.75rem 1.5rem',\r\n-              borderRadius: '50px',\r\n-              border: 'none',\r\n-              backgroundColor: darkMode ? '#2d3748' : '#e2e8f0',\r\n-              color: darkMode ? '#e2e8f0' : '#1e293b',\r\n-              fontWeight: '600',\r\n-              cursor: 'pointer',\r\n-              transition: 'all 0.2s',\r\n-              display: 'flex',\r\n-              alignItems: 'center',\r\n-              gap: '0.5rem',\r\n-              fontSize: '1rem'\r\n-            }}\r\n-          >\r\n-            üçü Fast Food\r\n-          </button>\r\n-          <button \r\n-            onClick={() => navigate('/food?category=coffee')}\r\n-            style={{\r\n-              padding: '0.75rem 1.5rem',\r\n-              borderRadius: '50px',\r\n-              border: 'none',\r\n-              backgroundColor: darkMode ? '#2d3748' : '#e2e8f0',\r\n-              color: darkMode ? '#e2e8f0' : '#1e293b',\r\n-              fontWeight: '600',\r\n-              cursor: 'pointer',\r\n-              transition: 'all 0.2s',\r\n-              display: 'flex',\r\n-              alignItems: 'center',\r\n-              gap: '0.5rem',\r\n-              fontSize: '1rem'\r\n-            }}\r\n-          >\r\n-            ‚òï Coffee Shops\r\n-          </button>\r\n-        </div>\r\n-      </section>\r\n-\r\n-      {/* Service Popup */}\r\n-      {selectedService && (\r\n-        <div style={{\r\n-          position: 'fixed',\r\n-          top: 0,\r\n-          left: 0,\r\n-          right: 0,\r\n-          bottom: 0,\r\n-          backgroundColor: 'rgba(0, 0, 0, 0.7)',\r\n-          display: 'flex',\r\n-          justifyContent: 'center',\r\n-          alignItems: 'center',\r\n-          zIndex: 1000,\r\n-        }} onClick={closePopup}>\r\n-          <div style={{\r\n-            backgroundColor: darkMode ? '#2d3748' : 'white',\r\n-            borderRadius: '16px',\r\n-            padding: '2rem',\r\n-            maxWidth: '500px',\r\n-            width: '90%',\r\n-            boxShadow: '0 10px 25px rgba(0, 0, 0, 0.2)',\r\n-            position: 'relative',\r\n-            border: darkMode ? '1px solid #4a5568' : '1px solid #e2e8f0',\r\n-          }} onClick={(e) => e.stopPropagation()}>\r\n-            <button style={{\r\n-              position: 'absolute',\r\n-              top: '1rem',\r\n-              right: '1rem',\r\n-              background: 'none',\r\n-              border: 'none',\r\n-              fontSize: '1.5rem',\r\n-              cursor: 'pointer',\r\n-              color: darkMode ? '#a0aec0' : '#64748b',\r\n-            }} onClick={closePopup}>√ó</button>\r\n-            <div style={{ display: 'flex', alignItems: 'center', gap: '1rem', marginBottom: '1.5rem' }}>\r\n-              <span style={{ fontSize: '2.5rem', animation: 'float 3s ease-in-out infinite' }}>{selectedService.icon}</span>\r\n-              <h3 style={{fontSize: '1.8rem', fontWeight: '700', marginBottom: '1rem'}}>{selectedService.name}</h3>\r\n-            </div>\r\n-            <p style={{color: darkMode ? '#a0aec0' : '#64748b', fontSize: '1.1rem', lineHeight: '1.6', marginBottom: '2rem'}}>\r\n-              {selectedService.details}\r\n-            </p>\r\n-            <button \r\n-              style={{ \r\n-                padding: '0.75rem 1.5rem',\r\n-                borderRadius: '8px',\r\n-                border: 'none',\r\n-                backgroundColor: selectedService.color,\r\n-                color: 'white',\r\n-                fontWeight: '600',\r\n-                cursor: 'pointer',\r\n-                transition: 'all 0.2s',\r\n-                fontSize: '1rem'\r\n-              }}\r\n-              onClick={() => {\r\n-                navigate(selectedService.path);\r\n-                closePopup();\r\n-              }}\r\n-            >\r\n-              Explore {selectedService.name}\r\n-            </button>\r\n-          </div>\r\n-        </div>\r\n-      )}\r\n-\r\n-      {/* Achievements */}\r\n-      {achievements.map(achievement => (\r\n-        <div key={achievement.id} style={{\r\n-          position: 'fixed',\r\n-          bottom: '20px',\r\n-          right: '20px',\r\n-          background: darkMode ? '#2d3748' : 'white',\r\n-          color: darkMode ? 'white' : '#1e293b',\r\n-          padding: '1rem',\r\n-          borderRadius: '12px',\r\n-          boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',\r\n-          display: 'flex',\r\n-          alignItems: 'center',\r\n-          gap: '0.5rem',\r\n-          zIndex: 1000,\r\n-          animation: 'slideIn 0.5s forwards, fadeOut 0.5s forwards 2.5s'\r\n-        }}>\r\n-          <span style={{fontSize: '1.5rem'}}>{achievement.icon}</span>\r\n-          <span>{achievement.title}</span>\r\n-        </div>\r\n-      ))}\r\n-\r\n-      {/* Chat Modal */}\r\n-      {showChat && <ChatModal darkMode={darkMode} onClose={toggleChat} />}\r\n-\r\n-      {/* Footer */}\r\n-      <footer style={{\r\n-        textAlign: 'center',\r\n-        padding: '2rem 1rem',\r\n-        color: darkMode ? '#a0aec0' : '#64748b',\r\n-        fontSize: '0.9rem',\r\n-        marginTop: '2rem'\r\n-      }}>\r\n-        <p>¬© {new Date().getFullYear()} UrbanFlow - Created by Nick</p>\r\n-      </footer>\r\n-    </div>\r\n-  );\r\n-};\n\\ No newline at end of file\n+export default App;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1754463603593,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,743 @@\n+import { useState, useEffect, useRef } from 'react';\r\n+import { useNavigate } from 'react-router-dom';\r\n+\r\n+// UrbanBuddy AI Assistant Component (unchanged)\r\n+const UrbanBuddy = ({ darkMode, onChatOpen }) => {\r\n+  const [position, setPosition] = useState({ x: 20, y: 50 });\r\n+  const [expression, setExpression] = useState('üòä');\r\n+  const [direction, setDirection] = useState(1);\r\n+  const [costume, setCostume] = useState(null);\r\n+  const [isActive, setIsActive] = useState(false);\r\n+  const botRef = useRef(null);\r\n+  const animationRef = useRef(null);\r\n+  const lastInteractionTime = useRef(Date.now());\r\n+\r\n+  // Seasonal costumes\r\n+  useEffect(() => {\r\n+    const today = new Date();\r\n+    const month = today.getMonth() + 1;\r\n+    \r\n+    if (month === 12) setCostume('üéÑ');\r\n+    else if (month === 10) setCostume('üéÉ');\r\n+    else if (month === 2) setCostume('üíù');\r\n+    else if (month === 4) setCostume('üå∏');\r\n+    else setCostume(null);\r\n+  }, []);\r\n+\r\n+  // Movement logic (unchanged)\r\n+  useEffect(() => {\r\n+    const moveInterval = setInterval(() => {\r\n+      setPosition(prev => {\r\n+        const now = Date.now();\r\n+        const timeSinceLastInteraction = now - lastInteractionTime.current;\r\n+        const speedMultiplier = timeSinceLastInteraction < 5000 ? 2 : 1;\r\n+        \r\n+        let newX = prev.x + (3 * direction * speedMultiplier);\r\n+        let newY = prev.y + (Math.random() * 6 - 3);\r\n+        \r\n+        if (newX > window.innerWidth - 80) {\r\n+          setDirection(-1);\r\n+          triggerAnimation('spin');\r\n+        }\r\n+        if (newX < 20) {\r\n+          setDirection(1);\r\n+          triggerAnimation('spin');\r\n+        }\r\n+        if (newY < 20) newY = 20;\r\n+        if (newY > window.innerHeight - 100) newY = window.innerHeight - 100;\r\n+        \r\n+        return { x: newX, y: newY };\r\n+      });\r\n+    }, 100);\r\n+\r\n+    return () => clearInterval(moveInterval);\r\n+  }, [direction]);\r\n+\r\n+  // Expressions (unchanged)\r\n+  useEffect(() => {\r\n+    const expressions = ['üòä', 'ü§î', 'üòÆ', 'üòé', 'üëã', 'ü§ñ', '‚ú®', 'üåü'];\r\n+    const expressionInterval = setInterval(() => {\r\n+      if (!isActive) {\r\n+        setExpression(expressions[Math.floor(Math.random() * expressions.length)]);\r\n+        if (Math.random() > 0.8) {\r\n+          triggerAnimation(['bounce', 'spin', 'wobble'][Math.floor(Math.random() * 3)]);\r\n+        }\r\n+      }\r\n+    }, 3000);\r\n+    return () => clearInterval(expressionInterval);\r\n+  }, [isActive]);\r\n+\r\n+  const triggerAnimation = (type) => {\r\n+    if (animationRef.current) clearTimeout(animationRef.current);\r\n+    \r\n+    const botElement = botRef.current;\r\n+    if (!botElement) return;\r\n+    \r\n+    botElement.style.animation = 'none';\r\n+    void botElement.offsetWidth;\r\n+    \r\n+    switch(type) {\r\n+      case 'spin': botElement.style.animation = 'spin 1s ease'; break;\r\n+      case 'bounce': botElement.style.animation = 'bounce 0.5s ease'; break;\r\n+      case 'wobble': botElement.style.animation = 'wobble 0.8s ease'; break;\r\n+      default: botElement.style.animation = '';\r\n+    }\r\n+    \r\n+    animationRef.current = setTimeout(() => {\r\n+      if (botElement) botElement.style.animation = '';\r\n+    }, 1000);\r\n+  };\r\n+\r\n+  const handleClick = () => {\r\n+    lastInteractionTime.current = Date.now();\r\n+    setIsActive(true);\r\n+    triggerAnimation('bounce');\r\n+    setExpression('üí°');\r\n+    onChatOpen();\r\n+    setTimeout(() => setIsActive(false), 3000);\r\n+  };\r\n+\r\n+  const animations = `\r\n+    @keyframes spin {\r\n+      0% { transform: rotate(0deg) scaleX(${direction}); }\r\n+      100% { transform: rotate(360deg) scaleX(${direction}); }\r\n+    }\r\n+    @keyframes bounce {\r\n+      0%, 100% { transform: translateY(0) scaleX(${direction}); }\r\n+      50% { transform: translateY(-20px) scaleX(${direction}); }\r\n+    }\r\n+    @keyframes wobble {\r\n+      0%, 100% { transform: rotate(0deg) scaleX(${direction}); }\r\n+      25% { transform: rotate(5deg) scaleX(${direction}); }\r\n+      75% { transform: rotate(-5deg) scaleX(${direction}); }\r\n+    }\r\n+    @keyframes float {\r\n+      0% { transform: translateY(0px) scaleX(${direction}); }\r\n+      50% { transform: translateY(-10px) scaleX(${direction}); }\r\n+      100% { transform: translateY(0px) scaleX(${direction}); }\r\n+    }\r\n+  `;\r\n+\r\n+  return (\r\n+    <>\r\n+      <style>{animations}</style>\r\n+      <div \r\n+        ref={botRef}\r\n+        onClick={handleClick}\r\n+        style={{\r\n+          position: 'fixed',\r\n+          left: `${position.x}px`,\r\n+          top: `${position.y}px`,\r\n+          fontSize: '2.5rem',\r\n+          cursor: 'pointer',\r\n+          transition: 'all 0.3s ease',\r\n+          transform: `scaleX(${direction})`,\r\n+          zIndex: 100,\r\n+          filter: darkMode \r\n+            ? 'drop-shadow(0 0 8px rgba(255,255,255,0.7))' \r\n+            : 'drop-shadow(0 0 8px rgba(0,0,0,0.3))',\r\n+          userSelect: 'none',\r\n+          animation: 'float 4s ease-in-out infinite'\r\n+        }}\r\n+      >\r\n+        <div style={{ \r\n+          position: 'relative',\r\n+          display: 'flex',\r\n+          flexDirection: 'column',\r\n+          alignItems: 'center'\r\n+        }}>\r\n+          <div style={{\r\n+            position: 'relative',\r\n+            width: '60px',\r\n+            height: '60px',\r\n+            backgroundColor: darkMode ? '#4a5568' : '#3b82f6',\r\n+            borderRadius: '50%',\r\n+            display: 'flex',\r\n+            justifyContent: 'center',\r\n+            alignItems: 'center',\r\n+            color: 'white'\r\n+          }}>\r\n+            <span style={{ fontSize: '1.8rem' }}>{expression}</span>\r\n+            {costume && (\r\n+              <span style={{\r\n+                position: 'absolute',\r\n+                top: '-15px',\r\n+                right: '-10px',\r\n+                fontSize: '1.5rem',\r\n+                transform: 'rotate(15deg)'\r\n+              }}>\r\n+                {costume}\r\n+              </span>\r\n+            )}\r\n+          </div>\r\n+        </div>\r\n+      </div>\r\n+    </>\r\n+  );\r\n+};\r\n+\r\n+// Updated Chat Modal using Hugging Face API\r\n+const ChatModal = ({ darkMode, onClose }) => {\r\n+  const [messages, setMessages] = useState([\r\n+    { text: \"Hello! I'm UrbanBuddy, your AI assistant for urban living. How can I help you today?\", sender: 'bot' }\r\n+  ]);\r\n+  const [inputValue, setInputValue] = useState('');\r\n+  const [isTyping, setIsTyping] = useState(false);\r\n+  const chatEndRef = useRef(null);\r\n+\r\n+  // Auto-scroll to bottom\r\n+  useEffect(() => {\r\n+    chatEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n+  }, [messages]);\r\n+\r\n+  // Generate response using Hugging Face API\r\n+  const generateResponse = async (userMessage) => {\r\n+    setIsTyping(true);\r\n+    \r\n+    try {\r\n+      // Using Hugging Face's free inference API (GPT-2 model)\r\n+      const response = await fetch(\r\n+        'https://api-inference.huggingface.co/models/gpt2',\r\n+        {\r\n+          method: \"POST\",\r\n+          headers: { \"Content-Type\": \"application/json\" },\r\n+          body: JSON.stringify({ \r\n+            inputs: `You are UrbanBuddy, a friendly AI assistant for urban living. \r\n+            Provide helpful, concise answers about city life, transportation, \r\n+            and urban services. Keep responses under 2 sentences.\r\n+            \r\n+            User: ${userMessage}\r\n+            Assistant:`\r\n+          }),\r\n+        }\r\n+      );\r\n+\r\n+      if (!response.ok) throw new Error(\"API request failed\");\r\n+      \r\n+      const data = await response.json();\r\n+      const aiResponse = data[0]?.generated_text?.split('Assistant:')[1]?.trim() || \r\n+        \"I'm having trouble responding. Could you ask something else?\";\r\n+      \r\n+      setMessages(prev => [...prev, { text: aiResponse, sender: 'bot' }]);\r\n+    } catch (error) {\r\n+      console.error(\"API error:\", error);\r\n+      const fallbacks = [\r\n+        \"I'm currently busy helping others. Try again in a moment!\",\r\n+        \"Let me think differently about that... Can you rephrase?\",\r\n+        \"I specialize in urban living tips. Ask me about city services!\",\r\n+      ];\r\n+      setMessages(prev => [...prev, { \r\n+        text: fallbacks[Math.floor(Math.random() * fallbacks.length)], \r\n+        sender: 'bot' \r\n+      }]);\r\n+    } finally {\r\n+      setIsTyping(false);\r\n+    }\r\n+  };\r\n+\r\n+  const handleSendMessage = async (e) => {\r\n+    e.preventDefault();\r\n+    if (inputValue.trim() && !isTyping) {\r\n+      const userMessage = inputValue.trim();\r\n+      setMessages(prev => [...prev, { text: userMessage, sender: 'user' }]);\r\n+      setInputValue('');\r\n+      await generateResponse(userMessage);\r\n+    }\r\n+  };\r\n+\r\n+  return (\r\n+    <div style={{\r\n+      position: 'fixed',\r\n+      bottom: '100px',\r\n+      right: '30px',\r\n+      width: '350px',\r\n+      maxWidth: '90%',\r\n+      backgroundColor: darkMode ? '#2d3748' : 'white',\r\n+      borderRadius: '16px',\r\n+      boxShadow: '0 10px 25px rgba(0, 0, 0, 0.2)',\r\n+      border: darkMode ? '1px solid #4a5568' : '1px solid #e2e8f0',\r\n+      zIndex: 1000,\r\n+      overflow: 'hidden',\r\n+      display: 'flex',\r\n+      flexDirection: 'column',\r\n+      maxHeight: '60vh'\r\n+    }}>\r\n+      {/* Chat header */}\r\n+      <div style={{\r\n+        padding: '1rem',\r\n+        backgroundColor: darkMode ? '#4a5568' : '#3b82f6',\r\n+        color: 'white',\r\n+        display: 'flex',\r\n+        justifyContent: 'space-between',\r\n+        alignItems: 'center'\r\n+      }}>\r\n+        <div style={{ display: 'flex', alignItems: 'center', gap: '0.5rem' }}>\r\n+          <span style={{ fontSize: '1.5rem' }}>ü§ñ</span>\r\n+          <h3 style={{ margin: 0 }}>UrbanBuddy AI</h3>\r\n+          {isTyping && <span style={{ fontSize: '0.8rem', marginLeft: '0.5rem', opacity: 0.8 }}>typing...</span>}\r\n+        </div>\r\n+        <button \r\n+          onClick={onClose}\r\n+          style={{\r\n+            background: 'none',\r\n+            border: 'none',\r\n+            color: 'white',\r\n+            fontSize: '1.2rem',\r\n+            cursor: 'pointer'\r\n+          }}\r\n+        >\r\n+          √ó\r\n+        </button>\r\n+      </div>\r\n+      \r\n+      {/* Chat messages */}\r\n+      <div style={{\r\n+        flex: 1,\r\n+        padding: '1rem',\r\n+        overflowY: 'auto',\r\n+        display: 'flex',\r\n+        flexDirection: 'column',\r\n+        gap: '0.8rem'\r\n+      }}>\r\n+        {messages.map((msg, index) => (\r\n+          <div \r\n+            key={index}\r\n+            style={{\r\n+              alignSelf: msg.sender === 'user' ? 'flex-end' : 'flex-start',\r\n+              maxWidth: '80%',\r\n+              padding: '0.6rem 1rem',\r\n+              borderRadius: msg.sender === 'user' ? '18px 18px 0 18px' : '18px 18px 18px 0',\r\n+              backgroundColor: msg.sender === 'user'\r\n+                ? (darkMode ? '#4a5568' : '#3b82f6')\r\n+                : (darkMode ? '#4a5568' : '#e2e8f0'),\r\n+              color: msg.sender === 'user' ? 'white' : (darkMode ? 'white' : '#1e293b'),\r\n+            }}\r\n+          >\r\n+            {msg.text}\r\n+          </div>\r\n+        ))}\r\n+        <div ref={chatEndRef} />\r\n+      </div>\r\n+      \r\n+      {/* Chat input */}\r\n+      <form onSubmit={handleSendMessage} style={{\r\n+        padding: '0.8rem',\r\n+        borderTop: darkMode ? '1px solid #4a5568' : '1px solid #e2e8f0',\r\n+        display: 'flex',\r\n+        gap: '0.5rem'\r\n+      }}>\r\n+        <input\r\n+          type=\"text\"\r\n+          value={inputValue}\r\n+          onChange={(e) => setInputValue(e.target.value)}\r\n+          placeholder=\"Ask about urban living...\"\r\n+          disabled={isTyping}\r\n+          style={{\r\n+            flex: 1,\r\n+            padding: '0.6rem 1rem',\r\n+            borderRadius: '20px',\r\n+            border: darkMode ? '1px solid #4a5568' : '1px solid #e2e8f0',\r\n+            backgroundColor: darkMode ? '#2d3748' : 'white',\r\n+            color: darkMode ? 'white' : '#1e293b',\r\n+            outline: 'none',\r\n+          }}\r\n+        />\r\n+        <button \r\n+          type=\"submit\"\r\n+          disabled={isTyping}\r\n+          style={{\r\n+            background: isTyping \r\n+              ? (darkMode ? '#4a5568' : '#e2e8f0')\r\n+              : (darkMode ? '#4a5568' : '#3b82f6'),\r\n+            color: 'white',\r\n+            border: 'none',\r\n+            borderRadius: '50%',\r\n+            width: '40px',\r\n+            height: '40px',\r\n+            display: 'flex',\r\n+            alignItems: 'center',\r\n+            justifyContent: 'center',\r\n+            cursor: isTyping ? 'not-allowed' : 'pointer'\r\n+          }}\r\n+        >\r\n+          {isTyping ? '...' : '‚û§'}\r\n+        </button>\r\n+      </form>\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+// Main Home Component (unchanged)\r\n+export default function Home() {\r\n+  const navigate = useNavigate();\r\n+  const [searchQuery, setSearchQuery] = useState('');\r\n+  const [darkMode, setDarkMode] = useState(false);\r\n+  const [selectedService, setSelectedService] = useState(null);\r\n+  const [orderCount, setOrderCount] = useState(0);\r\n+  const [achievements, setAchievements] = useState([]);\r\n+  const [showChat, setShowChat] = useState(false);\r\n+\r\n+  const services = [\r\n+    { \r\n+      name: 'Transport', \r\n+      path: '/transport', \r\n+      icon: 'üöå', \r\n+      desc: 'Plan your multi-modal journey across the city',\r\n+      color: '#3b82f6',\r\n+      details: 'Find the best routes combining metro, buses, and bikes. Real-time updates and ticket purchasing available.'\r\n+    },\r\n+    { \r\n+      name: 'Food Delivery', \r\n+      path: '/food', \r\n+      icon: 'üçî', \r\n+      desc: 'Discover local restaurants and cafes',\r\n+      color: '#ef4444',\r\n+      details: 'Order from hundreds of restaurants with special discounts. Track your delivery in real-time.'\r\n+    },\r\n+    { \r\n+      name: 'Groceries', \r\n+      path: '/food', \r\n+      icon: 'üõí', \r\n+      desc: 'Get groceries delivered in minutes',\r\n+      color: '#10b981',\r\n+      details: 'Same-day delivery from local supermarkets. Schedule recurring orders for essentials.'\r\n+    },\r\n+    { \r\n+      name: 'Services', \r\n+      path: '/food', \r\n+      icon: 'üõ†Ô∏è', \r\n+      desc: 'Find urban services near you',\r\n+      color: '#8b5cf6',\r\n+      details: 'Book home services, repairs, and professional help with verified providers.'\r\n+    }\r\n+  ];\r\n+\r\n+  // Check for achievements\r\n+  useEffect(() => {\r\n+    if (orderCount === 1) addAchievement('First Order!', 'üéâ');\r\n+    else if (orderCount === 5) addAchievement('Regular Customer!', 'üèÜ');\r\n+    else if (orderCount === 10) addAchievement('Super User!', 'üåü');\r\n+  }, [orderCount]);\r\n+\r\n+  const addAchievement = (title, icon) => {\r\n+    if (!achievements.some(a => a.title === title)) {\r\n+      const newAchievement = { title, icon, id: Date.now() };\r\n+      setAchievements(prev => [...prev, newAchievement]);\r\n+      setTimeout(() => setAchievements(prev => prev.filter(a => a.id !== newAchievement.id)), 3000);\r\n+    }\r\n+  };\r\n+\r\n+  const handleSearch = (e) => {\r\n+    e.preventDefault();\r\n+    if (searchQuery.trim()) navigate(`/food?search=${encodeURIComponent(searchQuery)}`);\r\n+  };\r\n+\r\n+  const toggleDarkMode = () => setDarkMode(!darkMode);\r\n+  const openServicePopup = (service) => {\r\n+    setSelectedService(service);\r\n+    setOrderCount(prev => prev + 1);\r\n+  };\r\n+  const closePopup = () => setSelectedService(null);\r\n+  const toggleChat = () => setShowChat(!showChat);\r\n+\r\n+  return (\r\n+    <div style={{\r\n+      backgroundColor: darkMode ? '#1a202c' : '#f8fafc',\r\n+      minHeight: '100vh',\r\n+      paddingBottom: '3rem',\r\n+      color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+      transition: 'all 0.3s ease',\r\n+      position: 'relative'\r\n+    }}>\r\n+      {/* Theme Toggle */}\r\n+      <button \r\n+        onClick={toggleDarkMode} \r\n+        style={{\r\n+          position: 'fixed',\r\n+          top: '1.5rem',\r\n+          right: '1.5rem',\r\n+          background: darkMode ? '#4a5568' : '#e2e8f0',\r\n+          border: 'none',\r\n+          borderRadius: '50%',\r\n+          width: '40px',\r\n+          height: '40px',\r\n+          display: 'flex',\r\n+          alignItems: 'center',\r\n+          justifyContent: 'center',\r\n+          cursor: 'pointer',\r\n+          transition: 'all 0.3s ease',\r\n+          boxShadow: '0 2px 5px rgba(0, 0, 0, 0.2)',\r\n+          zIndex: 100\r\n+        }}\r\n+      >\r\n+        {darkMode ? '‚òÄÔ∏è' : 'üåô'}\r\n+      </button>\r\n+      \r\n+      {/* Hero Section */}\r\n+      <section style={{\r\n+        background: darkMode \r\n+          ? 'linear-gradient(135deg, #2d3748 0%, #1a202c 100%)' \r\n+          : 'linear-gradient(135deg, #6b46c1 0%, #3b82f6 100%)',\r\n+        color: 'white',\r\n+        padding: '4rem 1rem',\r\n+        textAlign: 'center',\r\n+        borderRadius: '0 0 20px 20px',\r\n+        boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',\r\n+        position: 'relative',\r\n+        overflow: 'hidden',\r\n+        height: '300px'\r\n+      }}>\r\n+        <div style={{\r\n+          maxWidth: '800px',\r\n+          margin: '0 auto',\r\n+          position: 'relative',\r\n+          zIndex: 2\r\n+        }}>\r\n+          <h1 style={{ fontSize: '3.5rem', fontWeight: '800', marginBottom: '0.5rem' }}>UrbanFlow</h1>\r\n+          <p style={{ fontSize: '1.25rem', marginBottom: '2rem', opacity: 0.9 }}>Your seamless urban living companion</p>\r\n+          \r\n+          <form onSubmit={handleSearch} style={{\r\n+            display: 'flex',\r\n+            maxWidth: '600px',\r\n+            margin: '0 auto',\r\n+            borderRadius: '50px',\r\n+            overflow: 'hidden',\r\n+            boxShadow: '0 4px 10px rgba(0, 0, 0, 0.2)',\r\n+          }}>\r\n+            <input\r\n+              type=\"text\"\r\n+              placeholder=\"Search for restaurants, services...\"\r\n+              value={searchQuery}\r\n+              onChange={(e) => setSearchQuery(e.target.value)}\r\n+              style={{\r\n+                flex: 1,\r\n+                padding: '1rem 1.5rem',\r\n+                border: 'none',\r\n+                fontSize: '1rem',\r\n+                outline: 'none',\r\n+                backgroundColor: darkMode ? '#2d3748' : 'white',\r\n+                color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+              }}\r\n+            />\r\n+            <button type=\"submit\" style={{\r\n+              backgroundColor: darkMode ? '#4a5568' : '#1e40af',\r\n+              color: 'white',\r\n+              border: 'none',\r\n+              padding: '0 1.5rem',\r\n+              cursor: 'pointer',\r\n+              fontSize: '1.25rem',\r\n+            }}>\r\n+              <span>üîç</span>\r\n+            </button>\r\n+          </form>\r\n+        </div>\r\n+        <UrbanBuddy darkMode={darkMode} onChatOpen={toggleChat} />\r\n+      </section>\r\n+\r\n+      {/* Services Grid */}\r\n+      <section style={{ padding: '2rem 1rem', maxWidth: '1200px', margin: '0 auto' }}>\r\n+        <h2 style={{ fontSize: '2rem', fontWeight: '700', marginBottom: '1.5rem', textAlign: 'center' }}>\r\n+          What do you need today?\r\n+        </h2>\r\n+        <div style={{\r\n+          display: 'grid',\r\n+          gridTemplateColumns: 'repeat(auto-fit, minmax(250px, 1fr))',\r\n+          gap: '1.5rem',\r\n+          marginTop: '1rem',\r\n+        }}>\r\n+          {services.map((service) => (\r\n+            <div \r\n+              key={service.name} \r\n+              onClick={() => openServicePopup(service)}\r\n+              style={{ \r\n+                padding: '2rem 1.5rem',\r\n+                borderRadius: '16px',\r\n+                border: `2px solid ${service.color}`,\r\n+                textAlign: 'center',\r\n+                cursor: 'pointer',\r\n+                transition: 'transform 0.3s, box-shadow 0.3s',\r\n+                backgroundColor: darkMode ? `${service.color}20` : `${service.color}10`,\r\n+                ':hover': {\r\n+                  transform: 'translateY(-5px)',\r\n+                  boxShadow: '0 10px 20px rgba(0, 0, 0, 0.1)',\r\n+                }\r\n+              }}\r\n+            >\r\n+              <div style={{ fontSize: '3rem', marginBottom: '1rem', animation: 'float 3s ease-in-out infinite' }}>\r\n+                {service.icon}\r\n+              </div>\r\n+              <h3 style={{fontSize: '1.5rem', fontWeight: '600', marginBottom: '0.5rem'}}>{service.name}</h3>\r\n+              <p style={{color: darkMode ? '#a0aec0' : '#64748b'}}>{service.desc}</p>\r\n+            </div>\r\n+          ))}\r\n+        </div>\r\n+      </section>\r\n+\r\n+      {/* Quick Access Buttons */}\r\n+      <section style={{ padding: '2rem 1rem', maxWidth: '1200px', margin: '0 auto' }}>\r\n+        <h2 style={{ fontSize: '2rem', fontWeight: '700', marginBottom: '1.5rem', textAlign: 'center' }}>\r\n+          Quick Access\r\n+        </h2>\r\n+        <div style={{ display: 'flex', justifyContent: 'center', gap: '1rem', flexWrap: 'wrap' }}>\r\n+          <button \r\n+            onClick={() => navigate('/transport?from=home&to=downtown')}\r\n+            style={{\r\n+              padding: '0.75rem 1.5rem',\r\n+              borderRadius: '50px',\r\n+              border: 'none',\r\n+              backgroundColor: darkMode ? '#2d3748' : '#e2e8f0',\r\n+              color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+              fontWeight: '600',\r\n+              cursor: 'pointer',\r\n+              transition: 'all 0.2s',\r\n+              display: 'flex',\r\n+              alignItems: 'center',\r\n+              gap: '0.5rem',\r\n+              fontSize: '1rem'\r\n+            }}\r\n+          >\r\n+            üöï To Downtown\r\n+          </button>\r\n+          <button \r\n+            onClick={() => navigate('/food?category=fastfood')}\r\n+            style={{\r\n+              padding: '0.75rem 1.5rem',\r\n+              borderRadius: '50px',\r\n+              border: 'none',\r\n+              backgroundColor: darkMode ? '#2d3748' : '#e2e8f0',\r\n+              color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+              fontWeight: '600',\r\n+              cursor: 'pointer',\r\n+              transition: 'all 0.2s',\r\n+              display: 'flex',\r\n+              alignItems: 'center',\r\n+              gap: '0.5rem',\r\n+              fontSize: '1rem'\r\n+            }}\r\n+          >\r\n+            üçü Fast Food\r\n+          </button>\r\n+          <button \r\n+            onClick={() => navigate('/food?category=coffee')}\r\n+            style={{\r\n+              padding: '0.75rem 1.5rem',\r\n+              borderRadius: '50px',\r\n+              border: 'none',\r\n+              backgroundColor: darkMode ? '#2d3748' : '#e2e8f0',\r\n+              color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+              fontWeight: '600',\r\n+              cursor: 'pointer',\r\n+              transition: 'all 0.2s',\r\n+              display: 'flex',\r\n+              alignItems: 'center',\r\n+              gap: '0.5rem',\r\n+              fontSize: '1rem'\r\n+            }}\r\n+          >\r\n+            ‚òï Coffee Shops\r\n+          </button>\r\n+        </div>\r\n+      </section>\r\n+\r\n+      {/* Service Popup */}\r\n+      {selectedService && (\r\n+        <div style={{\r\n+          position: 'fixed',\r\n+          top: 0,\r\n+          left: 0,\r\n+          right: 0,\r\n+          bottom: 0,\r\n+          backgroundColor: 'rgba(0, 0, 0, 0.7)',\r\n+          display: 'flex',\r\n+          justifyContent: 'center',\r\n+          alignItems: 'center',\r\n+          zIndex: 1000,\r\n+        }} onClick={closePopup}>\r\n+          <div style={{\r\n+            backgroundColor: darkMode ? '#2d3748' : 'white',\r\n+            borderRadius: '16px',\r\n+            padding: '2rem',\r\n+            maxWidth: '500px',\r\n+            width: '90%',\r\n+            boxShadow: '0 10px 25px rgba(0, 0, 0, 0.2)',\r\n+            position: 'relative',\r\n+            border: darkMode ? '1px solid #4a5568' : '1px solid #e2e8f0',\r\n+          }} onClick={(e) => e.stopPropagation()}>\r\n+            <button style={{\r\n+              position: 'absolute',\r\n+              top: '1rem',\r\n+              right: '1rem',\r\n+              background: 'none',\r\n+              border: 'none',\r\n+              fontSize: '1.5rem',\r\n+              cursor: 'pointer',\r\n+              color: darkMode ? '#a0aec0' : '#64748b',\r\n+            }} onClick={closePopup}>√ó</button>\r\n+            <div style={{ display: 'flex', alignItems: 'center', gap: '1rem', marginBottom: '1.5rem' }}>\r\n+              <span style={{ fontSize: '2.5rem', animation: 'float 3s ease-in-out infinite' }}>{selectedService.icon}</span>\r\n+              <h3 style={{fontSize: '1.8rem', fontWeight: '700', marginBottom: '1rem'}}>{selectedService.name}</h3>\r\n+            </div>\r\n+            <p style={{color: darkMode ? '#a0aec0' : '#64748b', fontSize: '1.1rem', lineHeight: '1.6', marginBottom: '2rem'}}>\r\n+              {selectedService.details}\r\n+            </p>\r\n+            <button \r\n+              style={{ \r\n+                padding: '0.75rem 1.5rem',\r\n+                borderRadius: '8px',\r\n+                border: 'none',\r\n+                backgroundColor: selectedService.color,\r\n+                color: 'white',\r\n+                fontWeight: '600',\r\n+                cursor: 'pointer',\r\n+                transition: 'all 0.2s',\r\n+                fontSize: '1rem'\r\n+              }}\r\n+              onClick={() => {\r\n+                navigate(selectedService.path);\r\n+                closePopup();\r\n+              }}\r\n+            >\r\n+              Explore {selectedService.name}\r\n+            </button>\r\n+          </div>\r\n+        </div>\r\n+      )}\r\n+\r\n+      {/* Achievements */}\r\n+      {achievements.map(achievement => (\r\n+        <div key={achievement.id} style={{\r\n+          position: 'fixed',\r\n+          bottom: '20px',\r\n+          right: '20px',\r\n+          background: darkMode ? '#2d3748' : 'white',\r\n+          color: darkMode ? 'white' : '#1e293b',\r\n+          padding: '1rem',\r\n+          borderRadius: '12px',\r\n+          boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',\r\n+          display: 'flex',\r\n+          alignItems: 'center',\r\n+          gap: '0.5rem',\r\n+          zIndex: 1000,\r\n+          animation: 'slideIn 0.5s forwards, fadeOut 0.5s forwards 2.5s'\r\n+        }}>\r\n+          <span style={{fontSize: '1.5rem'}}>{achievement.icon}</span>\r\n+          <span>{achievement.title}</span>\r\n+        </div>\r\n+      ))}\r\n+\r\n+      {/* Chat Modal */}\r\n+      {showChat && <ChatModal darkMode={darkMode} onClose={toggleChat} />}\r\n+\r\n+      {/* Footer */}\r\n+      <footer style={{\r\n+        textAlign: 'center',\r\n+        padding: '2rem 1rem',\r\n+        color: darkMode ? '#a0aec0' : '#64748b',\r\n+        fontSize: '0.9rem',\r\n+        marginTop: '2rem'\r\n+      }}>\r\n+        <p>¬© {new Date().getFullYear()} UrbanFlow - Created by Nick</p>\r\n+      </footer>\r\n+    </div>\r\n+  );\r\n+};\n\\ No newline at end of file\n"
                },
                {
                    "date": 1754464624235,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,743 @@\n+import { useState, useEffect, useRef } from 'react';\r\n+import { useNavigate } from 'react-router-dom';\r\n+\r\n+// UrbanBuddy AI Assistant Component (unchanged)\r\n+const UrbanBuddy = ({ darkMode, onChatOpen }) => {\r\n+  const [position, setPosition] = useState({ x: 20, y: 50 });\r\n+  const [expression, setExpression] = useState('üòä');\r\n+  const [direction, setDirection] = useState(1);\r\n+  const [costume, setCostume] = useState(null);\r\n+  const [isActive, setIsActive] = useState(false);\r\n+  const botRef = useRef(null);\r\n+  const animationRef = useRef(null);\r\n+  const lastInteractionTime = useRef(Date.now());\r\n+\r\n+  // Seasonal costumes\r\n+  useEffect(() => {\r\n+    const today = new Date();\r\n+    const month = today.getMonth() + 1;\r\n+    \r\n+    if (month === 12) setCostume('üéÑ');\r\n+    else if (month === 10) setCostume('üéÉ');\r\n+    else if (month === 2) setCostume('üíù');\r\n+    else if (month === 4) setCostume('üå∏');\r\n+    else setCostume(null);\r\n+  }, []);\r\n+\r\n+  // Movement logic (unchanged)\r\n+  useEffect(() => {\r\n+    const moveInterval = setInterval(() => {\r\n+      setPosition(prev => {\r\n+        const now = Date.now();\r\n+        const timeSinceLastInteraction = now - lastInteractionTime.current;\r\n+        const speedMultiplier = timeSinceLastInteraction < 5000 ? 2 : 1;\r\n+        \r\n+        let newX = prev.x + (3 * direction * speedMultiplier);\r\n+        let newY = prev.y + (Math.random() * 6 - 3);\r\n+        \r\n+        if (newX > window.innerWidth - 80) {\r\n+          setDirection(-1);\r\n+          triggerAnimation('spin');\r\n+        }\r\n+        if (newX < 20) {\r\n+          setDirection(1);\r\n+          triggerAnimation('spin');\r\n+        }\r\n+        if (newY < 20) newY = 20;\r\n+        if (newY > window.innerHeight - 100) newY = window.innerHeight - 100;\r\n+        \r\n+        return { x: newX, y: newY };\r\n+      });\r\n+    }, 100);\r\n+\r\n+    return () => clearInterval(moveInterval);\r\n+  }, [direction]);\r\n+\r\n+  // Expressions (unchanged)\r\n+  useEffect(() => {\r\n+    const expressions = ['üòä', 'ü§î', 'üòÆ', 'üòé', 'üëã', 'ü§ñ', '‚ú®', 'üåü'];\r\n+    const expressionInterval = setInterval(() => {\r\n+      if (!isActive) {\r\n+        setExpression(expressions[Math.floor(Math.random() * expressions.length)]);\r\n+        if (Math.random() > 0.8) {\r\n+          triggerAnimation(['bounce', 'spin', 'wobble'][Math.floor(Math.random() * 3)]);\r\n+        }\r\n+      }\r\n+    }, 3000);\r\n+    return () => clearInterval(expressionInterval);\r\n+  }, [isActive]);\r\n+\r\n+  const triggerAnimation = (type) => {\r\n+    if (animationRef.current) clearTimeout(animationRef.current);\r\n+    \r\n+    const botElement = botRef.current;\r\n+    if (!botElement) return;\r\n+    \r\n+    botElement.style.animation = 'none';\r\n+    void botElement.offsetWidth;\r\n+    \r\n+    switch(type) {\r\n+      case 'spin': botElement.style.animation = 'spin 1s ease'; break;\r\n+      case 'bounce': botElement.style.animation = 'bounce 0.5s ease'; break;\r\n+      case 'wobble': botElement.style.animation = 'wobble 0.8s ease'; break;\r\n+      default: botElement.style.animation = '';\r\n+    }\r\n+    \r\n+    animationRef.current = setTimeout(() => {\r\n+      if (botElement) botElement.style.animation = '';\r\n+    }, 1000);\r\n+  };\r\n+\r\n+  const handleClick = () => {\r\n+    lastInteractionTime.current = Date.now();\r\n+    setIsActive(true);\r\n+    triggerAnimation('bounce');\r\n+    setExpression('üí°');\r\n+    onChatOpen();\r\n+    setTimeout(() => setIsActive(false), 3000);\r\n+  };\r\n+\r\n+  const animations = `\r\n+    @keyframes spin {\r\n+      0% { transform: rotate(0deg) scaleX(${direction}); }\r\n+      100% { transform: rotate(360deg) scaleX(${direction}); }\r\n+    }\r\n+    @keyframes bounce {\r\n+      0%, 100% { transform: translateY(0) scaleX(${direction}); }\r\n+      50% { transform: translateY(-20px) scaleX(${direction}); }\r\n+    }\r\n+    @keyframes wobble {\r\n+      0%, 100% { transform: rotate(0deg) scaleX(${direction}); }\r\n+      25% { transform: rotate(5deg) scaleX(${direction}); }\r\n+      75% { transform: rotate(-5deg) scaleX(${direction}); }\r\n+    }\r\n+    @keyframes float {\r\n+      0% { transform: translateY(0px) scaleX(${direction}); }\r\n+      50% { transform: translateY(-10px) scaleX(${direction}); }\r\n+      100% { transform: translateY(0px) scaleX(${direction}); }\r\n+    }\r\n+  `;\r\n+\r\n+  return (\r\n+    <>\r\n+      <style>{animations}</style>\r\n+      <div \r\n+        ref={botRef}\r\n+        onClick={handleClick}\r\n+        style={{\r\n+          position: 'fixed',\r\n+          left: `${position.x}px`,\r\n+          top: `${position.y}px`,\r\n+          fontSize: '2.5rem',\r\n+          cursor: 'pointer',\r\n+          transition: 'all 0.3s ease',\r\n+          transform: `scaleX(${direction})`,\r\n+          zIndex: 100,\r\n+          filter: darkMode \r\n+            ? 'drop-shadow(0 0 8px rgba(255,255,255,0.7))' \r\n+            : 'drop-shadow(0 0 8px rgba(0,0,0,0.3))',\r\n+          userSelect: 'none',\r\n+          animation: 'float 4s ease-in-out infinite'\r\n+        }}\r\n+      >\r\n+        <div style={{ \r\n+          position: 'relative',\r\n+          display: 'flex',\r\n+          flexDirection: 'column',\r\n+          alignItems: 'center'\r\n+        }}>\r\n+          <div style={{\r\n+            position: 'relative',\r\n+            width: '60px',\r\n+            height: '60px',\r\n+            backgroundColor: darkMode ? '#4a5568' : '#3b82f6',\r\n+            borderRadius: '50%',\r\n+            display: 'flex',\r\n+            justifyContent: 'center',\r\n+            alignItems: 'center',\r\n+            color: 'white'\r\n+          }}>\r\n+            <span style={{ fontSize: '1.8rem' }}>{expression}</span>\r\n+            {costume && (\r\n+              <span style={{\r\n+                position: 'absolute',\r\n+                top: '-15px',\r\n+                right: '-10px',\r\n+                fontSize: '1.5rem',\r\n+                transform: 'rotate(15deg)'\r\n+              }}>\r\n+                {costume}\r\n+              </span>\r\n+            )}\r\n+          </div>\r\n+        </div>\r\n+      </div>\r\n+    </>\r\n+  );\r\n+};\r\n+\r\n+// Updated Chat Modal using Hugging Face API\r\n+const ChatModal = ({ darkMode, onClose }) => {\r\n+  const [messages, setMessages] = useState([\r\n+    { text: \"Hello! I'm UrbanBuddy, your AI assistant for urban living. How can I help you today?\", sender: 'bot' }\r\n+  ]);\r\n+  const [inputValue, setInputValue] = useState('');\r\n+  const [isTyping, setIsTyping] = useState(false);\r\n+  const chatEndRef = useRef(null);\r\n+\r\n+  // Auto-scroll to bottom\r\n+  useEffect(() => {\r\n+    chatEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n+  }, [messages]);\r\n+\r\n+  // Generate response using Hugging Face API\r\n+  const generateResponse = async (userMessage) => {\r\n+    setIsTyping(true);\r\n+    \r\n+    try {\r\n+      // Using Hugging Face's free inference API (GPT-2 model)\r\n+      const response = await fetch(\r\n+        'https://api-inference.huggingface.co/models/gpt2',\r\n+        {\r\n+          method: \"POST\",\r\n+          headers: { \"Content-Type\": \"application/json\" },\r\n+          body: JSON.stringify({ \r\n+            inputs: `You are UrbanBuddy, a friendly AI assistant for urban living. \r\n+            Provide helpful, concise answers about city life, transportation, \r\n+            and urban services. Keep responses under 2 sentences.\r\n+            \r\n+            User: ${userMessage}\r\n+            Assistant:`\r\n+          }),\r\n+        }\r\n+      );\r\n+\r\n+      if (!response.ok) throw new Error(\"API request failed\");\r\n+      \r\n+      const data = await response.json();\r\n+      const aiResponse = data[0]?.generated_text?.split('Assistant:')[1]?.trim() || \r\n+        \"I'm having trouble responding. Could you ask something else?\";\r\n+      \r\n+      setMessages(prev => [...prev, { text: aiResponse, sender: 'bot' }]);\r\n+    } catch (error) {\r\n+      console.error(\"API error:\", error);\r\n+      const fallbacks = [\r\n+        \"I'm currently busy helping others. Try again in a moment!\",\r\n+        \"Let me think differently about that... Can you rephrase?\",\r\n+        \"I specialize in urban living tips. Ask me about city services!\",\r\n+      ];\r\n+      setMessages(prev => [...prev, { \r\n+        text: fallbacks[Math.floor(Math.random() * fallbacks.length)], \r\n+        sender: 'bot' \r\n+      }]);\r\n+    } finally {\r\n+      setIsTyping(false);\r\n+    }\r\n+  };\r\n+\r\n+  const handleSendMessage = async (e) => {\r\n+    e.preventDefault();\r\n+    if (inputValue.trim() && !isTyping) {\r\n+      const userMessage = inputValue.trim();\r\n+      setMessages(prev => [...prev, { text: userMessage, sender: 'user' }]);\r\n+      setInputValue('');\r\n+      await generateResponse(userMessage);\r\n+    }\r\n+  };\r\n+\r\n+  return (\r\n+    <div style={{\r\n+      position: 'fixed',\r\n+      bottom: '100px',\r\n+      right: '30px',\r\n+      width: '350px',\r\n+      maxWidth: '90%',\r\n+      backgroundColor: darkMode ? '#2d3748' : 'white',\r\n+      borderRadius: '16px',\r\n+      boxShadow: '0 10px 25px rgba(0, 0, 0, 0.2)',\r\n+      border: darkMode ? '1px solid #4a5568' : '1px solid #e2e8f0',\r\n+      zIndex: 1000,\r\n+      overflow: 'hidden',\r\n+      display: 'flex',\r\n+      flexDirection: 'column',\r\n+      maxHeight: '60vh'\r\n+    }}>\r\n+      {/* Chat header */}\r\n+      <div style={{\r\n+        padding: '1rem',\r\n+        backgroundColor: darkMode ? '#4a5568' : '#3b82f6',\r\n+        color: 'white',\r\n+        display: 'flex',\r\n+        justifyContent: 'space-between',\r\n+        alignItems: 'center'\r\n+      }}>\r\n+        <div style={{ display: 'flex', alignItems: 'center', gap: '0.5rem' }}>\r\n+          <span style={{ fontSize: '1.5rem' }}>ü§ñ</span>\r\n+          <h3 style={{ margin: 0 }}>UrbanBuddy AI</h3>\r\n+          {isTyping && <span style={{ fontSize: '0.8rem', marginLeft: '0.5rem', opacity: 0.8 }}>typing...</span>}\r\n+        </div>\r\n+        <button \r\n+          onClick={onClose}\r\n+          style={{\r\n+            background: 'none',\r\n+            border: 'none',\r\n+            color: 'white',\r\n+            fontSize: '1.2rem',\r\n+            cursor: 'pointer'\r\n+          }}\r\n+        >\r\n+          √ó\r\n+        </button>\r\n+      </div>\r\n+      \r\n+      {/* Chat messages */}\r\n+      <div style={{\r\n+        flex: 1,\r\n+        padding: '1rem',\r\n+        overflowY: 'auto',\r\n+        display: 'flex',\r\n+        flexDirection: 'column',\r\n+        gap: '0.8rem'\r\n+      }}>\r\n+        {messages.map((msg, index) => (\r\n+          <div \r\n+            key={index}\r\n+            style={{\r\n+              alignSelf: msg.sender === 'user' ? 'flex-end' : 'flex-start',\r\n+              maxWidth: '80%',\r\n+              padding: '0.6rem 1rem',\r\n+              borderRadius: msg.sender === 'user' ? '18px 18px 0 18px' : '18px 18px 18px 0',\r\n+              backgroundColor: msg.sender === 'user'\r\n+                ? (darkMode ? '#4a5568' : '#3b82f6')\r\n+                : (darkMode ? '#4a5568' : '#e2e8f0'),\r\n+              color: msg.sender === 'user' ? 'white' : (darkMode ? 'white' : '#1e293b'),\r\n+            }}\r\n+          >\r\n+            {msg.text}\r\n+          </div>\r\n+        ))}\r\n+        <div ref={chatEndRef} />\r\n+      </div>\r\n+      \r\n+      {/* Chat input */}\r\n+      <form onSubmit={handleSendMessage} style={{\r\n+        padding: '0.8rem',\r\n+        borderTop: darkMode ? '1px solid #4a5568' : '1px solid #e2e8f0',\r\n+        display: 'flex',\r\n+        gap: '0.5rem'\r\n+      }}>\r\n+        <input\r\n+          type=\"text\"\r\n+          value={inputValue}\r\n+          onChange={(e) => setInputValue(e.target.value)}\r\n+          placeholder=\"Ask about urban living...\"\r\n+          disabled={isTyping}\r\n+          style={{\r\n+            flex: 1,\r\n+            padding: '0.6rem 1rem',\r\n+            borderRadius: '20px',\r\n+            border: darkMode ? '1px solid #4a5568' : '1px solid #e2e8f0',\r\n+            backgroundColor: darkMode ? '#2d3748' : 'white',\r\n+            color: darkMode ? 'white' : '#1e293b',\r\n+            outline: 'none',\r\n+          }}\r\n+        />\r\n+        <button \r\n+          type=\"submit\"\r\n+          disabled={isTyping}\r\n+          style={{\r\n+            background: isTyping \r\n+              ? (darkMode ? '#4a5568' : '#e2e8f0')\r\n+              : (darkMode ? '#4a5568' : '#3b82f6'),\r\n+            color: 'white',\r\n+            border: 'none',\r\n+            borderRadius: '50%',\r\n+            width: '40px',\r\n+            height: '40px',\r\n+            display: 'flex',\r\n+            alignItems: 'center',\r\n+            justifyContent: 'center',\r\n+            cursor: isTyping ? 'not-allowed' : 'pointer'\r\n+          }}\r\n+        >\r\n+          {isTyping ? '...' : '‚û§'}\r\n+        </button>\r\n+      </form>\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+// Main Home Component (unchanged)\r\n+export default function Home() {\r\n+  const navigate = useNavigate();\r\n+  const [searchQuery, setSearchQuery] = useState('');\r\n+  const [darkMode, setDarkMode] = useState(false);\r\n+  const [selectedService, setSelectedService] = useState(null);\r\n+  const [orderCount, setOrderCount] = useState(0);\r\n+  const [achievements, setAchievements] = useState([]);\r\n+  const [showChat, setShowChat] = useState(false);\r\n+\r\n+  const services = [\r\n+    { \r\n+      name: 'Transport', \r\n+      path: '/transport', \r\n+      icon: 'üöå', \r\n+      desc: 'Plan your multi-modal journey across the city',\r\n+      color: '#3b82f6',\r\n+      details: 'Find the best routes combining metro, buses, and bikes. Real-time updates and ticket purchasing available.'\r\n+    },\r\n+    { \r\n+      name: 'Food Delivery', \r\n+      path: '/food', \r\n+      icon: 'üçî', \r\n+      desc: 'Discover local restaurants and cafes',\r\n+      color: '#ef4444',\r\n+      details: 'Order from hundreds of restaurants with special discounts. Track your delivery in real-time.'\r\n+    },\r\n+    { \r\n+      name: 'Groceries', \r\n+      path: '/food', \r\n+      icon: 'üõí', \r\n+      desc: 'Get groceries delivered in minutes',\r\n+      color: '#10b981',\r\n+      details: 'Same-day delivery from local supermarkets. Schedule recurring orders for essentials.'\r\n+    },\r\n+    { \r\n+      name: 'Services', \r\n+      path: '/food', \r\n+      icon: 'üõ†Ô∏è', \r\n+      desc: 'Find urban services near you',\r\n+      color: '#8b5cf6',\r\n+      details: 'Book home services, repairs, and professional help with verified providers.'\r\n+    }\r\n+  ];\r\n+\r\n+  // Check for achievements\r\n+  useEffect(() => {\r\n+    if (orderCount === 1) addAchievement('First Order!', 'üéâ');\r\n+    else if (orderCount === 5) addAchievement('Regular Customer!', 'üèÜ');\r\n+    else if (orderCount === 10) addAchievement('Super User!', 'üåü');\r\n+  }, [orderCount]);\r\n+\r\n+  const addAchievement = (title, icon) => {\r\n+    if (!achievements.some(a => a.title === title)) {\r\n+      const newAchievement = { title, icon, id: Date.now() };\r\n+      setAchievements(prev => [...prev, newAchievement]);\r\n+      setTimeout(() => setAchievements(prev => prev.filter(a => a.id !== newAchievement.id)), 3000);\r\n+    }\r\n+  };\r\n+\r\n+  const handleSearch = (e) => {\r\n+    e.preventDefault();\r\n+    if (searchQuery.trim()) navigate(`/food?search=${encodeURIComponent(searchQuery)}`);\r\n+  };\r\n+\r\n+  const toggleDarkMode = () => setDarkMode(!darkMode);\r\n+  const openServicePopup = (service) => {\r\n+    setSelectedService(service);\r\n+    setOrderCount(prev => prev + 1);\r\n+  };\r\n+  const closePopup = () => setSelectedService(null);\r\n+  const toggleChat = () => setShowChat(!showChat);\r\n+\r\n+  return (\r\n+    <div style={{\r\n+      backgroundColor: darkMode ? '#1a202c' : '#f8fafc',\r\n+      minHeight: '100vh',\r\n+      paddingBottom: '3rem',\r\n+      color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+      transition: 'all 0.3s ease',\r\n+      position: 'relative'\r\n+    }}>\r\n+      {/* Theme Toggle */}\r\n+      <button \r\n+        onClick={toggleDarkMode} \r\n+        style={{\r\n+          position: 'fixed',\r\n+          top: '1.5rem',\r\n+          right: '1.5rem',\r\n+          background: darkMode ? '#4a5568' : '#e2e8f0',\r\n+          border: 'none',\r\n+          borderRadius: '50%',\r\n+          width: '40px',\r\n+          height: '40px',\r\n+          display: 'flex',\r\n+          alignItems: 'center',\r\n+          justifyContent: 'center',\r\n+          cursor: 'pointer',\r\n+          transition: 'all 0.3s ease',\r\n+          boxShadow: '0 2px 5px rgba(0, 0, 0, 0.2)',\r\n+          zIndex: 100\r\n+        }}\r\n+      >\r\n+        {darkMode ? '‚òÄÔ∏è' : 'üåô'}\r\n+      </button>\r\n+      \r\n+      {/* Hero Section */}\r\n+      <section style={{\r\n+        background: darkMode \r\n+          ? 'linear-gradient(135deg, #2d3748 0%, #1a202c 100%)' \r\n+          : 'linear-gradient(135deg, #6b46c1 0%, #3b82f6 100%)',\r\n+        color: 'white',\r\n+        padding: '4rem 1rem',\r\n+        textAlign: 'center',\r\n+        borderRadius: '0 0 20px 20px',\r\n+        boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',\r\n+        position: 'relative',\r\n+        overflow: 'hidden',\r\n+        height: '300px'\r\n+      }}>\r\n+        <div style={{\r\n+          maxWidth: '800px',\r\n+          margin: '0 auto',\r\n+          position: 'relative',\r\n+          zIndex: 2\r\n+        }}>\r\n+          <h1 style={{ fontSize: '3.5rem', fontWeight: '800', marginBottom: '0.5rem' }}>UrbanFlow</h1>\r\n+          <p style={{ fontSize: '1.25rem', marginBottom: '2rem', opacity: 0.9 }}>Your seamless urban living companion</p>\r\n+          \r\n+          <form onSubmit={handleSearch} style={{\r\n+            display: 'flex',\r\n+            maxWidth: '600px',\r\n+            margin: '0 auto',\r\n+            borderRadius: '50px',\r\n+            overflow: 'hidden',\r\n+            boxShadow: '0 4px 10px rgba(0, 0, 0, 0.2)',\r\n+          }}>\r\n+            <input\r\n+              type=\"text\"\r\n+              placeholder=\"Search for restaurants, services...\"\r\n+              value={searchQuery}\r\n+              onChange={(e) => setSearchQuery(e.target.value)}\r\n+              style={{\r\n+                flex: 1,\r\n+                padding: '1rem 1.5rem',\r\n+                border: 'none',\r\n+                fontSize: '1rem',\r\n+                outline: 'none',\r\n+                backgroundColor: darkMode ? '#2d3748' : 'white',\r\n+                color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+              }}\r\n+            />\r\n+            <button type=\"submit\" style={{\r\n+              backgroundColor: darkMode ? '#4a5568' : '#1e40af',\r\n+              color: 'white',\r\n+              border: 'none',\r\n+              padding: '0 1.5rem',\r\n+              cursor: 'pointer',\r\n+              fontSize: '1.25rem',\r\n+            }}>\r\n+              <span>üîç</span>\r\n+            </button>\r\n+          </form>\r\n+        </div>\r\n+        <UrbanBuddy darkMode={darkMode} onChatOpen={toggleChat} />\r\n+      </section>\r\n+\r\n+      {/* Services Grid */}\r\n+      <section style={{ padding: '2rem 1rem', maxWidth: '1200px', margin: '0 auto' }}>\r\n+        <h2 style={{ fontSize: '2rem', fontWeight: '700', marginBottom: '1.5rem', textAlign: 'center' }}>\r\n+          What do you need today?\r\n+        </h2>\r\n+        <div style={{\r\n+          display: 'grid',\r\n+          gridTemplateColumns: 'repeat(auto-fit, minmax(250px, 1fr))',\r\n+          gap: '1.5rem',\r\n+          marginTop: '1rem',\r\n+        }}>\r\n+          {services.map((service) => (\r\n+            <div \r\n+              key={service.name} \r\n+              onClick={() => openServicePopup(service)}\r\n+              style={{ \r\n+                padding: '2rem 1.5rem',\r\n+                borderRadius: '16px',\r\n+                border: `2px solid ${service.color}`,\r\n+                textAlign: 'center',\r\n+                cursor: 'pointer',\r\n+                transition: 'transform 0.3s, box-shadow 0.3s',\r\n+                backgroundColor: darkMode ? `${service.color}20` : `${service.color}10`,\r\n+                ':hover': {\r\n+                  transform: 'translateY(-5px)',\r\n+                  boxShadow: '0 10px 20px rgba(0, 0, 0, 0.1)',\r\n+                }\r\n+              }}\r\n+            >\r\n+              <div style={{ fontSize: '3rem', marginBottom: '1rem', animation: 'float 3s ease-in-out infinite' }}>\r\n+                {service.icon}\r\n+              </div>\r\n+              <h3 style={{fontSize: '1.5rem', fontWeight: '600', marginBottom: '0.5rem'}}>{service.name}</h3>\r\n+              <p style={{color: darkMode ? '#a0aec0' : '#64748b'}}>{service.desc}</p>\r\n+            </div>\r\n+          ))}\r\n+        </div>\r\n+      </section>\r\n+\r\n+      {/* Quick Access Buttons */}\r\n+      <section style={{ padding: '2rem 1rem', maxWidth: '1200px', margin: '0 auto' }}>\r\n+        <h2 style={{ fontSize: '2rem', fontWeight: '700', marginBottom: '1.5rem', textAlign: 'center' }}>\r\n+          Quick Access\r\n+        </h2>\r\n+        <div style={{ display: 'flex', justifyContent: 'center', gap: '1rem', flexWrap: 'wrap' }}>\r\n+          <button \r\n+            onClick={() => navigate('/transport?from=home&to=downtown')}\r\n+            style={{\r\n+              padding: '0.75rem 1.5rem',\r\n+              borderRadius: '50px',\r\n+              border: 'none',\r\n+              backgroundColor: darkMode ? '#2d3748' : '#e2e8f0',\r\n+              color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+              fontWeight: '600',\r\n+              cursor: 'pointer',\r\n+              transition: 'all 0.2s',\r\n+              display: 'flex',\r\n+              alignItems: 'center',\r\n+              gap: '0.5rem',\r\n+              fontSize: '1rem'\r\n+            }}\r\n+          >\r\n+            üöï To Downtown\r\n+          </button>\r\n+          <button \r\n+            onClick={() => navigate('/food?category=fastfood')}\r\n+            style={{\r\n+              padding: '0.75rem 1.5rem',\r\n+              borderRadius: '50px',\r\n+              border: 'none',\r\n+              backgroundColor: darkMode ? '#2d3748' : '#e2e8f0',\r\n+              color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+              fontWeight: '600',\r\n+              cursor: 'pointer',\r\n+              transition: 'all 0.2s',\r\n+              display: 'flex',\r\n+              alignItems: 'center',\r\n+              gap: '0.5rem',\r\n+              fontSize: '1rem'\r\n+            }}\r\n+          >\r\n+            üçü Fast Food\r\n+          </button>\r\n+          <button \r\n+            onClick={() => navigate('/food?category=coffee')}\r\n+            style={{\r\n+              padding: '0.75rem 1.5rem',\r\n+              borderRadius: '50px',\r\n+              border: 'none',\r\n+              backgroundColor: darkMode ? '#2d3748' : '#e2e8f0',\r\n+              color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+              fontWeight: '600',\r\n+              cursor: 'pointer',\r\n+              transition: 'all 0.2s',\r\n+              display: 'flex',\r\n+              alignItems: 'center',\r\n+              gap: '0.5rem',\r\n+              fontSize: '1rem'\r\n+            }}\r\n+          >\r\n+            ‚òï Coffee Shops\r\n+          </button>\r\n+        </div>\r\n+      </section>\r\n+\r\n+      {/* Service Popup */}\r\n+      {selectedService && (\r\n+        <div style={{\r\n+          position: 'fixed',\r\n+          top: 0,\r\n+          left: 0,\r\n+          right: 0,\r\n+          bottom: 0,\r\n+          backgroundColor: 'rgba(0, 0, 0, 0.7)',\r\n+          display: 'flex',\r\n+          justifyContent: 'center',\r\n+          alignItems: 'center',\r\n+          zIndex: 1000,\r\n+        }} onClick={closePopup}>\r\n+          <div style={{\r\n+            backgroundColor: darkMode ? '#2d3748' : 'white',\r\n+            borderRadius: '16px',\r\n+            padding: '2rem',\r\n+            maxWidth: '500px',\r\n+            width: '90%',\r\n+            boxShadow: '0 10px 25px rgba(0, 0, 0, 0.2)',\r\n+            position: 'relative',\r\n+            border: darkMode ? '1px solid #4a5568' : '1px solid #e2e8f0',\r\n+          }} onClick={(e) => e.stopPropagation()}>\r\n+            <button style={{\r\n+              position: 'absolute',\r\n+              top: '1rem',\r\n+              right: '1rem',\r\n+              background: 'none',\r\n+              border: 'none',\r\n+              fontSize: '1.5rem',\r\n+              cursor: 'pointer',\r\n+              color: darkMode ? '#a0aec0' : '#64748b',\r\n+            }} onClick={closePopup}>√ó</button>\r\n+            <div style={{ display: 'flex', alignItems: 'center', gap: '1rem', marginBottom: '1.5rem' }}>\r\n+              <span style={{ fontSize: '2.5rem', animation: 'float 3s ease-in-out infinite' }}>{selectedService.icon}</span>\r\n+              <h3 style={{fontSize: '1.8rem', fontWeight: '700', marginBottom: '1rem'}}>{selectedService.name}</h3>\r\n+            </div>\r\n+            <p style={{color: darkMode ? '#a0aec0' : '#64748b', fontSize: '1.1rem', lineHeight: '1.6', marginBottom: '2rem'}}>\r\n+              {selectedService.details}\r\n+            </p>\r\n+            <button \r\n+              style={{ \r\n+                padding: '0.75rem 1.5rem',\r\n+                borderRadius: '8px',\r\n+                border: 'none',\r\n+                backgroundColor: selectedService.color,\r\n+                color: 'white',\r\n+                fontWeight: '600',\r\n+                cursor: 'pointer',\r\n+                transition: 'all 0.2s',\r\n+                fontSize: '1rem'\r\n+              }}\r\n+              onClick={() => {\r\n+                navigate(selectedService.path);\r\n+                closePopup();\r\n+              }}\r\n+            >\r\n+              Explore {selectedService.name}\r\n+            </button>\r\n+          </div>\r\n+        </div>\r\n+      )}\r\n+\r\n+      {/* Achievements */}\r\n+      {achievements.map(achievement => (\r\n+        <div key={achievement.id} style={{\r\n+          position: 'fixed',\r\n+          bottom: '20px',\r\n+          right: '20px',\r\n+          background: darkMode ? '#2d3748' : 'white',\r\n+          color: darkMode ? 'white' : '#1e293b',\r\n+          padding: '1rem',\r\n+          borderRadius: '12px',\r\n+          boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',\r\n+          display: 'flex',\r\n+          alignItems: 'center',\r\n+          gap: '0.5rem',\r\n+          zIndex: 1000,\r\n+          animation: 'slideIn 0.5s forwards, fadeOut 0.5s forwards 2.5s'\r\n+        }}>\r\n+          <span style={{fontSize: '1.5rem'}}>{achievement.icon}</span>\r\n+          <span>{achievement.title}</span>\r\n+        </div>\r\n+      ))}\r\n+\r\n+      {/* Chat Modal */}\r\n+      {showChat && <ChatModal darkMode={darkMode} onClose={toggleChat} />}\r\n+\r\n+      {/* Footer */}\r\n+      <footer style={{\r\n+        textAlign: 'center',\r\n+        padding: '2rem 1rem',\r\n+        color: darkMode ? '#a0aec0' : '#64748b',\r\n+        fontSize: '0.9rem',\r\n+        marginTop: '2rem'\r\n+      }}>\r\n+        <p>¬© {new Date().getFullYear()} UrbanFlow - Created by Nick</p>\r\n+      </footer>\r\n+    </div>\r\n+  );\r\n+};\n\\ No newline at end of file\n"
                },
                {
                    "date": 1754464875677,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,861 @@\n+import { useState, useEffect, useRef } from 'react';\r\n+import { useNavigate } from 'react-router-dom';\r\n+\r\n+// UrbanBuddy AI Assistant Component\r\n+const UrbanBuddy = ({ darkMode, onChatOpen }) => {\r\n+  const [position, setPosition] = useState({ x: 20, y: 50 });\r\n+  const [expression, setExpression] = useState('üòä');\r\n+  const [direction, setDirection] = useState(1);\r\n+  const [costume, setCostume] = useState(null);\r\n+  const [isActive, setIsActive] = useState(false);\r\n+  const botRef = useRef(null);\r\n+  const animationRef = useRef(null);\r\n+  const lastInteractionTime = useRef(Date.now());\r\n+\r\n+  // Seasonal costumes\r\n+  useEffect(() => {\r\n+    const today = new Date();\r\n+    const month = today.getMonth() + 1;\r\n+    \r\n+    if (month === 12) setCostume('üéÑ');\r\n+    else if (month === 10) setCostume('üéÉ');\r\n+    else if (month === 2) setCostume('üíù');\r\n+    else if (month === 4) setCostume('üå∏');\r\n+    else setCostume(null);\r\n+  }, []);\r\n+\r\n+  // Make the bot wander with more dynamic movement\r\n+  useEffect(() => {\r\n+    const moveInterval = setInterval(() => {\r\n+      setPosition(prev => {\r\n+        const now = Date.now();\r\n+        const timeSinceLastInteraction = now - lastInteractionTime.current;\r\n+        \r\n+        // More active movement right after interaction\r\n+        const speedMultiplier = timeSinceLastInteraction < 5000 ? 2 : 1;\r\n+        \r\n+        let newX = prev.x + (3 * direction * speedMultiplier);\r\n+        let newY = prev.y + (Math.random() * 6 - 3);\r\n+        \r\n+        // Bounce off edges\r\n+        if (newX > window.innerWidth - 80) {\r\n+          setDirection(-1);\r\n+          triggerAnimation('spin');\r\n+        }\r\n+        if (newX < 20) {\r\n+          setDirection(1);\r\n+          triggerAnimation('spin');\r\n+        }\r\n+        if (newY < 20) newY = 20;\r\n+        if (newY > window.innerHeight - 100) newY = window.innerHeight - 100;\r\n+        \r\n+        return { x: newX, y: newY };\r\n+      });\r\n+    }, 100);\r\n+\r\n+    return () => clearInterval(moveInterval);\r\n+  }, [direction]);\r\n+\r\n+  // Change expressions randomly with more variety\r\n+  useEffect(() => {\r\n+    const expressions = ['üòä', 'ü§î', 'üòÆ', 'üòé', 'üëã', 'ü§ñ', '‚ú®', 'üåü'];\r\n+    const expressionInterval = setInterval(() => {\r\n+      if (!isActive) {\r\n+        setExpression(expressions[Math.floor(Math.random() * expressions.length)]);\r\n+        // Random animations when idle\r\n+        if (Math.random() > 0.8) {\r\n+          triggerAnimation(['bounce', 'spin', 'wobble'][Math.floor(Math.random() * 3)]);\r\n+        }\r\n+      }\r\n+    }, 3000);\r\n+    return () => clearInterval(expressionInterval);\r\n+  }, [isActive]);\r\n+\r\n+  const triggerAnimation = (type) => {\r\n+    if (animationRef.current) {\r\n+      clearTimeout(animationRef.current);\r\n+    }\r\n+    \r\n+    const botElement = botRef.current;\r\n+    if (!botElement) return;\r\n+    \r\n+    botElement.style.animation = 'none';\r\n+    void botElement.offsetWidth; // Trigger reflow\r\n+    \r\n+    switch(type) {\r\n+      case 'spin':\r\n+        botElement.style.animation = 'spin 1s ease';\r\n+        break;\r\n+      case 'bounce':\r\n+        botElement.style.animation = 'bounce 0.5s ease';\r\n+        break;\r\n+      case 'wobble':\r\n+        botElement.style.animation = 'wobble 0.8s ease';\r\n+        break;\r\n+      default:\r\n+        botElement.style.animation = '';\r\n+    }\r\n+    \r\n+    animationRef.current = setTimeout(() => {\r\n+      if (botElement) botElement.style.animation = '';\r\n+    }, 1000);\r\n+  };\r\n+\r\n+  const handleClick = () => {\r\n+    lastInteractionTime.current = Date.now();\r\n+    setIsActive(true);\r\n+    triggerAnimation('bounce');\r\n+    setExpression('üí°');\r\n+    \r\n+    // Trigger chat opening in parent component\r\n+    onChatOpen();\r\n+    \r\n+    // Return to normal after a delay\r\n+    setTimeout(() => {\r\n+      setIsActive(false);\r\n+    }, 3000);\r\n+  };\r\n+\r\n+  // Custom animations\r\n+  const animations = `\r\n+    @keyframes spin {\r\n+      0% { transform: rotate(0deg) scaleX(${direction}); }\r\n+      100% { transform: rotate(360deg) scaleX(${direction}); }\r\n+    }\r\n+    @keyframes bounce {\r\n+      0%, 100% { transform: translateY(0) scaleX(${direction}); }\r\n+      50% { transform: translateY(-20px) scaleX(${direction}); }\r\n+    }\r\n+    @keyframes wobble {\r\n+      0%, 100% { transform: rotate(0deg) scaleX(${direction}); }\r\n+      25% { transform: rotate(5deg) scaleX(${direction}); }\r\n+      75% { transform: rotate(-5deg) scaleX(${direction}); }\r\n+    }\r\n+    @keyframes float {\r\n+      0% { transform: translateY(0px) scaleX(${direction}); }\r\n+      50% { transform: translateY(-10px) scaleX(${direction}); }\r\n+      100% { transform: translateY(0px) scaleX(${direction}); }\r\n+    }\r\n+  `;\r\n+\r\n+  return (\r\n+    <>\r\n+      <style>{animations}</style>\r\n+      <div \r\n+        ref={botRef}\r\n+        onClick={handleClick}\r\n+        style={{\r\n+          position: 'fixed',\r\n+          left: `${position.x}px`,\r\n+          top: `${position.y}px`,\r\n+          fontSize: '2.5rem',\r\n+          cursor: 'pointer',\r\n+          transition: 'all 0.3s ease',\r\n+          transform: `scaleX(${direction})`,\r\n+          zIndex: 100,\r\n+          filter: darkMode \r\n+            ? 'drop-shadow(0 0 8px rgba(255,255,255,0.7))' \r\n+            : 'drop-shadow(0 0 8px rgba(0,0,0,0.3))',\r\n+          userSelect: 'none',\r\n+          animation: 'float 4s ease-in-out infinite'\r\n+        }}\r\n+      >\r\n+        <div style={{ \r\n+          position: 'relative',\r\n+          display: 'flex',\r\n+          flexDirection: 'column',\r\n+          alignItems: 'center'\r\n+        }}>\r\n+          {/* Bot icon with costume */}\r\n+          <div style={{\r\n+            position: 'relative',\r\n+            width: '60px',\r\n+            height: '60px',\r\n+            backgroundColor: darkMode ? '#4a5568' : '#3b82f6',\r\n+            borderRadius: '50%',\r\n+            display: 'flex',\r\n+            justifyContent: 'center',\r\n+            alignItems: 'center',\r\n+            color: 'white'\r\n+          }}>\r\n+            <span style={{ fontSize: '1.8rem' }}>{expression}</span>\r\n+            {costume && (\r\n+              <span style={{\r\n+                position: 'absolute',\r\n+                top: '-15px',\r\n+                right: '-10px',\r\n+                fontSize: '1.5rem',\r\n+                transform: 'rotate(15deg)'\r\n+              }}>\r\n+                {costume}\r\n+              </span>\r\n+            )}\r\n+          </div>\r\n+        </div>\r\n+      </div>\r\n+    </>\r\n+  );\r\n+};\r\n+\r\n+// Chat Modal Component with Functional API Connection\r\n+const ChatModal = ({ darkMode, onClose }) => {\r\n+  const [messages, setMessages] = useState([\r\n+    { text: \"Hello! I'm UrbanBuddy, your AI assistant for urban living. How can I help you today?\", sender: 'bot' }\r\n+  ]);\r\n+  const [inputValue, setInputValue] = useState('');\r\n+  const [isTyping, setIsTyping] = useState(false);\r\n+  const chatEndRef = useRef(null);\r\n+  const inputRef = useRef(null);\r\n+\r\n+  // Auto-scroll to bottom and focus input\r\n+  useEffect(() => {\r\n+    chatEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n+    inputRef.current?.focus();\r\n+  }, [messages]);\r\n+\r\n+  // Function to call the AI API\r\n+  const generateResponse = async (userMessage) => {\r\n+    setIsTyping(true);\r\n+    \r\n+    try {\r\n+      // In a real app, you should call your own backend endpoint that then calls OpenAI\r\n+      // This is just for demonstration purposes\r\n+      const response = await fetch('https://api.openai.com/v1/chat/completions', {\r\n+        method: \"POST\",\r\n+        headers: { \r\n+          \"Content-Type\": \"application/json\",\r\n+          // Note: In production, never expose your API key in frontend code\r\n+          // This should be handled through your own backend\r\n+          \"Authorization\": `Bearer ${process.env.REACT_APP_OPENAI_API_KEY}` \r\n+        },\r\n+        body: JSON.stringify({\r\n+          model: \"gpt-3.5-turbo\",\r\n+          messages: [\r\n+            {\r\n+              role: \"system\",\r\n+              content: \"You are UrbanBuddy, a friendly AI assistant for urban living. \" +\r\n+                \"Provide helpful, concise answers (1-2 sentences) about city life, \" +\r\n+                \"transportation, food delivery, local services, and urban living tips. \" +\r\n+                \"Keep responses practical and urban-focused.\"\r\n+            },\r\n+            {\r\n+              role: \"user\",\r\n+              content: userMessage\r\n+            }\r\n+          ],\r\n+          temperature: 0.7,\r\n+          max_tokens: 150\r\n+        })\r\n+      });\r\n+      \r\n+      if (!response.ok) {\r\n+        throw new Error(`API request failed with status ${response.status}`);\r\n+      }\r\n+      \r\n+      const data = await response.json();\r\n+      const aiResponse = data.choices?.[0]?.message?.content || \r\n+        \"I'm having trouble thinking of a response right now. Could you try asking something else?\";\r\n+      \r\n+      setMessages(prev => [...prev, { \r\n+        text: aiResponse, \r\n+        sender: 'bot' \r\n+      }]);\r\n+    } catch (error) {\r\n+      console.error(\"API error:\", error);\r\n+      // Fallback to a local AI response if API fails\r\n+      const fallbackResponses = [\r\n+        \"I'm currently experiencing high demand. Try again in a moment!\",\r\n+        \"Let me think differently about that... Can you rephrase your question?\",\r\n+        \"I specialize in urban living tips. Ask me about transportation, food, or city services!\",\r\n+        \"I'm having connection issues, but I'd love to help with your urban living questions!\"\r\n+      ];\r\n+      setMessages(prev => [...prev, { \r\n+        text: fallbackResponses[Math.floor(Math.random() * fallbackResponses.length)], \r\n+        sender: 'bot' \r\n+      }]);\r\n+    } finally {\r\n+      setIsTyping(false);\r\n+    }\r\n+  };\r\n+\r\n+  const handleSendMessage = async (e) => {\r\n+    e.preventDefault();\r\n+    if (inputValue.trim() && !isTyping) {\r\n+      // Add user message\r\n+      const userMessage = inputValue.trim();\r\n+      setMessages(prev => [...prev, { text: userMessage, sender: 'user' }]);\r\n+      setInputValue('');\r\n+      \r\n+      // Generate AI response\r\n+      await generateResponse(userMessage);\r\n+    }\r\n+  };\r\n+\r\n+  return (\r\n+    <div style={{\r\n+      position: 'fixed',\r\n+      bottom: '100px',\r\n+      right: '30px',\r\n+      width: '350px',\r\n+      maxWidth: '90%',\r\n+      backgroundColor: darkMode ? '#2d3748' : 'white',\r\n+      borderRadius: '16px',\r\n+      boxShadow: '0 10px 25px rgba(0, 0, 0, 0.2)',\r\n+      border: darkMode ? '1px solid #4a5568' : '1px solid #e2e8f0',\r\n+      zIndex: 1000,\r\n+      overflow: 'hidden',\r\n+      display: 'flex',\r\n+      flexDirection: 'column',\r\n+      maxHeight: '60vh'\r\n+    }}>\r\n+      {/* Chat header */}\r\n+      <div style={{\r\n+        padding: '1rem',\r\n+        backgroundColor: darkMode ? '#4a5568' : '#3b82f6',\r\n+        color: 'white',\r\n+        display: 'flex',\r\n+        justifyContent: 'space-between',\r\n+        alignItems: 'center'\r\n+      }}>\r\n+        <div style={{ display: 'flex', alignItems: 'center', gap: '0.5rem' }}>\r\n+          <span style={{ fontSize: '1.5rem' }}>ü§ñ</span>\r\n+          <h3 style={{ margin: 0 }}>UrbanBuddy AI</h3>\r\n+          {isTyping && (\r\n+            <span style={{ \r\n+              fontSize: '0.8rem',\r\n+              marginLeft: '0.5rem',\r\n+              opacity: 0.8\r\n+            }}>typing...</span>\r\n+          )}\r\n+        </div>\r\n+        <button \r\n+          onClick={onClose}\r\n+          style={{\r\n+            background: 'none',\r\n+            border: 'none',\r\n+            color: 'white',\r\n+            fontSize: '1.2rem',\r\n+            cursor: 'pointer'\r\n+          }}\r\n+        >\r\n+          √ó\r\n+        </button>\r\n+      </div>\r\n+      \r\n+      {/* Chat messages */}\r\n+      <div style={{\r\n+        flex: 1,\r\n+        padding: '1rem',\r\n+        overflowY: 'auto',\r\n+        display: 'flex',\r\n+        flexDirection: 'column',\r\n+        gap: '0.8rem'\r\n+      }}>\r\n+        {messages.map((msg, index) => (\r\n+          <div \r\n+            key={index}\r\n+            style={{\r\n+              alignSelf: msg.sender === 'user' ? 'flex-end' : 'flex-start',\r\n+              maxWidth: '80%',\r\n+              padding: '0.6rem 1rem',\r\n+              borderRadius: msg.sender === 'user' \r\n+                ? '18px 18px 0 18px' \r\n+                : '18px 18px 18px 0',\r\n+              backgroundColor: msg.sender === 'user'\r\n+                ? (darkMode ? '#4a5568' : '#3b82f6')\r\n+                : (darkMode ? '#4a5568' : '#e2e8f0'),\r\n+              color: msg.sender === 'user' ? 'white' : (darkMode ? 'white' : '#1e293b'),\r\n+              animation: msg.sender === 'bot' && index === messages.length - 1 \r\n+                ? 'fadeIn 0.3s ease' \r\n+                : 'none'\r\n+            }}\r\n+          >\r\n+            {msg.text}\r\n+          </div>\r\n+        ))}\r\n+        <div ref={chatEndRef} />\r\n+      </div>\r\n+      \r\n+      {/* Chat input */}\r\n+      <form onSubmit={handleSendMessage} style={{\r\n+        padding: '0.8rem',\r\n+        borderTop: darkMode ? '1px solid #4a5568' : '1px solid #e2e8f0',\r\n+        display: 'flex',\r\n+        gap: '0.5rem'\r\n+      }}>\r\n+        <input\r\n+          ref={inputRef}\r\n+          type=\"text\"\r\n+          value={inputValue}\r\n+          onChange={(e) => setInputValue(e.target.value)}\r\n+          placeholder=\"Ask me about urban living...\"\r\n+          disabled={isTyping}\r\n+          style={{\r\n+            flex: 1,\r\n+            padding: '0.6rem 1rem',\r\n+            borderRadius: '20px',\r\n+            border: darkMode ? '1px solid #4a5568' : '1px solid #e2e8f0',\r\n+            backgroundColor: darkMode ? '#2d3748' : 'white',\r\n+            color: darkMode ? 'white' : '#1e293b',\r\n+            outline: 'none',\r\n+            opacity: isTyping ? 0.7 : 1\r\n+          }}\r\n+        />\r\n+        <button \r\n+          type=\"submit\"\r\n+          disabled={isTyping}\r\n+          style={{\r\n+            background: isTyping \r\n+              ? (darkMode ? '#4a5568' : '#e2e8f0')\r\n+              : (darkMode ? '#4a5568' : '#3b82f6'),\r\n+            color: 'white',\r\n+            border: 'none',\r\n+            borderRadius: '50%',\r\n+            width: '40px',\r\n+            height: '40px',\r\n+            display: 'flex',\r\n+            alignItems: 'center',\r\n+            justifyContent: 'center',\r\n+            cursor: isTyping ? 'not-allowed' : 'pointer'\r\n+          }}\r\n+        >\r\n+          {isTyping ? '...' : '‚û§'}\r\n+        </button>\r\n+      </form>\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+// Main Home Component\r\n+export default function Home() {\r\n+  const navigate = useNavigate();\r\n+  const [searchQuery, setSearchQuery] = useState('');\r\n+  const [darkMode, setDarkMode] = useState(false);\r\n+  const [selectedService, setSelectedService] = useState(null);\r\n+  const [orderCount, setOrderCount] = useState(0);\r\n+  const [achievements, setAchievements] = useState([]);\r\n+  const [showChat, setShowChat] = useState(false);\r\n+\r\n+  const services = [\r\n+    { \r\n+      name: 'Transport', \r\n+      path: '/transport', \r\n+      icon: 'üöå', \r\n+      desc: 'Plan your multi-modal journey across the city',\r\n+      color: '#3b82f6',\r\n+      details: 'Find the best routes combining metro, buses, and bikes. Real-time updates and ticket purchasing available.'\r\n+    },\r\n+    { \r\n+      name: 'Food Delivery', \r\n+      path: '/food', \r\n+      icon: 'üçî', \r\n+      desc: 'Discover local restaurants and cafes',\r\n+      color: '#ef4444',\r\n+      details: 'Order from hundreds of restaurants with special discounts. Track your delivery in real-time.'\r\n+    },\r\n+    { \r\n+      name: 'Groceries', \r\n+      path: '/food', \r\n+      icon: 'üõí', \r\n+      desc: 'Get groceries delivered in minutes',\r\n+      color: '#10b981',\r\n+      details: 'Same-day delivery from local supermarkets. Schedule recurring orders for essentials.'\r\n+    },\r\n+    { \r\n+      name: 'Services', \r\n+      path: '/food', \r\n+      icon: 'üõ†Ô∏è', \r\n+      desc: 'Find urban services near you',\r\n+      color: '#8b5cf6',\r\n+      details: 'Book home services, repairs, and professional help with verified providers.'\r\n+    }\r\n+  ];\r\n+\r\n+  // Check for achievements\r\n+  useEffect(() => {\r\n+    if (orderCount === 1) {\r\n+      addAchievement('First Order!', 'üéâ');\r\n+    } else if (orderCount === 5) {\r\n+      addAchievement('Regular Customer!', 'üèÜ');\r\n+    } else if (orderCount === 10) {\r\n+      addAchievement('Super User!', 'üåü');\r\n+    }\r\n+  }, [orderCount]);\r\n+\r\n+  const addAchievement = (title, icon) => {\r\n+    if (!achievements.some(a => a.title === title)) {\r\n+      const newAchievement = { title, icon, id: Date.now() };\r\n+      setAchievements(prev => [...prev, newAchievement]);\r\n+      \r\n+      // Auto-hide achievement after 3 seconds\r\n+      setTimeout(() => {\r\n+        setAchievements(prev => prev.filter(a => a.id !== newAchievement.id));\r\n+      }, 3000);\r\n+    }\r\n+  };\r\n+\r\n+  const handleSearch = (e) => {\r\n+    e.preventDefault();\r\n+    if (searchQuery.trim()) {\r\n+      navigate(`/food?search=${encodeURIComponent(searchQuery)}`);\r\n+    }\r\n+  };\r\n+\r\n+  const toggleDarkMode = () => {\r\n+    setDarkMode(!darkMode);\r\n+  };\r\n+\r\n+  const openServicePopup = (service) => {\r\n+    setSelectedService(service);\r\n+    setOrderCount(prev => prev + 1);\r\n+  };\r\n+\r\n+  const closePopup = () => {\r\n+    setSelectedService(null);\r\n+  };\r\n+\r\n+  const toggleChat = () => {\r\n+    setShowChat(!showChat);\r\n+  };\r\n+\r\n+  return (\r\n+    <div style={{\r\n+      backgroundColor: darkMode ? '#1a202c' : '#f8fafc',\r\n+      minHeight: '100vh',\r\n+      paddingBottom: '3rem',\r\n+      color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+      transition: 'all 0.3s ease',\r\n+      position: 'relative'\r\n+    }}>\r\n+      {/* Theme Toggle Button */}\r\n+      <button \r\n+        onClick={toggleDarkMode} \r\n+        style={{\r\n+          position: 'fixed',\r\n+          top: '1.5rem',\r\n+          right: '1.5rem',\r\n+          background: darkMode ? '#4a5568' : '#e2e8f0',\r\n+          border: 'none',\r\n+          borderRadius: '50%',\r\n+          width: '40px',\r\n+          height: '40px',\r\n+          display: 'flex',\r\n+          alignItems: 'center',\r\n+          justifyContent: 'center',\r\n+          cursor: 'pointer',\r\n+          transition: 'all 0.3s ease',\r\n+          boxShadow: '0 2px 5px rgba(0, 0, 0, 0.2)',\r\n+          zIndex: 100\r\n+        }}\r\n+        aria-label={darkMode ? 'Switch to light mode' : 'Switch to dark mode'}\r\n+      >\r\n+        {darkMode ? '‚òÄÔ∏è' : 'üåô'}\r\n+      </button>\r\n+      \r\n+      {/* Hero Section with UrbanBuddy */}\r\n+      <section style={{\r\n+        background: darkMode \r\n+          ? 'linear-gradient(135deg, #2d3748 0%, #1a202c 100%)' \r\n+          : 'linear-gradient(135deg, #6b46c1 0%, #3b82f6 100%)',\r\n+        color: 'white',\r\n+        padding: '4rem 1rem',\r\n+        textAlign: 'center',\r\n+        borderRadius: '0 0 20px 20px',\r\n+        boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',\r\n+        position: 'relative',\r\n+        overflow: 'hidden',\r\n+        height: '300px'\r\n+      }}>\r\n+        <div style={{\r\n+          maxWidth: '800px',\r\n+          margin: '0 auto',\r\n+          position: 'relative',\r\n+          zIndex: 2\r\n+        }}>\r\n+          <h1 style={{\r\n+            fontSize: '3.5rem',\r\n+            fontWeight: '800',\r\n+            marginBottom: '0.5rem',\r\n+            textShadow: '2px 2px 4px rgba(0, 0, 0, 0.2)',\r\n+          }}>UrbanFlow</h1>\r\n+          <p style={{\r\n+            fontSize: '1.25rem',\r\n+            marginBottom: '2rem',\r\n+            opacity: 0.9,\r\n+          }}>Your seamless urban living companion</p>\r\n+          \r\n+          <form onSubmit={handleSearch} style={{\r\n+            display: 'flex',\r\n+            maxWidth: '600px',\r\n+            margin: '0 auto',\r\n+            borderRadius: '50px',\r\n+            overflow: 'hidden',\r\n+            boxShadow: '0 4px 10px rgba(0, 0, 0, 0.2)',\r\n+          }}>\r\n+            <input\r\n+              type=\"text\"\r\n+              placeholder=\"Search for restaurants, services...\"\r\n+              value={searchQuery}\r\n+              onChange={(e) => setSearchQuery(e.target.value)}\r\n+              style={{\r\n+                flex: 1,\r\n+                padding: '1rem 1.5rem',\r\n+                border: 'none',\r\n+                fontSize: '1rem',\r\n+                outline: 'none',\r\n+                backgroundColor: darkMode ? '#2d3748' : 'white',\r\n+                color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+              }}\r\n+            />\r\n+            <button type=\"submit\" style={{\r\n+              backgroundColor: darkMode ? '#4a5568' : '#1e40af',\r\n+              color: 'white',\r\n+              border: 'none',\r\n+              padding: '0 1.5rem',\r\n+              cursor: 'pointer',\r\n+              fontSize: '1.25rem',\r\n+              transition: 'background-color 0.2s'\r\n+            }}>\r\n+              <span>üîç</span>\r\n+            </button>\r\n+          </form>\r\n+        </div>\r\n+        <UrbanBuddy darkMode={darkMode} onChatOpen={toggleChat} />\r\n+      </section>\r\n+\r\n+      {/* Services Grid */}\r\n+      <section style={{\r\n+        padding: '2rem 1rem',\r\n+        maxWidth: '1200px',\r\n+        margin: '0 auto',\r\n+      }}>\r\n+        <h2 style={{\r\n+          fontSize: '2rem',\r\n+          fontWeight: '700',\r\n+          marginBottom: '1.5rem',\r\n+          color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+          textAlign: 'center',\r\n+        }}>What do you need today?</h2>\r\n+        <div style={{\r\n+          display: 'grid',\r\n+          gridTemplateColumns: 'repeat(auto-fit, minmax(250px, 1fr))',\r\n+          gap: '1.5rem',\r\n+          marginTop: '1rem',\r\n+        }}>\r\n+          {services.map((service) => (\r\n+            <div \r\n+              key={service.name} \r\n+              onClick={() => openServicePopup(service)}\r\n+              style={{ \r\n+                padding: '2rem 1.5rem',\r\n+                borderRadius: '16px',\r\n+                border: `2px solid ${service.color}`,\r\n+                textAlign: 'center',\r\n+                cursor: 'pointer',\r\n+                transition: 'transform 0.3s, box-shadow 0.3s',\r\n+                backgroundColor: darkMode \r\n+                  ? `${service.color}20` \r\n+                  : `${service.color}10`,\r\n+                ':hover': {\r\n+                  transform: 'translateY(-5px)',\r\n+                  boxShadow: '0 10px 20px rgba(0, 0, 0, 0.1)',\r\n+                }\r\n+              }}\r\n+            >\r\n+              <div style={{ \r\n+                fontSize: '3rem',\r\n+                marginBottom: '1rem',\r\n+                display: 'inline-block',\r\n+                animation: 'float 3s ease-in-out infinite'\r\n+              }}>{service.icon}</div>\r\n+              <h3 style={{fontSize: '1.5rem', fontWeight: '600', marginBottom: '0.5rem'}}>{service.name}</h3>\r\n+              <p style={{color: darkMode ? '#a0aec0' : '#64748b'}}>{service.desc}</p>\r\n+            </div>\r\n+          ))}\r\n+        </div>\r\n+      </section>\r\n+\r\n+      {/* Featured Section */}\r\n+      <section style={{\r\n+        padding: '2rem 1rem',\r\n+        maxWidth: '1200px',\r\n+        margin: '0 auto',\r\n+      }}>\r\n+        <h2 style={{\r\n+          fontSize: '2rem',\r\n+          fontWeight: '700',\r\n+          marginBottom: '1.5rem',\r\n+          color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+          textAlign: 'center',\r\n+        }}>Quick Access</h2>\r\n+        <div style={{\r\n+          display: 'flex',\r\n+          justifyContent: 'center',\r\n+          gap: '1rem',\r\n+          flexWrap: 'wrap',\r\n+        }}>\r\n+          <button \r\n+            onClick={() => navigate('/transport?from=home&to=downtown')}\r\n+            style={{\r\n+              padding: '0.75rem 1.5rem',\r\n+              borderRadius: '50px',\r\n+              border: 'none',\r\n+              backgroundColor: darkMode ? '#2d3748' : '#e2e8f0',\r\n+              color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+              fontWeight: '600',\r\n+              cursor: 'pointer',\r\n+              transition: 'all 0.2s',\r\n+              display: 'flex',\r\n+              alignItems: 'center',\r\n+              gap: '0.5rem',\r\n+              fontSize: '1rem'\r\n+            }}\r\n+          >\r\n+            üöï To Downtown\r\n+          </button>\r\n+          <button \r\n+            onClick={() => navigate('/food?category=fastfood')}\r\n+            style={{\r\n+              padding: '0.75rem 1.5rem',\r\n+              borderRadius: '50px',\r\n+              border: 'none',\r\n+              backgroundColor: darkMode ? '#2d3748' : '#e2e8f0',\r\n+              color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+              fontWeight: '600',\r\n+              cursor: 'pointer',\r\n+              transition: 'all 0.2s',\r\n+              display: 'flex',\r\n+              alignItems: 'center',\r\n+              gap: '0.5rem',\r\n+              fontSize: '1rem'\r\n+            }}\r\n+          >\r\n+            üçü Fast Food\r\n+          </button>\r\n+          <button \r\n+            onClick={() => navigate('/food?category=coffee')}\r\n+            style={{\r\n+              padding: '0.75rem 1.5rem',\r\n+              borderRadius: '50px',\r\n+              border: 'none',\r\n+              backgroundColor: darkMode ? '#2d3748' : '#e2e8f0',\r\n+              color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+              fontWeight: '600',\r\n+              cursor: 'pointer',\r\n+              transition: 'all 0.2s',\r\n+              display: 'flex',\r\n+              alignItems: 'center',\r\n+              gap: '0.5rem',\r\n+              fontSize: '1rem'\r\n+            }}\r\n+          >\r\n+            ‚òï Coffee Shops\r\n+          </button>\r\n+        </div>\r\n+      </section>\r\n+\r\n+      {/* Service Popup */}\r\n+      {selectedService && (\r\n+        <div style={{\r\n+          position: 'fixed',\r\n+          top: 0,\r\n+          left: 0,\r\n+          right: 0,\r\n+          bottom: 0,\r\n+          backgroundColor: 'rgba(0, 0, 0, 0.7)',\r\n+          display: 'flex',\r\n+          justifyContent: 'center',\r\n+          alignItems: 'center',\r\n+          zIndex: 1000,\r\n+        }} onClick={closePopup}>\r\n+          <div style={{\r\n+            backgroundColor: darkMode ? '#2d3748' : 'white',\r\n+            borderRadius: '16px',\r\n+            padding: '2rem',\r\n+            maxWidth: '500px',\r\n+            width: '90%',\r\n+            boxShadow: '0 10px 25px rgba(0, 0, 0, 0.2)',\r\n+            position: 'relative',\r\n+            border: darkMode ? '1px solid #4a5568' : '1px solid #e2e8f0',\r\n+          }} onClick={(e) => e.stopPropagation()}>\r\n+            <button style={{\r\n+              position: 'absolute',\r\n+              top: '1rem',\r\n+              right: '1rem',\r\n+              background: 'none',\r\n+              border: 'none',\r\n+              fontSize: '1.5rem',\r\n+              cursor: 'pointer',\r\n+              color: darkMode ? '#a0aec0' : '#64748b',\r\n+            }} onClick={closePopup}>√ó</button>\r\n+            <div style={{ \r\n+              display: 'flex', \r\n+              alignItems: 'center', \r\n+              gap: '1rem',\r\n+              marginBottom: '1.5rem'\r\n+            }}>\r\n+              <span style={{ fontSize: '2.5rem', animation: 'float 3s ease-in-out infinite' }}>{selectedService.icon}</span>\r\n+              <h3 style={{fontSize: '1.8rem', fontWeight: '700', marginBottom: '1rem', color: darkMode ? '#e2e8f0' : '#1e293b'}}>{selectedService.name}</h3>\r\n+            </div>\r\n+            <p style={{color: darkMode ? '#a0aec0' : '#64748b', fontSize: '1.1rem', lineHeight: '1.6', marginBottom: '2rem'}}>{selectedService.details}</p>\r\n+            <button \r\n+              style={{ \r\n+                padding: '0.75rem 1.5rem',\r\n+                borderRadius: '8px',\r\n+                border: 'none',\r\n+                backgroundColor: selectedService.color,\r\n+                color: 'white',\r\n+                fontWeight: '600',\r\n+                cursor: 'pointer',\r\n+                transition: 'all 0.2s',\r\n+                fontSize: '1rem'\r\n+              }}\r\n+              onClick={() => {\r\n+                navigate(selectedService.path);\r\n+                closePopup();\r\n+              }}\r\n+            >\r\n+              Explore {selectedService.name}\r\n+            </button>\r\n+          </div>\r\n+        </div>\r\n+      )}\r\n+\r\n+      {/* Achievements */}\r\n+      {achievements.map(achievement => (\r\n+        <div key={achievement.id} style={{\r\n+          position: 'fixed',\r\n+          bottom: '20px',\r\n+          right: '20px',\r\n+          background: darkMode ? '#2d3748' : 'white',\r\n+          color: darkMode ? 'white' : '#1e293b',\r\n+          padding: '1rem',\r\n+          borderRadius: '12px',\r\n+          boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',\r\n+          display: 'flex',\r\n+          alignItems: 'center',\r\n+          gap: '0.5rem',\r\n+          zIndex: 1000,\r\n+          animation: 'slideIn 0.5s forwards, fadeOut 0.5s forwards 2.5s'\r\n+        }}>\r\n+          <span style={{fontSize: '1.5rem'}}>{achievement.icon}</span>\r\n+          <span>{achievement.title}</span>\r\n+        </div>\r\n+      ))}\r\n+\r\n+      {/* Chat Modal */}\r\n+      {showChat && <ChatModal darkMode={darkMode} onClose={toggleChat} />}\r\n+\r\n+      {/* Footer with copyright */}\r\n+      <footer style={{\r\n+        textAlign: 'center',\r\n+        padding: '2rem 1rem',\r\n+        color: darkMode ? '#a0aec0' : '#64748b',\r\n+        fontSize: '0.9rem',\r\n+        marginTop: '2rem'\r\n+      }}>\r\n+        <p>¬© {new Date().getFullYear()} UrbanFlow - Created by Nick</p>\r\n+      </footer>\r\n+    </div>\r\n+  );\r\n+};\n\\ No newline at end of file\n"
                },
                {
                    "date": 1754465516110,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -857,2119 +857,5 @@\n         <p>¬© {new Date().getFullYear()} UrbanFlow - Created by Nick</p>\r\n       </footer>\r\n     </div>\r\n   );\r\n-};\n-import { useState, useEffect, useRef } from 'react';\r\n-import { useNavigate } from 'react-router-dom';\r\n-\r\n-// UrbanBuddy AI Assistant Component (unchanged)\r\n-const UrbanBuddy = ({ darkMode, onChatOpen }) => {\r\n-  const [position, setPosition] = useState({ x: 20, y: 50 });\r\n-  const [expression, setExpression] = useState('üòä');\r\n-  const [direction, setDirection] = useState(1);\r\n-  const [costume, setCostume] = useState(null);\r\n-  const [isActive, setIsActive] = useState(false);\r\n-  const botRef = useRef(null);\r\n-  const animationRef = useRef(null);\r\n-  const lastInteractionTime = useRef(Date.now());\r\n-\r\n-  // Seasonal costumes\r\n-  useEffect(() => {\r\n-    const today = new Date();\r\n-    const month = today.getMonth() + 1;\r\n-    \r\n-    if (month === 12) setCostume('üéÑ');\r\n-    else if (month === 10) setCostume('üéÉ');\r\n-    else if (month === 2) setCostume('üíù');\r\n-    else if (month === 4) setCostume('üå∏');\r\n-    else setCostume(null);\r\n-  }, []);\r\n-\r\n-  // Movement logic (unchanged)\r\n-  useEffect(() => {\r\n-    const moveInterval = setInterval(() => {\r\n-      setPosition(prev => {\r\n-        const now = Date.now();\r\n-        const timeSinceLastInteraction = now - lastInteractionTime.current;\r\n-        const speedMultiplier = timeSinceLastInteraction < 5000 ? 2 : 1;\r\n-        \r\n-        let newX = prev.x + (3 * direction * speedMultiplier);\r\n-        let newY = prev.y + (Math.random() * 6 - 3);\r\n-        \r\n-        if (newX > window.innerWidth - 80) {\r\n-          setDirection(-1);\r\n-          triggerAnimation('spin');\r\n-        }\r\n-        if (newX < 20) {\r\n-          setDirection(1);\r\n-          triggerAnimation('spin');\r\n-        }\r\n-        if (newY < 20) newY = 20;\r\n-        if (newY > window.innerHeight - 100) newY = window.innerHeight - 100;\r\n-        \r\n-        return { x: newX, y: newY };\r\n-      });\r\n-    }, 100);\r\n-\r\n-    return () => clearInterval(moveInterval);\r\n-  }, [direction]);\r\n-\r\n-  // Expressions (unchanged)\r\n-  useEffect(() => {\r\n-    const expressions = ['üòä', 'ü§î', 'üòÆ', 'üòé', 'üëã', 'ü§ñ', '‚ú®', 'üåü'];\r\n-    const expressionInterval = setInterval(() => {\r\n-      if (!isActive) {\r\n-        setExpression(expressions[Math.floor(Math.random() * expressions.length)]);\r\n-        if (Math.random() > 0.8) {\r\n-          triggerAnimation(['bounce', 'spin', 'wobble'][Math.floor(Math.random() * 3)]);\r\n-        }\r\n-      }\r\n-    }, 3000);\r\n-    return () => clearInterval(expressionInterval);\r\n-  }, [isActive]);\r\n-\r\n-  const triggerAnimation = (type) => {\r\n-    if (animationRef.current) clearTimeout(animationRef.current);\r\n-    \r\n-    const botElement = botRef.current;\r\n-    if (!botElement) return;\r\n-    \r\n-    botElement.style.animation = 'none';\r\n-    void botElement.offsetWidth;\r\n-    \r\n-    switch(type) {\r\n-      case 'spin': botElement.style.animation = 'spin 1s ease'; break;\r\n-      case 'bounce': botElement.style.animation = 'bounce 0.5s ease'; break;\r\n-      case 'wobble': botElement.style.animation = 'wobble 0.8s ease'; break;\r\n-      default: botElement.style.animation = '';\r\n-    }\r\n-    \r\n-    animationRef.current = setTimeout(() => {\r\n-      if (botElement) botElement.style.animation = '';\r\n-    }, 1000);\r\n-  };\r\n-\r\n-  const handleClick = () => {\r\n-    lastInteractionTime.current = Date.now();\r\n-    setIsActive(true);\r\n-    triggerAnimation('bounce');\r\n-    setExpression('üí°');\r\n-    onChatOpen();\r\n-    setTimeout(() => setIsActive(false), 3000);\r\n-  };\r\n-\r\n-  const animations = `\r\n-    @keyframes spin {\r\n-      0% { transform: rotate(0deg) scaleX(${direction}); }\r\n-      100% { transform: rotate(360deg) scaleX(${direction}); }\r\n-    }\r\n-    @keyframes bounce {\r\n-      0%, 100% { transform: translateY(0) scaleX(${direction}); }\r\n-      50% { transform: translateY(-20px) scaleX(${direction}); }\r\n-    }\r\n-    @keyframes wobble {\r\n-      0%, 100% { transform: rotate(0deg) scaleX(${direction}); }\r\n-      25% { transform: rotate(5deg) scaleX(${direction}); }\r\n-      75% { transform: rotate(-5deg) scaleX(${direction}); }\r\n-    }\r\n-    @keyframes float {\r\n-      0% { transform: translateY(0px) scaleX(${direction}); }\r\n-      50% { transform: translateY(-10px) scaleX(${direction}); }\r\n-      100% { transform: translateY(0px) scaleX(${direction}); }\r\n-    }\r\n-  `;\r\n-\r\n-  return (\r\n-    <>\r\n-      <style>{animations}</style>\r\n-      <div \r\n-        ref={botRef}\r\n-        onClick={handleClick}\r\n-        style={{\r\n-          position: 'fixed',\r\n-          left: `${position.x}px`,\r\n-          top: `${position.y}px`,\r\n-          fontSize: '2.5rem',\r\n-          cursor: 'pointer',\r\n-          transition: 'all 0.3s ease',\r\n-          transform: `scaleX(${direction})`,\r\n-          zIndex: 100,\r\n-          filter: darkMode \r\n-            ? 'drop-shadow(0 0 8px rgba(255,255,255,0.7))' \r\n-            : 'drop-shadow(0 0 8px rgba(0,0,0,0.3))',\r\n-          userSelect: 'none',\r\n-          animation: 'float 4s ease-in-out infinite'\r\n-        }}\r\n-      >\r\n-        <div style={{ \r\n-          position: 'relative',\r\n-          display: 'flex',\r\n-          flexDirection: 'column',\r\n-          alignItems: 'center'\r\n-        }}>\r\n-          <div style={{\r\n-            position: 'relative',\r\n-            width: '60px',\r\n-            height: '60px',\r\n-            backgroundColor: darkMode ? '#4a5568' : '#3b82f6',\r\n-            borderRadius: '50%',\r\n-            display: 'flex',\r\n-            justifyContent: 'center',\r\n-            alignItems: 'center',\r\n-            color: 'white'\r\n-          }}>\r\n-            <span style={{ fontSize: '1.8rem' }}>{expression}</span>\r\n-            {costume && (\r\n-              <span style={{\r\n-                position: 'absolute',\r\n-                top: '-15px',\r\n-                right: '-10px',\r\n-                fontSize: '1.5rem',\r\n-                transform: 'rotate(15deg)'\r\n-              }}>\r\n-                {costume}\r\n-              </span>\r\n-            )}\r\n-          </div>\r\n-        </div>\r\n-      </div>\r\n-    </>\r\n-  );\r\n-};\r\n-\r\n-// Updated Chat Modal using Hugging Face API\r\n-const ChatModal = ({ darkMode, onClose }) => {\r\n-  const [messages, setMessages] = useState([\r\n-    { text: \"Hello! I'm UrbanBuddy, your AI assistant for urban living. How can I help you today?\", sender: 'bot' }\r\n-  ]);\r\n-  const [inputValue, setInputValue] = useState('');\r\n-  const [isTyping, setIsTyping] = useState(false);\r\n-  const chatEndRef = useRef(null);\r\n-\r\n-  // Auto-scroll to bottom\r\n-  useEffect(() => {\r\n-    chatEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n-  }, [messages]);\r\n-\r\n-  // Generate response using Hugging Face API\r\n-  const generateResponse = async (userMessage) => {\r\n-    setIsTyping(true);\r\n-    \r\n-    try {\r\n-      // Using Hugging Face's free inference API (GPT-2 model)\r\n-      const response = await fetch(\r\n-        'https://api-inference.huggingface.co/models/gpt2',\r\n-        {\r\n-          method: \"POST\",\r\n-          headers: { \"Content-Type\": \"application/json\" },\r\n-          body: JSON.stringify({ \r\n-            inputs: `You are UrbanBuddy, a friendly AI assistant for urban living. \r\n-            Provide helpful, concise answers about city life, transportation, \r\n-            and urban services. Keep responses under 2 sentences.\r\n-            \r\n-            User: ${userMessage}\r\n-            Assistant:`\r\n-          }),\r\n-        }\r\n-      );\r\n-\r\n-      if (!response.ok) throw new Error(\"API request failed\");\r\n-      \r\n-      const data = await response.json();\r\n-      const aiResponse = data[0]?.generated_text?.split('Assistant:')[1]?.trim() || \r\n-        \"I'm having trouble responding. Could you ask something else?\";\r\n-      \r\n-      setMessages(prev => [...prev, { text: aiResponse, sender: 'bot' }]);\r\n-    } catch (error) {\r\n-      console.error(\"API error:\", error);\r\n-      const fallbacks = [\r\n-        \"I'm currently busy helping others. Try again in a moment!\",\r\n-        \"Let me think differently about that... Can you rephrase?\",\r\n-        \"I specialize in urban living tips. Ask me about city services!\",\r\n-      ];\r\n-      setMessages(prev => [...prev, { \r\n-        text: fallbacks[Math.floor(Math.random() * fallbacks.length)], \r\n-        sender: 'bot' \r\n-      }]);\r\n-    } finally {\r\n-      setIsTyping(false);\r\n-    }\r\n-  };\r\n-\r\n-  const handleSendMessage = async (e) => {\r\n-    e.preventDefault();\r\n-    if (inputValue.trim() && !isTyping) {\r\n-      const userMessage = inputValue.trim();\r\n-      setMessages(prev => [...prev, { text: userMessage, sender: 'user' }]);\r\n-      setInputValue('');\r\n-      await generateResponse(userMessage);\r\n-    }\r\n-  };\r\n-\r\n-  return (\r\n-    <div style={{\r\n-      position: 'fixed',\r\n-      bottom: '100px',\r\n-      right: '30px',\r\n-      width: '350px',\r\n-      maxWidth: '90%',\r\n-      backgroundColor: darkMode ? '#2d3748' : 'white',\r\n-      borderRadius: '16px',\r\n-      boxShadow: '0 10px 25px rgba(0, 0, 0, 0.2)',\r\n-      border: darkMode ? '1px solid #4a5568' : '1px solid #e2e8f0',\r\n-      zIndex: 1000,\r\n-      overflow: 'hidden',\r\n-      display: 'flex',\r\n-      flexDirection: 'column',\r\n-      maxHeight: '60vh'\r\n-    }}>\r\n-      {/* Chat header */}\r\n-      <div style={{\r\n-        padding: '1rem',\r\n-        backgroundColor: darkMode ? '#4a5568' : '#3b82f6',\r\n-        color: 'white',\r\n-        display: 'flex',\r\n-        justifyContent: 'space-between',\r\n-        alignItems: 'center'\r\n-      }}>\r\n-        <div style={{ display: 'flex', alignItems: 'center', gap: '0.5rem' }}>\r\n-          <span style={{ fontSize: '1.5rem' }}>ü§ñ</span>\r\n-          <h3 style={{ margin: 0 }}>UrbanBuddy AI</h3>\r\n-          {isTyping && <span style={{ fontSize: '0.8rem', marginLeft: '0.5rem', opacity: 0.8 }}>typing...</span>}\r\n-        </div>\r\n-        <button \r\n-          onClick={onClose}\r\n-          style={{\r\n-            background: 'none',\r\n-            border: 'none',\r\n-            color: 'white',\r\n-            fontSize: '1.2rem',\r\n-            cursor: 'pointer'\r\n-          }}\r\n-        >\r\n-          √ó\r\n-        </button>\r\n-      </div>\r\n-      \r\n-      {/* Chat messages */}\r\n-      <div style={{\r\n-        flex: 1,\r\n-        padding: '1rem',\r\n-        overflowY: 'auto',\r\n-        display: 'flex',\r\n-        flexDirection: 'column',\r\n-        gap: '0.8rem'\r\n-      }}>\r\n-        {messages.map((msg, index) => (\r\n-          <div \r\n-            key={index}\r\n-            style={{\r\n-              alignSelf: msg.sender === 'user' ? 'flex-end' : 'flex-start',\r\n-              maxWidth: '80%',\r\n-              padding: '0.6rem 1rem',\r\n-              borderRadius: msg.sender === 'user' ? '18px 18px 0 18px' : '18px 18px 18px 0',\r\n-              backgroundColor: msg.sender === 'user'\r\n-                ? (darkMode ? '#4a5568' : '#3b82f6')\r\n-                : (darkMode ? '#4a5568' : '#e2e8f0'),\r\n-              color: msg.sender === 'user' ? 'white' : (darkMode ? 'white' : '#1e293b'),\r\n-            }}\r\n-          >\r\n-            {msg.text}\r\n-          </div>\r\n-        ))}\r\n-        <div ref={chatEndRef} />\r\n-      </div>\r\n-      \r\n-      {/* Chat input */}\r\n-      <form onSubmit={handleSendMessage} style={{\r\n-        padding: '0.8rem',\r\n-        borderTop: darkMode ? '1px solid #4a5568' : '1px solid #e2e8f0',\r\n-        display: 'flex',\r\n-        gap: '0.5rem'\r\n-      }}>\r\n-        <input\r\n-          type=\"text\"\r\n-          value={inputValue}\r\n-          onChange={(e) => setInputValue(e.target.value)}\r\n-          placeholder=\"Ask about urban living...\"\r\n-          disabled={isTyping}\r\n-          style={{\r\n-            flex: 1,\r\n-            padding: '0.6rem 1rem',\r\n-            borderRadius: '20px',\r\n-            border: darkMode ? '1px solid #4a5568' : '1px solid #e2e8f0',\r\n-            backgroundColor: darkMode ? '#2d3748' : 'white',\r\n-            color: darkMode ? 'white' : '#1e293b',\r\n-            outline: 'none',\r\n-          }}\r\n-        />\r\n-        <button \r\n-          type=\"submit\"\r\n-          disabled={isTyping}\r\n-          style={{\r\n-            background: isTyping \r\n-              ? (darkMode ? '#4a5568' : '#e2e8f0')\r\n-              : (darkMode ? '#4a5568' : '#3b82f6'),\r\n-            color: 'white',\r\n-            border: 'none',\r\n-            borderRadius: '50%',\r\n-            width: '40px',\r\n-            height: '40px',\r\n-            display: 'flex',\r\n-            alignItems: 'center',\r\n-            justifyContent: 'center',\r\n-            cursor: isTyping ? 'not-allowed' : 'pointer'\r\n-          }}\r\n-        >\r\n-          {isTyping ? '...' : '‚û§'}\r\n-        </button>\r\n-      </form>\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-// Main Home Component (unchanged)\r\n-export default function Home() {\r\n-  const navigate = useNavigate();\r\n-  const [searchQuery, setSearchQuery] = useState('');\r\n-  const [darkMode, setDarkMode] = useState(false);\r\n-  const [selectedService, setSelectedService] = useState(null);\r\n-  const [orderCount, setOrderCount] = useState(0);\r\n-  const [achievements, setAchievements] = useState([]);\r\n-  const [showChat, setShowChat] = useState(false);\r\n-\r\n-  const services = [\r\n-    { \r\n-      name: 'Transport', \r\n-      path: '/transport', \r\n-      icon: 'üöå', \r\n-      desc: 'Plan your multi-modal journey across the city',\r\n-      color: '#3b82f6',\r\n-      details: 'Find the best routes combining metro, buses, and bikes. Real-time updates and ticket purchasing available.'\r\n-    },\r\n-    { \r\n-      name: 'Food Delivery', \r\n-      path: '/food', \r\n-      icon: 'üçî', \r\n-      desc: 'Discover local restaurants and cafes',\r\n-      color: '#ef4444',\r\n-      details: 'Order from hundreds of restaurants with special discounts. Track your delivery in real-time.'\r\n-    },\r\n-    { \r\n-      name: 'Groceries', \r\n-      path: '/food', \r\n-      icon: 'üõí', \r\n-      desc: 'Get groceries delivered in minutes',\r\n-      color: '#10b981',\r\n-      details: 'Same-day delivery from local supermarkets. Schedule recurring orders for essentials.'\r\n-    },\r\n-    { \r\n-      name: 'Services', \r\n-      path: '/food', \r\n-      icon: 'üõ†Ô∏è', \r\n-      desc: 'Find urban services near you',\r\n-      color: '#8b5cf6',\r\n-      details: 'Book home services, repairs, and professional help with verified providers.'\r\n-    }\r\n-  ];\r\n-\r\n-  // Check for achievements\r\n-  useEffect(() => {\r\n-    if (orderCount === 1) addAchievement('First Order!', 'üéâ');\r\n-    else if (orderCount === 5) addAchievement('Regular Customer!', 'üèÜ');\r\n-    else if (orderCount === 10) addAchievement('Super User!', 'üåü');\r\n-  }, [orderCount]);\r\n-\r\n-  const addAchievement = (title, icon) => {\r\n-    if (!achievements.some(a => a.title === title)) {\r\n-      const newAchievement = { title, icon, id: Date.now() };\r\n-      setAchievements(prev => [...prev, newAchievement]);\r\n-      setTimeout(() => setAchievements(prev => prev.filter(a => a.id !== newAchievement.id)), 3000);\r\n-    }\r\n-  };\r\n-\r\n-  const handleSearch = (e) => {\r\n-    e.preventDefault();\r\n-    if (searchQuery.trim()) navigate(`/food?search=${encodeURIComponent(searchQuery)}`);\r\n-  };\r\n-\r\n-  const toggleDarkMode = () => setDarkMode(!darkMode);\r\n-  const openServicePopup = (service) => {\r\n-    setSelectedService(service);\r\n-    setOrderCount(prev => prev + 1);\r\n-  };\r\n-  const closePopup = () => setSelectedService(null);\r\n-  const toggleChat = () => setShowChat(!showChat);\r\n-\r\n-  return (\r\n-    <div style={{\r\n-      backgroundColor: darkMode ? '#1a202c' : '#f8fafc',\r\n-      minHeight: '100vh',\r\n-      paddingBottom: '3rem',\r\n-      color: darkMode ? '#e2e8f0' : '#1e293b',\r\n-      transition: 'all 0.3s ease',\r\n-      position: 'relative'\r\n-    }}>\r\n-      {/* Theme Toggle */}\r\n-      <button \r\n-        onClick={toggleDarkMode} \r\n-        style={{\r\n-          position: 'fixed',\r\n-          top: '1.5rem',\r\n-          right: '1.5rem',\r\n-          background: darkMode ? '#4a5568' : '#e2e8f0',\r\n-          border: 'none',\r\n-          borderRadius: '50%',\r\n-          width: '40px',\r\n-          height: '40px',\r\n-          display: 'flex',\r\n-          alignItems: 'center',\r\n-          justifyContent: 'center',\r\n-          cursor: 'pointer',\r\n-          transition: 'all 0.3s ease',\r\n-          boxShadow: '0 2px 5px rgba(0, 0, 0, 0.2)',\r\n-          zIndex: 100\r\n-        }}\r\n-      >\r\n-        {darkMode ? '‚òÄÔ∏è' : 'üåô'}\r\n-      </button>\r\n-      \r\n-      {/* Hero Section */}\r\n-      <section style={{\r\n-        background: darkMode \r\n-          ? 'linear-gradient(135deg, #2d3748 0%, #1a202c 100%)' \r\n-          : 'linear-gradient(135deg, #6b46c1 0%, #3b82f6 100%)',\r\n-        color: 'white',\r\n-        padding: '4rem 1rem',\r\n-        textAlign: 'center',\r\n-        borderRadius: '0 0 20px 20px',\r\n-        boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',\r\n-        position: 'relative',\r\n-        overflow: 'hidden',\r\n-        height: '300px'\r\n-      }}>\r\n-        <div style={{\r\n-          maxWidth: '800px',\r\n-          margin: '0 auto',\r\n-          position: 'relative',\r\n-          zIndex: 2\r\n-        }}>\r\n-          <h1 style={{ fontSize: '3.5rem', fontWeight: '800', marginBottom: '0.5rem' }}>UrbanFlow</h1>\r\n-          <p style={{ fontSize: '1.25rem', marginBottom: '2rem', opacity: 0.9 }}>Your seamless urban living companion</p>\r\n-          \r\n-          <form onSubmit={handleSearch} style={{\r\n-            display: 'flex',\r\n-            maxWidth: '600px',\r\n-            margin: '0 auto',\r\n-            borderRadius: '50px',\r\n-            overflow: 'hidden',\r\n-            boxShadow: '0 4px 10px rgba(0, 0, 0, 0.2)',\r\n-          }}>\r\n-            <input\r\n-              type=\"text\"\r\n-              placeholder=\"Search for restaurants, services...\"\r\n-              value={searchQuery}\r\n-              onChange={(e) => setSearchQuery(e.target.value)}\r\n-              style={{\r\n-                flex: 1,\r\n-                padding: '1rem 1.5rem',\r\n-                border: 'none',\r\n-                fontSize: '1rem',\r\n-                outline: 'none',\r\n-                backgroundColor: darkMode ? '#2d3748' : 'white',\r\n-                color: darkMode ? '#e2e8f0' : '#1e293b',\r\n-              }}\r\n-            />\r\n-            <button type=\"submit\" style={{\r\n-              backgroundColor: darkMode ? '#4a5568' : '#1e40af',\r\n-              color: 'white',\r\n-              border: 'none',\r\n-              padding: '0 1.5rem',\r\n-              cursor: 'pointer',\r\n-              fontSize: '1.25rem',\r\n-            }}>\r\n-              <span>üîç</span>\r\n-            </button>\r\n-          </form>\r\n-        </div>\r\n-        <UrbanBuddy darkMode={darkMode} onChatOpen={toggleChat} />\r\n-      </section>\r\n-\r\n-      {/* Services Grid */}\r\n-      <section style={{ padding: '2rem 1rem', maxWidth: '1200px', margin: '0 auto' }}>\r\n-        <h2 style={{ fontSize: '2rem', fontWeight: '700', marginBottom: '1.5rem', textAlign: 'center' }}>\r\n-          What do you need today?\r\n-        </h2>\r\n-        <div style={{\r\n-          display: 'grid',\r\n-          gridTemplateColumns: 'repeat(auto-fit, minmax(250px, 1fr))',\r\n-          gap: '1.5rem',\r\n-          marginTop: '1rem',\r\n-        }}>\r\n-          {services.map((service) => (\r\n-            <div \r\n-              key={service.name} \r\n-              onClick={() => openServicePopup(service)}\r\n-              style={{ \r\n-                padding: '2rem 1.5rem',\r\n-                borderRadius: '16px',\r\n-                border: `2px solid ${service.color}`,\r\n-                textAlign: 'center',\r\n-                cursor: 'pointer',\r\n-                transition: 'transform 0.3s, box-shadow 0.3s',\r\n-                backgroundColor: darkMode ? `${service.color}20` : `${service.color}10`,\r\n-                ':hover': {\r\n-                  transform: 'translateY(-5px)',\r\n-                  boxShadow: '0 10px 20px rgba(0, 0, 0, 0.1)',\r\n-                }\r\n-              }}\r\n-            >\r\n-              <div style={{ fontSize: '3rem', marginBottom: '1rem', animation: 'float 3s ease-in-out infinite' }}>\r\n-                {service.icon}\r\n-              </div>\r\n-              <h3 style={{fontSize: '1.5rem', fontWeight: '600', marginBottom: '0.5rem'}}>{service.name}</h3>\r\n-              <p style={{color: darkMode ? '#a0aec0' : '#64748b'}}>{service.desc}</p>\r\n-            </div>\r\n-          ))}\r\n-        </div>\r\n-      </section>\r\n-\r\n-      {/* Quick Access Buttons */}\r\n-      <section style={{ padding: '2rem 1rem', maxWidth: '1200px', margin: '0 auto' }}>\r\n-        <h2 style={{ fontSize: '2rem', fontWeight: '700', marginBottom: '1.5rem', textAlign: 'center' }}>\r\n-          Quick Access\r\n-        </h2>\r\n-        <div style={{ display: 'flex', justifyContent: 'center', gap: '1rem', flexWrap: 'wrap' }}>\r\n-          <button \r\n-            onClick={() => navigate('/transport?from=home&to=downtown')}\r\n-            style={{\r\n-              padding: '0.75rem 1.5rem',\r\n-              borderRadius: '50px',\r\n-              border: 'none',\r\n-              backgroundColor: darkMode ? '#2d3748' : '#e2e8f0',\r\n-              color: darkMode ? '#e2e8f0' : '#1e293b',\r\n-              fontWeight: '600',\r\n-              cursor: 'pointer',\r\n-              transition: 'all 0.2s',\r\n-              display: 'flex',\r\n-              alignItems: 'center',\r\n-              gap: '0.5rem',\r\n-              fontSize: '1rem'\r\n-            }}\r\n-          >\r\n-            üöï To Downtown\r\n-          </button>\r\n-          <button \r\n-            onClick={() => navigate('/food?category=fastfood')}\r\n-            style={{\r\n-              padding: '0.75rem 1.5rem',\r\n-              borderRadius: '50px',\r\n-              border: 'none',\r\n-              backgroundColor: darkMode ? '#2d3748' : '#e2e8f0',\r\n-              color: darkMode ? '#e2e8f0' : '#1e293b',\r\n-              fontWeight: '600',\r\n-              cursor: 'pointer',\r\n-              transition: 'all 0.2s',\r\n-              display: 'flex',\r\n-              alignItems: 'center',\r\n-              gap: '0.5rem',\r\n-              fontSize: '1rem'\r\n-            }}\r\n-          >\r\n-            üçü Fast Food\r\n-          </button>\r\n-          <button \r\n-            onClick={() => navigate('/food?category=coffee')}\r\n-            style={{\r\n-              padding: '0.75rem 1.5rem',\r\n-              borderRadius: '50px',\r\n-              border: 'none',\r\n-              backgroundColor: darkMode ? '#2d3748' : '#e2e8f0',\r\n-              color: darkMode ? '#e2e8f0' : '#1e293b',\r\n-              fontWeight: '600',\r\n-              cursor: 'pointer',\r\n-              transition: 'all 0.2s',\r\n-              display: 'flex',\r\n-              alignItems: 'center',\r\n-              gap: '0.5rem',\r\n-              fontSize: '1rem'\r\n-            }}\r\n-          >\r\n-            ‚òï Coffee Shops\r\n-          </button>\r\n-        </div>\r\n-      </section>\r\n-\r\n-      {/* Service Popup */}\r\n-      {selectedService && (\r\n-        <div style={{\r\n-          position: 'fixed',\r\n-          top: 0,\r\n-          left: 0,\r\n-          right: 0,\r\n-          bottom: 0,\r\n-          backgroundColor: 'rgba(0, 0, 0, 0.7)',\r\n-          display: 'flex',\r\n-          justifyContent: 'center',\r\n-          alignItems: 'center',\r\n-          zIndex: 1000,\r\n-        }} onClick={closePopup}>\r\n-          <div style={{\r\n-            backgroundColor: darkMode ? '#2d3748' : 'white',\r\n-            borderRadius: '16px',\r\n-            padding: '2rem',\r\n-            maxWidth: '500px',\r\n-            width: '90%',\r\n-            boxShadow: '0 10px 25px rgba(0, 0, 0, 0.2)',\r\n-            position: 'relative',\r\n-            border: darkMode ? '1px solid #4a5568' : '1px solid #e2e8f0',\r\n-          }} onClick={(e) => e.stopPropagation()}>\r\n-            <button style={{\r\n-              position: 'absolute',\r\n-              top: '1rem',\r\n-              right: '1rem',\r\n-              background: 'none',\r\n-              border: 'none',\r\n-              fontSize: '1.5rem',\r\n-              cursor: 'pointer',\r\n-              color: darkMode ? '#a0aec0' : '#64748b',\r\n-            }} onClick={closePopup}>√ó</button>\r\n-            <div style={{ display: 'flex', alignItems: 'center', gap: '1rem', marginBottom: '1.5rem' }}>\r\n-              <span style={{ fontSize: '2.5rem', animation: 'float 3s ease-in-out infinite' }}>{selectedService.icon}</span>\r\n-              <h3 style={{fontSize: '1.8rem', fontWeight: '700', marginBottom: '1rem'}}>{selectedService.name}</h3>\r\n-            </div>\r\n-            <p style={{color: darkMode ? '#a0aec0' : '#64748b', fontSize: '1.1rem', lineHeight: '1.6', marginBottom: '2rem'}}>\r\n-              {selectedService.details}\r\n-            </p>\r\n-            <button \r\n-              style={{ \r\n-                padding: '0.75rem 1.5rem',\r\n-                borderRadius: '8px',\r\n-                border: 'none',\r\n-                backgroundColor: selectedService.color,\r\n-                color: 'white',\r\n-                fontWeight: '600',\r\n-                cursor: 'pointer',\r\n-                transition: 'all 0.2s',\r\n-                fontSize: '1rem'\r\n-              }}\r\n-              onClick={() => {\r\n-                navigate(selectedService.path);\r\n-                closePopup();\r\n-              }}\r\n-            >\r\n-              Explore {selectedService.name}\r\n-            </button>\r\n-          </div>\r\n-        </div>\r\n-      )}\r\n-\r\n-      {/* Achievements */}\r\n-      {achievements.map(achievement => (\r\n-        <div key={achievement.id} style={{\r\n-          position: 'fixed',\r\n-          bottom: '20px',\r\n-          right: '20px',\r\n-          background: darkMode ? '#2d3748' : 'white',\r\n-          color: darkMode ? 'white' : '#1e293b',\r\n-          padding: '1rem',\r\n-          borderRadius: '12px',\r\n-          boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',\r\n-          display: 'flex',\r\n-          alignItems: 'center',\r\n-          gap: '0.5rem',\r\n-          zIndex: 1000,\r\n-          animation: 'slideIn 0.5s forwards, fadeOut 0.5s forwards 2.5s'\r\n-        }}>\r\n-          <span style={{fontSize: '1.5rem'}}>{achievement.icon}</span>\r\n-          <span>{achievement.title}</span>\r\n-        </div>\r\n-      ))}\r\n-\r\n-      {/* Chat Modal */}\r\n-      {showChat && <ChatModal darkMode={darkMode} onClose={toggleChat} />}\r\n-\r\n-      {/* Footer */}\r\n-      <footer style={{\r\n-        textAlign: 'center',\r\n-        padding: '2rem 1rem',\r\n-        color: darkMode ? '#a0aec0' : '#64748b',\r\n-        fontSize: '0.9rem',\r\n-        marginTop: '2rem'\r\n-      }}>\r\n-        <p>¬© {new Date().getFullYear()} UrbanFlow - Created by Nick</p>\r\n-      </footer>\r\n-    </div>\r\n-  );\r\n-};\n-import { useState, useEffect, useRef } from 'react';\r\n-import { useNavigate } from 'react-router-dom';\r\n-\r\n-// UrbanBuddy AI Assistant Component (unchanged)\r\n-const UrbanBuddy = ({ darkMode, onChatOpen }) => {\r\n-  const [position, setPosition] = useState({ x: 20, y: 50 });\r\n-  const [expression, setExpression] = useState('üòä');\r\n-  const [direction, setDirection] = useState(1);\r\n-  const [costume, setCostume] = useState(null);\r\n-  const [isActive, setIsActive] = useState(false);\r\n-  const botRef = useRef(null);\r\n-  const animationRef = useRef(null);\r\n-  const lastInteractionTime = useRef(Date.now());\r\n-\r\n-  // Seasonal costumes\r\n-  useEffect(() => {\r\n-    const today = new Date();\r\n-    const month = today.getMonth() + 1;\r\n-    \r\n-    if (month === 12) setCostume('üéÑ');\r\n-    else if (month === 10) setCostume('üéÉ');\r\n-    else if (month === 2) setCostume('üíù');\r\n-    else if (month === 4) setCostume('üå∏');\r\n-    else setCostume(null);\r\n-  }, []);\r\n-\r\n-  // Movement logic (unchanged)\r\n-  useEffect(() => {\r\n-    const moveInterval = setInterval(() => {\r\n-      setPosition(prev => {\r\n-        const now = Date.now();\r\n-        const timeSinceLastInteraction = now - lastInteractionTime.current;\r\n-        const speedMultiplier = timeSinceLastInteraction < 5000 ? 2 : 1;\r\n-        \r\n-        let newX = prev.x + (3 * direction * speedMultiplier);\r\n-        let newY = prev.y + (Math.random() * 6 - 3);\r\n-        \r\n-        if (newX > window.innerWidth - 80) {\r\n-          setDirection(-1);\r\n-          triggerAnimation('spin');\r\n-        }\r\n-        if (newX < 20) {\r\n-          setDirection(1);\r\n-          triggerAnimation('spin');\r\n-        }\r\n-        if (newY < 20) newY = 20;\r\n-        if (newY > window.innerHeight - 100) newY = window.innerHeight - 100;\r\n-        \r\n-        return { x: newX, y: newY };\r\n-      });\r\n-    }, 100);\r\n-\r\n-    return () => clearInterval(moveInterval);\r\n-  }, [direction]);\r\n-\r\n-  // Expressions (unchanged)\r\n-  useEffect(() => {\r\n-    const expressions = ['üòä', 'ü§î', 'üòÆ', 'üòé', 'üëã', 'ü§ñ', '‚ú®', 'üåü'];\r\n-    const expressionInterval = setInterval(() => {\r\n-      if (!isActive) {\r\n-        setExpression(expressions[Math.floor(Math.random() * expressions.length)]);\r\n-        if (Math.random() > 0.8) {\r\n-          triggerAnimation(['bounce', 'spin', 'wobble'][Math.floor(Math.random() * 3)]);\r\n-        }\r\n-      }\r\n-    }, 3000);\r\n-    return () => clearInterval(expressionInterval);\r\n-  }, [isActive]);\r\n-\r\n-  const triggerAnimation = (type) => {\r\n-    if (animationRef.current) clearTimeout(animationRef.current);\r\n-    \r\n-    const botElement = botRef.current;\r\n-    if (!botElement) return;\r\n-    \r\n-    botElement.style.animation = 'none';\r\n-    void botElement.offsetWidth;\r\n-    \r\n-    switch(type) {\r\n-      case 'spin': botElement.style.animation = 'spin 1s ease'; break;\r\n-      case 'bounce': botElement.style.animation = 'bounce 0.5s ease'; break;\r\n-      case 'wobble': botElement.style.animation = 'wobble 0.8s ease'; break;\r\n-      default: botElement.style.animation = '';\r\n-    }\r\n-    \r\n-    animationRef.current = setTimeout(() => {\r\n-      if (botElement) botElement.style.animation = '';\r\n-    }, 1000);\r\n-  };\r\n-\r\n-  const handleClick = () => {\r\n-    lastInteractionTime.current = Date.now();\r\n-    setIsActive(true);\r\n-    triggerAnimation('bounce');\r\n-    setExpression('üí°');\r\n-    onChatOpen();\r\n-    setTimeout(() => setIsActive(false), 3000);\r\n-  };\r\n-\r\n-  const animations = `\r\n-    @keyframes spin {\r\n-      0% { transform: rotate(0deg) scaleX(${direction}); }\r\n-      100% { transform: rotate(360deg) scaleX(${direction}); }\r\n-    }\r\n-    @keyframes bounce {\r\n-      0%, 100% { transform: translateY(0) scaleX(${direction}); }\r\n-      50% { transform: translateY(-20px) scaleX(${direction}); }\r\n-    }\r\n-    @keyframes wobble {\r\n-      0%, 100% { transform: rotate(0deg) scaleX(${direction}); }\r\n-      25% { transform: rotate(5deg) scaleX(${direction}); }\r\n-      75% { transform: rotate(-5deg) scaleX(${direction}); }\r\n-    }\r\n-    @keyframes float {\r\n-      0% { transform: translateY(0px) scaleX(${direction}); }\r\n-      50% { transform: translateY(-10px) scaleX(${direction}); }\r\n-      100% { transform: translateY(0px) scaleX(${direction}); }\r\n-    }\r\n-  `;\r\n-\r\n-  return (\r\n-    <>\r\n-      <style>{animations}</style>\r\n-      <div \r\n-        ref={botRef}\r\n-        onClick={handleClick}\r\n-        style={{\r\n-          position: 'fixed',\r\n-          left: `${position.x}px`,\r\n-          top: `${position.y}px`,\r\n-          fontSize: '2.5rem',\r\n-          cursor: 'pointer',\r\n-          transition: 'all 0.3s ease',\r\n-          transform: `scaleX(${direction})`,\r\n-          zIndex: 100,\r\n-          filter: darkMode \r\n-            ? 'drop-shadow(0 0 8px rgba(255,255,255,0.7))' \r\n-            : 'drop-shadow(0 0 8px rgba(0,0,0,0.3))',\r\n-          userSelect: 'none',\r\n-          animation: 'float 4s ease-in-out infinite'\r\n-        }}\r\n-      >\r\n-        <div style={{ \r\n-          position: 'relative',\r\n-          display: 'flex',\r\n-          flexDirection: 'column',\r\n-          alignItems: 'center'\r\n-        }}>\r\n-          <div style={{\r\n-            position: 'relative',\r\n-            width: '60px',\r\n-            height: '60px',\r\n-            backgroundColor: darkMode ? '#4a5568' : '#3b82f6',\r\n-            borderRadius: '50%',\r\n-            display: 'flex',\r\n-            justifyContent: 'center',\r\n-            alignItems: 'center',\r\n-            color: 'white'\r\n-          }}>\r\n-            <span style={{ fontSize: '1.8rem' }}>{expression}</span>\r\n-            {costume && (\r\n-              <span style={{\r\n-                position: 'absolute',\r\n-                top: '-15px',\r\n-                right: '-10px',\r\n-                fontSize: '1.5rem',\r\n-                transform: 'rotate(15deg)'\r\n-              }}>\r\n-                {costume}\r\n-              </span>\r\n-            )}\r\n-          </div>\r\n-        </div>\r\n-      </div>\r\n-    </>\r\n-  );\r\n-};\r\n-\r\n-// Updated Chat Modal using Hugging Face API\r\n-const ChatModal = ({ darkMode, onClose }) => {\r\n-  const [messages, setMessages] = useState([\r\n-    { text: \"Hello! I'm UrbanBuddy, your AI assistant for urban living. How can I help you today?\", sender: 'bot' }\r\n-  ]);\r\n-  const [inputValue, setInputValue] = useState('');\r\n-  const [isTyping, setIsTyping] = useState(false);\r\n-  const chatEndRef = useRef(null);\r\n-\r\n-  // Auto-scroll to bottom\r\n-  useEffect(() => {\r\n-    chatEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n-  }, [messages]);\r\n-\r\n-  // Generate response using Hugging Face API\r\n-  const generateResponse = async (userMessage) => {\r\n-    setIsTyping(true);\r\n-    \r\n-    try {\r\n-      // Using Hugging Face's free inference API (GPT-2 model)\r\n-      const response = await fetch(\r\n-        'https://api-inference.huggingface.co/models/gpt2',\r\n-        {\r\n-          method: \"POST\",\r\n-          headers: { \"Content-Type\": \"application/json\" },\r\n-          body: JSON.stringify({ \r\n-            inputs: `You are UrbanBuddy, a friendly AI assistant for urban living. \r\n-            Provide helpful, concise answers about city life, transportation, \r\n-            and urban services. Keep responses under 2 sentences.\r\n-            \r\n-            User: ${userMessage}\r\n-            Assistant:`\r\n-          }),\r\n-        }\r\n-      );\r\n-\r\n-      if (!response.ok) throw new Error(\"API request failed\");\r\n-      \r\n-      const data = await response.json();\r\n-      const aiResponse = data[0]?.generated_text?.split('Assistant:')[1]?.trim() || \r\n-        \"I'm having trouble responding. Could you ask something else?\";\r\n-      \r\n-      setMessages(prev => [...prev, { text: aiResponse, sender: 'bot' }]);\r\n-    } catch (error) {\r\n-      console.error(\"API error:\", error);\r\n-      const fallbacks = [\r\n-        \"I'm currently busy helping others. Try again in a moment!\",\r\n-        \"Let me think differently about that... Can you rephrase?\",\r\n-        \"I specialize in urban living tips. Ask me about city services!\",\r\n-      ];\r\n-      setMessages(prev => [...prev, { \r\n-        text: fallbacks[Math.floor(Math.random() * fallbacks.length)], \r\n-        sender: 'bot' \r\n-      }]);\r\n-    } finally {\r\n-      setIsTyping(false);\r\n-    }\r\n-  };\r\n-\r\n-  const handleSendMessage = async (e) => {\r\n-    e.preventDefault();\r\n-    if (inputValue.trim() && !isTyping) {\r\n-      const userMessage = inputValue.trim();\r\n-      setMessages(prev => [...prev, { text: userMessage, sender: 'user' }]);\r\n-      setInputValue('');\r\n-      await generateResponse(userMessage);\r\n-    }\r\n-  };\r\n-\r\n-  return (\r\n-    <div style={{\r\n-      position: 'fixed',\r\n-      bottom: '100px',\r\n-      right: '30px',\r\n-      width: '350px',\r\n-      maxWidth: '90%',\r\n-      backgroundColor: darkMode ? '#2d3748' : 'white',\r\n-      borderRadius: '16px',\r\n-      boxShadow: '0 10px 25px rgba(0, 0, 0, 0.2)',\r\n-      border: darkMode ? '1px solid #4a5568' : '1px solid #e2e8f0',\r\n-      zIndex: 1000,\r\n-      overflow: 'hidden',\r\n-      display: 'flex',\r\n-      flexDirection: 'column',\r\n-      maxHeight: '60vh'\r\n-    }}>\r\n-      {/* Chat header */}\r\n-      <div style={{\r\n-        padding: '1rem',\r\n-        backgroundColor: darkMode ? '#4a5568' : '#3b82f6',\r\n-        color: 'white',\r\n-        display: 'flex',\r\n-        justifyContent: 'space-between',\r\n-        alignItems: 'center'\r\n-      }}>\r\n-        <div style={{ display: 'flex', alignItems: 'center', gap: '0.5rem' }}>\r\n-          <span style={{ fontSize: '1.5rem' }}>ü§ñ</span>\r\n-          <h3 style={{ margin: 0 }}>UrbanBuddy AI</h3>\r\n-          {isTyping && <span style={{ fontSize: '0.8rem', marginLeft: '0.5rem', opacity: 0.8 }}>typing...</span>}\r\n-        </div>\r\n-        <button \r\n-          onClick={onClose}\r\n-          style={{\r\n-            background: 'none',\r\n-            border: 'none',\r\n-            color: 'white',\r\n-            fontSize: '1.2rem',\r\n-            cursor: 'pointer'\r\n-          }}\r\n-        >\r\n-          √ó\r\n-        </button>\r\n-      </div>\r\n-      \r\n-      {/* Chat messages */}\r\n-      <div style={{\r\n-        flex: 1,\r\n-        padding: '1rem',\r\n-        overflowY: 'auto',\r\n-        display: 'flex',\r\n-        flexDirection: 'column',\r\n-        gap: '0.8rem'\r\n-      }}>\r\n-        {messages.map((msg, index) => (\r\n-          <div \r\n-            key={index}\r\n-            style={{\r\n-              alignSelf: msg.sender === 'user' ? 'flex-end' : 'flex-start',\r\n-              maxWidth: '80%',\r\n-              padding: '0.6rem 1rem',\r\n-              borderRadius: msg.sender === 'user' ? '18px 18px 0 18px' : '18px 18px 18px 0',\r\n-              backgroundColor: msg.sender === 'user'\r\n-                ? (darkMode ? '#4a5568' : '#3b82f6')\r\n-                : (darkMode ? '#4a5568' : '#e2e8f0'),\r\n-              color: msg.sender === 'user' ? 'white' : (darkMode ? 'white' : '#1e293b'),\r\n-            }}\r\n-          >\r\n-            {msg.text}\r\n-          </div>\r\n-        ))}\r\n-        <div ref={chatEndRef} />\r\n-      </div>\r\n-      \r\n-      {/* Chat input */}\r\n-      <form onSubmit={handleSendMessage} style={{\r\n-        padding: '0.8rem',\r\n-        borderTop: darkMode ? '1px solid #4a5568' : '1px solid #e2e8f0',\r\n-        display: 'flex',\r\n-        gap: '0.5rem'\r\n-      }}>\r\n-        <input\r\n-          type=\"text\"\r\n-          value={inputValue}\r\n-          onChange={(e) => setInputValue(e.target.value)}\r\n-          placeholder=\"Ask about urban living...\"\r\n-          disabled={isTyping}\r\n-          style={{\r\n-            flex: 1,\r\n-            padding: '0.6rem 1rem',\r\n-            borderRadius: '20px',\r\n-            border: darkMode ? '1px solid #4a5568' : '1px solid #e2e8f0',\r\n-            backgroundColor: darkMode ? '#2d3748' : 'white',\r\n-            color: darkMode ? 'white' : '#1e293b',\r\n-            outline: 'none',\r\n-          }}\r\n-        />\r\n-        <button \r\n-          type=\"submit\"\r\n-          disabled={isTyping}\r\n-          style={{\r\n-            background: isTyping \r\n-              ? (darkMode ? '#4a5568' : '#e2e8f0')\r\n-              : (darkMode ? '#4a5568' : '#3b82f6'),\r\n-            color: 'white',\r\n-            border: 'none',\r\n-            borderRadius: '50%',\r\n-            width: '40px',\r\n-            height: '40px',\r\n-            display: 'flex',\r\n-            alignItems: 'center',\r\n-            justifyContent: 'center',\r\n-            cursor: isTyping ? 'not-allowed' : 'pointer'\r\n-          }}\r\n-        >\r\n-          {isTyping ? '...' : '‚û§'}\r\n-        </button>\r\n-      </form>\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-// Main Home Component (unchanged)\r\n-export default function Home() {\r\n-  const navigate = useNavigate();\r\n-  const [searchQuery, setSearchQuery] = useState('');\r\n-  const [darkMode, setDarkMode] = useState(false);\r\n-  const [selectedService, setSelectedService] = useState(null);\r\n-  const [orderCount, setOrderCount] = useState(0);\r\n-  const [achievements, setAchievements] = useState([]);\r\n-  const [showChat, setShowChat] = useState(false);\r\n-\r\n-  const services = [\r\n-    { \r\n-      name: 'Transport', \r\n-      path: '/transport', \r\n-      icon: 'üöå', \r\n-      desc: 'Plan your multi-modal journey across the city',\r\n-      color: '#3b82f6',\r\n-      details: 'Find the best routes combining metro, buses, and bikes. Real-time updates and ticket purchasing available.'\r\n-    },\r\n-    { \r\n-      name: 'Food Delivery', \r\n-      path: '/food', \r\n-      icon: 'üçî', \r\n-      desc: 'Discover local restaurants and cafes',\r\n-      color: '#ef4444',\r\n-      details: 'Order from hundreds of restaurants with special discounts. Track your delivery in real-time.'\r\n-    },\r\n-    { \r\n-      name: 'Groceries', \r\n-      path: '/food', \r\n-      icon: 'üõí', \r\n-      desc: 'Get groceries delivered in minutes',\r\n-      color: '#10b981',\r\n-      details: 'Same-day delivery from local supermarkets. Schedule recurring orders for essentials.'\r\n-    },\r\n-    { \r\n-      name: 'Services', \r\n-      path: '/food', \r\n-      icon: 'üõ†Ô∏è', \r\n-      desc: 'Find urban services near you',\r\n-      color: '#8b5cf6',\r\n-      details: 'Book home services, repairs, and professional help with verified providers.'\r\n-    }\r\n-  ];\r\n-\r\n-  // Check for achievements\r\n-  useEffect(() => {\r\n-    if (orderCount === 1) addAchievement('First Order!', 'üéâ');\r\n-    else if (orderCount === 5) addAchievement('Regular Customer!', 'üèÜ');\r\n-    else if (orderCount === 10) addAchievement('Super User!', 'üåü');\r\n-  }, [orderCount]);\r\n-\r\n-  const addAchievement = (title, icon) => {\r\n-    if (!achievements.some(a => a.title === title)) {\r\n-      const newAchievement = { title, icon, id: Date.now() };\r\n-      setAchievements(prev => [...prev, newAchievement]);\r\n-      setTimeout(() => setAchievements(prev => prev.filter(a => a.id !== newAchievement.id)), 3000);\r\n-    }\r\n-  };\r\n-\r\n-  const handleSearch = (e) => {\r\n-    e.preventDefault();\r\n-    if (searchQuery.trim()) navigate(`/food?search=${encodeURIComponent(searchQuery)}`);\r\n-  };\r\n-\r\n-  const toggleDarkMode = () => setDarkMode(!darkMode);\r\n-  const openServicePopup = (service) => {\r\n-    setSelectedService(service);\r\n-    setOrderCount(prev => prev + 1);\r\n-  };\r\n-  const closePopup = () => setSelectedService(null);\r\n-  const toggleChat = () => setShowChat(!showChat);\r\n-\r\n-  return (\r\n-    <div style={{\r\n-      backgroundColor: darkMode ? '#1a202c' : '#f8fafc',\r\n-      minHeight: '100vh',\r\n-      paddingBottom: '3rem',\r\n-      color: darkMode ? '#e2e8f0' : '#1e293b',\r\n-      transition: 'all 0.3s ease',\r\n-      position: 'relative'\r\n-    }}>\r\n-      {/* Theme Toggle */}\r\n-      <button \r\n-        onClick={toggleDarkMode} \r\n-        style={{\r\n-          position: 'fixed',\r\n-          top: '1.5rem',\r\n-          right: '1.5rem',\r\n-          background: darkMode ? '#4a5568' : '#e2e8f0',\r\n-          border: 'none',\r\n-          borderRadius: '50%',\r\n-          width: '40px',\r\n-          height: '40px',\r\n-          display: 'flex',\r\n-          alignItems: 'center',\r\n-          justifyContent: 'center',\r\n-          cursor: 'pointer',\r\n-          transition: 'all 0.3s ease',\r\n-          boxShadow: '0 2px 5px rgba(0, 0, 0, 0.2)',\r\n-          zIndex: 100\r\n-        }}\r\n-      >\r\n-        {darkMode ? '‚òÄÔ∏è' : 'üåô'}\r\n-      </button>\r\n-      \r\n-      {/* Hero Section */}\r\n-      <section style={{\r\n-        background: darkMode \r\n-          ? 'linear-gradient(135deg, #2d3748 0%, #1a202c 100%)' \r\n-          : 'linear-gradient(135deg, #6b46c1 0%, #3b82f6 100%)',\r\n-        color: 'white',\r\n-        padding: '4rem 1rem',\r\n-        textAlign: 'center',\r\n-        borderRadius: '0 0 20px 20px',\r\n-        boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',\r\n-        position: 'relative',\r\n-        overflow: 'hidden',\r\n-        height: '300px'\r\n-      }}>\r\n-        <div style={{\r\n-          maxWidth: '800px',\r\n-          margin: '0 auto',\r\n-          position: 'relative',\r\n-          zIndex: 2\r\n-        }}>\r\n-          <h1 style={{ fontSize: '3.5rem', fontWeight: '800', marginBottom: '0.5rem' }}>UrbanFlow</h1>\r\n-          <p style={{ fontSize: '1.25rem', marginBottom: '2rem', opacity: 0.9 }}>Your seamless urban living companion</p>\r\n-          \r\n-          <form onSubmit={handleSearch} style={{\r\n-            display: 'flex',\r\n-            maxWidth: '600px',\r\n-            margin: '0 auto',\r\n-            borderRadius: '50px',\r\n-            overflow: 'hidden',\r\n-            boxShadow: '0 4px 10px rgba(0, 0, 0, 0.2)',\r\n-          }}>\r\n-            <input\r\n-              type=\"text\"\r\n-              placeholder=\"Search for restaurants, services...\"\r\n-              value={searchQuery}\r\n-              onChange={(e) => setSearchQuery(e.target.value)}\r\n-              style={{\r\n-                flex: 1,\r\n-                padding: '1rem 1.5rem',\r\n-                border: 'none',\r\n-                fontSize: '1rem',\r\n-                outline: 'none',\r\n-                backgroundColor: darkMode ? '#2d3748' : 'white',\r\n-                color: darkMode ? '#e2e8f0' : '#1e293b',\r\n-              }}\r\n-            />\r\n-            <button type=\"submit\" style={{\r\n-              backgroundColor: darkMode ? '#4a5568' : '#1e40af',\r\n-              color: 'white',\r\n-              border: 'none',\r\n-              padding: '0 1.5rem',\r\n-              cursor: 'pointer',\r\n-              fontSize: '1.25rem',\r\n-            }}>\r\n-              <span>üîç</span>\r\n-            </button>\r\n-          </form>\r\n-        </div>\r\n-        <UrbanBuddy darkMode={darkMode} onChatOpen={toggleChat} />\r\n-      </section>\r\n-\r\n-      {/* Services Grid */}\r\n-      <section style={{ padding: '2rem 1rem', maxWidth: '1200px', margin: '0 auto' }}>\r\n-        <h2 style={{ fontSize: '2rem', fontWeight: '700', marginBottom: '1.5rem', textAlign: 'center' }}>\r\n-          What do you need today?\r\n-        </h2>\r\n-        <div style={{\r\n-          display: 'grid',\r\n-          gridTemplateColumns: 'repeat(auto-fit, minmax(250px, 1fr))',\r\n-          gap: '1.5rem',\r\n-          marginTop: '1rem',\r\n-        }}>\r\n-          {services.map((service) => (\r\n-            <div \r\n-              key={service.name} \r\n-              onClick={() => openServicePopup(service)}\r\n-              style={{ \r\n-                padding: '2rem 1.5rem',\r\n-                borderRadius: '16px',\r\n-                border: `2px solid ${service.color}`,\r\n-                textAlign: 'center',\r\n-                cursor: 'pointer',\r\n-                transition: 'transform 0.3s, box-shadow 0.3s',\r\n-                backgroundColor: darkMode ? `${service.color}20` : `${service.color}10`,\r\n-                ':hover': {\r\n-                  transform: 'translateY(-5px)',\r\n-                  boxShadow: '0 10px 20px rgba(0, 0, 0, 0.1)',\r\n-                }\r\n-              }}\r\n-            >\r\n-              <div style={{ fontSize: '3rem', marginBottom: '1rem', animation: 'float 3s ease-in-out infinite' }}>\r\n-                {service.icon}\r\n-              </div>\r\n-              <h3 style={{fontSize: '1.5rem', fontWeight: '600', marginBottom: '0.5rem'}}>{service.name}</h3>\r\n-              <p style={{color: darkMode ? '#a0aec0' : '#64748b'}}>{service.desc}</p>\r\n-            </div>\r\n-          ))}\r\n-        </div>\r\n-      </section>\r\n-\r\n-      {/* Quick Access Buttons */}\r\n-      <section style={{ padding: '2rem 1rem', maxWidth: '1200px', margin: '0 auto' }}>\r\n-        <h2 style={{ fontSize: '2rem', fontWeight: '700', marginBottom: '1.5rem', textAlign: 'center' }}>\r\n-          Quick Access\r\n-        </h2>\r\n-        <div style={{ display: 'flex', justifyContent: 'center', gap: '1rem', flexWrap: 'wrap' }}>\r\n-          <button \r\n-            onClick={() => navigate('/transport?from=home&to=downtown')}\r\n-            style={{\r\n-              padding: '0.75rem 1.5rem',\r\n-              borderRadius: '50px',\r\n-              border: 'none',\r\n-              backgroundColor: darkMode ? '#2d3748' : '#e2e8f0',\r\n-              color: darkMode ? '#e2e8f0' : '#1e293b',\r\n-              fontWeight: '600',\r\n-              cursor: 'pointer',\r\n-              transition: 'all 0.2s',\r\n-              display: 'flex',\r\n-              alignItems: 'center',\r\n-              gap: '0.5rem',\r\n-              fontSize: '1rem'\r\n-            }}\r\n-          >\r\n-            üöï To Downtown\r\n-          </button>\r\n-          <button \r\n-            onClick={() => navigate('/food?category=fastfood')}\r\n-            style={{\r\n-              padding: '0.75rem 1.5rem',\r\n-              borderRadius: '50px',\r\n-              border: 'none',\r\n-              backgroundColor: darkMode ? '#2d3748' : '#e2e8f0',\r\n-              color: darkMode ? '#e2e8f0' : '#1e293b',\r\n-              fontWeight: '600',\r\n-              cursor: 'pointer',\r\n-              transition: 'all 0.2s',\r\n-              display: 'flex',\r\n-              alignItems: 'center',\r\n-              gap: '0.5rem',\r\n-              fontSize: '1rem'\r\n-            }}\r\n-          >\r\n-            üçü Fast Food\r\n-          </button>\r\n-          <button \r\n-            onClick={() => navigate('/food?category=coffee')}\r\n-            style={{\r\n-              padding: '0.75rem 1.5rem',\r\n-              borderRadius: '50px',\r\n-              border: 'none',\r\n-              backgroundColor: darkMode ? '#2d3748' : '#e2e8f0',\r\n-              color: darkMode ? '#e2e8f0' : '#1e293b',\r\n-              fontWeight: '600',\r\n-              cursor: 'pointer',\r\n-              transition: 'all 0.2s',\r\n-              display: 'flex',\r\n-              alignItems: 'center',\r\n-              gap: '0.5rem',\r\n-              fontSize: '1rem'\r\n-            }}\r\n-          >\r\n-            ‚òï Coffee Shops\r\n-          </button>\r\n-        </div>\r\n-      </section>\r\n-\r\n-      {/* Service Popup */}\r\n-      {selectedService && (\r\n-        <div style={{\r\n-          position: 'fixed',\r\n-          top: 0,\r\n-          left: 0,\r\n-          right: 0,\r\n-          bottom: 0,\r\n-          backgroundColor: 'rgba(0, 0, 0, 0.7)',\r\n-          display: 'flex',\r\n-          justifyContent: 'center',\r\n-          alignItems: 'center',\r\n-          zIndex: 1000,\r\n-        }} onClick={closePopup}>\r\n-          <div style={{\r\n-            backgroundColor: darkMode ? '#2d3748' : 'white',\r\n-            borderRadius: '16px',\r\n-            padding: '2rem',\r\n-            maxWidth: '500px',\r\n-            width: '90%',\r\n-            boxShadow: '0 10px 25px rgba(0, 0, 0, 0.2)',\r\n-            position: 'relative',\r\n-            border: darkMode ? '1px solid #4a5568' : '1px solid #e2e8f0',\r\n-          }} onClick={(e) => e.stopPropagation()}>\r\n-            <button style={{\r\n-              position: 'absolute',\r\n-              top: '1rem',\r\n-              right: '1rem',\r\n-              background: 'none',\r\n-              border: 'none',\r\n-              fontSize: '1.5rem',\r\n-              cursor: 'pointer',\r\n-              color: darkMode ? '#a0aec0' : '#64748b',\r\n-            }} onClick={closePopup}>√ó</button>\r\n-            <div style={{ display: 'flex', alignItems: 'center', gap: '1rem', marginBottom: '1.5rem' }}>\r\n-              <span style={{ fontSize: '2.5rem', animation: 'float 3s ease-in-out infinite' }}>{selectedService.icon}</span>\r\n-              <h3 style={{fontSize: '1.8rem', fontWeight: '700', marginBottom: '1rem'}}>{selectedService.name}</h3>\r\n-            </div>\r\n-            <p style={{color: darkMode ? '#a0aec0' : '#64748b', fontSize: '1.1rem', lineHeight: '1.6', marginBottom: '2rem'}}>\r\n-              {selectedService.details}\r\n-            </p>\r\n-            <button \r\n-              style={{ \r\n-                padding: '0.75rem 1.5rem',\r\n-                borderRadius: '8px',\r\n-                border: 'none',\r\n-                backgroundColor: selectedService.color,\r\n-                color: 'white',\r\n-                fontWeight: '600',\r\n-                cursor: 'pointer',\r\n-                transition: 'all 0.2s',\r\n-                fontSize: '1rem'\r\n-              }}\r\n-              onClick={() => {\r\n-                navigate(selectedService.path);\r\n-                closePopup();\r\n-              }}\r\n-            >\r\n-              Explore {selectedService.name}\r\n-            </button>\r\n-          </div>\r\n-        </div>\r\n-      )}\r\n-\r\n-      {/* Achievements */}\r\n-      {achievements.map(achievement => (\r\n-        <div key={achievement.id} style={{\r\n-          position: 'fixed',\r\n-          bottom: '20px',\r\n-          right: '20px',\r\n-          background: darkMode ? '#2d3748' : 'white',\r\n-          color: darkMode ? 'white' : '#1e293b',\r\n-          padding: '1rem',\r\n-          borderRadius: '12px',\r\n-          boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',\r\n-          display: 'flex',\r\n-          alignItems: 'center',\r\n-          gap: '0.5rem',\r\n-          zIndex: 1000,\r\n-          animation: 'slideIn 0.5s forwards, fadeOut 0.5s forwards 2.5s'\r\n-        }}>\r\n-          <span style={{fontSize: '1.5rem'}}>{achievement.icon}</span>\r\n-          <span>{achievement.title}</span>\r\n-        </div>\r\n-      ))}\r\n-\r\n-      {/* Chat Modal */}\r\n-      {showChat && <ChatModal darkMode={darkMode} onClose={toggleChat} />}\r\n-\r\n-      {/* Footer */}\r\n-      <footer style={{\r\n-        textAlign: 'center',\r\n-        padding: '2rem 1rem',\r\n-        color: darkMode ? '#a0aec0' : '#64748b',\r\n-        fontSize: '0.9rem',\r\n-        marginTop: '2rem'\r\n-      }}>\r\n-        <p>¬© {new Date().getFullYear()} UrbanFlow - Created by Nick</p>\r\n-      </footer>\r\n-    </div>\r\n-  );\r\n-};\n-import React, { useState, useEffect, useRef } from 'react';\r\n-import { useNavigate } from 'react-router-dom';\r\n-\r\n-const App = () => {\r\n-  const [isLogin, setIsLogin] = useState(true);\r\n-  const [email, setEmail] = useState('');\r\n-  const [password, setPassword] = useState('');\r\n-  const [showChat, setShowChat] = useState(false);\r\n-  const [darkMode, setDarkMode] = useState(false);\r\n-  const [selectedService, setSelectedService] = useState(null);\r\n-  const navigate = useNavigate();\r\n-\r\n-  const services = [\r\n-    { \r\n-      name: 'Transport', \r\n-      icon: 'üöå', \r\n-      desc: 'Plan your multi-modal journey across the city',\r\n-      color: '#3b82f6',\r\n-      details: 'Find the best routes combining metro, buses, and bikes.'\r\n-    },\r\n-    { \r\n-      name: 'Food Delivery', \r\n-      icon: 'üçî', \r\n-      desc: 'Discover local restaurants and cafes',\r\n-      color: '#ef4444',\r\n-      details: 'Order from hundreds of restaurants with special discounts.'\r\n-    },\r\n-    { \r\n-      name: 'Groceries', \r\n-      icon: 'üõí', \r\n-      desc: 'Get groceries delivered in minutes',\r\n-      color: '#10b981',\r\n-      details: 'Same-day delivery from local supermarkets.'\r\n-    },\r\n-    { \r\n-      name: 'Services', \r\n-      icon: 'üõ†Ô∏è', \r\n-      desc: 'Find urban services near you',\r\n-      color: '#8b5cf6',\r\n-      details: 'Book home services and repairs with verified providers.'\r\n-    }\r\n-  ];\r\n-\r\n-  const handleSubmit = (e) => {\r\n-    e.preventDefault();\r\n-    // For demo, we'll just show the chat and services\r\n-    setShowChat(true);\r\n-  };\r\n-\r\n-  const toggleDarkMode = () => setDarkMode(!darkMode);\r\n-  const openServicePopup = (service) => setSelectedService(service);\r\n-  const closePopup = () => setSelectedService(null);\r\n-\r\n-  return (\r\n-    <div style={{\r\n-      backgroundColor: darkMode ? '#1a202c' : '#f8fafc',\r\n-      minHeight: '100vh',\r\n-      color: darkMode ? '#e2e8f0' : '#1e293b',\r\n-      transition: 'all 0.3s ease',\r\n-      position: 'relative'\r\n-    }}>\r\n-      {/* Theme Toggle */}\r\n-      <button \r\n-        onClick={toggleDarkMode} \r\n-        style={{\r\n-          position: 'fixed',\r\n-          top: '1.5rem',\r\n-          right: '1.5rem',\r\n-          background: darkMode ? '#4a5568' : '#e2e8f0',\r\n-          border: 'none',\r\n-          borderRadius: '50%',\r\n-          width: '40px',\r\n-          height: '40px',\r\n-          display: 'flex',\r\n-          alignItems: 'center',\r\n-          justifyContent: 'center',\r\n-          cursor: 'pointer',\r\n-          zIndex: 100\r\n-        }}\r\n-      >\r\n-        {darkMode ? '‚òÄÔ∏è' : 'üåô'}\r\n-      </button>\r\n-\r\n-      {/* Header */}\r\n-      <header style={{\r\n-        position: 'absolute',\r\n-        top: '0',\r\n-        width: '100%',\r\n-        display: 'flex',\r\n-        justifyContent: 'space-between',\r\n-        padding: '1.5rem 2rem',\r\n-        boxSizing: 'border-box',\r\n-        zIndex: 10\r\n-      }}>\r\n-        <div style={{ \r\n-          fontSize: '1.5rem', \r\n-          fontWeight: 'bold', \r\n-          color: darkMode ? '#e2e8f0' : '#333' \r\n-        }}>\r\n-          USOCIAL\r\n-        </div>\r\n-        <nav style={{ display: 'flex', gap: '1.5rem' }}>\r\n-          <button style={{\r\n-            background: 'none',\r\n-            border: 'none',\r\n-            cursor: 'pointer',\r\n-            color: darkMode ? '#e2e8f0' : '#333',\r\n-            fontWeight: '500'\r\n-          }}>Selected Works</button>\r\n-          <button style={{\r\n-            background: 'none',\r\n-            border: 'none',\r\n-            cursor: 'pointer',\r\n-            color: darkMode ? '#e2e8f0' : '#333',\r\n-            fontWeight: '500'\r\n-          }}>Sign Up</button>\r\n-          <button style={{\r\n-            background: 'none',\r\n-            border: 'none',\r\n-            cursor: 'pointer',\r\n-            color: darkMode ? '#e2e8f0' : '#333',\r\n-            fontWeight: '500'\r\n-          }}>Join Us</button>\r\n-        </nav>\r\n-      </header>\r\n-\r\n-      {/* Main Content */}\r\n-      <main style={{\r\n-        display: 'flex',\r\n-        flexDirection: 'column',\r\n-        alignItems: 'center',\r\n-        justifyContent: 'center',\r\n-        minHeight: '100vh',\r\n-        padding: '2rem',\r\n-        boxSizing: 'border-box',\r\n-        position: 'relative',\r\n-        zIndex: 1\r\n-      }}>\r\n-        {/* Auth Form */}\r\n-        {!showChat ? (\r\n-          <div style={{\r\n-            display: 'flex',\r\n-            flexDirection: 'column',\r\n-            alignItems: 'center',\r\n-            width: '100%',\r\n-            maxWidth: '400px',\r\n-            padding: '2rem',\r\n-            backgroundColor: darkMode ? '#2d3748' : 'white',\r\n-            borderRadius: '12px',\r\n-            boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)'\r\n-          }}>\r\n-            <h1 style={{\r\n-              fontSize: '2rem',\r\n-              fontWeight: 'bold',\r\n-              marginBottom: '0.5rem',\r\n-              color: darkMode ? '#e2e8f0' : '#333',\r\n-              textAlign: 'center'\r\n-            }}>Hi Designer</h1>\r\n-            <p style={{\r\n-              fontSize: '1rem',\r\n-              color: darkMode ? '#a0aec0' : '#666',\r\n-              marginBottom: '2rem',\r\n-              textAlign: 'center'\r\n-            }}>Welcome to USOCIAL</p>\r\n-\r\n-            <form onSubmit={handleSubmit} style={{ width: '100%' }}>\r\n-              <div style={{ marginBottom: '1.5rem' }}>\r\n-                <label htmlFor=\"email\" style={{\r\n-                  display: 'block',\r\n-                  marginBottom: '0.5rem',\r\n-                  fontSize: '0.9rem',\r\n-                  color: darkMode ? '#a0aec0' : '#555'\r\n-                }}>Email</label>\r\n-                <input\r\n-                  type=\"email\"\r\n-                  id=\"email\"\r\n-                  value={email}\r\n-                  onChange={(e) => setEmail(e.target.value)}\r\n-                  required\r\n-                  style={{\r\n-                    width: '100%',\r\n-                    padding: '0.8rem 1rem',\r\n-                    borderRadius: '8px',\r\n-                    border: `1px solid ${darkMode ? '#4a5568' : '#ddd'}`,\r\n-                    backgroundColor: darkMode ? '#2d3748' : 'white',\r\n-                    color: darkMode ? '#e2e8f0' : '#1e293b',\r\n-                    fontSize: '1rem',\r\n-                    boxSizing: 'border-box'\r\n-                  }}\r\n-                />\r\n-              </div>\r\n-\r\n-              <div style={{ marginBottom: '1.5rem' }}>\r\n-                <label htmlFor=\"password\" style={{\r\n-                  display: 'block',\r\n-                  marginBottom: '0.5rem',\r\n-                  fontSize: '0.9rem',\r\n-                  color: darkMode ? '#a0aec0' : '#555'\r\n-                }}>Password</label>\r\n-                <input\r\n-                  type=\"password\"\r\n-                  id=\"password\"\r\n-                  value={password}\r\n-                  onChange={(e) => setPassword(e.target.value)}\r\n-                  required\r\n-                  style={{\r\n-                    width: '100%',\r\n-                    padding: '0.8rem 1rem',\r\n-                    borderRadius: '8px',\r\n-                    border: `1px solid ${darkMode ? '#4a5568' : '#ddd'}`,\r\n-                    backgroundColor: darkMode ? '#2d3748' : 'white',\r\n-                    color: darkMode ? '#e2e8f0' : '#1e293b',\r\n-                    fontSize: '1rem',\r\n-                    boxSizing: 'border-box'\r\n-                  }}\r\n-                />\r\n-              </div>\r\n-\r\n-              <div style={{\r\n-                display: 'flex',\r\n-                justifyContent: 'space-between',\r\n-                alignItems: 'center',\r\n-                marginBottom: '1.5rem'\r\n-              }}>\r\n-                <button type=\"button\" style={{\r\n-                  background: 'none',\r\n-                  border: 'none',\r\n-                  color: darkMode ? '#a0aec0' : '#666',\r\n-                  cursor: 'pointer',\r\n-                  fontSize: '0.9rem',\r\n-                  textDecoration: 'underline'\r\n-                }}>\r\n-                  Forgot password?\r\n-                </button>\r\n-              </div>\r\n-\r\n-              <button type=\"submit\" style={{\r\n-                width: '100%',\r\n-                padding: '0.8rem',\r\n-                backgroundColor: darkMode ? '#4a5568' : '#333',\r\n-                color: 'white',\r\n-                border: 'none',\r\n-                borderRadius: '8px',\r\n-                fontSize: '1rem',\r\n-                fontWeight: '600',\r\n-                cursor: 'pointer',\r\n-                marginBottom: '1rem',\r\n-                transition: 'background-color 0.2s'\r\n-              }}>\r\n-                {isLogin ? 'Login' : 'Sign Up'}\r\n-              </button>\r\n-\r\n-              <button type=\"button\" style={{\r\n-                width: '100%',\r\n-                padding: '0.8rem',\r\n-                backgroundColor: darkMode ? '#2d3748' : '#f8f9fa',\r\n-                color: darkMode ? '#e2e8f0' : '#333',\r\n-                border: `1px solid ${darkMode ? '#4a5568' : '#ddd'}`,\r\n-                borderRadius: '8px',\r\n-                fontSize: '1rem',\r\n-                fontWeight: '600',\r\n-                cursor: 'pointer',\r\n-                display: 'flex',\r\n-                alignItems: 'center',\r\n-                justifyContent: 'center',\r\n-                gap: '0.5rem',\r\n-                marginBottom: '1.5rem'\r\n-              }}>\r\n-                <svg width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n-                  <path d=\"M22.56 12.25C22.56 11.47 22.49 10.72 22.36 10H12V14.255H18.08C17.8 15.63 16.92 16.795 15.68 17.575V20.335H19.28C21.36 18.42 22.56 15.6 22.56 12.25Z\" fill=\"#4285F4\"/>\r\n-                  <path d=\"M12 23C14.96 23 17.46 22.015 19.28 20.335L15.68 17.575C14.71 18.235 13.48 18.625 12 18.625C9.16 18.625 6.72 16.69 5.84 14.09H2.18V16.94C4 20.535 7.7 23 12 23Z\" fill=\"#34A853\"/>\r\n-                  <path d=\"M5.84 14.09C5.62 13.43 5.5 12.725 5.5 12C5.5 11.275 5.62 10.57 5.84 9.91V7.06H2.18C1.43 8.555 1 10.245 1 12C1 13.755 1.43 15.445 2.18 16.94L5.84 14.09Z\" fill=\"#FBBC05\"/>\r\n-                  <path d=\"M12 5.375C13.615 5.375 15.065 5.93 16.205 7.02L19.36 3.865C17.455 2.09 14.955 1 12 1C7.7 1 4 3.465 2.18 7.06L5.84 9.91C6.72 7.31 9.16 5.375 12 5.375Z\" fill=\"#EA4335\"/>\r\n-                </svg>\r\n-                Login with Google\r\n-              </button>\r\n-\r\n-              <p style={{ textAlign: 'center', color: darkMode ? '#a0aec0' : '#666' }}>\r\n-                {isLogin ? \"Don't have an account? \" : \"Already have an account? \"}\r\n-                <button \r\n-                  type=\"button\" \r\n-                  onClick={() => setIsLogin(!isLogin)}\r\n-                  style={{\r\n-                    background: 'none',\r\n-                    border: 'none',\r\n-                    color: darkMode ? '#e2e8f0' : '#333',\r\n-                    cursor: 'pointer',\r\n-                    fontWeight: '600',\r\n-                    textDecoration: 'underline'\r\n-                  }}\r\n-                >\r\n-                  {isLogin ? 'Sign up' : 'Login'}\r\n-                </button>\r\n-              </p>\r\n-            </form>\r\n-          </div>\r\n-        ) : (\r\n-          <div style={{\r\n-            width: '100%',\r\n-            maxWidth: '1200px',\r\n-            padding: '2rem',\r\n-            marginTop: '4rem'\r\n-          }}>\r\n-            <h2 style={{ \r\n-              fontSize: '2rem', \r\n-              fontWeight: '700', \r\n-              marginBottom: '1.5rem', \r\n-              textAlign: 'center',\r\n-              color: darkMode ? '#e2e8f0' : '#1e293b'\r\n-            }}>\r\n-              Our Services\r\n-            </h2>\r\n-            <div style={{\r\n-              display: 'grid',\r\n-              gridTemplateColumns: 'repeat(auto-fit, minmax(250px, 1fr))',\r\n-              gap: '1.5rem',\r\n-              marginTop: '1rem',\r\n-            }}>\r\n-              {services.map((service) => (\r\n-                <div \r\n-                  key={service.name} \r\n-                  onClick={() => openServicePopup(service)}\r\n-                  style={{ \r\n-                    padding: '2rem 1.5rem',\r\n-                    borderRadius: '16px',\r\n-                    border: `2px solid ${service.color}`,\r\n-                    textAlign: 'center',\r\n-                    cursor: 'pointer',\r\n-                    transition: 'transform 0.3s, box-shadow 0.3s',\r\n-                    backgroundColor: darkMode ? `${service.color}20` : `${service.color}10`,\r\n-                    ':hover': {\r\n-                      transform: 'translateY(-5px)',\r\n-                      boxShadow: '0 10px 20px rgba(0, 0, 0, 0.1)',\r\n-                    }\r\n-                  }}\r\n-                >\r\n-                  <div style={{ fontSize: '3rem', marginBottom: '1rem' }}>\r\n-                    {service.icon}\r\n-                  </div>\r\n-                  <h3 style={{fontSize: '1.5rem', fontWeight: '600', marginBottom: '0.5rem'}}>\r\n-                    {service.name}\r\n-                  </h3>\r\n-                  <p style={{color: darkMode ? '#a0aec0' : '#64748b'}}>\r\n-                    {service.desc}\r\n-                  </p>\r\n-                </div>\r\n-              ))}\r\n-            </div>\r\n-          </div>\r\n-        )}\r\n-      </main>\r\n-\r\n-      {/* Footer */}\r\n-      <footer style={{\r\n-        position: 'absolute',\r\n-        bottom: '1rem',\r\n-        left: 0,\r\n-        right: 0,\r\n-        textAlign: 'center',\r\n-        color: darkMode ? '#a0aec0' : '#999',\r\n-        fontSize: '0.9rem'\r\n-      }}>\r\n-        Andrew.us ‚Ä¢ U.K. Illustration\r\n-      </footer>\r\n-\r\n-      {/* Service Popup */}\r\n-      {selectedService && (\r\n-        <div style={{\r\n-          position: 'fixed',\r\n-          top: 0,\r\n-          left: 0,\r\n-          right: 0,\r\n-          bottom: 0,\r\n-          backgroundColor: 'rgba(0, 0, 0, 0.7)',\r\n-          display: 'flex',\r\n-          justifyContent: 'center',\r\n-          alignItems: 'center',\r\n-          zIndex: 1000,\r\n-        }} onClick={closePopup}>\r\n-          <div style={{\r\n-            backgroundColor: darkMode ? '#2d3748' : 'white',\r\n-            borderRadius: '16px',\r\n-            padding: '2rem',\r\n-            maxWidth: '500px',\r\n-            width: '90%',\r\n-            boxShadow: '0 10px 25px rgba(0, 0, 0, 0.2)',\r\n-            position: 'relative',\r\n-            border: darkMode ? '1px solid #4a5568' : '1px solid #e2e8f0',\r\n-          }} onClick={(e) => e.stopPropagation()}>\r\n-            <button style={{\r\n-              position: 'absolute',\r\n-              top: '1rem',\r\n-              right: '1rem',\r\n-              background: 'none',\r\n-              border: 'none',\r\n-              fontSize: '1.5rem',\r\n-              cursor: 'pointer',\r\n-              color: darkMode ? '#a0aec0' : '#64748b',\r\n-            }} onClick={closePopup}>√ó</button>\r\n-            <div style={{ display: 'flex', alignItems: 'center', gap: '1rem', marginBottom: '1.5rem' }}>\r\n-              <span style={{ fontSize: '2.5rem' }}>{selectedService.icon}</span>\r\n-              <h3 style={{fontSize: '1.8rem', fontWeight: '700', marginBottom: '1rem'}}>\r\n-                {selectedService.name}\r\n-              </h3>\r\n-            </div>\r\n-            <p style={{\r\n-              color: darkMode ? '#a0aec0' : '#64748b', \r\n-              fontSize: '1.1rem', \r\n-              lineHeight: '1.6', \r\n-              marginBottom: '2rem'\r\n-            }}>\r\n-              {selectedService.details}\r\n-            </p>\r\n-            <button \r\n-              style={{ \r\n-                padding: '0.75rem 1.5rem',\r\n-                borderRadius: '8px',\r\n-                border: 'none',\r\n-                backgroundColor: selectedService.color,\r\n-                color: 'white',\r\n-                fontWeight: '600',\r\n-                cursor: 'pointer',\r\n-                transition: 'all 0.2s',\r\n-                fontSize: '1rem'\r\n-              }}\r\n-              onClick={() => {\r\n-                // In a real app, you would navigate to the service page\r\n-                console.log(`Navigating to ${selectedService.name} service`);\r\n-                closePopup();\r\n-              }}\r\n-            >\r\n-              Explore {selectedService.name}\r\n-            </button>\r\n-          </div>\r\n-        </div>\r\n-      )}\r\n-\r\n-      {/* Chat Modal */}\r\n-      {showChat && <ChatModal darkMode={darkMode} onClose={() => setShowChat(false)} />}\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-// Chat Modal Component\r\n-const ChatModal = ({ darkMode, onClose }) => {\r\n-  const [messages, setMessages] = useState([\r\n-    { text: \"Hello! I'm your USOCIAL assistant. How can I help you today?\", sender: 'bot' }\r\n-  ]);\r\n-  const [inputValue, setInputValue] = useState('');\r\n-  const [isTyping, setIsTyping] = useState(false);\r\n-  const chatEndRef = useRef(null);\r\n-\r\n-  // Auto-scroll to bottom\r\n-  useEffect(() => {\r\n-    chatEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n-  }, [messages]);\r\n-\r\n-  // Generate response\r\n-  const generateResponse = async (userMessage) => {\r\n-    setIsTyping(true);\r\n-    \r\n-    try {\r\n-      // Simulate API call with timeout\r\n-      await new Promise(resolve => setTimeout(resolve, 1000));\r\n-      \r\n-      // Simple response logic\r\n-      let response;\r\n-      if (userMessage.toLowerCase().includes('help')) {\r\n-        response = \"I can help with account issues, design tips, and platform questions. What specifically do you need?\";\r\n-      } else if (userMessage.toLowerCase().includes('service')) {\r\n-        response = \"We offer transport, food delivery, groceries, and urban services. Which one interests you?\";\r\n-      } else if (userMessage.toLowerCase().includes('design')) {\r\n-        response = \"For design assistance, check our tutorials or connect with other designers in the community!\";\r\n-      } else {\r\n-        const responses = [\r\n-          \"That's interesting! Tell me more about what you're looking for.\",\r\n-          \"I specialize in helping with USOCIAL features. How can I assist?\",\r\n-          \"Let me check that for you. Could you provide more details?\",\r\n-          \"I'd be happy to help with that. What specifically do you need to know?\"\r\n-        ];\r\n-        response = responses[Math.floor(Math.random() * responses.length)];\r\n-      }\r\n-      \r\n-      setMessages(prev => [...prev, { text: response, sender: 'bot' }]);\r\n-    } catch (error) {\r\n-      console.error(\"Error:\", error);\r\n-      setMessages(prev => [...prev, { \r\n-        text: \"Sorry, I'm having trouble responding. Please try again.\", \r\n-        sender: 'bot' \r\n-      }]);\r\n-    } finally {\r\n-      setIsTyping(false);\r\n-    }\r\n-  };\r\n-\r\n-  const handleSendMessage = async (e) => {\r\n-    e.preventDefault();\r\n-    if (inputValue.trim() && !isTyping) {\r\n-      const userMessage = inputValue.trim();\r\n-      setMessages(prev => [...prev, { text: userMessage, sender: 'user' }]);\r\n-      setInputValue('');\r\n-      await generateResponse(userMessage);\r\n-    }\r\n-  };\r\n-\r\n-  return (\r\n-    <div style={{\r\n-      position: 'fixed',\r\n-      bottom: '100px',\r\n-      right: '30px',\r\n-      width: '350px',\r\n-      maxWidth: '90%',\r\n-      backgroundColor: darkMode ? '#2d3748' : 'white',\r\n-      borderRadius: '16px',\r\n-      boxShadow: '0 10px 25px rgba(0, 0, 0, 0.2)',\r\n-      border: darkMode ? '1px solid #4a5568' : '1px solid #e2e8f0',\r\n-      zIndex: 1000,\r\n-      overflow: 'hidden',\r\n-      display: 'flex',\r\n-      flexDirection: 'column',\r\n-      maxHeight: '60vh'\r\n-    }}>\r\n-      {/* Chat header */}\r\n-      <div style={{\r\n-        padding: '1rem',\r\n-        backgroundColor: darkMode ? '#4a5568' : '#333',\r\n-        color: 'white',\r\n-        display: 'flex',\r\n-        justifyContent: 'space-between',\r\n-        alignItems: 'center'\r\n-      }}>\r\n-        <div style={{ display: 'flex', alignItems: 'center', gap: '0.5rem' }}>\r\n-          <span style={{ fontSize: '1.5rem' }}>ü§ñ</span>\r\n-          <h3 style={{ margin: 0 }}>USOCIAL Assistant</h3>\r\n-          {isTyping && <span style={{ fontSize: '0.8rem', marginLeft: '0.5rem', opacity: 0.8 }}>typing...</span>}\r\n-        </div>\r\n-        <button \r\n-          onClick={onClose}\r\n-          style={{\r\n-            background: 'none',\r\n-            border: 'none',\r\n-            color: 'white',\r\n-            fontSize: '1.2rem',\r\n-            cursor: 'pointer'\r\n-          }}\r\n-        >\r\n-          √ó\r\n-        </button>\r\n-      </div>\r\n-      \r\n-      {/* Chat messages */}\r\n-      <div style={{\r\n-        flex: 1,\r\n-        padding: '1rem',\r\n-        overflowY: 'auto',\r\n-        display: 'flex',\r\n-        flexDirection: 'column',\r\n-        gap: '0.8rem'\r\n-      }}>\r\n-        {messages.map((msg, index) => (\r\n-          <div \r\n-            key={index}\r\n-            style={{\r\n-              alignSelf: msg.sender === 'user' ? 'flex-end' : 'flex-start',\r\n-              maxWidth: '80%',\r\n-              padding: '0.6rem 1rem',\r\n-              borderRadius: msg.sender === 'user' ? '18px 18px 0 18px' : '18px 18px 18px 0',\r\n-              backgroundColor: msg.sender === 'user'\r\n-                ? (darkMode ? '#4a5568' : '#333')\r\n-                : (darkMode ? '#4a5568' : '#f0f0f0'),\r\n-              color: msg.sender === 'user' ? 'white' : (darkMode ? 'white' : '#333'),\r\n-            }}\r\n-          >\r\n-            {msg.text}\r\n-          </div>\r\n-        ))}\r\n-        <div ref={chatEndRef} />\r\n-      </div>\r\n-      \r\n-      {/* Chat input */}\r\n-      <form onSubmit={handleSendMessage} style={{\r\n-        padding: '0.8rem',\r\n-        borderTop: darkMode ? '1px solid #4a5568' : '1px solid #e2e8f0',\r\n-        display: 'flex',\r\n-        gap: '0.5rem'\r\n-      }}>\r\n-        <input\r\n-          type=\"text\"\r\n-          value={inputValue}\r\n-          onChange={(e) => setInputValue(e.target.value)}\r\n-          placeholder=\"Ask me anything...\"\r\n-          disabled={isTyping}\r\n-          style={{\r\n-            flex: 1,\r\n-            padding: '0.6rem 1rem',\r\n-            borderRadius: '20px',\r\n-            border: darkMode ? '1px solid #4a5568' : '1px solid #e2e8f0',\r\n-            backgroundColor: darkMode ? '#2d3748' : 'white',\r\n-            color: darkMode ? '#e2e8f0' : '#333',\r\n-            outline: 'none',\r\n-          }}\r\n-        />\r\n-        <button \r\n-          type=\"submit\"\r\n-          disabled={isTyping}\r\n-          style={{\r\n-            background: isTyping \r\n-              ? (darkMode ? '#4a5568' : '#e2e8f0')\r\n-              : (darkMode ? '#4a5568' : '#333'),\r\n-            color: 'white',\r\n-            border: 'none',\r\n-            borderRadius: '50%',\r\n-            width: '40px',\r\n-            height: '40px',\r\n-            display: 'flex',\r\n-            alignItems: 'center',\r\n-            justifyContent: 'center',\r\n-            cursor: isTyping ? 'not-allowed' : 'pointer'\r\n-          }}\r\n-        >\r\n-          {isTyping ? '...' : '‚û§'}\r\n-        </button>\r\n-      </form>\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-export default App;\n\\ No newline at end of file\n+};\n\\ No newline at end of file\n"
                },
                {
                    "date": 1754478555147,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -467,8 +467,16 @@\n       icon: 'üõ†Ô∏è', \r\n       desc: 'Find urban services near you',\r\n       color: '#8b5cf6',\r\n       details: 'Book home services, repairs, and professional help with verified providers.'\r\n+    },\r\n+    { \r\n+      name: 'Live Events', \r\n+      path: '/events', \r\n+      icon: 'üé§', \r\n+      desc: 'Discover concerts, shows and happenings in Nairobi',\r\n+      color: '#f59e0b',\r\n+      details: 'Find the latest concerts, theater shows, art exhibitions and special events happening around Nairobi. Get tickets and directions.'\r\n     }\r\n   ];\r\n \r\n   // Check for achievements\r\n@@ -729,9 +737,9 @@\n               gap: '0.5rem',\r\n               fontSize: '1rem'\r\n             }}\r\n           >\r\n-            üçü Fast Food\r\n+            ÔøΩ Fast Food\r\n           </button>\r\n           <button \r\n             onClick={() => navigate('/food?category=coffee')}\r\n             style={{\r\n@@ -750,8 +758,27 @@\n             }}\r\n           >\r\n             ‚òï Coffee Shops\r\n           </button>\r\n+          <button \r\n+            onClick={() => navigate('/events')}\r\n+            style={{\r\n+              padding: '0.75rem 1.5rem',\r\n+              borderRadius: '50px',\r\n+              border: 'none',\r\n+              backgroundColor: darkMode ? '#2d3748' : '#e2e8f0',\r\n+              color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+              fontWeight: '600',\r\n+              cursor: 'pointer',\r\n+              transition: 'all 0.2s',\r\n+              display: 'flex',\r\n+              alignItems: 'center',\r\n+              gap: '0.5rem',\r\n+              fontSize: '1rem'\r\n+            }}\r\n+          >\r\n+            üé§ Nairobi Events\r\n+          </button>\r\n         </div>\r\n       </section>\r\n \r\n       {/* Service Popup */}\r\n@@ -797,8 +824,38 @@\n               <span style={{ fontSize: '2.5rem', animation: 'float 3s ease-in-out infinite' }}>{selectedService.icon}</span>\r\n               <h3 style={{fontSize: '1.8rem', fontWeight: '700', marginBottom: '1rem', color: darkMode ? '#e2e8f0' : '#1e293b'}}>{selectedService.name}</h3>\r\n             </div>\r\n             <p style={{color: darkMode ? '#a0aec0' : '#64748b', fontSize: '1.1rem', lineHeight: '1.6', marginBottom: '2rem'}}>{selectedService.details}</p>\r\n+            {selectedService.name === 'Live Events' && (\r\n+              <div style={{\r\n+                backgroundColor: darkMode ? '#4a5568' : '#f3f4f6',\r\n+                borderRadius: '12px',\r\n+                padding: '1rem',\r\n+                marginBottom: '1.5rem'\r\n+              }}>\r\n+                <h4 style={{\r\n+                  fontSize: '1.2rem',\r\n+                  fontWeight: '600',\r\n+                  marginBottom: '0.5rem',\r\n+                  color: darkMode ? '#e2e8f0' : '#1e293b'\r\n+                }}>Featured Events</h4>\r\n+                <ul style={{\r\n+                  listStyle: 'none',\r\n+                  padding: 0,\r\n+                  margin: 0\r\n+                }}>\r\n+                  <li style={{padding: '0.5rem 0', borderBottom: darkMode ? '1px solid #4a5568' : '1px solid #e2e8f0'}}>\r\n+                    <strong>üéµ Nairobi Jazz Festival</strong> - Aug 15-17\r\n+                  </li>\r\n+                  <li style={{padding: '0.5rem 0', borderBottom: darkMode ? '1px solid #4a5568' : '1px solid #e2e8f0'}}>\r\n+                    <strong>üé≠ Kenya National Theatre Play</strong> - Aug 20\r\n+                  </li>\r\n+                  <li style={{padding: '0.5rem 0'}}>\r\n+                    <strong>üé® Art Expo Kenya</strong> - Aug 25-30\r\n+                  </li>\r\n+                </ul>\r\n+              </div>\r\n+            )}\r\n             <button \r\n               style={{ \r\n                 padding: '0.75rem 1.5rem',\r\n                 borderRadius: '8px',\r\n"
                },
                {
                    "date": 1754479472676,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -425,8 +425,138 @@\n     </div>\r\n   );\r\n };\r\n \r\n+// Weather Widget Component\r\n+const WeatherWidget = ({ darkMode }) => {\r\n+  const [weather, setWeather] = useState(null);\r\n+  const [loading, setLoading] = useState(true);\r\n+  const [error, setError] = useState(null);\r\n+\r\n+  useEffect(() => {\r\n+    const fetchWeather = async () => {\r\n+      try {\r\n+        // Note: In production, use your own backend to make this API call\r\n+        const response = await fetch(\r\n+          `https://api.openweathermap.org/data/2.5/weather?q=Nairobi&appid=${process.env.REACT_APP_WEATHER_API_KEY}&units=metric`\r\n+        );\r\n+        \r\n+        if (!response.ok) {\r\n+          throw new Error('Failed to fetch weather data');\r\n+        }\r\n+        \r\n+        const data = await response.json();\r\n+        setWeather(data);\r\n+      } catch (err) {\r\n+        setError(err.message);\r\n+      } finally {\r\n+        setLoading(false);\r\n+      }\r\n+    };\r\n+\r\n+    fetchWeather();\r\n+  }, []);\r\n+\r\n+  const getWeatherIcon = (condition) => {\r\n+    switch (condition) {\r\n+      case 'Clear':\r\n+        return '‚òÄÔ∏è';\r\n+      case 'Clouds':\r\n+        return '‚òÅÔ∏è';\r\n+      case 'Rain':\r\n+        return 'üåßÔ∏è';\r\n+      case 'Thunderstorm':\r\n+        return '‚õàÔ∏è';\r\n+      default:\r\n+        return 'üå§Ô∏è';\r\n+    }\r\n+  };\r\n+\r\n+  if (loading) return <div>Loading weather...</div>;\r\n+  if (error) return <div>Weather data unavailable</div>;\r\n+\r\n+  return (\r\n+    <div style={{\r\n+      backgroundColor: darkMode ? '#2d3748' : '#f3f4f6',\r\n+      borderRadius: '12px',\r\n+      padding: '1rem',\r\n+      margin: '1rem 0',\r\n+      boxShadow: '0 2px 4px rgba(0,0,0,0.1)'\r\n+    }}>\r\n+      <h3 style={{ marginTop: 0, color: darkMode ? '#e2e8f0' : '#1e293b' }}>Nairobi Weather</h3>\r\n+      <div style={{ display: 'flex', alignItems: 'center', gap: '1rem' }}>\r\n+        <span style={{ fontSize: '2rem' }}>\r\n+          {weather && getWeatherIcon(weather.weather[0].main)}\r\n+        </span>\r\n+        <div>\r\n+          <p style={{ margin: 0, fontSize: '1.5rem', fontWeight: 'bold', color: darkMode ? '#e2e8f0' : '#1e293b' }}>\r\n+            {weather?.main?.temp}¬∞C\r\n+          </p>\r\n+          <p style={{ margin: 0, color: darkMode ? '#a0aec0' : '#64748b' }}>\r\n+            {weather?.weather[0].description}\r\n+          </p>\r\n+        </div>\r\n+      </div>\r\n+      <div style={{ display: 'flex', justifyContent: 'space-between', marginTop: '0.5rem' }}>\r\n+        <span style={{ color: darkMode ? '#a0aec0' : '#64748b' }}>Humidity: {weather?.main?.humidity}%</span>\r\n+        <span style={{ color: darkMode ? '#a0aec0' : '#64748b' }}>Wind: {weather?.wind?.speed} m/s</span>\r\n+      </div>\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+// Emergency Services Component\r\n+const EmergencyServices = ({ darkMode }) => {\r\n+  const services = [\r\n+    { name: \"Police\", number: \"999\", icon: \"üëÆ\", color: \"#3b82f6\" },\r\n+    { name: \"Ambulance\", number: \"911\", icon: \"üöë\", color: \"#ef4444\" },\r\n+    { name: \"Fire Brigade\", number: \"999\", icon: \"üöí\", color: \"#f59e0b\" },\r\n+    { name: \"Child Helpline\", number: \"116\", icon: \"üßí\", color: \"#10b981\" }\r\n+  ];\r\n+\r\n+  return (\r\n+    <div style={{\r\n+      backgroundColor: darkMode ? '#2d3748' : '#f3f4f6',\r\n+      borderRadius: '12px',\r\n+      padding: '1rem',\r\n+      margin: '1rem 0',\r\n+      boxShadow: '0 2px 4px rgba(0,0,0,0.1)'\r\n+    }}>\r\n+      <h3 style={{ marginTop: 0, color: darkMode ? '#e2e8f0' : '#1e293b' }}>Emergency Services</h3>\r\n+      <div style={{ \r\n+        display: 'grid',\r\n+        gridTemplateColumns: 'repeat(auto-fit, minmax(120px, 1fr))',\r\n+        gap: '0.5rem'\r\n+      }}>\r\n+        {services.map((service) => (\r\n+          <a \r\n+            key={service.name}\r\n+            href={`tel:${service.number}`}\r\n+            style={{\r\n+              display: 'flex',\r\n+              flexDirection: 'column',\r\n+              alignItems: 'center',\r\n+              padding: '0.75rem',\r\n+              borderRadius: '8px',\r\n+              backgroundColor: darkMode ? '#4a5568' : '#e2e8f0',\r\n+              color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+              textDecoration: 'none',\r\n+              transition: 'transform 0.2s',\r\n+              ':hover': {\r\n+                transform: 'scale(1.05)'\r\n+              }\r\n+            }}\r\n+          >\r\n+            <span style={{ fontSize: '1.5rem' }}>{service.icon}</span>\r\n+            <span style={{ fontWeight: '600' }}>{service.name}</span>\r\n+            <span style={{ fontSize: '0.9rem' }}>{service.number}</span>\r\n+          </a>\r\n+        ))}\r\n+      </div>\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n // Main Home Component\r\n export default function Home() {\r\n   const navigate = useNavigate();\r\n   const [searchQuery, setSearchQuery] = useState('');\r\n@@ -434,8 +564,10 @@\n   const [selectedService, setSelectedService] = useState(null);\r\n   const [orderCount, setOrderCount] = useState(0);\r\n   const [achievements, setAchievements] = useState([]);\r\n   const [showChat, setShowChat] = useState(false);\r\n+  const [events, setEvents] = useState([]);\r\n+  const [eventsLoading, setEventsLoading] = useState(true);\r\n \r\n   const services = [\r\n     { \r\n       name: 'Transport', \r\n@@ -478,8 +610,50 @@\n       details: 'Find the latest concerts, theater shows, art exhibitions and special events happening around Nairobi. Get tickets and directions.'\r\n     }\r\n   ];\r\n \r\n+  // Fetch Nairobi events\r\n+  useEffect(() => {\r\n+    const fetchEvents = async () => {\r\n+      try {\r\n+        // Note: In production, use your own backend to make this API call\r\n+        const response = await fetch(\r\n+          `https://app.ticketmaster.com/discovery/v2/events.json?city=Nairobi&apikey=${process.env.REACT_APP_TICKETMASTER_API_KEY}`\r\n+        );\r\n+        \r\n+        if (!response.ok) {\r\n+          throw new Error('Failed to fetch events');\r\n+        }\r\n+        \r\n+        const data = await response.json();\r\n+        setEvents(data._embedded?.events || []);\r\n+      } catch (err) {\r\n+        console.error('Error fetching events:', err);\r\n+        // Fallback to sample events if API fails\r\n+        setEvents([\r\n+          {\r\n+            name: \"Nairobi Jazz Festival\",\r\n+            dates: { start: { localDate: \"2023-08-15\" } },\r\n+            _embedded: {\r\n+              venues: [{ name: \"KICC\" }]\r\n+            }\r\n+          },\r\n+          {\r\n+            name: \"Kenya National Theatre Play\",\r\n+            dates: { start: { localDate: \"2023-08-20\" } },\r\n+            _embedded: {\r\n+              venues: [{ name: \"Kenya National Theatre\" }]\r\n+            }\r\n+          }\r\n+        ]);\r\n+      } finally {\r\n+        setEventsLoading(false);\r\n+      }\r\n+    };\r\n+\r\n+    fetchEvents();\r\n+  }, []);\r\n+\r\n   // Check for achievements\r\n   useEffect(() => {\r\n     if (orderCount === 1) {\r\n       addAchievement('First Order!', 'üéâ');\r\n@@ -682,8 +856,21 @@\n           ))}\r\n         </div>\r\n       </section>\r\n \r\n+      {/* Weather and Emergency Services Section */}\r\n+      <section style={{\r\n+        padding: '2rem 1rem',\r\n+        maxWidth: '1200px',\r\n+        margin: '0 auto',\r\n+        display: 'grid',\r\n+        gridTemplateColumns: 'repeat(auto-fit, minmax(300px, 1fr))',\r\n+        gap: '1.5rem'\r\n+      }}>\r\n+        <WeatherWidget darkMode={darkMode} />\r\n+        <EmergencyServices darkMode={darkMode} />\r\n+      </section>\r\n+\r\n       {/* Featured Section */}\r\n       <section style={{\r\n         padding: '2rem 1rem',\r\n         maxWidth: '1200px',\r\n@@ -737,9 +924,9 @@\n               gap: '0.5rem',\r\n               fontSize: '1rem'\r\n             }}\r\n           >\r\n-            ÔøΩ Fast Food\r\n+            üçü Fast Food\r\n           </button>\r\n           <button \r\n             onClick={() => navigate('/food?category=coffee')}\r\n             style={{\r\n@@ -836,24 +1023,30 @@\n                   fontSize: '1.2rem',\r\n                   fontWeight: '600',\r\n                   marginBottom: '0.5rem',\r\n                   color: darkMode ? '#e2e8f0' : '#1e293b'\r\n-                }}>Featured Events</h4>\r\n-                <ul style={{\r\n-                  listStyle: 'none',\r\n-                  padding: 0,\r\n-                  margin: 0\r\n-                }}>\r\n-                  <li style={{padding: '0.5rem 0', borderBottom: darkMode ? '1px solid #4a5568' : '1px solid #e2e8f0'}}>\r\n-                    <strong>üéµ Nairobi Jazz Festival</strong> - Aug 15-17\r\n-                  </li>\r\n-                  <li style={{padding: '0.5rem 0', borderBottom: darkMode ? '1px solid #4a5568' : '1px solid #e2e8f0'}}>\r\n-                    <strong>üé≠ Kenya National Theatre Play</strong> - Aug 20\r\n-                  </li>\r\n-                  <li style={{padding: '0.5rem 0'}}>\r\n-                    <strong>üé® Art Expo Kenya</strong> - Aug 25-30\r\n-                  </li>\r\n-                </ul>\r\n+                }}>Upcoming Events</h4>\r\n+                {eventsLoading ? (\r\n+                  <p>Loading events...</p>\r\n+                ) : events.length > 0 ? (\r\n+                  <ul style={{\r\n+                    listStyle: 'none',\r\n+                    padding: 0,\r\n+                    margin: 0\r\n+                  }}>\r\n+                    {events.slice(0, 3).map((event, index) => (\r\n+                      <li key={index} style={{padding: '0.5rem 0', borderBottom: darkMode ? '1px solid #4a5568' : '1px solid #e2e8f0'}}>\r\n+                        <strong>üé§ {event.name}</strong>\r\n+                        <div style={{ display: 'flex', justifyContent: 'space-between' }}>\r\n+                          <span>{event.dates?.start?.localDate}</span>\r\n+                          <span>{event._embedded?.venues?.[0]?.name || 'Nairobi'}</span>\r\n+                        </div>\r\n+                      </li>\r\n+                    ))}\r\n+                  </ul>\r\n+                ) : (\r\n+                  <p>No upcoming events found</p>\r\n+                )}\r\n               </div>\r\n             )}\r\n             <button \r\n               style={{ \r\n"
                },
                {
                    "date": 1754480566102,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,16 +2,10 @@\n import { useNavigate } from 'react-router-dom';\r\n \r\n // UrbanBuddy AI Assistant Component\r\n const UrbanBuddy = ({ darkMode, onChatOpen }) => {\r\n-  const [position, setPosition] = useState({ x: 20, y: 50 });\r\n-  const [expression, setExpression] = useState('üòä');\r\n-  const [direction, setDirection] = useState(1);\r\n+  const [expression, setExpression] = useState('ü§ñ');\r\n   const [costume, setCostume] = useState(null);\r\n-  const [isActive, setIsActive] = useState(false);\r\n-  const botRef = useRef(null);\r\n-  const animationRef = useRef(null);\r\n-  const lastInteractionTime = useRef(Date.now());\r\n \r\n   // Seasonal costumes\r\n   useEffect(() => {\r\n     const today = new Date();\r\n@@ -23,182 +17,69 @@\n     else if (month === 4) setCostume('üå∏');\r\n     else setCostume(null);\r\n   }, []);\r\n \r\n-  // Make the bot wander with more dynamic movement\r\n-  useEffect(() => {\r\n-    const moveInterval = setInterval(() => {\r\n-      setPosition(prev => {\r\n-        const now = Date.now();\r\n-        const timeSinceLastInteraction = now - lastInteractionTime.current;\r\n-        \r\n-        // More active movement right after interaction\r\n-        const speedMultiplier = timeSinceLastInteraction < 5000 ? 2 : 1;\r\n-        \r\n-        let newX = prev.x + (3 * direction * speedMultiplier);\r\n-        let newY = prev.y + (Math.random() * 6 - 3);\r\n-        \r\n-        // Bounce off edges\r\n-        if (newX > window.innerWidth - 80) {\r\n-          setDirection(-1);\r\n-          triggerAnimation('spin');\r\n-        }\r\n-        if (newX < 20) {\r\n-          setDirection(1);\r\n-          triggerAnimation('spin');\r\n-        }\r\n-        if (newY < 20) newY = 20;\r\n-        if (newY > window.innerHeight - 100) newY = window.innerHeight - 100;\r\n-        \r\n-        return { x: newX, y: newY };\r\n-      });\r\n-    }, 100);\r\n-\r\n-    return () => clearInterval(moveInterval);\r\n-  }, [direction]);\r\n-\r\n-  // Change expressions randomly with more variety\r\n-  useEffect(() => {\r\n-    const expressions = ['üòä', 'ü§î', 'üòÆ', 'üòé', 'üëã', 'ü§ñ', '‚ú®', 'üåü'];\r\n-    const expressionInterval = setInterval(() => {\r\n-      if (!isActive) {\r\n-        setExpression(expressions[Math.floor(Math.random() * expressions.length)]);\r\n-        // Random animations when idle\r\n-        if (Math.random() > 0.8) {\r\n-          triggerAnimation(['bounce', 'spin', 'wobble'][Math.floor(Math.random() * 3)]);\r\n-        }\r\n-      }\r\n-    }, 3000);\r\n-    return () => clearInterval(expressionInterval);\r\n-  }, [isActive]);\r\n-\r\n-  const triggerAnimation = (type) => {\r\n-    if (animationRef.current) {\r\n-      clearTimeout(animationRef.current);\r\n-    }\r\n-    \r\n-    const botElement = botRef.current;\r\n-    if (!botElement) return;\r\n-    \r\n-    botElement.style.animation = 'none';\r\n-    void botElement.offsetWidth; // Trigger reflow\r\n-    \r\n-    switch(type) {\r\n-      case 'spin':\r\n-        botElement.style.animation = 'spin 1s ease';\r\n-        break;\r\n-      case 'bounce':\r\n-        botElement.style.animation = 'bounce 0.5s ease';\r\n-        break;\r\n-      case 'wobble':\r\n-        botElement.style.animation = 'wobble 0.8s ease';\r\n-        break;\r\n-      default:\r\n-        botElement.style.animation = '';\r\n-    }\r\n-    \r\n-    animationRef.current = setTimeout(() => {\r\n-      if (botElement) botElement.style.animation = '';\r\n-    }, 1000);\r\n-  };\r\n-\r\n   const handleClick = () => {\r\n-    lastInteractionTime.current = Date.now();\r\n-    setIsActive(true);\r\n-    triggerAnimation('bounce');\r\n     setExpression('üí°');\r\n-    \r\n-    // Trigger chat opening in parent component\r\n     onChatOpen();\r\n     \r\n-    // Return to normal after a delay\r\n     setTimeout(() => {\r\n-      setIsActive(false);\r\n+      setExpression('ü§ñ');\r\n     }, 3000);\r\n   };\r\n \r\n-  // Custom animations\r\n-  const animations = `\r\n-    @keyframes spin {\r\n-      0% { transform: rotate(0deg) scaleX(${direction}); }\r\n-      100% { transform: rotate(360deg) scaleX(${direction}); }\r\n-    }\r\n-    @keyframes bounce {\r\n-      0%, 100% { transform: translateY(0) scaleX(${direction}); }\r\n-      50% { transform: translateY(-20px) scaleX(${direction}); }\r\n-    }\r\n-    @keyframes wobble {\r\n-      0%, 100% { transform: rotate(0deg) scaleX(${direction}); }\r\n-      25% { transform: rotate(5deg) scaleX(${direction}); }\r\n-      75% { transform: rotate(-5deg) scaleX(${direction}); }\r\n-    }\r\n-    @keyframes float {\r\n-      0% { transform: translateY(0px) scaleX(${direction}); }\r\n-      50% { transform: translateY(-10px) scaleX(${direction}); }\r\n-      100% { transform: translateY(0px) scaleX(${direction}); }\r\n-    }\r\n-  `;\r\n-\r\n   return (\r\n-    <>\r\n-      <style>{animations}</style>\r\n-      <div \r\n-        ref={botRef}\r\n-        onClick={handleClick}\r\n-        style={{\r\n-          position: 'fixed',\r\n-          left: `${position.x}px`,\r\n-          top: `${position.y}px`,\r\n-          fontSize: '2.5rem',\r\n-          cursor: 'pointer',\r\n-          transition: 'all 0.3s ease',\r\n-          transform: `scaleX(${direction})`,\r\n-          zIndex: 100,\r\n-          filter: darkMode \r\n-            ? 'drop-shadow(0 0 8px rgba(255,255,255,0.7))' \r\n-            : 'drop-shadow(0 0 8px rgba(0,0,0,0.3))',\r\n-          userSelect: 'none',\r\n-          animation: 'float 4s ease-in-out infinite'\r\n-        }}\r\n-      >\r\n-        <div style={{ \r\n+    <div \r\n+      onClick={handleClick}\r\n+      style={{\r\n+        position: 'fixed',\r\n+        bottom: '30px',\r\n+        right: '30px',\r\n+        fontSize: '2.5rem',\r\n+        cursor: 'pointer',\r\n+        zIndex: 100,\r\n+        filter: darkMode \r\n+          ? 'drop-shadow(0 0 8px rgba(255,255,255,0.7))' \r\n+          : 'drop-shadow(0 0 8px rgba(0,0,0,0.3))',\r\n+        userSelect: 'none',\r\n+      }}\r\n+    >\r\n+      <div style={{ \r\n+        position: 'relative',\r\n+        display: 'flex',\r\n+        flexDirection: 'column',\r\n+        alignItems: 'center'\r\n+      }}>\r\n+        <div style={{\r\n           position: 'relative',\r\n+          width: '60px',\r\n+          height: '60px',\r\n+          backgroundColor: darkMode ? '#4a5568' : '#3b82f6',\r\n+          borderRadius: '50%',\r\n           display: 'flex',\r\n-          flexDirection: 'column',\r\n-          alignItems: 'center'\r\n+          justifyContent: 'center',\r\n+          alignItems: 'center',\r\n+          color: 'white'\r\n         }}>\r\n-          {/* Bot icon with costume */}\r\n-          <div style={{\r\n-            position: 'relative',\r\n-            width: '60px',\r\n-            height: '60px',\r\n-            backgroundColor: darkMode ? '#4a5568' : '#3b82f6',\r\n-            borderRadius: '50%',\r\n-            display: 'flex',\r\n-            justifyContent: 'center',\r\n-            alignItems: 'center',\r\n-            color: 'white'\r\n-          }}>\r\n-            <span style={{ fontSize: '1.8rem' }}>{expression}</span>\r\n-            {costume && (\r\n-              <span style={{\r\n-                position: 'absolute',\r\n-                top: '-15px',\r\n-                right: '-10px',\r\n-                fontSize: '1.5rem',\r\n-                transform: 'rotate(15deg)'\r\n-              }}>\r\n-                {costume}\r\n-              </span>\r\n-            )}\r\n-          </div>\r\n+          <span style={{ fontSize: '1.8rem' }}>{expression}</span>\r\n+          {costume && (\r\n+            <span style={{\r\n+              position: 'absolute',\r\n+              top: '-15px',\r\n+              right: '-10px',\r\n+              fontSize: '1.5rem',\r\n+              transform: 'rotate(15deg)'\r\n+            }}>\r\n+              {costume}\r\n+            </span>\r\n+          )}\r\n         </div>\r\n       </div>\r\n-    </>\r\n+    </div>\r\n   );\r\n };\r\n \r\n-// Chat Modal Component with Functional API Connection\r\n+// Chat Modal Component\r\n const ChatModal = ({ darkMode, onClose }) => {\r\n   const [messages, setMessages] = useState([\r\n     { text: \"Hello! I'm UrbanBuddy, your AI assistant for urban living. How can I help you today?\", sender: 'bot' }\r\n   ]);\r\n@@ -206,70 +87,24 @@\n   const [isTyping, setIsTyping] = useState(false);\r\n   const chatEndRef = useRef(null);\r\n   const inputRef = useRef(null);\r\n \r\n-  // Auto-scroll to bottom and focus input\r\n   useEffect(() => {\r\n     chatEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n     inputRef.current?.focus();\r\n   }, [messages]);\r\n \r\n-  // Function to call the AI API\r\n   const generateResponse = async (userMessage) => {\r\n     setIsTyping(true);\r\n     \r\n     try {\r\n-      // In a real app, you should call your own backend endpoint that then calls OpenAI\r\n-      // This is just for demonstration purposes\r\n-      const response = await fetch('https://api.openai.com/v1/chat/completions', {\r\n-        method: \"POST\",\r\n-        headers: { \r\n-          \"Content-Type\": \"application/json\",\r\n-          // Note: In production, never expose your API key in frontend code\r\n-          // This should be handled through your own backend\r\n-          \"Authorization\": `Bearer ${process.env.REACT_APP_OPENAI_API_KEY}` \r\n-        },\r\n-        body: JSON.stringify({\r\n-          model: \"gpt-3.5-turbo\",\r\n-          messages: [\r\n-            {\r\n-              role: \"system\",\r\n-              content: \"You are UrbanBuddy, a friendly AI assistant for urban living. \" +\r\n-                \"Provide helpful, concise answers (1-2 sentences) about city life, \" +\r\n-                \"transportation, food delivery, local services, and urban living tips. \" +\r\n-                \"Keep responses practical and urban-focused.\"\r\n-            },\r\n-            {\r\n-              role: \"user\",\r\n-              content: userMessage\r\n-            }\r\n-          ],\r\n-          temperature: 0.7,\r\n-          max_tokens: 150\r\n-        })\r\n-      });\r\n-      \r\n-      if (!response.ok) {\r\n-        throw new Error(`API request failed with status ${response.status}`);\r\n-      }\r\n-      \r\n-      const data = await response.json();\r\n-      const aiResponse = data.choices?.[0]?.message?.content || \r\n-        \"I'm having trouble thinking of a response right now. Could you try asking something else?\";\r\n-      \r\n-      setMessages(prev => [...prev, { \r\n-        text: aiResponse, \r\n-        sender: 'bot' \r\n-      }]);\r\n-    } catch (error) {\r\n-      console.error(\"API error:\", error);\r\n-      // Fallback to a local AI response if API fails\r\n       const fallbackResponses = [\r\n         \"I'm currently experiencing high demand. Try again in a moment!\",\r\n         \"Let me think differently about that... Can you rephrase your question?\",\r\n         \"I specialize in urban living tips. Ask me about transportation, food, or city services!\",\r\n         \"I'm having connection issues, but I'd love to help with your urban living questions!\"\r\n       ];\r\n+      \r\n       setMessages(prev => [...prev, { \r\n         text: fallbackResponses[Math.floor(Math.random() * fallbackResponses.length)], \r\n         sender: 'bot' \r\n       }]);\r\n@@ -280,14 +115,11 @@\n \r\n   const handleSendMessage = async (e) => {\r\n     e.preventDefault();\r\n     if (inputValue.trim() && !isTyping) {\r\n-      // Add user message\r\n       const userMessage = inputValue.trim();\r\n       setMessages(prev => [...prev, { text: userMessage, sender: 'user' }]);\r\n       setInputValue('');\r\n-      \r\n-      // Generate AI response\r\n       await generateResponse(userMessage);\r\n     }\r\n   };\r\n \r\n@@ -307,9 +139,8 @@\n       display: 'flex',\r\n       flexDirection: 'column',\r\n       maxHeight: '60vh'\r\n     }}>\r\n-      {/* Chat header */}\r\n       <div style={{\r\n         padding: '1rem',\r\n         backgroundColor: darkMode ? '#4a5568' : '#3b82f6',\r\n         color: 'white',\r\n@@ -341,9 +172,8 @@\n           √ó\r\n         </button>\r\n       </div>\r\n       \r\n-      {/* Chat messages */}\r\n       <div style={{\r\n         flex: 1,\r\n         padding: '1rem',\r\n         overflowY: 'auto',\r\n@@ -364,20 +194,16 @@\n               backgroundColor: msg.sender === 'user'\r\n                 ? (darkMode ? '#4a5568' : '#3b82f6')\r\n                 : (darkMode ? '#4a5568' : '#e2e8f0'),\r\n               color: msg.sender === 'user' ? 'white' : (darkMode ? 'white' : '#1e293b'),\r\n-              animation: msg.sender === 'bot' && index === messages.length - 1 \r\n-                ? 'fadeIn 0.3s ease' \r\n-                : 'none'\r\n             }}\r\n           >\r\n             {msg.text}\r\n           </div>\r\n         ))}\r\n         <div ref={chatEndRef} />\r\n       </div>\r\n       \r\n-      {/* Chat input */}\r\n       <form onSubmit={handleSendMessage} style={{\r\n         padding: '0.8rem',\r\n         borderTop: darkMode ? '1px solid #4a5568' : '1px solid #e2e8f0',\r\n         display: 'flex',\r\n@@ -427,290 +253,214 @@\n };\r\n \r\n // Weather Widget Component\r\n const WeatherWidget = ({ darkMode }) => {\r\n-  const [weather, setWeather] = useState(null);\r\n-  const [loading, setLoading] = useState(true);\r\n-  const [error, setError] = useState(null);\r\n+  const [weather, setWeather] = useState({\r\n+    temp: '24¬∞C',\r\n+    condition: 'Partly Cloudy',\r\n+    icon: '‚õÖ'\r\n+  });\r\n \r\n-  useEffect(() => {\r\n-    const fetchWeather = async () => {\r\n-      try {\r\n-        // Note: In production, use your own backend to make this API call\r\n-        const response = await fetch(\r\n-          `https://api.openweathermap.org/data/2.5/weather?q=Nairobi&appid=${process.env.REACT_APP_WEATHER_API_KEY}&units=metric`\r\n-        );\r\n-        \r\n-        if (!response.ok) {\r\n-          throw new Error('Failed to fetch weather data');\r\n-        }\r\n-        \r\n-        const data = await response.json();\r\n-        setWeather(data);\r\n-      } catch (err) {\r\n-        setError(err.message);\r\n-      } finally {\r\n-        setLoading(false);\r\n-      }\r\n-    };\r\n-\r\n-    fetchWeather();\r\n-  }, []);\r\n-\r\n-  const getWeatherIcon = (condition) => {\r\n-    switch (condition) {\r\n-      case 'Clear':\r\n-        return '‚òÄÔ∏è';\r\n-      case 'Clouds':\r\n-        return '‚òÅÔ∏è';\r\n-      case 'Rain':\r\n-        return 'üåßÔ∏è';\r\n-      case 'Thunderstorm':\r\n-        return '‚õàÔ∏è';\r\n-      default:\r\n-        return 'üå§Ô∏è';\r\n-    }\r\n-  };\r\n-\r\n-  if (loading) return <div>Loading weather...</div>;\r\n-  if (error) return <div>Weather data unavailable</div>;\r\n-\r\n   return (\r\n     <div style={{\r\n       backgroundColor: darkMode ? '#2d3748' : '#f3f4f6',\r\n-      borderRadius: '12px',\r\n-      padding: '1rem',\r\n-      margin: '1rem 0',\r\n-      boxShadow: '0 2px 4px rgba(0,0,0,0.1)'\r\n+      borderRadius: '16px',\r\n+      padding: '2rem 1.5rem',\r\n+      border: '2px solid #3b82f6',\r\n+      textAlign: 'center',\r\n+      cursor: 'pointer',\r\n+      transition: 'transform 0.3s',\r\n+      ':hover': {\r\n+        transform: 'translateY(-5px)',\r\n+      }\r\n     }}>\r\n-      <h3 style={{ marginTop: 0, color: darkMode ? '#e2e8f0' : '#1e293b' }}>Nairobi Weather</h3>\r\n-      <div style={{ display: 'flex', alignItems: 'center', gap: '1rem' }}>\r\n-        <span style={{ fontSize: '2rem' }}>\r\n-          {weather && getWeatherIcon(weather.weather[0].main)}\r\n-        </span>\r\n-        <div>\r\n-          <p style={{ margin: 0, fontSize: '1.5rem', fontWeight: 'bold', color: darkMode ? '#e2e8f0' : '#1e293b' }}>\r\n-            {weather?.main?.temp}¬∞C\r\n-          </p>\r\n-          <p style={{ margin: 0, color: darkMode ? '#a0aec0' : '#64748b' }}>\r\n-            {weather?.weather[0].description}\r\n-          </p>\r\n-        </div>\r\n-      </div>\r\n-      <div style={{ display: 'flex', justifyContent: 'space-between', marginTop: '0.5rem' }}>\r\n-        <span style={{ color: darkMode ? '#a0aec0' : '#64748b' }}>Humidity: {weather?.main?.humidity}%</span>\r\n-        <span style={{ color: darkMode ? '#a0aec0' : '#64748b' }}>Wind: {weather?.wind?.speed} m/s</span>\r\n-      </div>\r\n+      <div style={{ \r\n+        fontSize: '3rem',\r\n+        marginBottom: '1rem',\r\n+        display: 'inline-block'\r\n+      }}>‚õÖ</div>\r\n+      <h3 style={{fontSize: '1.5rem', fontWeight: '600', marginBottom: '0.5rem'}}>Nairobi Weather</h3>\r\n+      <p style={{color: darkMode ? '#a0aec0' : '#64748b'}}>{weather.temp} - {weather.condition}</p>\r\n     </div>\r\n   );\r\n };\r\n \r\n // Emergency Services Component\r\n const EmergencyServices = ({ darkMode }) => {\r\n-  const services = [\r\n-    { name: \"Police\", number: \"999\", icon: \"üëÆ\", color: \"#3b82f6\" },\r\n-    { name: \"Ambulance\", number: \"911\", icon: \"üöë\", color: \"#ef4444\" },\r\n-    { name: \"Fire Brigade\", number: \"999\", icon: \"üöí\", color: \"#f59e0b\" },\r\n-    { name: \"Child Helpline\", number: \"116\", icon: \"üßí\", color: \"#10b981\" }\r\n-  ];\r\n-\r\n   return (\r\n     <div style={{\r\n       backgroundColor: darkMode ? '#2d3748' : '#f3f4f6',\r\n-      borderRadius: '12px',\r\n-      padding: '1rem',\r\n-      margin: '1rem 0',\r\n-      boxShadow: '0 2px 4px rgba(0,0,0,0.1)'\r\n+      borderRadius: '16px',\r\n+      padding: '2rem 1.5rem',\r\n+      border: '2px solid #ef4444',\r\n+      textAlign: 'center',\r\n+      cursor: 'pointer',\r\n+      transition: 'transform 0.3s',\r\n+      ':hover': {\r\n+        transform: 'translateY(-5px)',\r\n+      }\r\n     }}>\r\n-      <h3 style={{ marginTop: 0, color: darkMode ? '#e2e8f0' : '#1e293b' }}>Emergency Services</h3>\r\n       <div style={{ \r\n-        display: 'grid',\r\n-        gridTemplateColumns: 'repeat(auto-fit, minmax(120px, 1fr))',\r\n-        gap: '0.5rem'\r\n+        fontSize: '3rem',\r\n+        marginBottom: '1rem',\r\n+        display: 'inline-block'\r\n+      }}>üö®</div>\r\n+      <h3 style={{fontSize: '1.5rem', fontWeight: '600', marginBottom: '0.5rem'}}>Emergency Services</h3>\r\n+      <p style={{color: darkMode ? '#a0aec0' : '#64748b'}}>Quick access to emergency contacts</p>\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+// Login Page Component\r\n+const LoginPage = ({ darkMode, onLogin }) => {\r\n+  const [email, setEmail] = useState('');\r\n+  const [password, setPassword] = useState('');\r\n+\r\n+  const handleSubmit = (e) => {\r\n+    e.preventDefault();\r\n+    onLogin();\r\n+  };\r\n+\r\n+  return (\r\n+    <div style={{\r\n+      minHeight: '100vh',\r\n+      display: 'flex',\r\n+      justifyContent: 'center',\r\n+      alignItems: 'center',\r\n+      backgroundImage: 'url(https://images.unsplash.com/photo-1477959858617-67f85cf4f1df?ixlib=rb-1.2.1&auto=format&fit=crop&w=1350&q=80)',\r\n+      backgroundSize: 'cover',\r\n+      backgroundPosition: 'center',\r\n+    }}>\r\n+      <div style={{\r\n+        backgroundColor: 'rgba(255, 255, 255, 0.15)',\r\n+        backdropFilter: 'blur(10px)',\r\n+        borderRadius: '20px',\r\n+        padding: '2.5rem',\r\n+        width: '100%',\r\n+        maxWidth: '400px',\r\n+        boxShadow: '0 8px 32px 0 rgba(31, 38, 135, 0.37)',\r\n+        border: '1px solid rgba(255, 255, 255, 0.18)',\r\n       }}>\r\n-        {services.map((service) => (\r\n-          <a \r\n-            key={service.name}\r\n-            href={`tel:${service.number}`}\r\n+        <h2 style={{\r\n+          textAlign: 'center',\r\n+          color: 'white',\r\n+          marginBottom: '2rem',\r\n+          fontSize: '2rem',\r\n+          fontWeight: '600'\r\n+        }}>Welcome to UrbanFlow</h2>\r\n+        \r\n+        <form onSubmit={handleSubmit}>\r\n+          <div style={{ marginBottom: '1.5rem' }}>\r\n+            <label style={{\r\n+              display: 'block',\r\n+              marginBottom: '0.5rem',\r\n+              color: 'white',\r\n+              fontWeight: '500'\r\n+            }}>Email</label>\r\n+            <input\r\n+              type=\"email\"\r\n+              value={email}\r\n+              onChange={(e) => setEmail(e.target.value)}\r\n+              required\r\n+              style={{\r\n+                width: '100%',\r\n+                padding: '0.75rem 1rem',\r\n+                borderRadius: '8px',\r\n+                border: '1px solid rgba(255, 255, 255, 0.3)',\r\n+                backgroundColor: 'rgba(255, 255, 255, 0.1)',\r\n+                color: 'white',\r\n+                outline: 'none',\r\n+                '::placeholder': {\r\n+                  color: 'rgba(255, 255, 255, 0.7)'\r\n+                }\r\n+              }}\r\n+              placeholder=\"Enter your email\"\r\n+            />\r\n+          </div>\r\n+          \r\n+          <div style={{ marginBottom: '2rem' }}>\r\n+            <label style={{\r\n+              display: 'block',\r\n+              marginBottom: '0.5rem',\r\n+              color: 'white',\r\n+              fontWeight: '500'\r\n+            }}>Password</label>\r\n+            <input\r\n+              type=\"password\"\r\n+              value={password}\r\n+              onChange={(e) => setPassword(e.target.value)}\r\n+              required\r\n+              style={{\r\n+                width: '100%',\r\n+                padding: '0.75rem 1rem',\r\n+                borderRadius: '8px',\r\n+                border: '1px solid rgba(255, 255, 255, 0.3)',\r\n+                backgroundColor: 'rgba(255, 255, 255, 0.1)',\r\n+                color: 'white',\r\n+                outline: 'none',\r\n+                '::placeholder': {\r\n+                  color: 'rgba(255, 255, 255, 0.7)'\r\n+                }\r\n+              }}\r\n+              placeholder=\"Enter your password\"\r\n+            />\r\n+          </div>\r\n+          \r\n+          <button\r\n+            type=\"submit\"\r\n             style={{\r\n-              display: 'flex',\r\n-              flexDirection: 'column',\r\n-              alignItems: 'center',\r\n+              width: '100%',\r\n               padding: '0.75rem',\r\n               borderRadius: '8px',\r\n-              backgroundColor: darkMode ? '#4a5568' : '#e2e8f0',\r\n-              color: darkMode ? '#e2e8f0' : '#1e293b',\r\n-              textDecoration: 'none',\r\n-              transition: 'transform 0.2s',\r\n+              border: 'none',\r\n+              backgroundColor: 'rgba(255, 255, 255, 0.2)',\r\n+              color: 'white',\r\n+              fontWeight: '600',\r\n+              cursor: 'pointer',\r\n+              transition: 'background-color 0.3s',\r\n               ':hover': {\r\n-                transform: 'scale(1.05)'\r\n+                backgroundColor: 'rgba(255, 255, 255, 0.3)'\r\n               }\r\n             }}\r\n           >\r\n-            <span style={{ fontSize: '1.5rem' }}>{service.icon}</span>\r\n-            <span style={{ fontWeight: '600' }}>{service.name}</span>\r\n-            <span style={{ fontSize: '0.9rem' }}>{service.number}</span>\r\n-          </a>\r\n-        ))}\r\n+            Login\r\n+          </button>\r\n+        </form>\r\n       </div>\r\n     </div>\r\n   );\r\n };\r\n \r\n-// Main Home Component\r\n-export default function Home() {\r\n-  const navigate = useNavigate();\r\n-  const [searchQuery, setSearchQuery] = useState('');\r\n+// Main App Component\r\n+export default function App() {\r\n   const [darkMode, setDarkMode] = useState(false);\r\n-  const [selectedService, setSelectedService] = useState(null);\r\n-  const [orderCount, setOrderCount] = useState(0);\r\n-  const [achievements, setAchievements] = useState([]);\r\n   const [showChat, setShowChat] = useState(false);\r\n-  const [events, setEvents] = useState([]);\r\n-  const [eventsLoading, setEventsLoading] = useState(true);\r\n+  const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n \r\n-  const services = [\r\n-    { \r\n-      name: 'Transport', \r\n-      path: '/transport', \r\n-      icon: 'üöå', \r\n-      desc: 'Plan your multi-modal journey across the city',\r\n-      color: '#3b82f6',\r\n-      details: 'Find the best routes combining metro, buses, and bikes. Real-time updates and ticket purchasing available.'\r\n-    },\r\n-    { \r\n-      name: 'Food Delivery', \r\n-      path: '/food', \r\n-      icon: 'üçî', \r\n-      desc: 'Discover local restaurants and cafes',\r\n-      color: '#ef4444',\r\n-      details: 'Order from hundreds of restaurants with special discounts. Track your delivery in real-time.'\r\n-    },\r\n-    { \r\n-      name: 'Groceries', \r\n-      path: '/food', \r\n-      icon: 'üõí', \r\n-      desc: 'Get groceries delivered in minutes',\r\n-      color: '#10b981',\r\n-      details: 'Same-day delivery from local supermarkets. Schedule recurring orders for essentials.'\r\n-    },\r\n-    { \r\n-      name: 'Services', \r\n-      path: '/food', \r\n-      icon: 'üõ†Ô∏è', \r\n-      desc: 'Find urban services near you',\r\n-      color: '#8b5cf6',\r\n-      details: 'Book home services, repairs, and professional help with verified providers.'\r\n-    },\r\n-    { \r\n-      name: 'Live Events', \r\n-      path: '/events', \r\n-      icon: 'üé§', \r\n-      desc: 'Discover concerts, shows and happenings in Nairobi',\r\n-      color: '#f59e0b',\r\n-      details: 'Find the latest concerts, theater shows, art exhibitions and special events happening around Nairobi. Get tickets and directions.'\r\n-    }\r\n-  ];\r\n-\r\n-  // Fetch Nairobi events\r\n-  useEffect(() => {\r\n-    const fetchEvents = async () => {\r\n-      try {\r\n-        // Note: In production, use your own backend to make this API call\r\n-        const response = await fetch(\r\n-          `https://app.ticketmaster.com/discovery/v2/events.json?city=Nairobi&apikey=${process.env.REACT_APP_TICKETMASTER_API_KEY}`\r\n-        );\r\n-        \r\n-        if (!response.ok) {\r\n-          throw new Error('Failed to fetch events');\r\n-        }\r\n-        \r\n-        const data = await response.json();\r\n-        setEvents(data._embedded?.events || []);\r\n-      } catch (err) {\r\n-        console.error('Error fetching events:', err);\r\n-        // Fallback to sample events if API fails\r\n-        setEvents([\r\n-          {\r\n-            name: \"Nairobi Jazz Festival\",\r\n-            dates: { start: { localDate: \"2023-08-15\" } },\r\n-            _embedded: {\r\n-              venues: [{ name: \"KICC\" }]\r\n-            }\r\n-          },\r\n-          {\r\n-            name: \"Kenya National Theatre Play\",\r\n-            dates: { start: { localDate: \"2023-08-20\" } },\r\n-            _embedded: {\r\n-              venues: [{ name: \"Kenya National Theatre\" }]\r\n-            }\r\n-          }\r\n-        ]);\r\n-      } finally {\r\n-        setEventsLoading(false);\r\n-      }\r\n-    };\r\n-\r\n-    fetchEvents();\r\n-  }, []);\r\n-\r\n-  // Check for achievements\r\n-  useEffect(() => {\r\n-    if (orderCount === 1) {\r\n-      addAchievement('First Order!', 'üéâ');\r\n-    } else if (orderCount === 5) {\r\n-      addAchievement('Regular Customer!', 'üèÜ');\r\n-    } else if (orderCount === 10) {\r\n-      addAchievement('Super User!', 'üåü');\r\n-    }\r\n-  }, [orderCount]);\r\n-\r\n-  const addAchievement = (title, icon) => {\r\n-    if (!achievements.some(a => a.title === title)) {\r\n-      const newAchievement = { title, icon, id: Date.now() };\r\n-      setAchievements(prev => [...prev, newAchievement]);\r\n-      \r\n-      // Auto-hide achievement after 3 seconds\r\n-      setTimeout(() => {\r\n-        setAchievements(prev => prev.filter(a => a.id !== newAchievement.id));\r\n-      }, 3000);\r\n-    }\r\n-  };\r\n-\r\n-  const handleSearch = (e) => {\r\n-    e.preventDefault();\r\n-    if (searchQuery.trim()) {\r\n-      navigate(`/food?search=${encodeURIComponent(searchQuery)}`);\r\n-    }\r\n-  };\r\n-\r\n   const toggleDarkMode = () => {\r\n     setDarkMode(!darkMode);\r\n   };\r\n \r\n-  const openServicePopup = (service) => {\r\n-    setSelectedService(service);\r\n-    setOrderCount(prev => prev + 1);\r\n+  const toggleChat = () => {\r\n+    setShowChat(!showChat);\r\n   };\r\n \r\n-  const closePopup = () => {\r\n-    setSelectedService(null);\r\n+  const handleLogin = () => {\r\n+    setIsLoggedIn(true);\r\n   };\r\n \r\n-  const toggleChat = () => {\r\n-    setShowChat(!showChat);\r\n-  };\r\n+  if (!isLoggedIn) {\r\n+    return <LoginPage darkMode={darkMode} onLogin={handleLogin} />;\r\n+  }\r\n \r\n   return (\r\n     <div style={{\r\n       backgroundColor: darkMode ? '#1a202c' : '#f8fafc',\r\n       minHeight: '100vh',\r\n       paddingBottom: '3rem',\r\n       color: darkMode ? '#e2e8f0' : '#1e293b',\r\n       transition: 'all 0.3s ease',\r\n-      position: 'relative'\r\n     }}>\r\n-      {/* Theme Toggle Button */}\r\n       <button \r\n         onClick={toggleDarkMode} \r\n         style={{\r\n           position: 'fixed',\r\n@@ -728,14 +478,12 @@\n           transition: 'all 0.3s ease',\r\n           boxShadow: '0 2px 5px rgba(0, 0, 0, 0.2)',\r\n           zIndex: 100\r\n         }}\r\n-        aria-label={darkMode ? 'Switch to light mode' : 'Switch to dark mode'}\r\n       >\r\n         {darkMode ? '‚òÄÔ∏è' : 'üåô'}\r\n       </button>\r\n       \r\n-      {/* Hero Section with UrbanBuddy */}\r\n       <section style={{\r\n         background: darkMode \r\n           ? 'linear-gradient(135deg, #2d3748 0%, #1a202c 100%)' \r\n           : 'linear-gradient(135deg, #6b46c1 0%, #3b82f6 100%)',\r\n@@ -764,49 +512,12 @@\n             fontSize: '1.25rem',\r\n             marginBottom: '2rem',\r\n             opacity: 0.9,\r\n           }}>Your seamless urban living companion</p>\r\n-          \r\n-          <form onSubmit={handleSearch} style={{\r\n-            display: 'flex',\r\n-            maxWidth: '600px',\r\n-            margin: '0 auto',\r\n-            borderRadius: '50px',\r\n-            overflow: 'hidden',\r\n-            boxShadow: '0 4px 10px rgba(0, 0, 0, 0.2)',\r\n-          }}>\r\n-            <input\r\n-              type=\"text\"\r\n-              placeholder=\"Search for restaurants, services...\"\r\n-              value={searchQuery}\r\n-              onChange={(e) => setSearchQuery(e.target.value)}\r\n-              style={{\r\n-                flex: 1,\r\n-                padding: '1rem 1.5rem',\r\n-                border: 'none',\r\n-                fontSize: '1rem',\r\n-                outline: 'none',\r\n-                backgroundColor: darkMode ? '#2d3748' : 'white',\r\n-                color: darkMode ? '#e2e8f0' : '#1e293b',\r\n-              }}\r\n-            />\r\n-            <button type=\"submit\" style={{\r\n-              backgroundColor: darkMode ? '#4a5568' : '#1e40af',\r\n-              color: 'white',\r\n-              border: 'none',\r\n-              padding: '0 1.5rem',\r\n-              cursor: 'pointer',\r\n-              fontSize: '1.25rem',\r\n-              transition: 'background-color 0.2s'\r\n-            }}>\r\n-              <span>üîç</span>\r\n-            </button>\r\n-          </form>\r\n         </div>\r\n         <UrbanBuddy darkMode={darkMode} onChatOpen={toggleChat} />\r\n       </section>\r\n \r\n-      {/* Services Grid */}\r\n       <section style={{\r\n         padding: '2rem 1rem',\r\n         maxWidth: '1200px',\r\n         margin: '0 auto',\r\n@@ -817,287 +528,64 @@\n           marginBottom: '1.5rem',\r\n           color: darkMode ? '#e2e8f0' : '#1e293b',\r\n           textAlign: 'center',\r\n         }}>What do you need today?</h2>\r\n+        \r\n         <div style={{\r\n           display: 'grid',\r\n           gridTemplateColumns: 'repeat(auto-fit, minmax(250px, 1fr))',\r\n           gap: '1.5rem',\r\n           marginTop: '1rem',\r\n         }}>\r\n-          {services.map((service) => (\r\n-            <div \r\n-              key={service.name} \r\n-              onClick={() => openServicePopup(service)}\r\n-              style={{ \r\n-                padding: '2rem 1.5rem',\r\n-                borderRadius: '16px',\r\n-                border: `2px solid ${service.color}`,\r\n-                textAlign: 'center',\r\n-                cursor: 'pointer',\r\n-                transition: 'transform 0.3s, box-shadow 0.3s',\r\n-                backgroundColor: darkMode \r\n-                  ? `${service.color}20` \r\n-                  : `${service.color}10`,\r\n-                ':hover': {\r\n-                  transform: 'translateY(-5px)',\r\n-                  boxShadow: '0 10px 20px rgba(0, 0, 0, 0.1)',\r\n-                }\r\n-              }}\r\n-            >\r\n-              <div style={{ \r\n-                fontSize: '3rem',\r\n-                marginBottom: '1rem',\r\n-                display: 'inline-block',\r\n-                animation: 'float 3s ease-in-out infinite'\r\n-              }}>{service.icon}</div>\r\n-              <h3 style={{fontSize: '1.5rem', fontWeight: '600', marginBottom: '0.5rem'}}>{service.name}</h3>\r\n-              <p style={{color: darkMode ? '#a0aec0' : '#64748b'}}>{service.desc}</p>\r\n-            </div>\r\n-          ))}\r\n-        </div>\r\n-      </section>\r\n-\r\n-      {/* Weather and Emergency Services Section */}\r\n-      <section style={{\r\n-        padding: '2rem 1rem',\r\n-        maxWidth: '1200px',\r\n-        margin: '0 auto',\r\n-        display: 'grid',\r\n-        gridTemplateColumns: 'repeat(auto-fit, minmax(300px, 1fr))',\r\n-        gap: '1.5rem'\r\n-      }}>\r\n-        <WeatherWidget darkMode={darkMode} />\r\n-        <EmergencyServices darkMode={darkMode} />\r\n-      </section>\r\n-\r\n-      {/* Featured Section */}\r\n-      <section style={{\r\n-        padding: '2rem 1rem',\r\n-        maxWidth: '1200px',\r\n-        margin: '0 auto',\r\n-      }}>\r\n-        <h2 style={{\r\n-          fontSize: '2rem',\r\n-          fontWeight: '700',\r\n-          marginBottom: '1.5rem',\r\n-          color: darkMode ? '#e2e8f0' : '#1e293b',\r\n-          textAlign: 'center',\r\n-        }}>Quick Access</h2>\r\n-        <div style={{\r\n-          display: 'flex',\r\n-          justifyContent: 'center',\r\n-          gap: '1rem',\r\n-          flexWrap: 'wrap',\r\n-        }}>\r\n-          <button \r\n-            onClick={() => navigate('/transport?from=home&to=downtown')}\r\n-            style={{\r\n-              padding: '0.75rem 1.5rem',\r\n-              borderRadius: '50px',\r\n-              border: 'none',\r\n-              backgroundColor: darkMode ? '#2d3748' : '#e2e8f0',\r\n-              color: darkMode ? '#e2e8f0' : '#1e293b',\r\n-              fontWeight: '600',\r\n-              cursor: 'pointer',\r\n-              transition: 'all 0.2s',\r\n-              display: 'flex',\r\n-              alignItems: 'center',\r\n-              gap: '0.5rem',\r\n-              fontSize: '1rem'\r\n-            }}\r\n-          >\r\n-            üöï To Downtown\r\n-          </button>\r\n-          <button \r\n-            onClick={() => navigate('/food?category=fastfood')}\r\n-            style={{\r\n-              padding: '0.75rem 1.5rem',\r\n-              borderRadius: '50px',\r\n-              border: 'none',\r\n-              backgroundColor: darkMode ? '#2d3748' : '#e2e8f0',\r\n-              color: darkMode ? '#e2e8f0' : '#1e293b',\r\n-              fontWeight: '600',\r\n-              cursor: 'pointer',\r\n-              transition: 'all 0.2s',\r\n-              display: 'flex',\r\n-              alignItems: 'center',\r\n-              gap: '0.5rem',\r\n-              fontSize: '1rem'\r\n-            }}\r\n-          >\r\n-            üçü Fast Food\r\n-          </button>\r\n-          <button \r\n-            onClick={() => navigate('/food?category=coffee')}\r\n-            style={{\r\n-              padding: '0.75rem 1.5rem',\r\n-              borderRadius: '50px',\r\n-              border: 'none',\r\n-              backgroundColor: darkMode ? '#2d3748' : '#e2e8f0',\r\n-              color: darkMode ? '#e2e8f0' : '#1e293b',\r\n-              fontWeight: '600',\r\n-              cursor: 'pointer',\r\n-              transition: 'all 0.2s',\r\n-              display: 'flex',\r\n-              alignItems: 'center',\r\n-              gap: '0.5rem',\r\n-              fontSize: '1rem'\r\n-            }}\r\n-          >\r\n-            ‚òï Coffee Shops\r\n-          </button>\r\n-          <button \r\n-            onClick={() => navigate('/events')}\r\n-            style={{\r\n-              padding: '0.75rem 1.5rem',\r\n-              borderRadius: '50px',\r\n-              border: 'none',\r\n-              backgroundColor: darkMode ? '#2d3748' : '#e2e8f0',\r\n-              color: darkMode ? '#e2e8f0' : '#1e293b',\r\n-              fontWeight: '600',\r\n-              cursor: 'pointer',\r\n-              transition: 'all 0.2s',\r\n-              display: 'flex',\r\n-              alignItems: 'center',\r\n-              gap: '0.5rem',\r\n-              fontSize: '1rem'\r\n-            }}\r\n-          >\r\n-            üé§ Nairobi Events\r\n-          </button>\r\n-        </div>\r\n-      </section>\r\n-\r\n-      {/* Service Popup */}\r\n-      {selectedService && (\r\n-        <div style={{\r\n-          position: 'fixed',\r\n-          top: 0,\r\n-          left: 0,\r\n-          right: 0,\r\n-          bottom: 0,\r\n-          backgroundColor: 'rgba(0, 0, 0, 0.7)',\r\n-          display: 'flex',\r\n-          justifyContent: 'center',\r\n-          alignItems: 'center',\r\n-          zIndex: 1000,\r\n-        }} onClick={closePopup}>\r\n+          <WeatherWidget darkMode={darkMode} />\r\n+          <EmergencyServices darkMode={darkMode} />\r\n+          \r\n           <div style={{\r\n-            backgroundColor: darkMode ? '#2d3748' : 'white',\r\n+            backgroundColor: darkMode ? '#2d3748' : '#f3f4f6',\r\n             borderRadius: '16px',\r\n-            padding: '2rem',\r\n-            maxWidth: '500px',\r\n-            width: '90%',\r\n-            boxShadow: '0 10px 25px rgba(0, 0, 0, 0.2)',\r\n-            position: 'relative',\r\n-            border: darkMode ? '1px solid #4a5568' : '1px solid #e2e8f0',\r\n-          }} onClick={(e) => e.stopPropagation()}>\r\n-            <button style={{\r\n-              position: 'absolute',\r\n-              top: '1rem',\r\n-              right: '1rem',\r\n-              background: 'none',\r\n-              border: 'none',\r\n-              fontSize: '1.5rem',\r\n-              cursor: 'pointer',\r\n-              color: darkMode ? '#a0aec0' : '#64748b',\r\n-            }} onClick={closePopup}>√ó</button>\r\n+            padding: '2rem 1.5rem',\r\n+            border: '2px solid #10b981',\r\n+            textAlign: 'center',\r\n+            cursor: 'pointer',\r\n+            transition: 'transform 0.3s',\r\n+            ':hover': {\r\n+              transform: 'translateY(-5px)',\r\n+            }\r\n+          }}>\r\n             <div style={{ \r\n-              display: 'flex', \r\n-              alignItems: 'center', \r\n-              gap: '1rem',\r\n-              marginBottom: '1.5rem'\r\n-            }}>\r\n-              <span style={{ fontSize: '2.5rem', animation: 'float 3s ease-in-out infinite' }}>{selectedService.icon}</span>\r\n-              <h3 style={{fontSize: '1.8rem', fontWeight: '700', marginBottom: '1rem', color: darkMode ? '#e2e8f0' : '#1e293b'}}>{selectedService.name}</h3>\r\n-            </div>\r\n-            <p style={{color: darkMode ? '#a0aec0' : '#64748b', fontSize: '1.1rem', lineHeight: '1.6', marginBottom: '2rem'}}>{selectedService.details}</p>\r\n-            {selectedService.name === 'Live Events' && (\r\n-              <div style={{\r\n-                backgroundColor: darkMode ? '#4a5568' : '#f3f4f6',\r\n-                borderRadius: '12px',\r\n-                padding: '1rem',\r\n-                marginBottom: '1.5rem'\r\n-              }}>\r\n-                <h4 style={{\r\n-                  fontSize: '1.2rem',\r\n-                  fontWeight: '600',\r\n-                  marginBottom: '0.5rem',\r\n-                  color: darkMode ? '#e2e8f0' : '#1e293b'\r\n-                }}>Upcoming Events</h4>\r\n-                {eventsLoading ? (\r\n-                  <p>Loading events...</p>\r\n-                ) : events.length > 0 ? (\r\n-                  <ul style={{\r\n-                    listStyle: 'none',\r\n-                    padding: 0,\r\n-                    margin: 0\r\n-                  }}>\r\n-                    {events.slice(0, 3).map((event, index) => (\r\n-                      <li key={index} style={{padding: '0.5rem 0', borderBottom: darkMode ? '1px solid #4a5568' : '1px solid #e2e8f0'}}>\r\n-                        <strong>üé§ {event.name}</strong>\r\n-                        <div style={{ display: 'flex', justifyContent: 'space-between' }}>\r\n-                          <span>{event.dates?.start?.localDate}</span>\r\n-                          <span>{event._embedded?.venues?.[0]?.name || 'Nairobi'}</span>\r\n-                        </div>\r\n-                      </li>\r\n-                    ))}\r\n-                  </ul>\r\n-                ) : (\r\n-                  <p>No upcoming events found</p>\r\n-                )}\r\n-              </div>\r\n-            )}\r\n-            <button \r\n-              style={{ \r\n-                padding: '0.75rem 1.5rem',\r\n-                borderRadius: '8px',\r\n-                border: 'none',\r\n-                backgroundColor: selectedService.color,\r\n-                color: 'white',\r\n-                fontWeight: '600',\r\n-                cursor: 'pointer',\r\n-                transition: 'all 0.2s',\r\n-                fontSize: '1rem'\r\n-              }}\r\n-              onClick={() => {\r\n-                navigate(selectedService.path);\r\n-                closePopup();\r\n-              }}\r\n-            >\r\n-              Explore {selectedService.name}\r\n-            </button>\r\n+              fontSize: '3rem',\r\n+              marginBottom: '1rem',\r\n+              display: 'inline-block'\r\n+            }}>üöå</div>\r\n+            <h3 style={{fontSize: '1.5rem', fontWeight: '600', marginBottom: '0.5rem'}}>Transport</h3>\r\n+            <p style={{color: darkMode ? '#a0aec0' : '#64748b'}}>Plan your multi-modal journey</p>\r\n           </div>\r\n+          \r\n+          <div style={{\r\n+            backgroundColor: darkMode ? '#2d3748' : '#f3f4f6',\r\n+            borderRadius: '16px',\r\n+            padding: '2rem 1.5rem',\r\n+            border: '2px solid #8b5cf6',\r\n+            textAlign: 'center',\r\n+            cursor: 'pointer',\r\n+            transition: 'transform 0.3s',\r\n+            ':hover': {\r\n+              transform: 'translateY(-5px)',\r\n+            }\r\n+          }}>\r\n+            <div style={{ \r\n+              fontSize: '3rem',\r\n+              marginBottom: '1rem',\r\n+              display: 'inline-block'\r\n+            }}>üçî</div>\r\n+            <h3 style={{fontSize: '1.5rem', fontWeight: '600', marginBottom: '0.5rem'}}>Food Delivery</h3>\r\n+            <p style={{color: darkMode ? '#a0aec0' : '#64748b'}}>Discover local restaurants</p>\r\n+          </div>\r\n         </div>\r\n-      )}\r\n+      </section>\r\n \r\n-      {/* Achievements */}\r\n-      {achievements.map(achievement => (\r\n-        <div key={achievement.id} style={{\r\n-          position: 'fixed',\r\n-          bottom: '20px',\r\n-          right: '20px',\r\n-          background: darkMode ? '#2d3748' : 'white',\r\n-          color: darkMode ? 'white' : '#1e293b',\r\n-          padding: '1rem',\r\n-          borderRadius: '12px',\r\n-          boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',\r\n-          display: 'flex',\r\n-          alignItems: 'center',\r\n-          gap: '0.5rem',\r\n-          zIndex: 1000,\r\n-          animation: 'slideIn 0.5s forwards, fadeOut 0.5s forwards 2.5s'\r\n-        }}>\r\n-          <span style={{fontSize: '1.5rem'}}>{achievement.icon}</span>\r\n-          <span>{achievement.title}</span>\r\n-        </div>\r\n-      ))}\r\n-\r\n-      {/* Chat Modal */}\r\n       {showChat && <ChatModal darkMode={darkMode} onClose={toggleChat} />}\r\n \r\n-      {/* Footer with copyright */}\r\n       <footer style={{\r\n         textAlign: 'center',\r\n         padding: '2rem 1rem',\r\n         color: darkMode ? '#a0aec0' : '#64748b',\r\n@@ -1107,5 +595,5 @@\n         <p>¬© {new Date().getFullYear()} UrbanFlow - Created by Nick</p>\r\n       </footer>\r\n     </div>\r\n   );\r\n-};\n\\ No newline at end of file\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1754480770861,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,10 +2,16 @@\n import { useNavigate } from 'react-router-dom';\r\n \r\n // UrbanBuddy AI Assistant Component\r\n const UrbanBuddy = ({ darkMode, onChatOpen }) => {\r\n-  const [expression, setExpression] = useState('ü§ñ');\r\n+  const [position, setPosition] = useState({ x: 20, y: 50 });\r\n+  const [expression, setExpression] = useState('üòä');\r\n+  const [direction, setDirection] = useState(1);\r\n   const [costume, setCostume] = useState(null);\r\n+  const [isActive, setIsActive] = useState(false);\r\n+  const botRef = useRef(null);\r\n+  const animationRef = useRef(null);\r\n+  const lastInteractionTime = useRef(Date.now());\r\n \r\n   // Seasonal costumes\r\n   useEffect(() => {\r\n     const today = new Date();\r\n@@ -17,69 +23,182 @@\n     else if (month === 4) setCostume('üå∏');\r\n     else setCostume(null);\r\n   }, []);\r\n \r\n+  // Make the bot wander with more dynamic movement\r\n+  useEffect(() => {\r\n+    const moveInterval = setInterval(() => {\r\n+      setPosition(prev => {\r\n+        const now = Date.now();\r\n+        const timeSinceLastInteraction = now - lastInteractionTime.current;\r\n+        \r\n+        // More active movement right after interaction\r\n+        const speedMultiplier = timeSinceLastInteraction < 5000 ? 2 : 1;\r\n+        \r\n+        let newX = prev.x + (3 * direction * speedMultiplier);\r\n+        let newY = prev.y + (Math.random() * 6 - 3);\r\n+        \r\n+        // Bounce off edges\r\n+        if (newX > window.innerWidth - 80) {\r\n+          setDirection(-1);\r\n+          triggerAnimation('spin');\r\n+        }\r\n+        if (newX < 20) {\r\n+          setDirection(1);\r\n+          triggerAnimation('spin');\r\n+        }\r\n+        if (newY < 20) newY = 20;\r\n+        if (newY > window.innerHeight - 100) newY = window.innerHeight - 100;\r\n+        \r\n+        return { x: newX, y: newY };\r\n+      });\r\n+    }, 100);\r\n+\r\n+    return () => clearInterval(moveInterval);\r\n+  }, [direction]);\r\n+\r\n+  // Change expressions randomly with more variety\r\n+  useEffect(() => {\r\n+    const expressions = ['üòä', 'ü§î', 'üòÆ', 'üòé', 'üëã', 'ü§ñ', '‚ú®', 'üåü'];\r\n+    const expressionInterval = setInterval(() => {\r\n+      if (!isActive) {\r\n+        setExpression(expressions[Math.floor(Math.random() * expressions.length)]);\r\n+        // Random animations when idle\r\n+        if (Math.random() > 0.8) {\r\n+          triggerAnimation(['bounce', 'spin', 'wobble'][Math.floor(Math.random() * 3)]);\r\n+        }\r\n+      }\r\n+    }, 3000);\r\n+    return () => clearInterval(expressionInterval);\r\n+  }, [isActive]);\r\n+\r\n+  const triggerAnimation = (type) => {\r\n+    if (animationRef.current) {\r\n+      clearTimeout(animationRef.current);\r\n+    }\r\n+    \r\n+    const botElement = botRef.current;\r\n+    if (!botElement) return;\r\n+    \r\n+    botElement.style.animation = 'none';\r\n+    void botElement.offsetWidth; // Trigger reflow\r\n+    \r\n+    switch(type) {\r\n+      case 'spin':\r\n+        botElement.style.animation = 'spin 1s ease';\r\n+        break;\r\n+      case 'bounce':\r\n+        botElement.style.animation = 'bounce 0.5s ease';\r\n+        break;\r\n+      case 'wobble':\r\n+        botElement.style.animation = 'wobble 0.8s ease';\r\n+        break;\r\n+      default:\r\n+        botElement.style.animation = '';\r\n+    }\r\n+    \r\n+    animationRef.current = setTimeout(() => {\r\n+      if (botElement) botElement.style.animation = '';\r\n+    }, 1000);\r\n+  };\r\n+\r\n   const handleClick = () => {\r\n+    lastInteractionTime.current = Date.now();\r\n+    setIsActive(true);\r\n+    triggerAnimation('bounce');\r\n     setExpression('üí°');\r\n+    \r\n+    // Trigger chat opening in parent component\r\n     onChatOpen();\r\n     \r\n+    // Return to normal after a delay\r\n     setTimeout(() => {\r\n-      setExpression('ü§ñ');\r\n+      setIsActive(false);\r\n     }, 3000);\r\n   };\r\n \r\n+  // Custom animations\r\n+  const animations = `\r\n+    @keyframes spin {\r\n+      0% { transform: rotate(0deg) scaleX(${direction}); }\r\n+      100% { transform: rotate(360deg) scaleX(${direction}); }\r\n+    }\r\n+    @keyframes bounce {\r\n+      0%, 100% { transform: translateY(0) scaleX(${direction}); }\r\n+      50% { transform: translateY(-20px) scaleX(${direction}); }\r\n+    }\r\n+    @keyframes wobble {\r\n+      0%, 100% { transform: rotate(0deg) scaleX(${direction}); }\r\n+      25% { transform: rotate(5deg) scaleX(${direction}); }\r\n+      75% { transform: rotate(-5deg) scaleX(${direction}); }\r\n+    }\r\n+    @keyframes float {\r\n+      0% { transform: translateY(0px) scaleX(${direction}); }\r\n+      50% { transform: translateY(-10px) scaleX(${direction}); }\r\n+      100% { transform: translateY(0px) scaleX(${direction}); }\r\n+    }\r\n+  `;\r\n+\r\n   return (\r\n-    <div \r\n-      onClick={handleClick}\r\n-      style={{\r\n-        position: 'fixed',\r\n-        bottom: '30px',\r\n-        right: '30px',\r\n-        fontSize: '2.5rem',\r\n-        cursor: 'pointer',\r\n-        zIndex: 100,\r\n-        filter: darkMode \r\n-          ? 'drop-shadow(0 0 8px rgba(255,255,255,0.7))' \r\n-          : 'drop-shadow(0 0 8px rgba(0,0,0,0.3))',\r\n-        userSelect: 'none',\r\n-      }}\r\n-    >\r\n-      <div style={{ \r\n-        position: 'relative',\r\n-        display: 'flex',\r\n-        flexDirection: 'column',\r\n-        alignItems: 'center'\r\n-      }}>\r\n-        <div style={{\r\n+    <>\r\n+      <style>{animations}</style>\r\n+      <div \r\n+        ref={botRef}\r\n+        onClick={handleClick}\r\n+        style={{\r\n+          position: 'fixed',\r\n+          left: `${position.x}px`,\r\n+          top: `${position.y}px`,\r\n+          fontSize: '2.5rem',\r\n+          cursor: 'pointer',\r\n+          transition: 'all 0.3s ease',\r\n+          transform: `scaleX(${direction})`,\r\n+          zIndex: 100,\r\n+          filter: darkMode \r\n+            ? 'drop-shadow(0 0 8px rgba(255,255,255,0.7))' \r\n+            : 'drop-shadow(0 0 8px rgba(0,0,0,0.3))',\r\n+          userSelect: 'none',\r\n+          animation: 'float 4s ease-in-out infinite'\r\n+        }}\r\n+      >\r\n+        <div style={{ \r\n           position: 'relative',\r\n-          width: '60px',\r\n-          height: '60px',\r\n-          backgroundColor: darkMode ? '#4a5568' : '#3b82f6',\r\n-          borderRadius: '50%',\r\n           display: 'flex',\r\n-          justifyContent: 'center',\r\n-          alignItems: 'center',\r\n-          color: 'white'\r\n+          flexDirection: 'column',\r\n+          alignItems: 'center'\r\n         }}>\r\n-          <span style={{ fontSize: '1.8rem' }}>{expression}</span>\r\n-          {costume && (\r\n-            <span style={{\r\n-              position: 'absolute',\r\n-              top: '-15px',\r\n-              right: '-10px',\r\n-              fontSize: '1.5rem',\r\n-              transform: 'rotate(15deg)'\r\n-            }}>\r\n-              {costume}\r\n-            </span>\r\n-          )}\r\n+          {/* Bot icon with costume */}\r\n+          <div style={{\r\n+            position: 'relative',\r\n+            width: '60px',\r\n+            height: '60px',\r\n+            backgroundColor: darkMode ? '#4a5568' : '#3b82f6',\r\n+            borderRadius: '50%',\r\n+            display: 'flex',\r\n+            justifyContent: 'center',\r\n+            alignItems: 'center',\r\n+            color: 'white'\r\n+          }}>\r\n+            <span style={{ fontSize: '1.8rem' }}>{expression}</span>\r\n+            {costume && (\r\n+              <span style={{\r\n+                position: 'absolute',\r\n+                top: '-15px',\r\n+                right: '-10px',\r\n+                fontSize: '1.5rem',\r\n+                transform: 'rotate(15deg)'\r\n+              }}>\r\n+                {costume}\r\n+              </span>\r\n+            )}\r\n+          </div>\r\n         </div>\r\n       </div>\r\n-    </div>\r\n+    </>\r\n   );\r\n };\r\n \r\n-// Chat Modal Component\r\n+// Chat Modal Component with Functional API Connection\r\n const ChatModal = ({ darkMode, onClose }) => {\r\n   const [messages, setMessages] = useState([\r\n     { text: \"Hello! I'm UrbanBuddy, your AI assistant for urban living. How can I help you today?\", sender: 'bot' }\r\n   ]);\r\n@@ -87,24 +206,70 @@\n   const [isTyping, setIsTyping] = useState(false);\r\n   const chatEndRef = useRef(null);\r\n   const inputRef = useRef(null);\r\n \r\n+  // Auto-scroll to bottom and focus input\r\n   useEffect(() => {\r\n     chatEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n     inputRef.current?.focus();\r\n   }, [messages]);\r\n \r\n+  // Function to call the AI API\r\n   const generateResponse = async (userMessage) => {\r\n     setIsTyping(true);\r\n     \r\n     try {\r\n+      // In a real app, you should call your own backend endpoint that then calls OpenAI\r\n+      // This is just for demonstration purposes\r\n+      const response = await fetch('https://api.openai.com/v1/chat/completions', {\r\n+        method: \"POST\",\r\n+        headers: { \r\n+          \"Content-Type\": \"application/json\",\r\n+          // Note: In production, never expose your API key in frontend code\r\n+          // This should be handled through your own backend\r\n+          \"Authorization\": `Bearer ${process.env.REACT_APP_OPENAI_API_KEY}` \r\n+        },\r\n+        body: JSON.stringify({\r\n+          model: \"gpt-3.5-turbo\",\r\n+          messages: [\r\n+            {\r\n+              role: \"system\",\r\n+              content: \"You are UrbanBuddy, a friendly AI assistant for urban living. \" +\r\n+                \"Provide helpful, concise answers (1-2 sentences) about city life, \" +\r\n+                \"transportation, food delivery, local services, and urban living tips. \" +\r\n+                \"Keep responses practical and urban-focused.\"\r\n+            },\r\n+            {\r\n+              role: \"user\",\r\n+              content: userMessage\r\n+            }\r\n+          ],\r\n+          temperature: 0.7,\r\n+          max_tokens: 150\r\n+        })\r\n+      });\r\n+      \r\n+      if (!response.ok) {\r\n+        throw new Error(`API request failed with status ${response.status}`);\r\n+      }\r\n+      \r\n+      const data = await response.json();\r\n+      const aiResponse = data.choices?.[0]?.message?.content || \r\n+        \"I'm having trouble thinking of a response right now. Could you try asking something else?\";\r\n+      \r\n+      setMessages(prev => [...prev, { \r\n+        text: aiResponse, \r\n+        sender: 'bot' \r\n+      }]);\r\n+    } catch (error) {\r\n+      console.error(\"API error:\", error);\r\n+      // Fallback to a local AI response if API fails\r\n       const fallbackResponses = [\r\n         \"I'm currently experiencing high demand. Try again in a moment!\",\r\n         \"Let me think differently about that... Can you rephrase your question?\",\r\n         \"I specialize in urban living tips. Ask me about transportation, food, or city services!\",\r\n         \"I'm having connection issues, but I'd love to help with your urban living questions!\"\r\n       ];\r\n-      \r\n       setMessages(prev => [...prev, { \r\n         text: fallbackResponses[Math.floor(Math.random() * fallbackResponses.length)], \r\n         sender: 'bot' \r\n       }]);\r\n@@ -115,11 +280,14 @@\n \r\n   const handleSendMessage = async (e) => {\r\n     e.preventDefault();\r\n     if (inputValue.trim() && !isTyping) {\r\n+      // Add user message\r\n       const userMessage = inputValue.trim();\r\n       setMessages(prev => [...prev, { text: userMessage, sender: 'user' }]);\r\n       setInputValue('');\r\n+      \r\n+      // Generate AI response\r\n       await generateResponse(userMessage);\r\n     }\r\n   };\r\n \r\n@@ -139,8 +307,9 @@\n       display: 'flex',\r\n       flexDirection: 'column',\r\n       maxHeight: '60vh'\r\n     }}>\r\n+      {/* Chat header */}\r\n       <div style={{\r\n         padding: '1rem',\r\n         backgroundColor: darkMode ? '#4a5568' : '#3b82f6',\r\n         color: 'white',\r\n@@ -172,8 +341,9 @@\n           √ó\r\n         </button>\r\n       </div>\r\n       \r\n+      {/* Chat messages */}\r\n       <div style={{\r\n         flex: 1,\r\n         padding: '1rem',\r\n         overflowY: 'auto',\r\n@@ -194,16 +364,20 @@\n               backgroundColor: msg.sender === 'user'\r\n                 ? (darkMode ? '#4a5568' : '#3b82f6')\r\n                 : (darkMode ? '#4a5568' : '#e2e8f0'),\r\n               color: msg.sender === 'user' ? 'white' : (darkMode ? 'white' : '#1e293b'),\r\n+              animation: msg.sender === 'bot' && index === messages.length - 1 \r\n+                ? 'fadeIn 0.3s ease' \r\n+                : 'none'\r\n             }}\r\n           >\r\n             {msg.text}\r\n           </div>\r\n         ))}\r\n         <div ref={chatEndRef} />\r\n       </div>\r\n       \r\n+      {/* Chat input */}\r\n       <form onSubmit={handleSendMessage} style={{\r\n         padding: '0.8rem',\r\n         borderTop: darkMode ? '1px solid #4a5568' : '1px solid #e2e8f0',\r\n         display: 'flex',\r\n@@ -253,214 +427,290 @@\n };\r\n \r\n // Weather Widget Component\r\n const WeatherWidget = ({ darkMode }) => {\r\n-  const [weather, setWeather] = useState({\r\n-    temp: '24¬∞C',\r\n-    condition: 'Partly Cloudy',\r\n-    icon: '‚õÖ'\r\n-  });\r\n+  const [weather, setWeather] = useState(null);\r\n+  const [loading, setLoading] = useState(true);\r\n+  const [error, setError] = useState(null);\r\n \r\n+  useEffect(() => {\r\n+    const fetchWeather = async () => {\r\n+      try {\r\n+        // Note: In production, use your own backend to make this API call\r\n+        const response = await fetch(\r\n+          `https://api.openweathermap.org/data/2.5/weather?q=Nairobi&appid=${process.env.REACT_APP_WEATHER_API_KEY}&units=metric`\r\n+        );\r\n+        \r\n+        if (!response.ok) {\r\n+          throw new Error('Failed to fetch weather data');\r\n+        }\r\n+        \r\n+        const data = await response.json();\r\n+        setWeather(data);\r\n+      } catch (err) {\r\n+        setError(err.message);\r\n+      } finally {\r\n+        setLoading(false);\r\n+      }\r\n+    };\r\n+\r\n+    fetchWeather();\r\n+  }, []);\r\n+\r\n+  const getWeatherIcon = (condition) => {\r\n+    switch (condition) {\r\n+      case 'Clear':\r\n+        return '‚òÄÔ∏è';\r\n+      case 'Clouds':\r\n+        return '‚òÅÔ∏è';\r\n+      case 'Rain':\r\n+        return 'üåßÔ∏è';\r\n+      case 'Thunderstorm':\r\n+        return '‚õàÔ∏è';\r\n+      default:\r\n+        return 'üå§Ô∏è';\r\n+    }\r\n+  };\r\n+\r\n+  if (loading) return <div>Loading weather...</div>;\r\n+  if (error) return <div>Weather data unavailable</div>;\r\n+\r\n   return (\r\n     <div style={{\r\n       backgroundColor: darkMode ? '#2d3748' : '#f3f4f6',\r\n-      borderRadius: '16px',\r\n-      padding: '2rem 1.5rem',\r\n-      border: '2px solid #3b82f6',\r\n-      textAlign: 'center',\r\n-      cursor: 'pointer',\r\n-      transition: 'transform 0.3s',\r\n-      ':hover': {\r\n-        transform: 'translateY(-5px)',\r\n-      }\r\n+      borderRadius: '12px',\r\n+      padding: '1rem',\r\n+      margin: '1rem 0',\r\n+      boxShadow: '0 2px 4px rgba(0,0,0,0.1)'\r\n     }}>\r\n-      <div style={{ \r\n-        fontSize: '3rem',\r\n-        marginBottom: '1rem',\r\n-        display: 'inline-block'\r\n-      }}>‚õÖ</div>\r\n-      <h3 style={{fontSize: '1.5rem', fontWeight: '600', marginBottom: '0.5rem'}}>Nairobi Weather</h3>\r\n-      <p style={{color: darkMode ? '#a0aec0' : '#64748b'}}>{weather.temp} - {weather.condition}</p>\r\n+      <h3 style={{ marginTop: 0, color: darkMode ? '#e2e8f0' : '#1e293b' }}>Nairobi Weather</h3>\r\n+      <div style={{ display: 'flex', alignItems: 'center', gap: '1rem' }}>\r\n+        <span style={{ fontSize: '2rem' }}>\r\n+          {weather && getWeatherIcon(weather.weather[0].main)}\r\n+        </span>\r\n+        <div>\r\n+          <p style={{ margin: 0, fontSize: '1.5rem', fontWeight: 'bold', color: darkMode ? '#e2e8f0' : '#1e293b' }}>\r\n+            {weather?.main?.temp}¬∞C\r\n+          </p>\r\n+          <p style={{ margin: 0, color: darkMode ? '#a0aec0' : '#64748b' }}>\r\n+            {weather?.weather[0].description}\r\n+          </p>\r\n+        </div>\r\n+      </div>\r\n+      <div style={{ display: 'flex', justifyContent: 'space-between', marginTop: '0.5rem' }}>\r\n+        <span style={{ color: darkMode ? '#a0aec0' : '#64748b' }}>Humidity: {weather?.main?.humidity}%</span>\r\n+        <span style={{ color: darkMode ? '#a0aec0' : '#64748b' }}>Wind: {weather?.wind?.speed} m/s</span>\r\n+      </div>\r\n     </div>\r\n   );\r\n };\r\n \r\n // Emergency Services Component\r\n const EmergencyServices = ({ darkMode }) => {\r\n+  const services = [\r\n+    { name: \"Police\", number: \"999\", icon: \"üëÆ\", color: \"#3b82f6\" },\r\n+    { name: \"Ambulance\", number: \"911\", icon: \"üöë\", color: \"#ef4444\" },\r\n+    { name: \"Fire Brigade\", number: \"999\", icon: \"üöí\", color: \"#f59e0b\" },\r\n+    { name: \"Child Helpline\", number: \"116\", icon: \"üßí\", color: \"#10b981\" }\r\n+  ];\r\n+\r\n   return (\r\n     <div style={{\r\n       backgroundColor: darkMode ? '#2d3748' : '#f3f4f6',\r\n-      borderRadius: '16px',\r\n-      padding: '2rem 1.5rem',\r\n-      border: '2px solid #ef4444',\r\n-      textAlign: 'center',\r\n-      cursor: 'pointer',\r\n-      transition: 'transform 0.3s',\r\n-      ':hover': {\r\n-        transform: 'translateY(-5px)',\r\n-      }\r\n+      borderRadius: '12px',\r\n+      padding: '1rem',\r\n+      margin: '1rem 0',\r\n+      boxShadow: '0 2px 4px rgba(0,0,0,0.1)'\r\n     }}>\r\n+      <h3 style={{ marginTop: 0, color: darkMode ? '#e2e8f0' : '#1e293b' }}>Emergency Services</h3>\r\n       <div style={{ \r\n-        fontSize: '3rem',\r\n-        marginBottom: '1rem',\r\n-        display: 'inline-block'\r\n-      }}>üö®</div>\r\n-      <h3 style={{fontSize: '1.5rem', fontWeight: '600', marginBottom: '0.5rem'}}>Emergency Services</h3>\r\n-      <p style={{color: darkMode ? '#a0aec0' : '#64748b'}}>Quick access to emergency contacts</p>\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-// Login Page Component\r\n-const LoginPage = ({ darkMode, onLogin }) => {\r\n-  const [email, setEmail] = useState('');\r\n-  const [password, setPassword] = useState('');\r\n-\r\n-  const handleSubmit = (e) => {\r\n-    e.preventDefault();\r\n-    onLogin();\r\n-  };\r\n-\r\n-  return (\r\n-    <div style={{\r\n-      minHeight: '100vh',\r\n-      display: 'flex',\r\n-      justifyContent: 'center',\r\n-      alignItems: 'center',\r\n-      backgroundImage: 'url(https://images.unsplash.com/photo-1477959858617-67f85cf4f1df?ixlib=rb-1.2.1&auto=format&fit=crop&w=1350&q=80)',\r\n-      backgroundSize: 'cover',\r\n-      backgroundPosition: 'center',\r\n-    }}>\r\n-      <div style={{\r\n-        backgroundColor: 'rgba(255, 255, 255, 0.15)',\r\n-        backdropFilter: 'blur(10px)',\r\n-        borderRadius: '20px',\r\n-        padding: '2.5rem',\r\n-        width: '100%',\r\n-        maxWidth: '400px',\r\n-        boxShadow: '0 8px 32px 0 rgba(31, 38, 135, 0.37)',\r\n-        border: '1px solid rgba(255, 255, 255, 0.18)',\r\n+        display: 'grid',\r\n+        gridTemplateColumns: 'repeat(auto-fit, minmax(120px, 1fr))',\r\n+        gap: '0.5rem'\r\n       }}>\r\n-        <h2 style={{\r\n-          textAlign: 'center',\r\n-          color: 'white',\r\n-          marginBottom: '2rem',\r\n-          fontSize: '2rem',\r\n-          fontWeight: '600'\r\n-        }}>Welcome to UrbanFlow</h2>\r\n-        \r\n-        <form onSubmit={handleSubmit}>\r\n-          <div style={{ marginBottom: '1.5rem' }}>\r\n-            <label style={{\r\n-              display: 'block',\r\n-              marginBottom: '0.5rem',\r\n-              color: 'white',\r\n-              fontWeight: '500'\r\n-            }}>Email</label>\r\n-            <input\r\n-              type=\"email\"\r\n-              value={email}\r\n-              onChange={(e) => setEmail(e.target.value)}\r\n-              required\r\n-              style={{\r\n-                width: '100%',\r\n-                padding: '0.75rem 1rem',\r\n-                borderRadius: '8px',\r\n-                border: '1px solid rgba(255, 255, 255, 0.3)',\r\n-                backgroundColor: 'rgba(255, 255, 255, 0.1)',\r\n-                color: 'white',\r\n-                outline: 'none',\r\n-                '::placeholder': {\r\n-                  color: 'rgba(255, 255, 255, 0.7)'\r\n-                }\r\n-              }}\r\n-              placeholder=\"Enter your email\"\r\n-            />\r\n-          </div>\r\n-          \r\n-          <div style={{ marginBottom: '2rem' }}>\r\n-            <label style={{\r\n-              display: 'block',\r\n-              marginBottom: '0.5rem',\r\n-              color: 'white',\r\n-              fontWeight: '500'\r\n-            }}>Password</label>\r\n-            <input\r\n-              type=\"password\"\r\n-              value={password}\r\n-              onChange={(e) => setPassword(e.target.value)}\r\n-              required\r\n-              style={{\r\n-                width: '100%',\r\n-                padding: '0.75rem 1rem',\r\n-                borderRadius: '8px',\r\n-                border: '1px solid rgba(255, 255, 255, 0.3)',\r\n-                backgroundColor: 'rgba(255, 255, 255, 0.1)',\r\n-                color: 'white',\r\n-                outline: 'none',\r\n-                '::placeholder': {\r\n-                  color: 'rgba(255, 255, 255, 0.7)'\r\n-                }\r\n-              }}\r\n-              placeholder=\"Enter your password\"\r\n-            />\r\n-          </div>\r\n-          \r\n-          <button\r\n-            type=\"submit\"\r\n+        {services.map((service) => (\r\n+          <a \r\n+            key={service.name}\r\n+            href={`tel:${service.number}`}\r\n             style={{\r\n-              width: '100%',\r\n+              display: 'flex',\r\n+              flexDirection: 'column',\r\n+              alignItems: 'center',\r\n               padding: '0.75rem',\r\n               borderRadius: '8px',\r\n-              border: 'none',\r\n-              backgroundColor: 'rgba(255, 255, 255, 0.2)',\r\n-              color: 'white',\r\n-              fontWeight: '600',\r\n-              cursor: 'pointer',\r\n-              transition: 'background-color 0.3s',\r\n+              backgroundColor: darkMode ? '#4a5568' : '#e2e8f0',\r\n+              color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+              textDecoration: 'none',\r\n+              transition: 'transform 0.2s',\r\n               ':hover': {\r\n-                backgroundColor: 'rgba(255, 255, 255, 0.3)'\r\n+                transform: 'scale(1.05)'\r\n               }\r\n             }}\r\n           >\r\n-            Login\r\n-          </button>\r\n-        </form>\r\n+            <span style={{ fontSize: '1.5rem' }}>{service.icon}</span>\r\n+            <span style={{ fontWeight: '600' }}>{service.name}</span>\r\n+            <span style={{ fontSize: '0.9rem' }}>{service.number}</span>\r\n+          </a>\r\n+        ))}\r\n       </div>\r\n     </div>\r\n   );\r\n };\r\n \r\n-// Main App Component\r\n-export default function App() {\r\n+// Main Home Component\r\n+export default function Home() {\r\n+  const navigate = useNavigate();\r\n+  const [searchQuery, setSearchQuery] = useState('');\r\n   const [darkMode, setDarkMode] = useState(false);\r\n+  const [selectedService, setSelectedService] = useState(null);\r\n+  const [orderCount, setOrderCount] = useState(0);\r\n+  const [achievements, setAchievements] = useState([]);\r\n   const [showChat, setShowChat] = useState(false);\r\n-  const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n+  const [events, setEvents] = useState([]);\r\n+  const [eventsLoading, setEventsLoading] = useState(true);\r\n \r\n+  const services = [\r\n+    { \r\n+      name: 'Transport', \r\n+      path: '/transport', \r\n+      icon: 'üöå', \r\n+      desc: 'Plan your multi-modal journey across the city',\r\n+      color: '#3b82f6',\r\n+      details: 'Find the best routes combining metro, buses, and bikes. Real-time updates and ticket purchasing available.'\r\n+    },\r\n+    { \r\n+      name: 'Food Delivery', \r\n+      path: '/food', \r\n+      icon: 'üçî', \r\n+      desc: 'Discover local restaurants and cafes',\r\n+      color: '#ef4444',\r\n+      details: 'Order from hundreds of restaurants with special discounts. Track your delivery in real-time.'\r\n+    },\r\n+    { \r\n+      name: 'Groceries', \r\n+      path: '/food', \r\n+      icon: 'üõí', \r\n+      desc: 'Get groceries delivered in minutes',\r\n+      color: '#10b981',\r\n+      details: 'Same-day delivery from local supermarkets. Schedule recurring orders for essentials.'\r\n+    },\r\n+    { \r\n+      name: 'Services', \r\n+      path: '/food', \r\n+      icon: 'üõ†Ô∏è', \r\n+      desc: 'Find urban services near you',\r\n+      color: '#8b5cf6',\r\n+      details: 'Book home services, repairs, and professional help with verified providers.'\r\n+    },\r\n+    { \r\n+      name: 'Live Events', \r\n+      path: '/events', \r\n+      icon: 'üé§', \r\n+      desc: 'Discover concerts, shows and happenings in Nairobi',\r\n+      color: '#f59e0b',\r\n+      details: 'Find the latest concerts, theater shows, art exhibitions and special events happening around Nairobi. Get tickets and directions.'\r\n+    }\r\n+  ];\r\n+\r\n+  // Fetch Nairobi events\r\n+  useEffect(() => {\r\n+    const fetchEvents = async () => {\r\n+      try {\r\n+        // Note: In production, use your own backend to make this API call\r\n+        const response = await fetch(\r\n+          `https://app.ticketmaster.com/discovery/v2/events.json?city=Nairobi&apikey=${process.env.REACT_APP_TICKETMASTER_API_KEY}`\r\n+        );\r\n+        \r\n+        if (!response.ok) {\r\n+          throw new Error('Failed to fetch events');\r\n+        }\r\n+        \r\n+        const data = await response.json();\r\n+        setEvents(data._embedded?.events || []);\r\n+      } catch (err) {\r\n+        console.error('Error fetching events:', err);\r\n+        // Fallback to sample events if API fails\r\n+        setEvents([\r\n+          {\r\n+            name: \"Nairobi Jazz Festival\",\r\n+            dates: { start: { localDate: \"2023-08-15\" } },\r\n+            _embedded: {\r\n+              venues: [{ name: \"KICC\" }]\r\n+            }\r\n+          },\r\n+          {\r\n+            name: \"Kenya National Theatre Play\",\r\n+            dates: { start: { localDate: \"2023-08-20\" } },\r\n+            _embedded: {\r\n+              venues: [{ name: \"Kenya National Theatre\" }]\r\n+            }\r\n+          }\r\n+        ]);\r\n+      } finally {\r\n+        setEventsLoading(false);\r\n+      }\r\n+    };\r\n+\r\n+    fetchEvents();\r\n+  }, []);\r\n+\r\n+  // Check for achievements\r\n+  useEffect(() => {\r\n+    if (orderCount === 1) {\r\n+      addAchievement('First Order!', 'üéâ');\r\n+    } else if (orderCount === 5) {\r\n+      addAchievement('Regular Customer!', 'üèÜ');\r\n+    } else if (orderCount === 10) {\r\n+      addAchievement('Super User!', 'üåü');\r\n+    }\r\n+  }, [orderCount]);\r\n+\r\n+  const addAchievement = (title, icon) => {\r\n+    if (!achievements.some(a => a.title === title)) {\r\n+      const newAchievement = { title, icon, id: Date.now() };\r\n+      setAchievements(prev => [...prev, newAchievement]);\r\n+      \r\n+      // Auto-hide achievement after 3 seconds\r\n+      setTimeout(() => {\r\n+        setAchievements(prev => prev.filter(a => a.id !== newAchievement.id));\r\n+      }, 3000);\r\n+    }\r\n+  };\r\n+\r\n+  const handleSearch = (e) => {\r\n+    e.preventDefault();\r\n+    if (searchQuery.trim()) {\r\n+      navigate(`/food?search=${encodeURIComponent(searchQuery)}`);\r\n+    }\r\n+  };\r\n+\r\n   const toggleDarkMode = () => {\r\n     setDarkMode(!darkMode);\r\n   };\r\n \r\n-  const toggleChat = () => {\r\n-    setShowChat(!showChat);\r\n+  const openServicePopup = (service) => {\r\n+    setSelectedService(service);\r\n+    setOrderCount(prev => prev + 1);\r\n   };\r\n \r\n-  const handleLogin = () => {\r\n-    setIsLoggedIn(true);\r\n+  const closePopup = () => {\r\n+    setSelectedService(null);\r\n   };\r\n \r\n-  if (!isLoggedIn) {\r\n-    return <LoginPage darkMode={darkMode} onLogin={handleLogin} />;\r\n-  }\r\n+  const toggleChat = () => {\r\n+    setShowChat(!showChat);\r\n+  };\r\n \r\n   return (\r\n     <div style={{\r\n       backgroundColor: darkMode ? '#1a202c' : '#f8fafc',\r\n       minHeight: '100vh',\r\n       paddingBottom: '3rem',\r\n       color: darkMode ? '#e2e8f0' : '#1e293b',\r\n       transition: 'all 0.3s ease',\r\n+      position: 'relative'\r\n     }}>\r\n+      {/* Theme Toggle Button */}\r\n       <button \r\n         onClick={toggleDarkMode} \r\n         style={{\r\n           position: 'fixed',\r\n@@ -478,12 +728,14 @@\n           transition: 'all 0.3s ease',\r\n           boxShadow: '0 2px 5px rgba(0, 0, 0, 0.2)',\r\n           zIndex: 100\r\n         }}\r\n+        aria-label={darkMode ? 'Switch to light mode' : 'Switch to dark mode'}\r\n       >\r\n         {darkMode ? '‚òÄÔ∏è' : 'üåô'}\r\n       </button>\r\n       \r\n+      {/* Hero Section with UrbanBuddy */}\r\n       <section style={{\r\n         background: darkMode \r\n           ? 'linear-gradient(135deg, #2d3748 0%, #1a202c 100%)' \r\n           : 'linear-gradient(135deg, #6b46c1 0%, #3b82f6 100%)',\r\n@@ -512,12 +764,49 @@\n             fontSize: '1.25rem',\r\n             marginBottom: '2rem',\r\n             opacity: 0.9,\r\n           }}>Your seamless urban living companion</p>\r\n+          \r\n+          <form onSubmit={handleSearch} style={{\r\n+            display: 'flex',\r\n+            maxWidth: '600px',\r\n+            margin: '0 auto',\r\n+            borderRadius: '50px',\r\n+            overflow: 'hidden',\r\n+            boxShadow: '0 4px 10px rgba(0, 0, 0, 0.2)',\r\n+          }}>\r\n+            <input\r\n+              type=\"text\"\r\n+              placeholder=\"Search for restaurants, services...\"\r\n+              value={searchQuery}\r\n+              onChange={(e) => setSearchQuery(e.target.value)}\r\n+              style={{\r\n+                flex: 1,\r\n+                padding: '1rem 1.5rem',\r\n+                border: 'none',\r\n+                fontSize: '1rem',\r\n+                outline: 'none',\r\n+                backgroundColor: darkMode ? '#2d3748' : 'white',\r\n+                color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+              }}\r\n+            />\r\n+            <button type=\"submit\" style={{\r\n+              backgroundColor: darkMode ? '#4a5568' : '#1e40af',\r\n+              color: 'white',\r\n+              border: 'none',\r\n+              padding: '0 1.5rem',\r\n+              cursor: 'pointer',\r\n+              fontSize: '1.25rem',\r\n+              transition: 'background-color 0.2s'\r\n+            }}>\r\n+              <span>üîç</span>\r\n+            </button>\r\n+          </form>\r\n         </div>\r\n         <UrbanBuddy darkMode={darkMode} onChatOpen={toggleChat} />\r\n       </section>\r\n \r\n+      {/* Services Grid */}\r\n       <section style={{\r\n         padding: '2rem 1rem',\r\n         maxWidth: '1200px',\r\n         margin: '0 auto',\r\n@@ -528,64 +817,287 @@\n           marginBottom: '1.5rem',\r\n           color: darkMode ? '#e2e8f0' : '#1e293b',\r\n           textAlign: 'center',\r\n         }}>What do you need today?</h2>\r\n-        \r\n         <div style={{\r\n           display: 'grid',\r\n           gridTemplateColumns: 'repeat(auto-fit, minmax(250px, 1fr))',\r\n           gap: '1.5rem',\r\n           marginTop: '1rem',\r\n         }}>\r\n-          <WeatherWidget darkMode={darkMode} />\r\n-          <EmergencyServices darkMode={darkMode} />\r\n-          \r\n+          {services.map((service) => (\r\n+            <div \r\n+              key={service.name} \r\n+              onClick={() => openServicePopup(service)}\r\n+              style={{ \r\n+                padding: '2rem 1.5rem',\r\n+                borderRadius: '16px',\r\n+                border: `2px solid ${service.color}`,\r\n+                textAlign: 'center',\r\n+                cursor: 'pointer',\r\n+                transition: 'transform 0.3s, box-shadow 0.3s',\r\n+                backgroundColor: darkMode \r\n+                  ? `${service.color}20` \r\n+                  : `${service.color}10`,\r\n+                ':hover': {\r\n+                  transform: 'translateY(-5px)',\r\n+                  boxShadow: '0 10px 20px rgba(0, 0, 0, 0.1)',\r\n+                }\r\n+              }}\r\n+            >\r\n+              <div style={{ \r\n+                fontSize: '3rem',\r\n+                marginBottom: '1rem',\r\n+                display: 'inline-block',\r\n+                animation: 'float 3s ease-in-out infinite'\r\n+              }}>{service.icon}</div>\r\n+              <h3 style={{fontSize: '1.5rem', fontWeight: '600', marginBottom: '0.5rem'}}>{service.name}</h3>\r\n+              <p style={{color: darkMode ? '#a0aec0' : '#64748b'}}>{service.desc}</p>\r\n+            </div>\r\n+          ))}\r\n+        </div>\r\n+      </section>\r\n+\r\n+      {/* Weather and Emergency Services Section */}\r\n+      <section style={{\r\n+        padding: '2rem 1rem',\r\n+        maxWidth: '1200px',\r\n+        margin: '0 auto',\r\n+        display: 'grid',\r\n+        gridTemplateColumns: 'repeat(auto-fit, minmax(300px, 1fr))',\r\n+        gap: '1.5rem'\r\n+      }}>\r\n+        <WeatherWidget darkMode={darkMode} />\r\n+        <EmergencyServices darkMode={darkMode} />\r\n+      </section>\r\n+\r\n+      {/* Featured Section */}\r\n+      <section style={{\r\n+        padding: '2rem 1rem',\r\n+        maxWidth: '1200px',\r\n+        margin: '0 auto',\r\n+      }}>\r\n+        <h2 style={{\r\n+          fontSize: '2rem',\r\n+          fontWeight: '700',\r\n+          marginBottom: '1.5rem',\r\n+          color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+          textAlign: 'center',\r\n+        }}>Quick Access</h2>\r\n+        <div style={{\r\n+          display: 'flex',\r\n+          justifyContent: 'center',\r\n+          gap: '1rem',\r\n+          flexWrap: 'wrap',\r\n+        }}>\r\n+          <button \r\n+            onClick={() => navigate('/transport?from=home&to=downtown')}\r\n+            style={{\r\n+              padding: '0.75rem 1.5rem',\r\n+              borderRadius: '50px',\r\n+              border: 'none',\r\n+              backgroundColor: darkMode ? '#2d3748' : '#e2e8f0',\r\n+              color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+              fontWeight: '600',\r\n+              cursor: 'pointer',\r\n+              transition: 'all 0.2s',\r\n+              display: 'flex',\r\n+              alignItems: 'center',\r\n+              gap: '0.5rem',\r\n+              fontSize: '1rem'\r\n+            }}\r\n+          >\r\n+            üöï To Downtown\r\n+          </button>\r\n+          <button \r\n+            onClick={() => navigate('/food?category=fastfood')}\r\n+            style={{\r\n+              padding: '0.75rem 1.5rem',\r\n+              borderRadius: '50px',\r\n+              border: 'none',\r\n+              backgroundColor: darkMode ? '#2d3748' : '#e2e8f0',\r\n+              color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+              fontWeight: '600',\r\n+              cursor: 'pointer',\r\n+              transition: 'all 0.2s',\r\n+              display: 'flex',\r\n+              alignItems: 'center',\r\n+              gap: '0.5rem',\r\n+              fontSize: '1rem'\r\n+            }}\r\n+          >\r\n+            üçü Fast Food\r\n+          </button>\r\n+          <button \r\n+            onClick={() => navigate('/food?category=coffee')}\r\n+            style={{\r\n+              padding: '0.75rem 1.5rem',\r\n+              borderRadius: '50px',\r\n+              border: 'none',\r\n+              backgroundColor: darkMode ? '#2d3748' : '#e2e8f0',\r\n+              color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+              fontWeight: '600',\r\n+              cursor: 'pointer',\r\n+              transition: 'all 0.2s',\r\n+              display: 'flex',\r\n+              alignItems: 'center',\r\n+              gap: '0.5rem',\r\n+              fontSize: '1rem'\r\n+            }}\r\n+          >\r\n+            ‚òï Coffee Shops\r\n+          </button>\r\n+          <button \r\n+            onClick={() => navigate('/events')}\r\n+            style={{\r\n+              padding: '0.75rem 1.5rem',\r\n+              borderRadius: '50px',\r\n+              border: 'none',\r\n+              backgroundColor: darkMode ? '#2d3748' : '#e2e8f0',\r\n+              color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+              fontWeight: '600',\r\n+              cursor: 'pointer',\r\n+              transition: 'all 0.2s',\r\n+              display: 'flex',\r\n+              alignItems: 'center',\r\n+              gap: '0.5rem',\r\n+              fontSize: '1rem'\r\n+            }}\r\n+          >\r\n+            üé§ Nairobi Events\r\n+          </button>\r\n+        </div>\r\n+      </section>\r\n+\r\n+      {/* Service Popup */}\r\n+      {selectedService && (\r\n+        <div style={{\r\n+          position: 'fixed',\r\n+          top: 0,\r\n+          left: 0,\r\n+          right: 0,\r\n+          bottom: 0,\r\n+          backgroundColor: 'rgba(0, 0, 0, 0.7)',\r\n+          display: 'flex',\r\n+          justifyContent: 'center',\r\n+          alignItems: 'center',\r\n+          zIndex: 1000,\r\n+        }} onClick={closePopup}>\r\n           <div style={{\r\n-            backgroundColor: darkMode ? '#2d3748' : '#f3f4f6',\r\n+            backgroundColor: darkMode ? '#2d3748' : 'white',\r\n             borderRadius: '16px',\r\n-            padding: '2rem 1.5rem',\r\n-            border: '2px solid #10b981',\r\n-            textAlign: 'center',\r\n-            cursor: 'pointer',\r\n-            transition: 'transform 0.3s',\r\n-            ':hover': {\r\n-              transform: 'translateY(-5px)',\r\n-            }\r\n-          }}>\r\n+            padding: '2rem',\r\n+            maxWidth: '500px',\r\n+            width: '90%',\r\n+            boxShadow: '0 10px 25px rgba(0, 0, 0, 0.2)',\r\n+            position: 'relative',\r\n+            border: darkMode ? '1px solid #4a5568' : '1px solid #e2e8f0',\r\n+          }} onClick={(e) => e.stopPropagation()}>\r\n+            <button style={{\r\n+              position: 'absolute',\r\n+              top: '1rem',\r\n+              right: '1rem',\r\n+              background: 'none',\r\n+              border: 'none',\r\n+              fontSize: '1.5rem',\r\n+              cursor: 'pointer',\r\n+              color: darkMode ? '#a0aec0' : '#64748b',\r\n+            }} onClick={closePopup}>√ó</button>\r\n             <div style={{ \r\n-              fontSize: '3rem',\r\n-              marginBottom: '1rem',\r\n-              display: 'inline-block'\r\n-            }}>üöå</div>\r\n-            <h3 style={{fontSize: '1.5rem', fontWeight: '600', marginBottom: '0.5rem'}}>Transport</h3>\r\n-            <p style={{color: darkMode ? '#a0aec0' : '#64748b'}}>Plan your multi-modal journey</p>\r\n+              display: 'flex', \r\n+              alignItems: 'center', \r\n+              gap: '1rem',\r\n+              marginBottom: '1.5rem'\r\n+            }}>\r\n+              <span style={{ fontSize: '2.5rem', animation: 'float 3s ease-in-out infinite' }}>{selectedService.icon}</span>\r\n+              <h3 style={{fontSize: '1.8rem', fontWeight: '700', marginBottom: '1rem', color: darkMode ? '#e2e8f0' : '#1e293b'}}>{selectedService.name}</h3>\r\n+            </div>\r\n+            <p style={{color: darkMode ? '#a0aec0' : '#64748b', fontSize: '1.1rem', lineHeight: '1.6', marginBottom: '2rem'}}>{selectedService.details}</p>\r\n+            {selectedService.name === 'Live Events' && (\r\n+              <div style={{\r\n+                backgroundColor: darkMode ? '#4a5568' : '#f3f4f6',\r\n+                borderRadius: '12px',\r\n+                padding: '1rem',\r\n+                marginBottom: '1.5rem'\r\n+              }}>\r\n+                <h4 style={{\r\n+                  fontSize: '1.2rem',\r\n+                  fontWeight: '600',\r\n+                  marginBottom: '0.5rem',\r\n+                  color: darkMode ? '#e2e8f0' : '#1e293b'\r\n+                }}>Upcoming Events</h4>\r\n+                {eventsLoading ? (\r\n+                  <p>Loading events...</p>\r\n+                ) : events.length > 0 ? (\r\n+                  <ul style={{\r\n+                    listStyle: 'none',\r\n+                    padding: 0,\r\n+                    margin: 0\r\n+                  }}>\r\n+                    {events.slice(0, 3).map((event, index) => (\r\n+                      <li key={index} style={{padding: '0.5rem 0', borderBottom: darkMode ? '1px solid #4a5568' : '1px solid #e2e8f0'}}>\r\n+                        <strong>üé§ {event.name}</strong>\r\n+                        <div style={{ display: 'flex', justifyContent: 'space-between' }}>\r\n+                          <span>{event.dates?.start?.localDate}</span>\r\n+                          <span>{event._embedded?.venues?.[0]?.name || 'Nairobi'}</span>\r\n+                        </div>\r\n+                      </li>\r\n+                    ))}\r\n+                  </ul>\r\n+                ) : (\r\n+                  <p>No upcoming events found</p>\r\n+                )}\r\n+              </div>\r\n+            )}\r\n+            <button \r\n+              style={{ \r\n+                padding: '0.75rem 1.5rem',\r\n+                borderRadius: '8px',\r\n+                border: 'none',\r\n+                backgroundColor: selectedService.color,\r\n+                color: 'white',\r\n+                fontWeight: '600',\r\n+                cursor: 'pointer',\r\n+                transition: 'all 0.2s',\r\n+                fontSize: '1rem'\r\n+              }}\r\n+              onClick={() => {\r\n+                navigate(selectedService.path);\r\n+                closePopup();\r\n+              }}\r\n+            >\r\n+              Explore {selectedService.name}\r\n+            </button>\r\n           </div>\r\n-          \r\n-          <div style={{\r\n-            backgroundColor: darkMode ? '#2d3748' : '#f3f4f6',\r\n-            borderRadius: '16px',\r\n-            padding: '2rem 1.5rem',\r\n-            border: '2px solid #8b5cf6',\r\n-            textAlign: 'center',\r\n-            cursor: 'pointer',\r\n-            transition: 'transform 0.3s',\r\n-            ':hover': {\r\n-              transform: 'translateY(-5px)',\r\n-            }\r\n-          }}>\r\n-            <div style={{ \r\n-              fontSize: '3rem',\r\n-              marginBottom: '1rem',\r\n-              display: 'inline-block'\r\n-            }}>üçî</div>\r\n-            <h3 style={{fontSize: '1.5rem', fontWeight: '600', marginBottom: '0.5rem'}}>Food Delivery</h3>\r\n-            <p style={{color: darkMode ? '#a0aec0' : '#64748b'}}>Discover local restaurants</p>\r\n-          </div>\r\n         </div>\r\n-      </section>\r\n+      )}\r\n \r\n+      {/* Achievements */}\r\n+      {achievements.map(achievement => (\r\n+        <div key={achievement.id} style={{\r\n+          position: 'fixed',\r\n+          bottom: '20px',\r\n+          right: '20px',\r\n+          background: darkMode ? '#2d3748' : 'white',\r\n+          color: darkMode ? 'white' : '#1e293b',\r\n+          padding: '1rem',\r\n+          borderRadius: '12px',\r\n+          boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',\r\n+          display: 'flex',\r\n+          alignItems: 'center',\r\n+          gap: '0.5rem',\r\n+          zIndex: 1000,\r\n+          animation: 'slideIn 0.5s forwards, fadeOut 0.5s forwards 2.5s'\r\n+        }}>\r\n+          <span style={{fontSize: '1.5rem'}}>{achievement.icon}</span>\r\n+          <span>{achievement.title}</span>\r\n+        </div>\r\n+      ))}\r\n+\r\n+      {/* Chat Modal */}\r\n       {showChat && <ChatModal darkMode={darkMode} onClose={toggleChat} />}\r\n \r\n+      {/* Footer with copyright */}\r\n       <footer style={{\r\n         textAlign: 'center',\r\n         padding: '2rem 1rem',\r\n         color: darkMode ? '#a0aec0' : '#64748b',\r\n@@ -595,5 +1107,5 @@\n         <p>¬© {new Date().getFullYear()} UrbanFlow - Created by Nick</p>\r\n       </footer>\r\n     </div>\r\n   );\r\n-}\n\\ No newline at end of file\n+};\n\\ No newline at end of file\n"
                },
                {
                    "date": 1754481139554,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,16 +2,10 @@\n import { useNavigate } from 'react-router-dom';\r\n \r\n // UrbanBuddy AI Assistant Component\r\n const UrbanBuddy = ({ darkMode, onChatOpen }) => {\r\n-  const [position, setPosition] = useState({ x: 20, y: 50 });\r\n-  const [expression, setExpression] = useState('üòä');\r\n-  const [direction, setDirection] = useState(1);\r\n+  const [expression, setExpression] = useState('ü§ñ');\r\n   const [costume, setCostume] = useState(null);\r\n-  const [isActive, setIsActive] = useState(false);\r\n-  const botRef = useRef(null);\r\n-  const animationRef = useRef(null);\r\n-  const lastInteractionTime = useRef(Date.now());\r\n \r\n   // Seasonal costumes\r\n   useEffect(() => {\r\n     const today = new Date();\r\n@@ -23,182 +17,73 @@\n     else if (month === 4) setCostume('üå∏');\r\n     else setCostume(null);\r\n   }, []);\r\n \r\n-  // Make the bot wander with more dynamic movement\r\n-  useEffect(() => {\r\n-    const moveInterval = setInterval(() => {\r\n-      setPosition(prev => {\r\n-        const now = Date.now();\r\n-        const timeSinceLastInteraction = now - lastInteractionTime.current;\r\n-        \r\n-        // More active movement right after interaction\r\n-        const speedMultiplier = timeSinceLastInteraction < 5000 ? 2 : 1;\r\n-        \r\n-        let newX = prev.x + (3 * direction * speedMultiplier);\r\n-        let newY = prev.y + (Math.random() * 6 - 3);\r\n-        \r\n-        // Bounce off edges\r\n-        if (newX > window.innerWidth - 80) {\r\n-          setDirection(-1);\r\n-          triggerAnimation('spin');\r\n-        }\r\n-        if (newX < 20) {\r\n-          setDirection(1);\r\n-          triggerAnimation('spin');\r\n-        }\r\n-        if (newY < 20) newY = 20;\r\n-        if (newY > window.innerHeight - 100) newY = window.innerHeight - 100;\r\n-        \r\n-        return { x: newX, y: newY };\r\n-      });\r\n-    }, 100);\r\n-\r\n-    return () => clearInterval(moveInterval);\r\n-  }, [direction]);\r\n-\r\n-  // Change expressions randomly with more variety\r\n-  useEffect(() => {\r\n-    const expressions = ['üòä', 'ü§î', 'üòÆ', 'üòé', 'üëã', 'ü§ñ', '‚ú®', 'üåü'];\r\n-    const expressionInterval = setInterval(() => {\r\n-      if (!isActive) {\r\n-        setExpression(expressions[Math.floor(Math.random() * expressions.length)]);\r\n-        // Random animations when idle\r\n-        if (Math.random() > 0.8) {\r\n-          triggerAnimation(['bounce', 'spin', 'wobble'][Math.floor(Math.random() * 3)]);\r\n-        }\r\n-      }\r\n-    }, 3000);\r\n-    return () => clearInterval(expressionInterval);\r\n-  }, [isActive]);\r\n-\r\n-  const triggerAnimation = (type) => {\r\n-    if (animationRef.current) {\r\n-      clearTimeout(animationRef.current);\r\n-    }\r\n-    \r\n-    const botElement = botRef.current;\r\n-    if (!botElement) return;\r\n-    \r\n-    botElement.style.animation = 'none';\r\n-    void botElement.offsetWidth; // Trigger reflow\r\n-    \r\n-    switch(type) {\r\n-      case 'spin':\r\n-        botElement.style.animation = 'spin 1s ease';\r\n-        break;\r\n-      case 'bounce':\r\n-        botElement.style.animation = 'bounce 0.5s ease';\r\n-        break;\r\n-      case 'wobble':\r\n-        botElement.style.animation = 'wobble 0.8s ease';\r\n-        break;\r\n-      default:\r\n-        botElement.style.animation = '';\r\n-    }\r\n-    \r\n-    animationRef.current = setTimeout(() => {\r\n-      if (botElement) botElement.style.animation = '';\r\n-    }, 1000);\r\n-  };\r\n-\r\n   const handleClick = () => {\r\n-    lastInteractionTime.current = Date.now();\r\n-    setIsActive(true);\r\n-    triggerAnimation('bounce');\r\n     setExpression('üí°');\r\n-    \r\n-    // Trigger chat opening in parent component\r\n     onChatOpen();\r\n     \r\n-    // Return to normal after a delay\r\n     setTimeout(() => {\r\n-      setIsActive(false);\r\n+      setExpression('ü§ñ');\r\n     }, 3000);\r\n   };\r\n \r\n-  // Custom animations\r\n-  const animations = `\r\n-    @keyframes spin {\r\n-      0% { transform: rotate(0deg) scaleX(${direction}); }\r\n-      100% { transform: rotate(360deg) scaleX(${direction}); }\r\n-    }\r\n-    @keyframes bounce {\r\n-      0%, 100% { transform: translateY(0) scaleX(${direction}); }\r\n-      50% { transform: translateY(-20px) scaleX(${direction}); }\r\n-    }\r\n-    @keyframes wobble {\r\n-      0%, 100% { transform: rotate(0deg) scaleX(${direction}); }\r\n-      25% { transform: rotate(5deg) scaleX(${direction}); }\r\n-      75% { transform: rotate(-5deg) scaleX(${direction}); }\r\n-    }\r\n-    @keyframes float {\r\n-      0% { transform: translateY(0px) scaleX(${direction}); }\r\n-      50% { transform: translateY(-10px) scaleX(${direction}); }\r\n-      100% { transform: translateY(0px) scaleX(${direction}); }\r\n-    }\r\n-  `;\r\n-\r\n   return (\r\n-    <>\r\n-      <style>{animations}</style>\r\n-      <div \r\n-        ref={botRef}\r\n-        onClick={handleClick}\r\n-        style={{\r\n-          position: 'fixed',\r\n-          left: `${position.x}px`,\r\n-          top: `${position.y}px`,\r\n-          fontSize: '2.5rem',\r\n-          cursor: 'pointer',\r\n-          transition: 'all 0.3s ease',\r\n-          transform: `scaleX(${direction})`,\r\n-          zIndex: 100,\r\n-          filter: darkMode \r\n-            ? 'drop-shadow(0 0 8px rgba(255,255,255,0.7))' \r\n-            : 'drop-shadow(0 0 8px rgba(0,0,0,0.3))',\r\n-          userSelect: 'none',\r\n-          animation: 'float 4s ease-in-out infinite'\r\n-        }}\r\n-      >\r\n-        <div style={{ \r\n+    <div \r\n+      onClick={handleClick}\r\n+      style={{\r\n+        position: 'fixed',\r\n+        bottom: '30px',\r\n+        right: '30px',\r\n+        fontSize: '2.5rem',\r\n+        cursor: 'pointer',\r\n+        zIndex: 100,\r\n+        filter: darkMode \r\n+          ? 'drop-shadow(0 0 8px rgba(255,255,255,0.7))' \r\n+          : 'drop-shadow(0 0 8px rgba(0,0,0,0.3))',\r\n+        userSelect: 'none',\r\n+      }}\r\n+    >\r\n+      <div style={{ \r\n+        position: 'relative',\r\n+        display: 'flex',\r\n+        flexDirection: 'column',\r\n+        alignItems: 'center'\r\n+      }}>\r\n+        <div style={{\r\n           position: 'relative',\r\n+          width: '60px',\r\n+          height: '60px',\r\n+          backgroundColor: darkMode ? '#4a5568' : '#3b82f6',\r\n+          borderRadius: '50%',\r\n           display: 'flex',\r\n-          flexDirection: 'column',\r\n-          alignItems: 'center'\r\n+          justifyContent: 'center',\r\n+          alignItems: 'center',\r\n+          color: 'white',\r\n+          transition: 'transform 0.2s',\r\n+          ':hover': {\r\n+            transform: 'scale(1.1)'\r\n+          }\r\n         }}>\r\n-          {/* Bot icon with costume */}\r\n-          <div style={{\r\n-            position: 'relative',\r\n-            width: '60px',\r\n-            height: '60px',\r\n-            backgroundColor: darkMode ? '#4a5568' : '#3b82f6',\r\n-            borderRadius: '50%',\r\n-            display: 'flex',\r\n-            justifyContent: 'center',\r\n-            alignItems: 'center',\r\n-            color: 'white'\r\n-          }}>\r\n-            <span style={{ fontSize: '1.8rem' }}>{expression}</span>\r\n-            {costume && (\r\n-              <span style={{\r\n-                position: 'absolute',\r\n-                top: '-15px',\r\n-                right: '-10px',\r\n-                fontSize: '1.5rem',\r\n-                transform: 'rotate(15deg)'\r\n-              }}>\r\n-                {costume}\r\n-              </span>\r\n-            )}\r\n-          </div>\r\n+          <span style={{ fontSize: '1.8rem' }}>{expression}</span>\r\n+          {costume && (\r\n+            <span style={{\r\n+              position: 'absolute',\r\n+              top: '-15px',\r\n+              right: '-10px',\r\n+              fontSize: '1.5rem',\r\n+              transform: 'rotate(15deg)'\r\n+            }}>\r\n+              {costume}\r\n+            </span>\r\n+          )}\r\n         </div>\r\n       </div>\r\n-    </>\r\n+    </div>\r\n   );\r\n };\r\n \r\n-// Chat Modal Component with Functional API Connection\r\n+// Chat Modal Component\r\n const ChatModal = ({ darkMode, onClose }) => {\r\n   const [messages, setMessages] = useState([\r\n     { text: \"Hello! I'm UrbanBuddy, your AI assistant for urban living. How can I help you today?\", sender: 'bot' }\r\n   ]);\r\n@@ -206,70 +91,28 @@\n   const [isTyping, setIsTyping] = useState(false);\r\n   const chatEndRef = useRef(null);\r\n   const inputRef = useRef(null);\r\n \r\n-  // Auto-scroll to bottom and focus input\r\n   useEffect(() => {\r\n     chatEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n     inputRef.current?.focus();\r\n   }, [messages]);\r\n \r\n-  // Function to call the AI API\r\n   const generateResponse = async (userMessage) => {\r\n     setIsTyping(true);\r\n     \r\n     try {\r\n-      // In a real app, you should call your own backend endpoint that then calls OpenAI\r\n-      // This is just for demonstration purposes\r\n-      const response = await fetch('https://api.openai.com/v1/chat/completions', {\r\n-        method: \"POST\",\r\n-        headers: { \r\n-          \"Content-Type\": \"application/json\",\r\n-          // Note: In production, never expose your API key in frontend code\r\n-          // This should be handled through your own backend\r\n-          \"Authorization\": `Bearer ${process.env.REACT_APP_OPENAI_API_KEY}` \r\n-        },\r\n-        body: JSON.stringify({\r\n-          model: \"gpt-3.5-turbo\",\r\n-          messages: [\r\n-            {\r\n-              role: \"system\",\r\n-              content: \"You are UrbanBuddy, a friendly AI assistant for urban living. \" +\r\n-                \"Provide helpful, concise answers (1-2 sentences) about city life, \" +\r\n-                \"transportation, food delivery, local services, and urban living tips. \" +\r\n-                \"Keep responses practical and urban-focused.\"\r\n-            },\r\n-            {\r\n-              role: \"user\",\r\n-              content: userMessage\r\n-            }\r\n-          ],\r\n-          temperature: 0.7,\r\n-          max_tokens: 150\r\n-        })\r\n-      });\r\n-      \r\n-      if (!response.ok) {\r\n-        throw new Error(`API request failed with status ${response.status}`);\r\n-      }\r\n-      \r\n-      const data = await response.json();\r\n-      const aiResponse = data.choices?.[0]?.message?.content || \r\n-        \"I'm having trouble thinking of a response right now. Could you try asking something else?\";\r\n-      \r\n-      setMessages(prev => [...prev, { \r\n-        text: aiResponse, \r\n-        sender: 'bot' \r\n-      }]);\r\n-    } catch (error) {\r\n-      console.error(\"API error:\", error);\r\n-      // Fallback to a local AI response if API fails\r\n       const fallbackResponses = [\r\n-        \"I'm currently experiencing high demand. Try again in a moment!\",\r\n-        \"Let me think differently about that... Can you rephrase your question?\",\r\n-        \"I specialize in urban living tips. Ask me about transportation, food, or city services!\",\r\n-        \"I'm having connection issues, but I'd love to help with your urban living questions!\"\r\n+        \"Nairobi is the only city in the world with a national park within its boundaries.\",\r\n+        \"The name 'Nairobi' comes from the Maasai phrase 'Enkare Nyrobi', meaning 'cool water'.\",\r\n+        \"Nairobi is home to the largest giraffe population in Africa at the Giraffe Centre.\",\r\n+        \"The Nairobi Stock Exchange is Africa's 4th largest exchange by trading volume.\",\r\n+        \"Nairobi's elevation of 1,795 meters makes it one of the highest capital cities in Africa.\",\r\n+        \"The first East African movie theater was opened in Nairobi in 1929.\",\r\n+        \"Nairobi has more than 100 species of butterflies in its urban parks.\",\r\n+        \"The Kenyatta International Convention Center has a helipad on its roof that's shaped like Kenya.\"\r\n       ];\r\n+      \r\n       setMessages(prev => [...prev, { \r\n         text: fallbackResponses[Math.floor(Math.random() * fallbackResponses.length)], \r\n         sender: 'bot' \r\n       }]);\r\n@@ -280,14 +123,11 @@\n \r\n   const handleSendMessage = async (e) => {\r\n     e.preventDefault();\r\n     if (inputValue.trim() && !isTyping) {\r\n-      // Add user message\r\n       const userMessage = inputValue.trim();\r\n       setMessages(prev => [...prev, { text: userMessage, sender: 'user' }]);\r\n       setInputValue('');\r\n-      \r\n-      // Generate AI response\r\n       await generateResponse(userMessage);\r\n     }\r\n   };\r\n \r\n@@ -307,9 +147,8 @@\n       display: 'flex',\r\n       flexDirection: 'column',\r\n       maxHeight: '60vh'\r\n     }}>\r\n-      {/* Chat header */}\r\n       <div style={{\r\n         padding: '1rem',\r\n         backgroundColor: darkMode ? '#4a5568' : '#3b82f6',\r\n         color: 'white',\r\n@@ -341,9 +180,8 @@\n           √ó\r\n         </button>\r\n       </div>\r\n       \r\n-      {/* Chat messages */}\r\n       <div style={{\r\n         flex: 1,\r\n         padding: '1rem',\r\n         overflowY: 'auto',\r\n@@ -364,20 +202,16 @@\n               backgroundColor: msg.sender === 'user'\r\n                 ? (darkMode ? '#4a5568' : '#3b82f6')\r\n                 : (darkMode ? '#4a5568' : '#e2e8f0'),\r\n               color: msg.sender === 'user' ? 'white' : (darkMode ? 'white' : '#1e293b'),\r\n-              animation: msg.sender === 'bot' && index === messages.length - 1 \r\n-                ? 'fadeIn 0.3s ease' \r\n-                : 'none'\r\n             }}\r\n           >\r\n             {msg.text}\r\n           </div>\r\n         ))}\r\n         <div ref={chatEndRef} />\r\n       </div>\r\n       \r\n-      {/* Chat input */}\r\n       <form onSubmit={handleSendMessage} style={{\r\n         padding: '0.8rem',\r\n         borderTop: darkMode ? '1px solid #4a5568' : '1px solid #e2e8f0',\r\n         display: 'flex',\r\n@@ -387,9 +221,9 @@\n           ref={inputRef}\r\n           type=\"text\"\r\n           value={inputValue}\r\n           onChange={(e) => setInputValue(e.target.value)}\r\n-          placeholder=\"Ask me about urban living...\"\r\n+          placeholder=\"Ask me about Nairobi...\"\r\n           disabled={isTyping}\r\n           style={{\r\n             flex: 1,\r\n             padding: '0.6rem 1rem',\r\n@@ -427,290 +261,277 @@\n };\r\n \r\n // Weather Widget Component\r\n const WeatherWidget = ({ darkMode }) => {\r\n-  const [weather, setWeather] = useState(null);\r\n-  const [loading, setLoading] = useState(true);\r\n-  const [error, setError] = useState(null);\r\n+  const [weather, setWeather] = useState({\r\n+    temp: '24¬∞C',\r\n+    condition: 'Partly Cloudy',\r\n+    icon: '‚õÖ'\r\n+  });\r\n \r\n-  useEffect(() => {\r\n-    const fetchWeather = async () => {\r\n-      try {\r\n-        // Note: In production, use your own backend to make this API call\r\n-        const response = await fetch(\r\n-          `https://api.openweathermap.org/data/2.5/weather?q=Nairobi&appid=${process.env.REACT_APP_WEATHER_API_KEY}&units=metric`\r\n-        );\r\n-        \r\n-        if (!response.ok) {\r\n-          throw new Error('Failed to fetch weather data');\r\n-        }\r\n-        \r\n-        const data = await response.json();\r\n-        setWeather(data);\r\n-      } catch (err) {\r\n-        setError(err.message);\r\n-      } finally {\r\n-        setLoading(false);\r\n+  return (\r\n+    <div style={{\r\n+      backgroundColor: darkMode ? '#2d3748' : '#f3f4f6',\r\n+      borderRadius: '16px',\r\n+      padding: '2rem 1.5rem',\r\n+      border: '2px solid #3b82f6',\r\n+      textAlign: 'center',\r\n+      cursor: 'pointer',\r\n+      transition: 'transform 0.3s, box-shadow 0.3s',\r\n+      ':hover': {\r\n+        transform: 'translateY(-5px)',\r\n+        boxShadow: '0 10px 20px rgba(0, 0, 0, 0.1)',\r\n       }\r\n-    };\r\n+    }}>\r\n+      <div style={{ \r\n+        fontSize: '3rem',\r\n+        marginBottom: '1rem',\r\n+        display: 'inline-block',\r\n+        animation: 'float 3s ease-in-out infinite'\r\n+      }}>{weather.icon}</div>\r\n+      <h3 style={{fontSize: '1.5rem', fontWeight: '600', marginBottom: '0.5rem'}}>Nairobi Weather</h3>\r\n+      <p style={{color: darkMode ? '#a0aec0' : '#64748b'}}>{weather.temp} - {weather.condition}</p>\r\n+    </div>\r\n+  );\r\n+};\r\n \r\n-    fetchWeather();\r\n-  }, []);\r\n+// Emergency Services Component\r\n+const EmergencyServices = ({ darkMode }) => {\r\n+  return (\r\n+    <div style={{\r\n+      backgroundColor: darkMode ? '#2d3748' : '#f3f4f6',\r\n+      borderRadius: '16px',\r\n+      padding: '2rem 1.5rem',\r\n+      border: '2px solid #ef4444',\r\n+      textAlign: 'center',\r\n+      cursor: 'pointer',\r\n+      transition: 'transform 0.3s, box-shadow 0.3s',\r\n+      ':hover': {\r\n+        transform: 'translateY(-5px)',\r\n+        boxShadow: '0 10px 20px rgba(0, 0, 0, 0.1)',\r\n+      }\r\n+    }}>\r\n+      <div style={{ \r\n+        fontSize: '3rem',\r\n+        marginBottom: '1rem',\r\n+        display: 'inline-block',\r\n+        animation: 'float 3s ease-in-out infinite'\r\n+      }}>üö®</div>\r\n+      <h3 style={{fontSize: '1.5rem', fontWeight: '600', marginBottom: '0.5rem'}}>Emergency Services</h3>\r\n+      <p style={{color: darkMode ? '#a0aec0' : '#64748b'}}>Quick access to emergency contacts</p>\r\n+    </div>\r\n+  );\r\n+};\r\n \r\n-  const getWeatherIcon = (condition) => {\r\n-    switch (condition) {\r\n-      case 'Clear':\r\n-        return '‚òÄÔ∏è';\r\n-      case 'Clouds':\r\n-        return '‚òÅÔ∏è';\r\n-      case 'Rain':\r\n-        return 'üåßÔ∏è';\r\n-      case 'Thunderstorm':\r\n-        return '‚õàÔ∏è';\r\n-      default:\r\n-        return 'üå§Ô∏è';\r\n-    }\r\n-  };\r\n+// Nairobi Facts Component\r\n+const NairobiFacts = ({ darkMode }) => {\r\n+  const facts = [\r\n+    \"Nairobi is the only city in the world with a national park within its boundaries.\",\r\n+    \"The name 'Nairobi' comes from the Maasai phrase 'Enkare Nyrobi', meaning 'cool water'.\",\r\n+    \"Nairobi is home to the largest giraffe population in Africa at the Giraffe Centre.\",\r\n+    \"The Nairobi Stock Exchange is Africa's 4th largest exchange by trading volume.\",\r\n+    \"Nairobi's elevation of 1,795 meters makes it one of the highest capital cities in Africa.\",\r\n+    \"The first East African movie theater was opened in Nairobi in 1929.\",\r\n+    \"Nairobi has more than 100 species of butterflies in its urban parks.\",\r\n+    \"The Kenyatta International Convention Center has a helipad on its roof that's shaped like Kenya.\"\r\n+  ];\r\n \r\n-  if (loading) return <div>Loading weather...</div>;\r\n-  if (error) return <div>Weather data unavailable</div>;\r\n+  const [currentFact, setCurrentFact] = useState(facts[0]);\r\n \r\n+  useEffect(() => {\r\n+    const interval = setInterval(() => {\r\n+      setCurrentFact(facts[Math.floor(Math.random() * facts.length)]);\r\n+    }, 5000);\r\n+\r\n+    return () => clearInterval(interval);\r\n+  }, []);\r\n+\r\n   return (\r\n     <div style={{\r\n       backgroundColor: darkMode ? '#2d3748' : '#f3f4f6',\r\n-      borderRadius: '12px',\r\n-      padding: '1rem',\r\n-      margin: '1rem 0',\r\n-      boxShadow: '0 2px 4px rgba(0,0,0,0.1)'\r\n+      borderRadius: '16px',\r\n+      padding: '2rem 1.5rem',\r\n+      border: '2px solid #f59e0b',\r\n+      textAlign: 'center',\r\n+      cursor: 'pointer',\r\n+      transition: 'transform 0.3s, box-shadow 0.3s',\r\n+      ':hover': {\r\n+        transform: 'translateY(-5px)',\r\n+        boxShadow: '0 10px 20px rgba(0, 0, 0, 0.1)',\r\n+      }\r\n     }}>\r\n-      <h3 style={{ marginTop: 0, color: darkMode ? '#e2e8f0' : '#1e293b' }}>Nairobi Weather</h3>\r\n-      <div style={{ display: 'flex', alignItems: 'center', gap: '1rem' }}>\r\n-        <span style={{ fontSize: '2rem' }}>\r\n-          {weather && getWeatherIcon(weather.weather[0].main)}\r\n-        </span>\r\n-        <div>\r\n-          <p style={{ margin: 0, fontSize: '1.5rem', fontWeight: 'bold', color: darkMode ? '#e2e8f0' : '#1e293b' }}>\r\n-            {weather?.main?.temp}¬∞C\r\n-          </p>\r\n-          <p style={{ margin: 0, color: darkMode ? '#a0aec0' : '#64748b' }}>\r\n-            {weather?.weather[0].description}\r\n-          </p>\r\n-        </div>\r\n-      </div>\r\n-      <div style={{ display: 'flex', justifyContent: 'space-between', marginTop: '0.5rem' }}>\r\n-        <span style={{ color: darkMode ? '#a0aec0' : '#64748b' }}>Humidity: {weather?.main?.humidity}%</span>\r\n-        <span style={{ color: darkMode ? '#a0aec0' : '#64748b' }}>Wind: {weather?.wind?.speed} m/s</span>\r\n-      </div>\r\n+      <div style={{ \r\n+        fontSize: '3rem',\r\n+        marginBottom: '1rem',\r\n+        display: 'inline-block',\r\n+        animation: 'float 3s ease-in-out infinite'\r\n+      }}>üåü</div>\r\n+      <h3 style={{fontSize: '1.5rem', fontWeight: '600', marginBottom: '0.5rem'}}>Nairobi Facts</h3>\r\n+      <p style={{color: darkMode ? '#a0aec0' : '#64748b', minHeight: '80px'}}>{currentFact}</p>\r\n     </div>\r\n   );\r\n };\r\n \r\n-// Emergency Services Component\r\n-const EmergencyServices = ({ darkMode }) => {\r\n-  const services = [\r\n-    { name: \"Police\", number: \"999\", icon: \"üëÆ\", color: \"#3b82f6\" },\r\n-    { name: \"Ambulance\", number: \"911\", icon: \"üöë\", color: \"#ef4444\" },\r\n-    { name: \"Fire Brigade\", number: \"999\", icon: \"üöí\", color: \"#f59e0b\" },\r\n-    { name: \"Child Helpline\", number: \"116\", icon: \"üßí\", color: \"#10b981\" }\r\n-  ];\r\n+// Login Page Component\r\n+const LoginPage = ({ darkMode, onLogin }) => {\r\n+  const [email, setEmail] = useState('');\r\n+  const [password, setPassword] = useState('');\r\n \r\n+  const handleSubmit = (e) => {\r\n+    e.preventDefault();\r\n+    onLogin();\r\n+  };\r\n+\r\n   return (\r\n     <div style={{\r\n-      backgroundColor: darkMode ? '#2d3748' : '#f3f4f6',\r\n-      borderRadius: '12px',\r\n-      padding: '1rem',\r\n-      margin: '1rem 0',\r\n-      boxShadow: '0 2px 4px rgba(0,0,0,0.1)'\r\n+      minHeight: '100vh',\r\n+      display: 'flex',\r\n+      justifyContent: 'center',\r\n+      alignItems: 'center',\r\n+      backgroundImage: 'url(https://images.unsplash.com/photo-1477959858617-67f85cf4f1df?ixlib=rb-1.2.1&auto=format&fit=crop&w=1350&q=80)',\r\n+      backgroundSize: 'cover',\r\n+      backgroundPosition: 'center',\r\n     }}>\r\n-      <h3 style={{ marginTop: 0, color: darkMode ? '#e2e8f0' : '#1e293b' }}>Emergency Services</h3>\r\n-      <div style={{ \r\n-        display: 'grid',\r\n-        gridTemplateColumns: 'repeat(auto-fit, minmax(120px, 1fr))',\r\n-        gap: '0.5rem'\r\n+      <div style={{\r\n+        backgroundColor: 'rgba(255, 255, 255, 0.15)',\r\n+        backdropFilter: 'blur(10px)',\r\n+        borderRadius: '20px',\r\n+        padding: '2.5rem',\r\n+        width: '100%',\r\n+        maxWidth: '400px',\r\n+        boxShadow: '0 8px 32px 0 rgba(31, 38, 135, 0.37)',\r\n+        border: '1px solid rgba(255, 255, 255, 0.18)',\r\n       }}>\r\n-        {services.map((service) => (\r\n-          <a \r\n-            key={service.name}\r\n-            href={`tel:${service.number}`}\r\n+        <h2 style={{\r\n+          textAlign: 'center',\r\n+          color: 'white',\r\n+          marginBottom: '2rem',\r\n+          fontSize: '2rem',\r\n+          fontWeight: '600'\r\n+        }}>Welcome to UrbanFlow</h2>\r\n+        \r\n+        <form onSubmit={handleSubmit}>\r\n+          <div style={{ marginBottom: '1.5rem' }}>\r\n+            <label style={{\r\n+              display: 'block',\r\n+              marginBottom: '0.5rem',\r\n+              color: 'white',\r\n+              fontWeight: '500'\r\n+            }}>Email</label>\r\n+            <input\r\n+              type=\"email\"\r\n+              value={email}\r\n+              onChange={(e) => setEmail(e.target.value)}\r\n+              required\r\n+              style={{\r\n+                width: '100%',\r\n+                padding: '0.75rem 1rem',\r\n+                borderRadius: '8px',\r\n+                border: '1px solid rgba(255, 255, 255, 0.3)',\r\n+                backgroundColor: 'rgba(255, 255, 255, 0.1)',\r\n+                color: 'white',\r\n+                outline: 'none',\r\n+                '::placeholder': {\r\n+                  color: 'rgba(255, 255, 255, 0.7)'\r\n+                }\r\n+              }}\r\n+              placeholder=\"Enter your email\"\r\n+            />\r\n+          </div>\r\n+          \r\n+          <div style={{ marginBottom: '2rem' }}>\r\n+            <label style={{\r\n+              display: 'block',\r\n+              marginBottom: '0.5rem',\r\n+              color: 'white',\r\n+              fontWeight: '500'\r\n+            }}>Password</label>\r\n+            <input\r\n+              type=\"password\"\r\n+              value={password}\r\n+              onChange={(e) => setPassword(e.target.value)}\r\n+              required\r\n+              style={{\r\n+                width: '100%',\r\n+                padding: '0.75rem 1rem',\r\n+                borderRadius: '8px',\r\n+                border: '1px solid rgba(255, 255, 255, 0.3)',\r\n+                backgroundColor: 'rgba(255, 255, 255, 0.1)',\r\n+                color: 'white',\r\n+                outline: 'none',\r\n+                '::placeholder': {\r\n+                  color: 'rgba(255, 255, 255, 0.7)'\r\n+                }\r\n+              }}\r\n+              placeholder=\"Enter your password\"\r\n+            />\r\n+          </div>\r\n+          \r\n+          <button\r\n+            type=\"submit\"\r\n             style={{\r\n-              display: 'flex',\r\n-              flexDirection: 'column',\r\n-              alignItems: 'center',\r\n+              width: '100%',\r\n               padding: '0.75rem',\r\n               borderRadius: '8px',\r\n-              backgroundColor: darkMode ? '#4a5568' : '#e2e8f0',\r\n-              color: darkMode ? '#e2e8f0' : '#1e293b',\r\n-              textDecoration: 'none',\r\n-              transition: 'transform 0.2s',\r\n+              border: 'none',\r\n+              backgroundColor: 'rgba(255, 255, 255, 0.2)',\r\n+              color: 'white',\r\n+              fontWeight: '600',\r\n+              cursor: 'pointer',\r\n+              transition: 'background-color 0.3s',\r\n               ':hover': {\r\n-                transform: 'scale(1.05)'\r\n+                backgroundColor: 'rgba(255, 255, 255, 0.3)'\r\n               }\r\n             }}\r\n           >\r\n-            <span style={{ fontSize: '1.5rem' }}>{service.icon}</span>\r\n-            <span style={{ fontWeight: '600' }}>{service.name}</span>\r\n-            <span style={{ fontSize: '0.9rem' }}>{service.number}</span>\r\n-          </a>\r\n-        ))}\r\n+            Login\r\n+          </button>\r\n+        </form>\r\n       </div>\r\n     </div>\r\n   );\r\n };\r\n \r\n-// Main Home Component\r\n-export default function Home() {\r\n+// Main App Component\r\n+export default function App() {\r\n   const navigate = useNavigate();\r\n-  const [searchQuery, setSearchQuery] = useState('');\r\n   const [darkMode, setDarkMode] = useState(false);\r\n+  const [showChat, setShowChat] = useState(false);\r\n+  const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n   const [selectedService, setSelectedService] = useState(null);\r\n-  const [orderCount, setOrderCount] = useState(0);\r\n-  const [achievements, setAchievements] = useState([]);\r\n-  const [showChat, setShowChat] = useState(false);\r\n-  const [events, setEvents] = useState([]);\r\n-  const [eventsLoading, setEventsLoading] = useState(true);\r\n \r\n-  const services = [\r\n-    { \r\n-      name: 'Transport', \r\n-      path: '/transport', \r\n-      icon: 'üöå', \r\n-      desc: 'Plan your multi-modal journey across the city',\r\n-      color: '#3b82f6',\r\n-      details: 'Find the best routes combining metro, buses, and bikes. Real-time updates and ticket purchasing available.'\r\n-    },\r\n-    { \r\n-      name: 'Food Delivery', \r\n-      path: '/food', \r\n-      icon: 'üçî', \r\n-      desc: 'Discover local restaurants and cafes',\r\n-      color: '#ef4444',\r\n-      details: 'Order from hundreds of restaurants with special discounts. Track your delivery in real-time.'\r\n-    },\r\n-    { \r\n-      name: 'Groceries', \r\n-      path: '/food', \r\n-      icon: 'üõí', \r\n-      desc: 'Get groceries delivered in minutes',\r\n-      color: '#10b981',\r\n-      details: 'Same-day delivery from local supermarkets. Schedule recurring orders for essentials.'\r\n-    },\r\n-    { \r\n-      name: 'Services', \r\n-      path: '/food', \r\n-      icon: 'üõ†Ô∏è', \r\n-      desc: 'Find urban services near you',\r\n-      color: '#8b5cf6',\r\n-      details: 'Book home services, repairs, and professional help with verified providers.'\r\n-    },\r\n-    { \r\n-      name: 'Live Events', \r\n-      path: '/events', \r\n-      icon: 'üé§', \r\n-      desc: 'Discover concerts, shows and happenings in Nairobi',\r\n-      color: '#f59e0b',\r\n-      details: 'Find the latest concerts, theater shows, art exhibitions and special events happening around Nairobi. Get tickets and directions.'\r\n-    }\r\n-  ];\r\n-\r\n-  // Fetch Nairobi events\r\n-  useEffect(() => {\r\n-    const fetchEvents = async () => {\r\n-      try {\r\n-        // Note: In production, use your own backend to make this API call\r\n-        const response = await fetch(\r\n-          `https://app.ticketmaster.com/discovery/v2/events.json?city=Nairobi&apikey=${process.env.REACT_APP_TICKETMASTER_API_KEY}`\r\n-        );\r\n-        \r\n-        if (!response.ok) {\r\n-          throw new Error('Failed to fetch events');\r\n-        }\r\n-        \r\n-        const data = await response.json();\r\n-        setEvents(data._embedded?.events || []);\r\n-      } catch (err) {\r\n-        console.error('Error fetching events:', err);\r\n-        // Fallback to sample events if API fails\r\n-        setEvents([\r\n-          {\r\n-            name: \"Nairobi Jazz Festival\",\r\n-            dates: { start: { localDate: \"2023-08-15\" } },\r\n-            _embedded: {\r\n-              venues: [{ name: \"KICC\" }]\r\n-            }\r\n-          },\r\n-          {\r\n-            name: \"Kenya National Theatre Play\",\r\n-            dates: { start: { localDate: \"2023-08-20\" } },\r\n-            _embedded: {\r\n-              venues: [{ name: \"Kenya National Theatre\" }]\r\n-            }\r\n-          }\r\n-        ]);\r\n-      } finally {\r\n-        setEventsLoading(false);\r\n-      }\r\n-    };\r\n-\r\n-    fetchEvents();\r\n-  }, []);\r\n-\r\n-  // Check for achievements\r\n-  useEffect(() => {\r\n-    if (orderCount === 1) {\r\n-      addAchievement('First Order!', 'üéâ');\r\n-    } else if (orderCount === 5) {\r\n-      addAchievement('Regular Customer!', 'üèÜ');\r\n-    } else if (orderCount === 10) {\r\n-      addAchievement('Super User!', 'üåü');\r\n-    }\r\n-  }, [orderCount]);\r\n-\r\n-  const addAchievement = (title, icon) => {\r\n-    if (!achievements.some(a => a.title === title)) {\r\n-      const newAchievement = { title, icon, id: Date.now() };\r\n-      setAchievements(prev => [...prev, newAchievement]);\r\n-      \r\n-      // Auto-hide achievement after 3 seconds\r\n-      setTimeout(() => {\r\n-        setAchievements(prev => prev.filter(a => a.id !== newAchievement.id));\r\n-      }, 3000);\r\n-    }\r\n+  const toggleDarkMode = () => {\r\n+    setDarkMode(!darkMode);\r\n   };\r\n \r\n-  const handleSearch = (e) => {\r\n-    e.preventDefault();\r\n-    if (searchQuery.trim()) {\r\n-      navigate(`/food?search=${encodeURIComponent(searchQuery)}`);\r\n-    }\r\n+  const toggleChat = () => {\r\n+    setShowChat(!showChat);\r\n   };\r\n \r\n-  const toggleDarkMode = () => {\r\n-    setDarkMode(!darkMode);\r\n+  const handleLogin = () => {\r\n+    setIsLoggedIn(true);\r\n   };\r\n \r\n   const openServicePopup = (service) => {\r\n     setSelectedService(service);\r\n-    setOrderCount(prev => prev + 1);\r\n   };\r\n \r\n   const closePopup = () => {\r\n     setSelectedService(null);\r\n   };\r\n \r\n-  const toggleChat = () => {\r\n-    setShowChat(!showChat);\r\n-  };\r\n+  if (!isLoggedIn) {\r\n+    return <LoginPage darkMode={darkMode} onLogin={handleLogin} />;\r\n+  }\r\n \r\n   return (\r\n     <div style={{\r\n       backgroundColor: darkMode ? '#1a202c' : '#f8fafc',\r\n       minHeight: '100vh',\r\n       paddingBottom: '3rem',\r\n       color: darkMode ? '#e2e8f0' : '#1e293b',\r\n       transition: 'all 0.3s ease',\r\n-      position: 'relative'\r\n     }}>\r\n-      {/* Theme Toggle Button */}\r\n       <button \r\n         onClick={toggleDarkMode} \r\n         style={{\r\n           position: 'fixed',\r\n@@ -728,14 +549,12 @@\n           transition: 'all 0.3s ease',\r\n           boxShadow: '0 2px 5px rgba(0, 0, 0, 0.2)',\r\n           zIndex: 100\r\n         }}\r\n-        aria-label={darkMode ? 'Switch to light mode' : 'Switch to dark mode'}\r\n       >\r\n         {darkMode ? '‚òÄÔ∏è' : 'üåô'}\r\n       </button>\r\n       \r\n-      {/* Hero Section with UrbanBuddy */}\r\n       <section style={{\r\n         background: darkMode \r\n           ? 'linear-gradient(135deg, #2d3748 0%, #1a202c 100%)' \r\n           : 'linear-gradient(135deg, #6b46c1 0%, #3b82f6 100%)',\r\n@@ -764,49 +583,12 @@\n             fontSize: '1.25rem',\r\n             marginBottom: '2rem',\r\n             opacity: 0.9,\r\n           }}>Your seamless urban living companion</p>\r\n-          \r\n-          <form onSubmit={handleSearch} style={{\r\n-            display: 'flex',\r\n-            maxWidth: '600px',\r\n-            margin: '0 auto',\r\n-            borderRadius: '50px',\r\n-            overflow: 'hidden',\r\n-            boxShadow: '0 4px 10px rgba(0, 0, 0, 0.2)',\r\n-          }}>\r\n-            <input\r\n-              type=\"text\"\r\n-              placeholder=\"Search for restaurants, services...\"\r\n-              value={searchQuery}\r\n-              onChange={(e) => setSearchQuery(e.target.value)}\r\n-              style={{\r\n-                flex: 1,\r\n-                padding: '1rem 1.5rem',\r\n-                border: 'none',\r\n-                fontSize: '1rem',\r\n-                outline: 'none',\r\n-                backgroundColor: darkMode ? '#2d3748' : 'white',\r\n-                color: darkMode ? '#e2e8f0' : '#1e293b',\r\n-              }}\r\n-            />\r\n-            <button type=\"submit\" style={{\r\n-              backgroundColor: darkMode ? '#4a5568' : '#1e40af',\r\n-              color: 'white',\r\n-              border: 'none',\r\n-              padding: '0 1.5rem',\r\n-              cursor: 'pointer',\r\n-              fontSize: '1.25rem',\r\n-              transition: 'background-color 0.2s'\r\n-            }}>\r\n-              <span>üîç</span>\r\n-            </button>\r\n-          </form>\r\n         </div>\r\n         <UrbanBuddy darkMode={darkMode} onChatOpen={toggleChat} />\r\n       </section>\r\n \r\n-      {/* Services Grid */}\r\n       <section style={{\r\n         padding: '2rem 1rem',\r\n         maxWidth: '1200px',\r\n         margin: '0 auto',\r\n@@ -817,155 +599,82 @@\n           marginBottom: '1.5rem',\r\n           color: darkMode ? '#e2e8f0' : '#1e293b',\r\n           textAlign: 'center',\r\n         }}>What do you need today?</h2>\r\n+        \r\n         <div style={{\r\n           display: 'grid',\r\n           gridTemplateColumns: 'repeat(auto-fit, minmax(250px, 1fr))',\r\n           gap: '1.5rem',\r\n           marginTop: '1rem',\r\n         }}>\r\n-          {services.map((service) => (\r\n-            <div \r\n-              key={service.name} \r\n-              onClick={() => openServicePopup(service)}\r\n-              style={{ \r\n-                padding: '2rem 1.5rem',\r\n-                borderRadius: '16px',\r\n-                border: `2px solid ${service.color}`,\r\n-                textAlign: 'center',\r\n-                cursor: 'pointer',\r\n-                transition: 'transform 0.3s, box-shadow 0.3s',\r\n-                backgroundColor: darkMode \r\n-                  ? `${service.color}20` \r\n-                  : `${service.color}10`,\r\n-                ':hover': {\r\n-                  transform: 'translateY(-5px)',\r\n-                  boxShadow: '0 10px 20px rgba(0, 0, 0, 0.1)',\r\n-                }\r\n-              }}\r\n-            >\r\n-              <div style={{ \r\n-                fontSize: '3rem',\r\n-                marginBottom: '1rem',\r\n-                display: 'inline-block',\r\n-                animation: 'float 3s ease-in-out infinite'\r\n-              }}>{service.icon}</div>\r\n-              <h3 style={{fontSize: '1.5rem', fontWeight: '600', marginBottom: '0.5rem'}}>{service.name}</h3>\r\n-              <p style={{color: darkMode ? '#a0aec0' : '#64748b'}}>{service.desc}</p>\r\n-            </div>\r\n-          ))}\r\n-        </div>\r\n-      </section>\r\n-\r\n-      {/* Weather and Emergency Services Section */}\r\n-      <section style={{\r\n-        padding: '2rem 1rem',\r\n-        maxWidth: '1200px',\r\n-        margin: '0 auto',\r\n-        display: 'grid',\r\n-        gridTemplateColumns: 'repeat(auto-fit, minmax(300px, 1fr))',\r\n-        gap: '1.5rem'\r\n-      }}>\r\n-        <WeatherWidget darkMode={darkMode} />\r\n-        <EmergencyServices darkMode={darkMode} />\r\n-      </section>\r\n-\r\n-      {/* Featured Section */}\r\n-      <section style={{\r\n-        padding: '2rem 1rem',\r\n-        maxWidth: '1200px',\r\n-        margin: '0 auto',\r\n-      }}>\r\n-        <h2 style={{\r\n-          fontSize: '2rem',\r\n-          fontWeight: '700',\r\n-          marginBottom: '1.5rem',\r\n-          color: darkMode ? '#e2e8f0' : '#1e293b',\r\n-          textAlign: 'center',\r\n-        }}>Quick Access</h2>\r\n-        <div style={{\r\n-          display: 'flex',\r\n-          justifyContent: 'center',\r\n-          gap: '1rem',\r\n-          flexWrap: 'wrap',\r\n-        }}>\r\n-          <button \r\n-            onClick={() => navigate('/transport?from=home&to=downtown')}\r\n+          <WeatherWidget darkMode={darkMode} />\r\n+          <EmergencyServices darkMode={darkMode} />\r\n+          <NairobiFacts darkMode={darkMode} />\r\n+          \r\n+          <div \r\n+            onClick={() => openServicePopup({\r\n+              name: 'Transport',\r\n+              icon: 'üöå',\r\n+              desc: 'Plan your multi-modal journey',\r\n+              details: 'Find the best routes combining metro, buses, and bikes. Real-time updates and ticket purchasing available.',\r\n+              path: '/transport'\r\n+            })}\r\n             style={{\r\n-              padding: '0.75rem 1.5rem',\r\n-              borderRadius: '50px',\r\n-              border: 'none',\r\n-              backgroundColor: darkMode ? '#2d3748' : '#e2e8f0',\r\n-              color: darkMode ? '#e2e8f0' : '#1e293b',\r\n-              fontWeight: '600',\r\n+              backgroundColor: darkMode ? '#2d3748' : '#f3f4f6',\r\n+              borderRadius: '16px',\r\n+              padding: '2rem 1.5rem',\r\n+              border: '2px solid #10b981',\r\n+              textAlign: 'center',\r\n               cursor: 'pointer',\r\n-              transition: 'all 0.2s',\r\n-              display: 'flex',\r\n-              alignItems: 'center',\r\n-              gap: '0.5rem',\r\n-              fontSize: '1rem'\r\n+              transition: 'transform 0.3s, box-shadow 0.3s',\r\n+              ':hover': {\r\n+                transform: 'translateY(-5px)',\r\n+                boxShadow: '0 10px 20px rgba(0, 0, 0, 0.1)',\r\n+              }\r\n             }}\r\n           >\r\n-            üöï To Downtown\r\n-          </button>\r\n-          <button \r\n-            onClick={() => navigate('/food?category=fastfood')}\r\n+            <div style={{ \r\n+              fontSize: '3rem',\r\n+              marginBottom: '1rem',\r\n+              display: 'inline-block',\r\n+              animation: 'float 3s ease-in-out infinite'\r\n+            }}>üöå</div>\r\n+            <h3 style={{fontSize: '1.5rem', fontWeight: '600', marginBottom: '0.5rem'}}>Transport</h3>\r\n+            <p style={{color: darkMode ? '#a0aec0' : '#64748b'}}>Plan your multi-modal journey</p>\r\n+          </div>\r\n+          \r\n+          <div \r\n+            onClick={() => openServicePopup({\r\n+              name: 'Food Delivery',\r\n+              icon: 'üçî',\r\n+              desc: 'Discover local restaurants',\r\n+              details: 'Order from hundreds of restaurants with special discounts. Track your delivery in real-time.',\r\n+              path: '/food'\r\n+            })}\r\n             style={{\r\n-              padding: '0.75rem 1.5rem',\r\n-              borderRadius: '50px',\r\n-              border: 'none',\r\n-              backgroundColor: darkMode ? '#2d3748' : '#e2e8f0',\r\n-              color: darkMode ? '#e2e8f0' : '#1e293b',\r\n-              fontWeight: '600',\r\n+              backgroundColor: darkMode ? '#2d3748' : '#f3f4f6',\r\n+              borderRadius: '16px',\r\n+              padding: '2rem 1.5rem',\r\n+              border: '2px solid #8b5cf6',\r\n+              textAlign: 'center',\r\n               cursor: 'pointer',\r\n-              transition: 'all 0.2s',\r\n-              display: 'flex',\r\n-              alignItems: 'center',\r\n-              gap: '0.5rem',\r\n-              fontSize: '1rem'\r\n+              transition: 'transform 0.3s, box-shadow 0.3s',\r\n+              ':hover': {\r\n+                transform: 'translateY(-5px)',\r\n+                boxShadow: '0 10px 20px rgba(0, 0, 0, 0.1)',\r\n+              }\r\n             }}\r\n           >\r\n-            üçü Fast Food\r\n-          </button>\r\n-          <button \r\n-            onClick={() => navigate('/food?category=coffee')}\r\n-            style={{\r\n-              padding: '0.75rem 1.5rem',\r\n-              borderRadius: '50px',\r\n-              border: 'none',\r\n-              backgroundColor: darkMode ? '#2d3748' : '#e2e8f0',\r\n-              color: darkMode ? '#e2e8f0' : '#1e293b',\r\n-              fontWeight: '600',\r\n-              cursor: 'pointer',\r\n-              transition: 'all 0.2s',\r\n-              display: 'flex',\r\n-              alignItems: 'center',\r\n-              gap: '0.5rem',\r\n-              fontSize: '1rem'\r\n-            }}\r\n-          >\r\n-            ‚òï Coffee Shops\r\n-          </button>\r\n-          <button \r\n-            onClick={() => navigate('/events')}\r\n-            style={{\r\n-              padding: '0.75rem 1.5rem',\r\n-              borderRadius: '50px',\r\n-              border: 'none',\r\n-              backgroundColor: darkMode ? '#2d3748' : '#e2e8f0',\r\n-              color: darkMode ? '#e2e8f0' : '#1e293b',\r\n-              fontWeight: '600',\r\n-              cursor: 'pointer',\r\n-              transition: 'all 0.2s',\r\n-              display: 'flex',\r\n-              alignItems: 'center',\r\n-              gap: '0.5rem',\r\n-              fontSize: '1rem'\r\n-            }}\r\n-          >\r\n-            üé§ Nairobi Events\r\n-          </button>\r\n+            <div style={{ \r\n+              fontSize: '3rem',\r\n+              marginBottom: '1rem',\r\n+              display: 'inline-block',\r\n+              animation: 'float 3s ease-in-out infinite'\r\n+            }}>üçî</div>\r\n+            <h3 style={{fontSize: '1.5rem', fontWeight: '600', marginBottom: '0.5rem'}}>Food Delivery</h3>\r\n+            <p style={{color: darkMode ? '#a0aec0' : '#64748b'}}>Discover local restaurants</p>\r\n+          </div>\r\n         </div>\r\n       </section>\r\n \r\n       {/* Service Popup */}\r\n@@ -1007,54 +716,18 @@\n               alignItems: 'center', \r\n               gap: '1rem',\r\n               marginBottom: '1.5rem'\r\n             }}>\r\n-              <span style={{ fontSize: '2.5rem', animation: 'float 3s ease-in-out infinite' }}>{selectedService.icon}</span>\r\n+              <span style={{ fontSize: '2.5rem' }}>{selectedService.icon}</span>\r\n               <h3 style={{fontSize: '1.8rem', fontWeight: '700', marginBottom: '1rem', color: darkMode ? '#e2e8f0' : '#1e293b'}}>{selectedService.name}</h3>\r\n             </div>\r\n             <p style={{color: darkMode ? '#a0aec0' : '#64748b', fontSize: '1.1rem', lineHeight: '1.6', marginBottom: '2rem'}}>{selectedService.details}</p>\r\n-            {selectedService.name === 'Live Events' && (\r\n-              <div style={{\r\n-                backgroundColor: darkMode ? '#4a5568' : '#f3f4f6',\r\n-                borderRadius: '12px',\r\n-                padding: '1rem',\r\n-                marginBottom: '1.5rem'\r\n-              }}>\r\n-                <h4 style={{\r\n-                  fontSize: '1.2rem',\r\n-                  fontWeight: '600',\r\n-                  marginBottom: '0.5rem',\r\n-                  color: darkMode ? '#e2e8f0' : '#1e293b'\r\n-                }}>Upcoming Events</h4>\r\n-                {eventsLoading ? (\r\n-                  <p>Loading events...</p>\r\n-                ) : events.length > 0 ? (\r\n-                  <ul style={{\r\n-                    listStyle: 'none',\r\n-                    padding: 0,\r\n-                    margin: 0\r\n-                  }}>\r\n-                    {events.slice(0, 3).map((event, index) => (\r\n-                      <li key={index} style={{padding: '0.5rem 0', borderBottom: darkMode ? '1px solid #4a5568' : '1px solid #e2e8f0'}}>\r\n-                        <strong>üé§ {event.name}</strong>\r\n-                        <div style={{ display: 'flex', justifyContent: 'space-between' }}>\r\n-                          <span>{event.dates?.start?.localDate}</span>\r\n-                          <span>{event._embedded?.venues?.[0]?.name || 'Nairobi'}</span>\r\n-                        </div>\r\n-                      </li>\r\n-                    ))}\r\n-                  </ul>\r\n-                ) : (\r\n-                  <p>No upcoming events found</p>\r\n-                )}\r\n-              </div>\r\n-            )}\r\n             <button \r\n               style={{ \r\n                 padding: '0.75rem 1.5rem',\r\n                 borderRadius: '8px',\r\n                 border: 'none',\r\n-                backgroundColor: selectedService.color,\r\n+                backgroundColor: '#3b82f6',\r\n                 color: 'white',\r\n                 fontWeight: '600',\r\n                 cursor: 'pointer',\r\n                 transition: 'all 0.2s',\r\n@@ -1070,34 +743,10 @@\n           </div>\r\n         </div>\r\n       )}\r\n \r\n-      {/* Achievements */}\r\n-      {achievements.map(achievement => (\r\n-        <div key={achievement.id} style={{\r\n-          position: 'fixed',\r\n-          bottom: '20px',\r\n-          right: '20px',\r\n-          background: darkMode ? '#2d3748' : 'white',\r\n-          color: darkMode ? 'white' : '#1e293b',\r\n-          padding: '1rem',\r\n-          borderRadius: '12px',\r\n-          boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',\r\n-          display: 'flex',\r\n-          alignItems: 'center',\r\n-          gap: '0.5rem',\r\n-          zIndex: 1000,\r\n-          animation: 'slideIn 0.5s forwards, fadeOut 0.5s forwards 2.5s'\r\n-        }}>\r\n-          <span style={{fontSize: '1.5rem'}}>{achievement.icon}</span>\r\n-          <span>{achievement.title}</span>\r\n-        </div>\r\n-      ))}\r\n-\r\n-      {/* Chat Modal */}\r\n       {showChat && <ChatModal darkMode={darkMode} onClose={toggleChat} />}\r\n \r\n-      {/* Footer with copyright */}\r\n       <footer style={{\r\n         textAlign: 'center',\r\n         padding: '2rem 1rem',\r\n         color: darkMode ? '#a0aec0' : '#64748b',\r\n@@ -1107,5 +756,5 @@\n         <p>¬© {new Date().getFullYear()} UrbanFlow - Created by Nick</p>\r\n       </footer>\r\n     </div>\r\n   );\r\n-};\n\\ No newline at end of file\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1754481228575,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,10 +2,16 @@\n import { useNavigate } from 'react-router-dom';\r\n \r\n // UrbanBuddy AI Assistant Component\r\n const UrbanBuddy = ({ darkMode, onChatOpen }) => {\r\n-  const [expression, setExpression] = useState('ü§ñ');\r\n+  const [position, setPosition] = useState({ x: 20, y: 50 });\r\n+  const [expression, setExpression] = useState('üòä');\r\n+  const [direction, setDirection] = useState(1);\r\n   const [costume, setCostume] = useState(null);\r\n+  const [isActive, setIsActive] = useState(false);\r\n+  const botRef = useRef(null);\r\n+  const animationRef = useRef(null);\r\n+  const lastInteractionTime = useRef(Date.now());\r\n \r\n   // Seasonal costumes\r\n   useEffect(() => {\r\n     const today = new Date();\r\n@@ -17,73 +23,182 @@\n     else if (month === 4) setCostume('üå∏');\r\n     else setCostume(null);\r\n   }, []);\r\n \r\n+  // Make the bot wander with more dynamic movement\r\n+  useEffect(() => {\r\n+    const moveInterval = setInterval(() => {\r\n+      setPosition(prev => {\r\n+        const now = Date.now();\r\n+        const timeSinceLastInteraction = now - lastInteractionTime.current;\r\n+        \r\n+        // More active movement right after interaction\r\n+        const speedMultiplier = timeSinceLastInteraction < 5000 ? 2 : 1;\r\n+        \r\n+        let newX = prev.x + (3 * direction * speedMultiplier);\r\n+        let newY = prev.y + (Math.random() * 6 - 3);\r\n+        \r\n+        // Bounce off edges\r\n+        if (newX > window.innerWidth - 80) {\r\n+          setDirection(-1);\r\n+          triggerAnimation('spin');\r\n+        }\r\n+        if (newX < 20) {\r\n+          setDirection(1);\r\n+          triggerAnimation('spin');\r\n+        }\r\n+        if (newY < 20) newY = 20;\r\n+        if (newY > window.innerHeight - 100) newY = window.innerHeight - 100;\r\n+        \r\n+        return { x: newX, y: newY };\r\n+      });\r\n+    }, 100);\r\n+\r\n+    return () => clearInterval(moveInterval);\r\n+  }, [direction]);\r\n+\r\n+  // Change expressions randomly with more variety\r\n+  useEffect(() => {\r\n+    const expressions = ['üòä', 'ü§î', 'üòÆ', 'üòé', 'üëã', 'ü§ñ', '‚ú®', 'üåü'];\r\n+    const expressionInterval = setInterval(() => {\r\n+      if (!isActive) {\r\n+        setExpression(expressions[Math.floor(Math.random() * expressions.length)]);\r\n+        // Random animations when idle\r\n+        if (Math.random() > 0.8) {\r\n+          triggerAnimation(['bounce', 'spin', 'wobble'][Math.floor(Math.random() * 3)]);\r\n+        }\r\n+      }\r\n+    }, 3000);\r\n+    return () => clearInterval(expressionInterval);\r\n+  }, [isActive]);\r\n+\r\n+  const triggerAnimation = (type) => {\r\n+    if (animationRef.current) {\r\n+      clearTimeout(animationRef.current);\r\n+    }\r\n+    \r\n+    const botElement = botRef.current;\r\n+    if (!botElement) return;\r\n+    \r\n+    botElement.style.animation = 'none';\r\n+    void botElement.offsetWidth; // Trigger reflow\r\n+    \r\n+    switch(type) {\r\n+      case 'spin':\r\n+        botElement.style.animation = 'spin 1s ease';\r\n+        break;\r\n+      case 'bounce':\r\n+        botElement.style.animation = 'bounce 0.5s ease';\r\n+        break;\r\n+      case 'wobble':\r\n+        botElement.style.animation = 'wobble 0.8s ease';\r\n+        break;\r\n+      default:\r\n+        botElement.style.animation = '';\r\n+    }\r\n+    \r\n+    animationRef.current = setTimeout(() => {\r\n+      if (botElement) botElement.style.animation = '';\r\n+    }, 1000);\r\n+  };\r\n+\r\n   const handleClick = () => {\r\n+    lastInteractionTime.current = Date.now();\r\n+    setIsActive(true);\r\n+    triggerAnimation('bounce');\r\n     setExpression('üí°');\r\n+    \r\n+    // Trigger chat opening in parent component\r\n     onChatOpen();\r\n     \r\n+    // Return to normal after a delay\r\n     setTimeout(() => {\r\n-      setExpression('ü§ñ');\r\n+      setIsActive(false);\r\n     }, 3000);\r\n   };\r\n \r\n+  // Custom animations\r\n+  const animations = `\r\n+    @keyframes spin {\r\n+      0% { transform: rotate(0deg) scaleX(${direction}); }\r\n+      100% { transform: rotate(360deg) scaleX(${direction}); }\r\n+    }\r\n+    @keyframes bounce {\r\n+      0%, 100% { transform: translateY(0) scaleX(${direction}); }\r\n+      50% { transform: translateY(-20px) scaleX(${direction}); }\r\n+    }\r\n+    @keyframes wobble {\r\n+      0%, 100% { transform: rotate(0deg) scaleX(${direction}); }\r\n+      25% { transform: rotate(5deg) scaleX(${direction}); }\r\n+      75% { transform: rotate(-5deg) scaleX(${direction}); }\r\n+    }\r\n+    @keyframes float {\r\n+      0% { transform: translateY(0px) scaleX(${direction}); }\r\n+      50% { transform: translateY(-10px) scaleX(${direction}); }\r\n+      100% { transform: translateY(0px) scaleX(${direction}); }\r\n+    }\r\n+  `;\r\n+\r\n   return (\r\n-    <div \r\n-      onClick={handleClick}\r\n-      style={{\r\n-        position: 'fixed',\r\n-        bottom: '30px',\r\n-        right: '30px',\r\n-        fontSize: '2.5rem',\r\n-        cursor: 'pointer',\r\n-        zIndex: 100,\r\n-        filter: darkMode \r\n-          ? 'drop-shadow(0 0 8px rgba(255,255,255,0.7))' \r\n-          : 'drop-shadow(0 0 8px rgba(0,0,0,0.3))',\r\n-        userSelect: 'none',\r\n-      }}\r\n-    >\r\n-      <div style={{ \r\n-        position: 'relative',\r\n-        display: 'flex',\r\n-        flexDirection: 'column',\r\n-        alignItems: 'center'\r\n-      }}>\r\n-        <div style={{\r\n+    <>\r\n+      <style>{animations}</style>\r\n+      <div \r\n+        ref={botRef}\r\n+        onClick={handleClick}\r\n+        style={{\r\n+          position: 'fixed',\r\n+          left: `${position.x}px`,\r\n+          top: `${position.y}px`,\r\n+          fontSize: '2.5rem',\r\n+          cursor: 'pointer',\r\n+          transition: 'all 0.3s ease',\r\n+          transform: `scaleX(${direction})`,\r\n+          zIndex: 100,\r\n+          filter: darkMode \r\n+            ? 'drop-shadow(0 0 8px rgba(255,255,255,0.7))' \r\n+            : 'drop-shadow(0 0 8px rgba(0,0,0,0.3))',\r\n+          userSelect: 'none',\r\n+          animation: 'float 4s ease-in-out infinite'\r\n+        }}\r\n+      >\r\n+        <div style={{ \r\n           position: 'relative',\r\n-          width: '60px',\r\n-          height: '60px',\r\n-          backgroundColor: darkMode ? '#4a5568' : '#3b82f6',\r\n-          borderRadius: '50%',\r\n           display: 'flex',\r\n-          justifyContent: 'center',\r\n-          alignItems: 'center',\r\n-          color: 'white',\r\n-          transition: 'transform 0.2s',\r\n-          ':hover': {\r\n-            transform: 'scale(1.1)'\r\n-          }\r\n+          flexDirection: 'column',\r\n+          alignItems: 'center'\r\n         }}>\r\n-          <span style={{ fontSize: '1.8rem' }}>{expression}</span>\r\n-          {costume && (\r\n-            <span style={{\r\n-              position: 'absolute',\r\n-              top: '-15px',\r\n-              right: '-10px',\r\n-              fontSize: '1.5rem',\r\n-              transform: 'rotate(15deg)'\r\n-            }}>\r\n-              {costume}\r\n-            </span>\r\n-          )}\r\n+          {/* Bot icon with costume */}\r\n+          <div style={{\r\n+            position: 'relative',\r\n+            width: '60px',\r\n+            height: '60px',\r\n+            backgroundColor: darkMode ? '#4a5568' : '#3b82f6',\r\n+            borderRadius: '50%',\r\n+            display: 'flex',\r\n+            justifyContent: 'center',\r\n+            alignItems: 'center',\r\n+            color: 'white'\r\n+          }}>\r\n+            <span style={{ fontSize: '1.8rem' }}>{expression}</span>\r\n+            {costume && (\r\n+              <span style={{\r\n+                position: 'absolute',\r\n+                top: '-15px',\r\n+                right: '-10px',\r\n+                fontSize: '1.5rem',\r\n+                transform: 'rotate(15deg)'\r\n+              }}>\r\n+                {costume}\r\n+              </span>\r\n+            )}\r\n+          </div>\r\n         </div>\r\n       </div>\r\n-    </div>\r\n+    </>\r\n   );\r\n };\r\n \r\n-// Chat Modal Component\r\n+// Chat Modal Component with Functional API Connection\r\n const ChatModal = ({ darkMode, onClose }) => {\r\n   const [messages, setMessages] = useState([\r\n     { text: \"Hello! I'm UrbanBuddy, your AI assistant for urban living. How can I help you today?\", sender: 'bot' }\r\n   ]);\r\n@@ -91,28 +206,70 @@\n   const [isTyping, setIsTyping] = useState(false);\r\n   const chatEndRef = useRef(null);\r\n   const inputRef = useRef(null);\r\n \r\n+  // Auto-scroll to bottom and focus input\r\n   useEffect(() => {\r\n     chatEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n     inputRef.current?.focus();\r\n   }, [messages]);\r\n \r\n+  // Function to call the AI API\r\n   const generateResponse = async (userMessage) => {\r\n     setIsTyping(true);\r\n     \r\n     try {\r\n+      // In a real app, you should call your own backend endpoint that then calls OpenAI\r\n+      // This is just for demonstration purposes\r\n+      const response = await fetch('https://api.openai.com/v1/chat/completions', {\r\n+        method: \"POST\",\r\n+        headers: { \r\n+          \"Content-Type\": \"application/json\",\r\n+          // Note: In production, never expose your API key in frontend code\r\n+          // This should be handled through your own backend\r\n+          \"Authorization\": `Bearer ${process.env.REACT_APP_OPENAI_API_KEY}` \r\n+        },\r\n+        body: JSON.stringify({\r\n+          model: \"gpt-3.5-turbo\",\r\n+          messages: [\r\n+            {\r\n+              role: \"system\",\r\n+              content: \"You are UrbanBuddy, a friendly AI assistant for urban living. \" +\r\n+                \"Provide helpful, concise answers (1-2 sentences) about city life, \" +\r\n+                \"transportation, food delivery, local services, and urban living tips. \" +\r\n+                \"Keep responses practical and urban-focused.\"\r\n+            },\r\n+            {\r\n+              role: \"user\",\r\n+              content: userMessage\r\n+            }\r\n+          ],\r\n+          temperature: 0.7,\r\n+          max_tokens: 150\r\n+        })\r\n+      });\r\n+      \r\n+      if (!response.ok) {\r\n+        throw new Error(`API request failed with status ${response.status}`);\r\n+      }\r\n+      \r\n+      const data = await response.json();\r\n+      const aiResponse = data.choices?.[0]?.message?.content || \r\n+        \"I'm having trouble thinking of a response right now. Could you try asking something else?\";\r\n+      \r\n+      setMessages(prev => [...prev, { \r\n+        text: aiResponse, \r\n+        sender: 'bot' \r\n+      }]);\r\n+    } catch (error) {\r\n+      console.error(\"API error:\", error);\r\n+      // Fallback to a local AI response if API fails\r\n       const fallbackResponses = [\r\n-        \"Nairobi is the only city in the world with a national park within its boundaries.\",\r\n-        \"The name 'Nairobi' comes from the Maasai phrase 'Enkare Nyrobi', meaning 'cool water'.\",\r\n-        \"Nairobi is home to the largest giraffe population in Africa at the Giraffe Centre.\",\r\n-        \"The Nairobi Stock Exchange is Africa's 4th largest exchange by trading volume.\",\r\n-        \"Nairobi's elevation of 1,795 meters makes it one of the highest capital cities in Africa.\",\r\n-        \"The first East African movie theater was opened in Nairobi in 1929.\",\r\n-        \"Nairobi has more than 100 species of butterflies in its urban parks.\",\r\n-        \"The Kenyatta International Convention Center has a helipad on its roof that's shaped like Kenya.\"\r\n+        \"I'm currently experiencing high demand. Try again in a moment!\",\r\n+        \"Let me think differently about that... Can you rephrase your question?\",\r\n+        \"I specialize in urban living tips. Ask me about transportation, food, or city services!\",\r\n+        \"I'm having connection issues, but I'd love to help with your urban living questions!\"\r\n       ];\r\n-      \r\n       setMessages(prev => [...prev, { \r\n         text: fallbackResponses[Math.floor(Math.random() * fallbackResponses.length)], \r\n         sender: 'bot' \r\n       }]);\r\n@@ -123,11 +280,14 @@\n \r\n   const handleSendMessage = async (e) => {\r\n     e.preventDefault();\r\n     if (inputValue.trim() && !isTyping) {\r\n+      // Add user message\r\n       const userMessage = inputValue.trim();\r\n       setMessages(prev => [...prev, { text: userMessage, sender: 'user' }]);\r\n       setInputValue('');\r\n+      \r\n+      // Generate AI response\r\n       await generateResponse(userMessage);\r\n     }\r\n   };\r\n \r\n@@ -147,8 +307,9 @@\n       display: 'flex',\r\n       flexDirection: 'column',\r\n       maxHeight: '60vh'\r\n     }}>\r\n+      {/* Chat header */}\r\n       <div style={{\r\n         padding: '1rem',\r\n         backgroundColor: darkMode ? '#4a5568' : '#3b82f6',\r\n         color: 'white',\r\n@@ -180,8 +341,9 @@\n           √ó\r\n         </button>\r\n       </div>\r\n       \r\n+      {/* Chat messages */}\r\n       <div style={{\r\n         flex: 1,\r\n         padding: '1rem',\r\n         overflowY: 'auto',\r\n@@ -202,16 +364,20 @@\n               backgroundColor: msg.sender === 'user'\r\n                 ? (darkMode ? '#4a5568' : '#3b82f6')\r\n                 : (darkMode ? '#4a5568' : '#e2e8f0'),\r\n               color: msg.sender === 'user' ? 'white' : (darkMode ? 'white' : '#1e293b'),\r\n+              animation: msg.sender === 'bot' && index === messages.length - 1 \r\n+                ? 'fadeIn 0.3s ease' \r\n+                : 'none'\r\n             }}\r\n           >\r\n             {msg.text}\r\n           </div>\r\n         ))}\r\n         <div ref={chatEndRef} />\r\n       </div>\r\n       \r\n+      {/* Chat input */}\r\n       <form onSubmit={handleSendMessage} style={{\r\n         padding: '0.8rem',\r\n         borderTop: darkMode ? '1px solid #4a5568' : '1px solid #e2e8f0',\r\n         display: 'flex',\r\n@@ -221,9 +387,9 @@\n           ref={inputRef}\r\n           type=\"text\"\r\n           value={inputValue}\r\n           onChange={(e) => setInputValue(e.target.value)}\r\n-          placeholder=\"Ask me about Nairobi...\"\r\n+          placeholder=\"Ask me about urban living...\"\r\n           disabled={isTyping}\r\n           style={{\r\n             flex: 1,\r\n             padding: '0.6rem 1rem',\r\n@@ -261,277 +427,290 @@\n };\r\n \r\n // Weather Widget Component\r\n const WeatherWidget = ({ darkMode }) => {\r\n-  const [weather, setWeather] = useState({\r\n-    temp: '24¬∞C',\r\n-    condition: 'Partly Cloudy',\r\n-    icon: '‚õÖ'\r\n-  });\r\n+  const [weather, setWeather] = useState(null);\r\n+  const [loading, setLoading] = useState(true);\r\n+  const [error, setError] = useState(null);\r\n \r\n+  useEffect(() => {\r\n+    const fetchWeather = async () => {\r\n+      try {\r\n+        // Note: In production, use your own backend to make this API call\r\n+        const response = await fetch(\r\n+          `https://api.openweathermap.org/data/2.5/weather?q=Nairobi&appid=${process.env.REACT_APP_WEATHER_API_KEY}&units=metric`\r\n+        );\r\n+        \r\n+        if (!response.ok) {\r\n+          throw new Error('Failed to fetch weather data');\r\n+        }\r\n+        \r\n+        const data = await response.json();\r\n+        setWeather(data);\r\n+      } catch (err) {\r\n+        setError(err.message);\r\n+      } finally {\r\n+        setLoading(false);\r\n+      }\r\n+    };\r\n+\r\n+    fetchWeather();\r\n+  }, []);\r\n+\r\n+  const getWeatherIcon = (condition) => {\r\n+    switch (condition) {\r\n+      case 'Clear':\r\n+        return '‚òÄÔ∏è';\r\n+      case 'Clouds':\r\n+        return '‚òÅÔ∏è';\r\n+      case 'Rain':\r\n+        return 'üåßÔ∏è';\r\n+      case 'Thunderstorm':\r\n+        return '‚õàÔ∏è';\r\n+      default:\r\n+        return 'üå§Ô∏è';\r\n+    }\r\n+  };\r\n+\r\n+  if (loading) return <div>Loading weather...</div>;\r\n+  if (error) return <div>Weather data unavailable</div>;\r\n+\r\n   return (\r\n     <div style={{\r\n       backgroundColor: darkMode ? '#2d3748' : '#f3f4f6',\r\n-      borderRadius: '16px',\r\n-      padding: '2rem 1.5rem',\r\n-      border: '2px solid #3b82f6',\r\n-      textAlign: 'center',\r\n-      cursor: 'pointer',\r\n-      transition: 'transform 0.3s, box-shadow 0.3s',\r\n-      ':hover': {\r\n-        transform: 'translateY(-5px)',\r\n-        boxShadow: '0 10px 20px rgba(0, 0, 0, 0.1)',\r\n-      }\r\n+      borderRadius: '12px',\r\n+      padding: '1rem',\r\n+      margin: '1rem 0',\r\n+      boxShadow: '0 2px 4px rgba(0,0,0,0.1)'\r\n     }}>\r\n-      <div style={{ \r\n-        fontSize: '3rem',\r\n-        marginBottom: '1rem',\r\n-        display: 'inline-block',\r\n-        animation: 'float 3s ease-in-out infinite'\r\n-      }}>{weather.icon}</div>\r\n-      <h3 style={{fontSize: '1.5rem', fontWeight: '600', marginBottom: '0.5rem'}}>Nairobi Weather</h3>\r\n-      <p style={{color: darkMode ? '#a0aec0' : '#64748b'}}>{weather.temp} - {weather.condition}</p>\r\n+      <h3 style={{ marginTop: 0, color: darkMode ? '#e2e8f0' : '#1e293b' }}>Nairobi Weather</h3>\r\n+      <div style={{ display: 'flex', alignItems: 'center', gap: '1rem' }}>\r\n+        <span style={{ fontSize: '2rem' }}>\r\n+          {weather && getWeatherIcon(weather.weather[0].main)}\r\n+        </span>\r\n+        <div>\r\n+          <p style={{ margin: 0, fontSize: '1.5rem', fontWeight: 'bold', color: darkMode ? '#e2e8f0' : '#1e293b' }}>\r\n+            {weather?.main?.temp}¬∞C\r\n+          </p>\r\n+          <p style={{ margin: 0, color: darkMode ? '#a0aec0' : '#64748b' }}>\r\n+            {weather?.weather[0].description}\r\n+          </p>\r\n+        </div>\r\n+      </div>\r\n+      <div style={{ display: 'flex', justifyContent: 'space-between', marginTop: '0.5rem' }}>\r\n+        <span style={{ color: darkMode ? '#a0aec0' : '#64748b' }}>Humidity: {weather?.main?.humidity}%</span>\r\n+        <span style={{ color: darkMode ? '#a0aec0' : '#64748b' }}>Wind: {weather?.wind?.speed} m/s</span>\r\n+      </div>\r\n     </div>\r\n   );\r\n };\r\n \r\n // Emergency Services Component\r\n const EmergencyServices = ({ darkMode }) => {\r\n-  return (\r\n-    <div style={{\r\n-      backgroundColor: darkMode ? '#2d3748' : '#f3f4f6',\r\n-      borderRadius: '16px',\r\n-      padding: '2rem 1.5rem',\r\n-      border: '2px solid #ef4444',\r\n-      textAlign: 'center',\r\n-      cursor: 'pointer',\r\n-      transition: 'transform 0.3s, box-shadow 0.3s',\r\n-      ':hover': {\r\n-        transform: 'translateY(-5px)',\r\n-        boxShadow: '0 10px 20px rgba(0, 0, 0, 0.1)',\r\n-      }\r\n-    }}>\r\n-      <div style={{ \r\n-        fontSize: '3rem',\r\n-        marginBottom: '1rem',\r\n-        display: 'inline-block',\r\n-        animation: 'float 3s ease-in-out infinite'\r\n-      }}>üö®</div>\r\n-      <h3 style={{fontSize: '1.5rem', fontWeight: '600', marginBottom: '0.5rem'}}>Emergency Services</h3>\r\n-      <p style={{color: darkMode ? '#a0aec0' : '#64748b'}}>Quick access to emergency contacts</p>\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-// Nairobi Facts Component\r\n-const NairobiFacts = ({ darkMode }) => {\r\n-  const facts = [\r\n-    \"Nairobi is the only city in the world with a national park within its boundaries.\",\r\n-    \"The name 'Nairobi' comes from the Maasai phrase 'Enkare Nyrobi', meaning 'cool water'.\",\r\n-    \"Nairobi is home to the largest giraffe population in Africa at the Giraffe Centre.\",\r\n-    \"The Nairobi Stock Exchange is Africa's 4th largest exchange by trading volume.\",\r\n-    \"Nairobi's elevation of 1,795 meters makes it one of the highest capital cities in Africa.\",\r\n-    \"The first East African movie theater was opened in Nairobi in 1929.\",\r\n-    \"Nairobi has more than 100 species of butterflies in its urban parks.\",\r\n-    \"The Kenyatta International Convention Center has a helipad on its roof that's shaped like Kenya.\"\r\n+  const services = [\r\n+    { name: \"Police\", number: \"999\", icon: \"üëÆ\", color: \"#3b82f6\" },\r\n+    { name: \"Ambulance\", number: \"911\", icon: \"üöë\", color: \"#ef4444\" },\r\n+    { name: \"Fire Brigade\", number: \"999\", icon: \"üöí\", color: \"#f59e0b\" },\r\n+    { name: \"Child Helpline\", number: \"116\", icon: \"üßí\", color: \"#10b981\" }\r\n   ];\r\n \r\n-  const [currentFact, setCurrentFact] = useState(facts[0]);\r\n-\r\n-  useEffect(() => {\r\n-    const interval = setInterval(() => {\r\n-      setCurrentFact(facts[Math.floor(Math.random() * facts.length)]);\r\n-    }, 5000);\r\n-\r\n-    return () => clearInterval(interval);\r\n-  }, []);\r\n-\r\n   return (\r\n     <div style={{\r\n       backgroundColor: darkMode ? '#2d3748' : '#f3f4f6',\r\n-      borderRadius: '16px',\r\n-      padding: '2rem 1.5rem',\r\n-      border: '2px solid #f59e0b',\r\n-      textAlign: 'center',\r\n-      cursor: 'pointer',\r\n-      transition: 'transform 0.3s, box-shadow 0.3s',\r\n-      ':hover': {\r\n-        transform: 'translateY(-5px)',\r\n-        boxShadow: '0 10px 20px rgba(0, 0, 0, 0.1)',\r\n-      }\r\n+      borderRadius: '12px',\r\n+      padding: '1rem',\r\n+      margin: '1rem 0',\r\n+      boxShadow: '0 2px 4px rgba(0,0,0,0.1)'\r\n     }}>\r\n+      <h3 style={{ marginTop: 0, color: darkMode ? '#e2e8f0' : '#1e293b' }}>Emergency Services</h3>\r\n       <div style={{ \r\n-        fontSize: '3rem',\r\n-        marginBottom: '1rem',\r\n-        display: 'inline-block',\r\n-        animation: 'float 3s ease-in-out infinite'\r\n-      }}>üåü</div>\r\n-      <h3 style={{fontSize: '1.5rem', fontWeight: '600', marginBottom: '0.5rem'}}>Nairobi Facts</h3>\r\n-      <p style={{color: darkMode ? '#a0aec0' : '#64748b', minHeight: '80px'}}>{currentFact}</p>\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-// Login Page Component\r\n-const LoginPage = ({ darkMode, onLogin }) => {\r\n-  const [email, setEmail] = useState('');\r\n-  const [password, setPassword] = useState('');\r\n-\r\n-  const handleSubmit = (e) => {\r\n-    e.preventDefault();\r\n-    onLogin();\r\n-  };\r\n-\r\n-  return (\r\n-    <div style={{\r\n-      minHeight: '100vh',\r\n-      display: 'flex',\r\n-      justifyContent: 'center',\r\n-      alignItems: 'center',\r\n-      backgroundImage: 'url(https://images.unsplash.com/photo-1477959858617-67f85cf4f1df?ixlib=rb-1.2.1&auto=format&fit=crop&w=1350&q=80)',\r\n-      backgroundSize: 'cover',\r\n-      backgroundPosition: 'center',\r\n-    }}>\r\n-      <div style={{\r\n-        backgroundColor: 'rgba(255, 255, 255, 0.15)',\r\n-        backdropFilter: 'blur(10px)',\r\n-        borderRadius: '20px',\r\n-        padding: '2.5rem',\r\n-        width: '100%',\r\n-        maxWidth: '400px',\r\n-        boxShadow: '0 8px 32px 0 rgba(31, 38, 135, 0.37)',\r\n-        border: '1px solid rgba(255, 255, 255, 0.18)',\r\n+        display: 'grid',\r\n+        gridTemplateColumns: 'repeat(auto-fit, minmax(120px, 1fr))',\r\n+        gap: '0.5rem'\r\n       }}>\r\n-        <h2 style={{\r\n-          textAlign: 'center',\r\n-          color: 'white',\r\n-          marginBottom: '2rem',\r\n-          fontSize: '2rem',\r\n-          fontWeight: '600'\r\n-        }}>Welcome to UrbanFlow</h2>\r\n-        \r\n-        <form onSubmit={handleSubmit}>\r\n-          <div style={{ marginBottom: '1.5rem' }}>\r\n-            <label style={{\r\n-              display: 'block',\r\n-              marginBottom: '0.5rem',\r\n-              color: 'white',\r\n-              fontWeight: '500'\r\n-            }}>Email</label>\r\n-            <input\r\n-              type=\"email\"\r\n-              value={email}\r\n-              onChange={(e) => setEmail(e.target.value)}\r\n-              required\r\n-              style={{\r\n-                width: '100%',\r\n-                padding: '0.75rem 1rem',\r\n-                borderRadius: '8px',\r\n-                border: '1px solid rgba(255, 255, 255, 0.3)',\r\n-                backgroundColor: 'rgba(255, 255, 255, 0.1)',\r\n-                color: 'white',\r\n-                outline: 'none',\r\n-                '::placeholder': {\r\n-                  color: 'rgba(255, 255, 255, 0.7)'\r\n-                }\r\n-              }}\r\n-              placeholder=\"Enter your email\"\r\n-            />\r\n-          </div>\r\n-          \r\n-          <div style={{ marginBottom: '2rem' }}>\r\n-            <label style={{\r\n-              display: 'block',\r\n-              marginBottom: '0.5rem',\r\n-              color: 'white',\r\n-              fontWeight: '500'\r\n-            }}>Password</label>\r\n-            <input\r\n-              type=\"password\"\r\n-              value={password}\r\n-              onChange={(e) => setPassword(e.target.value)}\r\n-              required\r\n-              style={{\r\n-                width: '100%',\r\n-                padding: '0.75rem 1rem',\r\n-                borderRadius: '8px',\r\n-                border: '1px solid rgba(255, 255, 255, 0.3)',\r\n-                backgroundColor: 'rgba(255, 255, 255, 0.1)',\r\n-                color: 'white',\r\n-                outline: 'none',\r\n-                '::placeholder': {\r\n-                  color: 'rgba(255, 255, 255, 0.7)'\r\n-                }\r\n-              }}\r\n-              placeholder=\"Enter your password\"\r\n-            />\r\n-          </div>\r\n-          \r\n-          <button\r\n-            type=\"submit\"\r\n+        {services.map((service) => (\r\n+          <a \r\n+            key={service.name}\r\n+            href={`tel:${service.number}`}\r\n             style={{\r\n-              width: '100%',\r\n+              display: 'flex',\r\n+              flexDirection: 'column',\r\n+              alignItems: 'center',\r\n               padding: '0.75rem',\r\n               borderRadius: '8px',\r\n-              border: 'none',\r\n-              backgroundColor: 'rgba(255, 255, 255, 0.2)',\r\n-              color: 'white',\r\n-              fontWeight: '600',\r\n-              cursor: 'pointer',\r\n-              transition: 'background-color 0.3s',\r\n+              backgroundColor: darkMode ? '#4a5568' : '#e2e8f0',\r\n+              color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+              textDecoration: 'none',\r\n+              transition: 'transform 0.2s',\r\n               ':hover': {\r\n-                backgroundColor: 'rgba(255, 255, 255, 0.3)'\r\n+                transform: 'scale(1.05)'\r\n               }\r\n             }}\r\n           >\r\n-            Login\r\n-          </button>\r\n-        </form>\r\n+            <span style={{ fontSize: '1.5rem' }}>{service.icon}</span>\r\n+            <span style={{ fontWeight: '600' }}>{service.name}</span>\r\n+            <span style={{ fontSize: '0.9rem' }}>{service.number}</span>\r\n+          </a>\r\n+        ))}\r\n       </div>\r\n     </div>\r\n   );\r\n };\r\n \r\n-// Main App Component\r\n-export default function App() {\r\n+// Main Home Component\r\n+export default function Home() {\r\n   const navigate = useNavigate();\r\n+  const [searchQuery, setSearchQuery] = useState('');\r\n   const [darkMode, setDarkMode] = useState(false);\r\n+  const [selectedService, setSelectedService] = useState(null);\r\n+  const [orderCount, setOrderCount] = useState(0);\r\n+  const [achievements, setAchievements] = useState([]);\r\n   const [showChat, setShowChat] = useState(false);\r\n-  const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n-  const [selectedService, setSelectedService] = useState(null);\r\n+  const [events, setEvents] = useState([]);\r\n+  const [eventsLoading, setEventsLoading] = useState(true);\r\n \r\n-  const toggleDarkMode = () => {\r\n-    setDarkMode(!darkMode);\r\n+  const services = [\r\n+    { \r\n+      name: 'Transport', \r\n+      path: '/transport', \r\n+      icon: 'üöå', \r\n+      desc: 'Plan your multi-modal journey across the city',\r\n+      color: '#3b82f6',\r\n+      details: 'Find the best routes combining metro, buses, and bikes. Real-time updates and ticket purchasing available.'\r\n+    },\r\n+    { \r\n+      name: 'Food Delivery', \r\n+      path: '/food', \r\n+      icon: 'üçî', \r\n+      desc: 'Discover local restaurants and cafes',\r\n+      color: '#ef4444',\r\n+      details: 'Order from hundreds of restaurants with special discounts. Track your delivery in real-time.'\r\n+    },\r\n+    { \r\n+      name: 'Groceries', \r\n+      path: '/food', \r\n+      icon: 'üõí', \r\n+      desc: 'Get groceries delivered in minutes',\r\n+      color: '#10b981',\r\n+      details: 'Same-day delivery from local supermarkets. Schedule recurring orders for essentials.'\r\n+    },\r\n+    { \r\n+      name: 'Services', \r\n+      path: '/food', \r\n+      icon: 'üõ†Ô∏è', \r\n+      desc: 'Find urban services near you',\r\n+      color: '#8b5cf6',\r\n+      details: 'Book home services, repairs, and professional help with verified providers.'\r\n+    },\r\n+    { \r\n+      name: 'Live Events', \r\n+      path: '/events', \r\n+      icon: 'üé§', \r\n+      desc: 'Discover concerts, shows and happenings in Nairobi',\r\n+      color: '#f59e0b',\r\n+      details: 'Find the latest concerts, theater shows, art exhibitions and special events happening around Nairobi. Get tickets and directions.'\r\n+    }\r\n+  ];\r\n+\r\n+  // Fetch Nairobi events\r\n+  useEffect(() => {\r\n+    const fetchEvents = async () => {\r\n+      try {\r\n+        // Note: In production, use your own backend to make this API call\r\n+        const response = await fetch(\r\n+          `https://app.ticketmaster.com/discovery/v2/events.json?city=Nairobi&apikey=${process.env.REACT_APP_TICKETMASTER_API_KEY}`\r\n+        );\r\n+        \r\n+        if (!response.ok) {\r\n+          throw new Error('Failed to fetch events');\r\n+        }\r\n+        \r\n+        const data = await response.json();\r\n+        setEvents(data._embedded?.events || []);\r\n+      } catch (err) {\r\n+        console.error('Error fetching events:', err);\r\n+        // Fallback to sample events if API fails\r\n+        setEvents([\r\n+          {\r\n+            name: \"Nairobi Jazz Festival\",\r\n+            dates: { start: { localDate: \"2023-08-15\" } },\r\n+            _embedded: {\r\n+              venues: [{ name: \"KICC\" }]\r\n+            }\r\n+          },\r\n+          {\r\n+            name: \"Kenya National Theatre Play\",\r\n+            dates: { start: { localDate: \"2023-08-20\" } },\r\n+            _embedded: {\r\n+              venues: [{ name: \"Kenya National Theatre\" }]\r\n+            }\r\n+          }\r\n+        ]);\r\n+      } finally {\r\n+        setEventsLoading(false);\r\n+      }\r\n+    };\r\n+\r\n+    fetchEvents();\r\n+  }, []);\r\n+\r\n+  // Check for achievements\r\n+  useEffect(() => {\r\n+    if (orderCount === 1) {\r\n+      addAchievement('First Order!', 'üéâ');\r\n+    } else if (orderCount === 5) {\r\n+      addAchievement('Regular Customer!', 'üèÜ');\r\n+    } else if (orderCount === 10) {\r\n+      addAchievement('Super User!', 'üåü');\r\n+    }\r\n+  }, [orderCount]);\r\n+\r\n+  const addAchievement = (title, icon) => {\r\n+    if (!achievements.some(a => a.title === title)) {\r\n+      const newAchievement = { title, icon, id: Date.now() };\r\n+      setAchievements(prev => [...prev, newAchievement]);\r\n+      \r\n+      // Auto-hide achievement after 3 seconds\r\n+      setTimeout(() => {\r\n+        setAchievements(prev => prev.filter(a => a.id !== newAchievement.id));\r\n+      }, 3000);\r\n+    }\r\n   };\r\n \r\n-  const toggleChat = () => {\r\n-    setShowChat(!showChat);\r\n+  const handleSearch = (e) => {\r\n+    e.preventDefault();\r\n+    if (searchQuery.trim()) {\r\n+      navigate(`/food?search=${encodeURIComponent(searchQuery)}`);\r\n+    }\r\n   };\r\n \r\n-  const handleLogin = () => {\r\n-    setIsLoggedIn(true);\r\n+  const toggleDarkMode = () => {\r\n+    setDarkMode(!darkMode);\r\n   };\r\n \r\n   const openServicePopup = (service) => {\r\n     setSelectedService(service);\r\n+    setOrderCount(prev => prev + 1);\r\n   };\r\n \r\n   const closePopup = () => {\r\n     setSelectedService(null);\r\n   };\r\n \r\n-  if (!isLoggedIn) {\r\n-    return <LoginPage darkMode={darkMode} onLogin={handleLogin} />;\r\n-  }\r\n+  const toggleChat = () => {\r\n+    setShowChat(!showChat);\r\n+  };\r\n \r\n   return (\r\n     <div style={{\r\n       backgroundColor: darkMode ? '#1a202c' : '#f8fafc',\r\n       minHeight: '100vh',\r\n       paddingBottom: '3rem',\r\n       color: darkMode ? '#e2e8f0' : '#1e293b',\r\n       transition: 'all 0.3s ease',\r\n+      position: 'relative'\r\n     }}>\r\n+      {/* Theme Toggle Button */}\r\n       <button \r\n         onClick={toggleDarkMode} \r\n         style={{\r\n           position: 'fixed',\r\n@@ -549,12 +728,14 @@\n           transition: 'all 0.3s ease',\r\n           boxShadow: '0 2px 5px rgba(0, 0, 0, 0.2)',\r\n           zIndex: 100\r\n         }}\r\n+        aria-label={darkMode ? 'Switch to light mode' : 'Switch to dark mode'}\r\n       >\r\n         {darkMode ? '‚òÄÔ∏è' : 'üåô'}\r\n       </button>\r\n       \r\n+      {/* Hero Section with UrbanBuddy */}\r\n       <section style={{\r\n         background: darkMode \r\n           ? 'linear-gradient(135deg, #2d3748 0%, #1a202c 100%)' \r\n           : 'linear-gradient(135deg, #6b46c1 0%, #3b82f6 100%)',\r\n@@ -583,12 +764,49 @@\n             fontSize: '1.25rem',\r\n             marginBottom: '2rem',\r\n             opacity: 0.9,\r\n           }}>Your seamless urban living companion</p>\r\n+          \r\n+          <form onSubmit={handleSearch} style={{\r\n+            display: 'flex',\r\n+            maxWidth: '600px',\r\n+            margin: '0 auto',\r\n+            borderRadius: '50px',\r\n+            overflow: 'hidden',\r\n+            boxShadow: '0 4px 10px rgba(0, 0, 0, 0.2)',\r\n+          }}>\r\n+            <input\r\n+              type=\"text\"\r\n+              placeholder=\"Search for restaurants, services...\"\r\n+              value={searchQuery}\r\n+              onChange={(e) => setSearchQuery(e.target.value)}\r\n+              style={{\r\n+                flex: 1,\r\n+                padding: '1rem 1.5rem',\r\n+                border: 'none',\r\n+                fontSize: '1rem',\r\n+                outline: 'none',\r\n+                backgroundColor: darkMode ? '#2d3748' : 'white',\r\n+                color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+              }}\r\n+            />\r\n+            <button type=\"submit\" style={{\r\n+              backgroundColor: darkMode ? '#4a5568' : '#1e40af',\r\n+              color: 'white',\r\n+              border: 'none',\r\n+              padding: '0 1.5rem',\r\n+              cursor: 'pointer',\r\n+              fontSize: '1.25rem',\r\n+              transition: 'background-color 0.2s'\r\n+            }}>\r\n+              <span>üîç</span>\r\n+            </button>\r\n+          </form>\r\n         </div>\r\n         <UrbanBuddy darkMode={darkMode} onChatOpen={toggleChat} />\r\n       </section>\r\n \r\n+      {/* Services Grid */}\r\n       <section style={{\r\n         padding: '2rem 1rem',\r\n         maxWidth: '1200px',\r\n         margin: '0 auto',\r\n@@ -599,82 +817,155 @@\n           marginBottom: '1.5rem',\r\n           color: darkMode ? '#e2e8f0' : '#1e293b',\r\n           textAlign: 'center',\r\n         }}>What do you need today?</h2>\r\n-        \r\n         <div style={{\r\n           display: 'grid',\r\n           gridTemplateColumns: 'repeat(auto-fit, minmax(250px, 1fr))',\r\n           gap: '1.5rem',\r\n           marginTop: '1rem',\r\n         }}>\r\n-          <WeatherWidget darkMode={darkMode} />\r\n-          <EmergencyServices darkMode={darkMode} />\r\n-          <NairobiFacts darkMode={darkMode} />\r\n-          \r\n-          <div \r\n-            onClick={() => openServicePopup({\r\n-              name: 'Transport',\r\n-              icon: 'üöå',\r\n-              desc: 'Plan your multi-modal journey',\r\n-              details: 'Find the best routes combining metro, buses, and bikes. Real-time updates and ticket purchasing available.',\r\n-              path: '/transport'\r\n-            })}\r\n+          {services.map((service) => (\r\n+            <div \r\n+              key={service.name} \r\n+              onClick={() => openServicePopup(service)}\r\n+              style={{ \r\n+                padding: '2rem 1.5rem',\r\n+                borderRadius: '16px',\r\n+                border: `2px solid ${service.color}`,\r\n+                textAlign: 'center',\r\n+                cursor: 'pointer',\r\n+                transition: 'transform 0.3s, box-shadow 0.3s',\r\n+                backgroundColor: darkMode \r\n+                  ? `${service.color}20` \r\n+                  : `${service.color}10`,\r\n+                ':hover': {\r\n+                  transform: 'translateY(-5px)',\r\n+                  boxShadow: '0 10px 20px rgba(0, 0, 0, 0.1)',\r\n+                }\r\n+              }}\r\n+            >\r\n+              <div style={{ \r\n+                fontSize: '3rem',\r\n+                marginBottom: '1rem',\r\n+                display: 'inline-block',\r\n+                animation: 'float 3s ease-in-out infinite'\r\n+              }}>{service.icon}</div>\r\n+              <h3 style={{fontSize: '1.5rem', fontWeight: '600', marginBottom: '0.5rem'}}>{service.name}</h3>\r\n+              <p style={{color: darkMode ? '#a0aec0' : '#64748b'}}>{service.desc}</p>\r\n+            </div>\r\n+          ))}\r\n+        </div>\r\n+      </section>\r\n+\r\n+      {/* Weather and Emergency Services Section */}\r\n+      <section style={{\r\n+        padding: '2rem 1rem',\r\n+        maxWidth: '1200px',\r\n+        margin: '0 auto',\r\n+        display: 'grid',\r\n+        gridTemplateColumns: 'repeat(auto-fit, minmax(300px, 1fr))',\r\n+        gap: '1.5rem'\r\n+      }}>\r\n+        <WeatherWidget darkMode={darkMode} />\r\n+        <EmergencyServices darkMode={darkMode} />\r\n+      </section>\r\n+\r\n+      {/* Featured Section */}\r\n+      <section style={{\r\n+        padding: '2rem 1rem',\r\n+        maxWidth: '1200px',\r\n+        margin: '0 auto',\r\n+      }}>\r\n+        <h2 style={{\r\n+          fontSize: '2rem',\r\n+          fontWeight: '700',\r\n+          marginBottom: '1.5rem',\r\n+          color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+          textAlign: 'center',\r\n+        }}>Quick Access</h2>\r\n+        <div style={{\r\n+          display: 'flex',\r\n+          justifyContent: 'center',\r\n+          gap: '1rem',\r\n+          flexWrap: 'wrap',\r\n+        }}>\r\n+          <button \r\n+            onClick={() => navigate('/transport?from=home&to=downtown')}\r\n             style={{\r\n-              backgroundColor: darkMode ? '#2d3748' : '#f3f4f6',\r\n-              borderRadius: '16px',\r\n-              padding: '2rem 1.5rem',\r\n-              border: '2px solid #10b981',\r\n-              textAlign: 'center',\r\n+              padding: '0.75rem 1.5rem',\r\n+              borderRadius: '50px',\r\n+              border: 'none',\r\n+              backgroundColor: darkMode ? '#2d3748' : '#e2e8f0',\r\n+              color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+              fontWeight: '600',\r\n               cursor: 'pointer',\r\n-              transition: 'transform 0.3s, box-shadow 0.3s',\r\n-              ':hover': {\r\n-                transform: 'translateY(-5px)',\r\n-                boxShadow: '0 10px 20px rgba(0, 0, 0, 0.1)',\r\n-              }\r\n+              transition: 'all 0.2s',\r\n+              display: 'flex',\r\n+              alignItems: 'center',\r\n+              gap: '0.5rem',\r\n+              fontSize: '1rem'\r\n             }}\r\n           >\r\n-            <div style={{ \r\n-              fontSize: '3rem',\r\n-              marginBottom: '1rem',\r\n-              display: 'inline-block',\r\n-              animation: 'float 3s ease-in-out infinite'\r\n-            }}>üöå</div>\r\n-            <h3 style={{fontSize: '1.5rem', fontWeight: '600', marginBottom: '0.5rem'}}>Transport</h3>\r\n-            <p style={{color: darkMode ? '#a0aec0' : '#64748b'}}>Plan your multi-modal journey</p>\r\n-          </div>\r\n-          \r\n-          <div \r\n-            onClick={() => openServicePopup({\r\n-              name: 'Food Delivery',\r\n-              icon: 'üçî',\r\n-              desc: 'Discover local restaurants',\r\n-              details: 'Order from hundreds of restaurants with special discounts. Track your delivery in real-time.',\r\n-              path: '/food'\r\n-            })}\r\n+            üöï To Downtown\r\n+          </button>\r\n+          <button \r\n+            onClick={() => navigate('/food?category=fastfood')}\r\n             style={{\r\n-              backgroundColor: darkMode ? '#2d3748' : '#f3f4f6',\r\n-              borderRadius: '16px',\r\n-              padding: '2rem 1.5rem',\r\n-              border: '2px solid #8b5cf6',\r\n-              textAlign: 'center',\r\n+              padding: '0.75rem 1.5rem',\r\n+              borderRadius: '50px',\r\n+              border: 'none',\r\n+              backgroundColor: darkMode ? '#2d3748' : '#e2e8f0',\r\n+              color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+              fontWeight: '600',\r\n               cursor: 'pointer',\r\n-              transition: 'transform 0.3s, box-shadow 0.3s',\r\n-              ':hover': {\r\n-                transform: 'translateY(-5px)',\r\n-                boxShadow: '0 10px 20px rgba(0, 0, 0, 0.1)',\r\n-              }\r\n+              transition: 'all 0.2s',\r\n+              display: 'flex',\r\n+              alignItems: 'center',\r\n+              gap: '0.5rem',\r\n+              fontSize: '1rem'\r\n             }}\r\n           >\r\n-            <div style={{ \r\n-              fontSize: '3rem',\r\n-              marginBottom: '1rem',\r\n-              display: 'inline-block',\r\n-              animation: 'float 3s ease-in-out infinite'\r\n-            }}>üçî</div>\r\n-            <h3 style={{fontSize: '1.5rem', fontWeight: '600', marginBottom: '0.5rem'}}>Food Delivery</h3>\r\n-            <p style={{color: darkMode ? '#a0aec0' : '#64748b'}}>Discover local restaurants</p>\r\n-          </div>\r\n+            üçü Fast Food\r\n+          </button>\r\n+          <button \r\n+            onClick={() => navigate('/food?category=coffee')}\r\n+            style={{\r\n+              padding: '0.75rem 1.5rem',\r\n+              borderRadius: '50px',\r\n+              border: 'none',\r\n+              backgroundColor: darkMode ? '#2d3748' : '#e2e8f0',\r\n+              color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+              fontWeight: '600',\r\n+              cursor: 'pointer',\r\n+              transition: 'all 0.2s',\r\n+              display: 'flex',\r\n+              alignItems: 'center',\r\n+              gap: '0.5rem',\r\n+              fontSize: '1rem'\r\n+            }}\r\n+          >\r\n+            ‚òï Coffee Shops\r\n+          </button>\r\n+          <button \r\n+            onClick={() => navigate('/events')}\r\n+            style={{\r\n+              padding: '0.75rem 1.5rem',\r\n+              borderRadius: '50px',\r\n+              border: 'none',\r\n+              backgroundColor: darkMode ? '#2d3748' : '#e2e8f0',\r\n+              color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+              fontWeight: '600',\r\n+              cursor: 'pointer',\r\n+              transition: 'all 0.2s',\r\n+              display: 'flex',\r\n+              alignItems: 'center',\r\n+              gap: '0.5rem',\r\n+              fontSize: '1rem'\r\n+            }}\r\n+          >\r\n+            üé§ Nairobi Events\r\n+          </button>\r\n         </div>\r\n       </section>\r\n \r\n       {/* Service Popup */}\r\n@@ -716,18 +1007,54 @@\n               alignItems: 'center', \r\n               gap: '1rem',\r\n               marginBottom: '1.5rem'\r\n             }}>\r\n-              <span style={{ fontSize: '2.5rem' }}>{selectedService.icon}</span>\r\n+              <span style={{ fontSize: '2.5rem', animation: 'float 3s ease-in-out infinite' }}>{selectedService.icon}</span>\r\n               <h3 style={{fontSize: '1.8rem', fontWeight: '700', marginBottom: '1rem', color: darkMode ? '#e2e8f0' : '#1e293b'}}>{selectedService.name}</h3>\r\n             </div>\r\n             <p style={{color: darkMode ? '#a0aec0' : '#64748b', fontSize: '1.1rem', lineHeight: '1.6', marginBottom: '2rem'}}>{selectedService.details}</p>\r\n+            {selectedService.name === 'Live Events' && (\r\n+              <div style={{\r\n+                backgroundColor: darkMode ? '#4a5568' : '#f3f4f6',\r\n+                borderRadius: '12px',\r\n+                padding: '1rem',\r\n+                marginBottom: '1.5rem'\r\n+              }}>\r\n+                <h4 style={{\r\n+                  fontSize: '1.2rem',\r\n+                  fontWeight: '600',\r\n+                  marginBottom: '0.5rem',\r\n+                  color: darkMode ? '#e2e8f0' : '#1e293b'\r\n+                }}>Upcoming Events</h4>\r\n+                {eventsLoading ? (\r\n+                  <p>Loading events...</p>\r\n+                ) : events.length > 0 ? (\r\n+                  <ul style={{\r\n+                    listStyle: 'none',\r\n+                    padding: 0,\r\n+                    margin: 0\r\n+                  }}>\r\n+                    {events.slice(0, 3).map((event, index) => (\r\n+                      <li key={index} style={{padding: '0.5rem 0', borderBottom: darkMode ? '1px solid #4a5568' : '1px solid #e2e8f0'}}>\r\n+                        <strong>üé§ {event.name}</strong>\r\n+                        <div style={{ display: 'flex', justifyContent: 'space-between' }}>\r\n+                          <span>{event.dates?.start?.localDate}</span>\r\n+                          <span>{event._embedded?.venues?.[0]?.name || 'Nairobi'}</span>\r\n+                        </div>\r\n+                      </li>\r\n+                    ))}\r\n+                  </ul>\r\n+                ) : (\r\n+                  <p>No upcoming events found</p>\r\n+                )}\r\n+              </div>\r\n+            )}\r\n             <button \r\n               style={{ \r\n                 padding: '0.75rem 1.5rem',\r\n                 borderRadius: '8px',\r\n                 border: 'none',\r\n-                backgroundColor: '#3b82f6',\r\n+                backgroundColor: selectedService.color,\r\n                 color: 'white',\r\n                 fontWeight: '600',\r\n                 cursor: 'pointer',\r\n                 transition: 'all 0.2s',\r\n@@ -743,10 +1070,34 @@\n           </div>\r\n         </div>\r\n       )}\r\n \r\n+      {/* Achievements */}\r\n+      {achievements.map(achievement => (\r\n+        <div key={achievement.id} style={{\r\n+          position: 'fixed',\r\n+          bottom: '20px',\r\n+          right: '20px',\r\n+          background: darkMode ? '#2d3748' : 'white',\r\n+          color: darkMode ? 'white' : '#1e293b',\r\n+          padding: '1rem',\r\n+          borderRadius: '12px',\r\n+          boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',\r\n+          display: 'flex',\r\n+          alignItems: 'center',\r\n+          gap: '0.5rem',\r\n+          zIndex: 1000,\r\n+          animation: 'slideIn 0.5s forwards, fadeOut 0.5s forwards 2.5s'\r\n+        }}>\r\n+          <span style={{fontSize: '1.5rem'}}>{achievement.icon}</span>\r\n+          <span>{achievement.title}</span>\r\n+        </div>\r\n+      ))}\r\n+\r\n+      {/* Chat Modal */}\r\n       {showChat && <ChatModal darkMode={darkMode} onClose={toggleChat} />}\r\n \r\n+      {/* Footer with copyright */}\r\n       <footer style={{\r\n         textAlign: 'center',\r\n         padding: '2rem 1rem',\r\n         color: darkMode ? '#a0aec0' : '#64748b',\r\n@@ -756,5 +1107,5 @@\n         <p>¬© {new Date().getFullYear()} UrbanFlow - Created by Nick</p>\r\n       </footer>\r\n     </div>\r\n   );\r\n-}\n\\ No newline at end of file\n+};\n\\ No newline at end of file\n"
                },
                {
                    "date": 1754482532591,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -425,28 +425,47 @@\n     </div>\r\n   );\r\n };\r\n \r\n-// Weather Widget Component\r\n+// Weather Widget Component with Fake Store API\r\n const WeatherWidget = ({ darkMode }) => {\r\n   const [weather, setWeather] = useState(null);\r\n   const [loading, setLoading] = useState(true);\r\n   const [error, setError] = useState(null);\r\n \r\n   useEffect(() => {\r\n     const fetchWeather = async () => {\r\n       try {\r\n-        // Note: In production, use your own backend to make this API call\r\n-        const response = await fetch(\r\n-          `https://api.openweathermap.org/data/2.5/weather?q=Nairobi&appid=${process.env.REACT_APP_WEATHER_API_KEY}&units=metric`\r\n-        );\r\n+        // Using fake store API to simulate weather data\r\n+        const response = await fetch('https://fakestoreapi.com/products/1');\r\n         \r\n         if (!response.ok) {\r\n           throw new Error('Failed to fetch weather data');\r\n         }\r\n         \r\n         const data = await response.json();\r\n-        setWeather(data);\r\n+        \r\n+        // Simulate weather data based on product info\r\n+        const simulatedWeather = {\r\n+          temp: Math.round(Math.random() * 15 + 15), // 15-30¬∞C\r\n+          condition: ['Sunny', 'Cloudy', 'Rainy', 'Thunderstorm'][Math.floor(Math.random() * 4)],\r\n+          humidity: Math.round(Math.random() * 50 + 30), // 30-80%\r\n+          wind: (Math.random() * 5 + 1).toFixed(1) // 1-6 m/s\r\n+        };\r\n+        \r\n+        setWeather({\r\n+          main: {\r\n+            temp: simulatedWeather.temp,\r\n+            humidity: simulatedWeather.humidity\r\n+          },\r\n+          weather: [{\r\n+            main: simulatedWeather.condition,\r\n+            description: simulatedWeather.condition.toLowerCase()\r\n+          }],\r\n+          wind: {\r\n+            speed: simulatedWeather.wind\r\n+          }\r\n+        });\r\n       } catch (err) {\r\n         setError(err.message);\r\n       } finally {\r\n         setLoading(false);\r\n@@ -457,13 +476,13 @@\n   }, []);\r\n \r\n   const getWeatherIcon = (condition) => {\r\n     switch (condition) {\r\n-      case 'Clear':\r\n+      case 'Sunny':\r\n         return '‚òÄÔ∏è';\r\n-      case 'Clouds':\r\n+      case 'Cloudy':\r\n         return '‚òÅÔ∏è';\r\n-      case 'Rain':\r\n+      case 'Rainy':\r\n         return 'üåßÔ∏è';\r\n       case 'Thunderstorm':\r\n         return '‚õàÔ∏è';\r\n       default:\r\n@@ -479,9 +498,10 @@\n       backgroundColor: darkMode ? '#2d3748' : '#f3f4f6',\r\n       borderRadius: '12px',\r\n       padding: '1rem',\r\n       margin: '1rem 0',\r\n-      boxShadow: '0 2px 4px rgba(0,0,0,0.1)'\r\n+      boxShadow: '0 2px 4px rgba(0,0,0,0.1)',\r\n+      flex: 1\r\n     }}>\r\n       <h3 style={{ marginTop: 0, color: darkMode ? '#e2e8f0' : '#1e293b' }}>Nairobi Weather</h3>\r\n       <div style={{ display: 'flex', alignItems: 'center', gap: '1rem' }}>\r\n         <span style={{ fontSize: '2rem' }}>\r\n@@ -518,9 +538,10 @@\n       backgroundColor: darkMode ? '#2d3748' : '#f3f4f6',\r\n       borderRadius: '12px',\r\n       padding: '1rem',\r\n       margin: '1rem 0',\r\n-      boxShadow: '0 2px 4px rgba(0,0,0,0.1)'\r\n+      boxShadow: '0 2px 4px rgba(0,0,0,0.1)',\r\n+      flex: 1\r\n     }}>\r\n       <h3 style={{ marginTop: 0, color: darkMode ? '#e2e8f0' : '#1e293b' }}>Emergency Services</h3>\r\n       <div style={{ \r\n         display: 'grid',\r\n@@ -614,19 +635,23 @@\n   // Fetch Nairobi events\r\n   useEffect(() => {\r\n     const fetchEvents = async () => {\r\n       try {\r\n-        // Note: In production, use your own backend to make this API call\r\n-        const response = await fetch(\r\n-          `https://app.ticketmaster.com/discovery/v2/events.json?city=Nairobi&apikey=${process.env.REACT_APP_TICKETMASTER_API_KEY}`\r\n-        );\r\n+        // Using fake store API to simulate events\r\n+        const response = await fetch('https://fakestoreapi.com/products?limit=3');\r\n         \r\n         if (!response.ok) {\r\n           throw new Error('Failed to fetch events');\r\n         }\r\n         \r\n         const data = await response.json();\r\n-        setEvents(data._embedded?.events || []);\r\n+        setEvents(data.map(item => ({\r\n+          name: item.title,\r\n+          dates: { start: { localDate: new Date(Date.now() + Math.random() * 30 * 24 * 60 * 60 * 1000).toISOString().split('T')[0] },\r\n+          _embedded: {\r\n+            venues: [{ name: ['KICC', 'Carnivore', 'National Theatre'][Math.floor(Math.random() * 3)] }]\r\n+          }\r\n+        })));\r\n       } catch (err) {\r\n         console.error('Error fetching events:', err);\r\n         // Fallback to sample events if API fails\r\n         setEvents([\r\n@@ -902,12 +927,24 @@\n               transition: 'all 0.2s',\r\n               display: 'flex',\r\n               alignItems: 'center',\r\n               gap: '0.5rem',\r\n-              fontSize: '1rem'\r\n+              fontSize: '1rem',\r\n+              ':hover': {\r\n+                backgroundColor: darkMode ? '#4a5568' : '#d1d5db',\r\n+                transform: 'scale(1.05)',\r\n+                boxShadow: '0 2px 5px rgba(0, 0, 0, 0.2)'\r\n+              }\r\n             }}\r\n           >\r\n-            üöï To Downtown\r\n+            <span style={{ \r\n+              fontSize: '1.2rem',\r\n+              transition: 'transform 0.3s',\r\n+              ':hover': {\r\n+                transform: 'scale(1.2)'\r\n+              }\r\n+            }}>üöï</span>\r\n+            To Downtown\r\n           </button>\r\n           <button \r\n             onClick={() => navigate('/food?category=fastfood')}\r\n             style={{\r\n@@ -921,12 +958,24 @@\n               transition: 'all 0.2s',\r\n               display: 'flex',\r\n               alignItems: 'center',\r\n               gap: '0.5rem',\r\n-              fontSize: '1rem'\r\n+              fontSize: '1rem',\r\n+              ':hover': {\r\n+                backgroundColor: darkMode ? '#4a5568' : '#d1d5db',\r\n+                transform: 'scale(1.05)',\r\n+                boxShadow: '0 2px 5px rgba(0, 0, 0, 0.2)'\r\n+              }\r\n             }}\r\n           >\r\n-            üçü Fast Food\r\n+            <span style={{ \r\n+              fontSize: '1.2rem',\r\n+              transition: 'transform 0.3s',\r\n+              ':hover': {\r\n+                transform: 'scale(1.2)'\r\n+              }\r\n+            }}>üçü</span>\r\n+            Fast Food\r\n           </button>\r\n           <button \r\n             onClick={() => navigate('/food?category=coffee')}\r\n             style={{\r\n@@ -940,12 +989,24 @@\n               transition: 'all 0.2s',\r\n               display: 'flex',\r\n               alignItems: 'center',\r\n               gap: '0.5rem',\r\n-              fontSize: '1rem'\r\n+              fontSize: '1rem',\r\n+              ':hover': {\r\n+                backgroundColor: darkMode ? '#4a5568' : '#d1d5db',\r\n+                transform: 'scale(1.05)',\r\n+                boxShadow: '0 2px 5px rgba(0, 0, 0, 0.2)'\r\n+              }\r\n             }}\r\n           >\r\n-            ‚òï Coffee Shops\r\n+            <span style={{ \r\n+              fontSize: '1.2rem',\r\n+              transition: 'transform 0.3s',\r\n+              ':hover': {\r\n+                transform: 'scale(1.2)'\r\n+              }\r\n+            }}>‚òï</span>\r\n+            Coffee Shops\r\n           </button>\r\n           <button \r\n             onClick={() => navigate('/events')}\r\n             style={{\r\n@@ -959,12 +1020,24 @@\n               transition: 'all 0.2s',\r\n               display: 'flex',\r\n               alignItems: 'center',\r\n               gap: '0.5rem',\r\n-              fontSize: '1rem'\r\n+              fontSize: '1rem',\r\n+              ':hover': {\r\n+                backgroundColor: darkMode ? '#4a5568' : '#d1d5db',\r\n+                transform: 'scale(1.05)',\r\n+                boxShadow: '0 2px 5px rgba(0, 0, 0, 0.2)'\r\n+              }\r\n             }}\r\n           >\r\n-            üé§ Nairobi Events\r\n+            <span style={{ \r\n+              fontSize: '1.2rem',\r\n+              transition: 'transform 0.3s',\r\n+              ':hover': {\r\n+                transform: 'scale(1.2)'\r\n+              }\r\n+            }}>üé§</span>\r\n+            Nairobi Events\r\n           </button>\r\n         </div>\r\n       </section>\r\n \r\n@@ -1057,9 +1130,13 @@\n                 color: 'white',\r\n                 fontWeight: '600',\r\n                 cursor: 'pointer',\r\n                 transition: 'all 0.2s',\r\n-                fontSize: '1rem'\r\n+                fontSize: '1rem',\r\n+                ':hover': {\r\n+                  opacity: 0.9,\r\n+                  transform: 'scale(1.02)'\r\n+                }\r\n               }}\r\n               onClick={() => {\r\n                 navigate(selectedService.path);\r\n                 closePopup();\r\n"
                },
                {
                    "date": 1754482567029,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -645,9 +645,9 @@\n         \r\n         const data = await response.json();\r\n         setEvents(data.map(item => ({\r\n           name: item.title,\r\n-          dates: { start: { localDate: new Date(Date.now() + Math.random() * 30 * 24 * 60 * 60 * 1000).toISOString().split('T')[0] },\r\n+          dates: { start: { localDate: new Date(Date.now() + Math.random() * 30 * 24 * 60 * 60 * 1000).toISOString().split('T')[0] } },\r\n           _embedded: {\r\n             venues: [{ name: ['KICC', 'Carnivore', 'National Theatre'][Math.floor(Math.random() * 3)] }]\r\n           }\r\n         })));\r\n"
                },
                {
                    "date": 1754482596330,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,1111 @@\n+import { useState, useEffect, useRef } from 'react';\r\n+import { useNavigate } from 'react-router-dom';\r\n+\r\n+// UrbanBuddy AI Assistant Component\r\n+const UrbanBuddy = ({ darkMode, onChatOpen }) => {\r\n+  const [position, setPosition] = useState({ x: 20, y: 50 });\r\n+  const [expression, setExpression] = useState('üòä');\r\n+  const [direction, setDirection] = useState(1);\r\n+  const [costume, setCostume] = useState(null);\r\n+  const [isActive, setIsActive] = useState(false);\r\n+  const botRef = useRef(null);\r\n+  const animationRef = useRef(null);\r\n+  const lastInteractionTime = useRef(Date.now());\r\n+\r\n+  // Seasonal costumes\r\n+  useEffect(() => {\r\n+    const today = new Date();\r\n+    const month = today.getMonth() + 1;\r\n+    \r\n+    if (month === 12) setCostume('üéÑ');\r\n+    else if (month === 10) setCostume('üéÉ');\r\n+    else if (month === 2) setCostume('üíù');\r\n+    else if (month === 4) setCostume('üå∏');\r\n+    else setCostume(null);\r\n+  }, []);\r\n+\r\n+  // Make the bot wander with more dynamic movement\r\n+  useEffect(() => {\r\n+    const moveInterval = setInterval(() => {\r\n+      setPosition(prev => {\r\n+        const now = Date.now();\r\n+        const timeSinceLastInteraction = now - lastInteractionTime.current;\r\n+        \r\n+        // More active movement right after interaction\r\n+        const speedMultiplier = timeSinceLastInteraction < 5000 ? 2 : 1;\r\n+        \r\n+        let newX = prev.x + (3 * direction * speedMultiplier);\r\n+        let newY = prev.y + (Math.random() * 6 - 3);\r\n+        \r\n+        // Bounce off edges\r\n+        if (newX > window.innerWidth - 80) {\r\n+          setDirection(-1);\r\n+          triggerAnimation('spin');\r\n+        }\r\n+        if (newX < 20) {\r\n+          setDirection(1);\r\n+          triggerAnimation('spin');\r\n+        }\r\n+        if (newY < 20) newY = 20;\r\n+        if (newY > window.innerHeight - 100) newY = window.innerHeight - 100;\r\n+        \r\n+        return { x: newX, y: newY };\r\n+      });\r\n+    }, 100);\r\n+\r\n+    return () => clearInterval(moveInterval);\r\n+  }, [direction]);\r\n+\r\n+  // Change expressions randomly with more variety\r\n+  useEffect(() => {\r\n+    const expressions = ['üòä', 'ü§î', 'üòÆ', 'üòé', 'üëã', 'ü§ñ', '‚ú®', 'üåü'];\r\n+    const expressionInterval = setInterval(() => {\r\n+      if (!isActive) {\r\n+        setExpression(expressions[Math.floor(Math.random() * expressions.length)]);\r\n+        // Random animations when idle\r\n+        if (Math.random() > 0.8) {\r\n+          triggerAnimation(['bounce', 'spin', 'wobble'][Math.floor(Math.random() * 3)]);\r\n+        }\r\n+      }\r\n+    }, 3000);\r\n+    return () => clearInterval(expressionInterval);\r\n+  }, [isActive]);\r\n+\r\n+  const triggerAnimation = (type) => {\r\n+    if (animationRef.current) {\r\n+      clearTimeout(animationRef.current);\r\n+    }\r\n+    \r\n+    const botElement = botRef.current;\r\n+    if (!botElement) return;\r\n+    \r\n+    botElement.style.animation = 'none';\r\n+    void botElement.offsetWidth; // Trigger reflow\r\n+    \r\n+    switch(type) {\r\n+      case 'spin':\r\n+        botElement.style.animation = 'spin 1s ease';\r\n+        break;\r\n+      case 'bounce':\r\n+        botElement.style.animation = 'bounce 0.5s ease';\r\n+        break;\r\n+      case 'wobble':\r\n+        botElement.style.animation = 'wobble 0.8s ease';\r\n+        break;\r\n+      default:\r\n+        botElement.style.animation = '';\r\n+    }\r\n+    \r\n+    animationRef.current = setTimeout(() => {\r\n+      if (botElement) botElement.style.animation = '';\r\n+    }, 1000);\r\n+  };\r\n+\r\n+  const handleClick = () => {\r\n+    lastInteractionTime.current = Date.now();\r\n+    setIsActive(true);\r\n+    triggerAnimation('bounce');\r\n+    setExpression('üí°');\r\n+    \r\n+    // Trigger chat opening in parent component\r\n+    onChatOpen();\r\n+    \r\n+    // Return to normal after a delay\r\n+    setTimeout(() => {\r\n+      setIsActive(false);\r\n+    }, 3000);\r\n+  };\r\n+\r\n+  // Custom animations\r\n+  const animations = `\r\n+    @keyframes spin {\r\n+      0% { transform: rotate(0deg) scaleX(${direction}); }\r\n+      100% { transform: rotate(360deg) scaleX(${direction}); }\r\n+    }\r\n+    @keyframes bounce {\r\n+      0%, 100% { transform: translateY(0) scaleX(${direction}); }\r\n+      50% { transform: translateY(-20px) scaleX(${direction}); }\r\n+    }\r\n+    @keyframes wobble {\r\n+      0%, 100% { transform: rotate(0deg) scaleX(${direction}); }\r\n+      25% { transform: rotate(5deg) scaleX(${direction}); }\r\n+      75% { transform: rotate(-5deg) scaleX(${direction}); }\r\n+    }\r\n+    @keyframes float {\r\n+      0% { transform: translateY(0px) scaleX(${direction}); }\r\n+      50% { transform: translateY(-10px) scaleX(${direction}); }\r\n+      100% { transform: translateY(0px) scaleX(${direction}); }\r\n+    }\r\n+  `;\r\n+\r\n+  return (\r\n+    <>\r\n+      <style>{animations}</style>\r\n+      <div \r\n+        ref={botRef}\r\n+        onClick={handleClick}\r\n+        style={{\r\n+          position: 'fixed',\r\n+          left: `${position.x}px`,\r\n+          top: `${position.y}px`,\r\n+          fontSize: '2.5rem',\r\n+          cursor: 'pointer',\r\n+          transition: 'all 0.3s ease',\r\n+          transform: `scaleX(${direction})`,\r\n+          zIndex: 100,\r\n+          filter: darkMode \r\n+            ? 'drop-shadow(0 0 8px rgba(255,255,255,0.7))' \r\n+            : 'drop-shadow(0 0 8px rgba(0,0,0,0.3))',\r\n+          userSelect: 'none',\r\n+          animation: 'float 4s ease-in-out infinite'\r\n+        }}\r\n+      >\r\n+        <div style={{ \r\n+          position: 'relative',\r\n+          display: 'flex',\r\n+          flexDirection: 'column',\r\n+          alignItems: 'center'\r\n+        }}>\r\n+          {/* Bot icon with costume */}\r\n+          <div style={{\r\n+            position: 'relative',\r\n+            width: '60px',\r\n+            height: '60px',\r\n+            backgroundColor: darkMode ? '#4a5568' : '#3b82f6',\r\n+            borderRadius: '50%',\r\n+            display: 'flex',\r\n+            justifyContent: 'center',\r\n+            alignItems: 'center',\r\n+            color: 'white'\r\n+          }}>\r\n+            <span style={{ fontSize: '1.8rem' }}>{expression}</span>\r\n+            {costume && (\r\n+              <span style={{\r\n+                position: 'absolute',\r\n+                top: '-15px',\r\n+                right: '-10px',\r\n+                fontSize: '1.5rem',\r\n+                transform: 'rotate(15deg)'\r\n+              }}>\r\n+                {costume}\r\n+              </span>\r\n+            )}\r\n+          </div>\r\n+        </div>\r\n+      </div>\r\n+    </>\r\n+  );\r\n+};\r\n+\r\n+// Chat Modal Component with Functional API Connection\r\n+const ChatModal = ({ darkMode, onClose }) => {\r\n+  const [messages, setMessages] = useState([\r\n+    { text: \"Hello! I'm UrbanBuddy, your AI assistant for urban living. How can I help you today?\", sender: 'bot' }\r\n+  ]);\r\n+  const [inputValue, setInputValue] = useState('');\r\n+  const [isTyping, setIsTyping] = useState(false);\r\n+  const chatEndRef = useRef(null);\r\n+  const inputRef = useRef(null);\r\n+\r\n+  // Auto-scroll to bottom and focus input\r\n+  useEffect(() => {\r\n+    chatEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n+    inputRef.current?.focus();\r\n+  }, [messages]);\r\n+\r\n+  // Function to call the AI API\r\n+  const generateResponse = async (userMessage) => {\r\n+    setIsTyping(true);\r\n+    \r\n+    try {\r\n+      // In a real app, you should call your own backend endpoint that then calls OpenAI\r\n+      // This is just for demonstration purposes\r\n+      const response = await fetch('https://api.openai.com/v1/chat/completions', {\r\n+        method: \"POST\",\r\n+        headers: { \r\n+          \"Content-Type\": \"application/json\",\r\n+          // Note: In production, never expose your API key in frontend code\r\n+          // This should be handled through your own backend\r\n+          \"Authorization\": `Bearer ${process.env.REACT_APP_OPENAI_API_KEY}` \r\n+        },\r\n+        body: JSON.stringify({\r\n+          model: \"gpt-3.5-turbo\",\r\n+          messages: [\r\n+            {\r\n+              role: \"system\",\r\n+              content: \"You are UrbanBuddy, a friendly AI assistant for urban living. \" +\r\n+                \"Provide helpful, concise answers (1-2 sentences) about city life, \" +\r\n+                \"transportation, food delivery, local services, and urban living tips. \" +\r\n+                \"Keep responses practical and urban-focused.\"\r\n+            },\r\n+            {\r\n+              role: \"user\",\r\n+              content: userMessage\r\n+            }\r\n+          ],\r\n+          temperature: 0.7,\r\n+          max_tokens: 150\r\n+        })\r\n+      });\r\n+      \r\n+      if (!response.ok) {\r\n+        throw new Error(`API request failed with status ${response.status}`);\r\n+      }\r\n+      \r\n+      const data = await response.json();\r\n+      const aiResponse = data.choices?.[0]?.message?.content || \r\n+        \"I'm having trouble thinking of a response right now. Could you try asking something else?\";\r\n+      \r\n+      setMessages(prev => [...prev, { \r\n+        text: aiResponse, \r\n+        sender: 'bot' \r\n+      }]);\r\n+    } catch (error) {\r\n+      console.error(\"API error:\", error);\r\n+      // Fallback to a local AI response if API fails\r\n+      const fallbackResponses = [\r\n+        \"I'm currently experiencing high demand. Try again in a moment!\",\r\n+        \"Let me think differently about that... Can you rephrase your question?\",\r\n+        \"I specialize in urban living tips. Ask me about transportation, food, or city services!\",\r\n+        \"I'm having connection issues, but I'd love to help with your urban living questions!\"\r\n+      ];\r\n+      setMessages(prev => [...prev, { \r\n+        text: fallbackResponses[Math.floor(Math.random() * fallbackResponses.length)], \r\n+        sender: 'bot' \r\n+      }]);\r\n+    } finally {\r\n+      setIsTyping(false);\r\n+    }\r\n+  };\r\n+\r\n+  const handleSendMessage = async (e) => {\r\n+    e.preventDefault();\r\n+    if (inputValue.trim() && !isTyping) {\r\n+      // Add user message\r\n+      const userMessage = inputValue.trim();\r\n+      setMessages(prev => [...prev, { text: userMessage, sender: 'user' }]);\r\n+      setInputValue('');\r\n+      \r\n+      // Generate AI response\r\n+      await generateResponse(userMessage);\r\n+    }\r\n+  };\r\n+\r\n+  return (\r\n+    <div style={{\r\n+      position: 'fixed',\r\n+      bottom: '100px',\r\n+      right: '30px',\r\n+      width: '350px',\r\n+      maxWidth: '90%',\r\n+      backgroundColor: darkMode ? '#2d3748' : 'white',\r\n+      borderRadius: '16px',\r\n+      boxShadow: '0 10px 25px rgba(0, 0, 0, 0.2)',\r\n+      border: darkMode ? '1px solid #4a5568' : '1px solid #e2e8f0',\r\n+      zIndex: 1000,\r\n+      overflow: 'hidden',\r\n+      display: 'flex',\r\n+      flexDirection: 'column',\r\n+      maxHeight: '60vh'\r\n+    }}>\r\n+      {/* Chat header */}\r\n+      <div style={{\r\n+        padding: '1rem',\r\n+        backgroundColor: darkMode ? '#4a5568' : '#3b82f6',\r\n+        color: 'white',\r\n+        display: 'flex',\r\n+        justifyContent: 'space-between',\r\n+        alignItems: 'center'\r\n+      }}>\r\n+        <div style={{ display: 'flex', alignItems: 'center', gap: '0.5rem' }}>\r\n+          <span style={{ fontSize: '1.5rem' }}>ü§ñ</span>\r\n+          <h3 style={{ margin: 0 }}>UrbanBuddy AI</h3>\r\n+          {isTyping && (\r\n+            <span style={{ \r\n+              fontSize: '0.8rem',\r\n+              marginLeft: '0.5rem',\r\n+              opacity: 0.8\r\n+            }}>typing...</span>\r\n+          )}\r\n+        </div>\r\n+        <button \r\n+          onClick={onClose}\r\n+          style={{\r\n+            background: 'none',\r\n+            border: 'none',\r\n+            color: 'white',\r\n+            fontSize: '1.2rem',\r\n+            cursor: 'pointer'\r\n+          }}\r\n+        >\r\n+          √ó\r\n+        </button>\r\n+      </div>\r\n+      \r\n+      {/* Chat messages */}\r\n+      <div style={{\r\n+        flex: 1,\r\n+        padding: '1rem',\r\n+        overflowY: 'auto',\r\n+        display: 'flex',\r\n+        flexDirection: 'column',\r\n+        gap: '0.8rem'\r\n+      }}>\r\n+        {messages.map((msg, index) => (\r\n+          <div \r\n+            key={index}\r\n+            style={{\r\n+              alignSelf: msg.sender === 'user' ? 'flex-end' : 'flex-start',\r\n+              maxWidth: '80%',\r\n+              padding: '0.6rem 1rem',\r\n+              borderRadius: msg.sender === 'user' \r\n+                ? '18px 18px 0 18px' \r\n+                : '18px 18px 18px 0',\r\n+              backgroundColor: msg.sender === 'user'\r\n+                ? (darkMode ? '#4a5568' : '#3b82f6')\r\n+                : (darkMode ? '#4a5568' : '#e2e8f0'),\r\n+              color: msg.sender === 'user' ? 'white' : (darkMode ? 'white' : '#1e293b'),\r\n+              animation: msg.sender === 'bot' && index === messages.length - 1 \r\n+                ? 'fadeIn 0.3s ease' \r\n+                : 'none'\r\n+            }}\r\n+          >\r\n+            {msg.text}\r\n+          </div>\r\n+        ))}\r\n+        <div ref={chatEndRef} />\r\n+      </div>\r\n+      \r\n+      {/* Chat input */}\r\n+      <form onSubmit={handleSendMessage} style={{\r\n+        padding: '0.8rem',\r\n+        borderTop: darkMode ? '1px solid #4a5568' : '1px solid #e2e8f0',\r\n+        display: 'flex',\r\n+        gap: '0.5rem'\r\n+      }}>\r\n+        <input\r\n+          ref={inputRef}\r\n+          type=\"text\"\r\n+          value={inputValue}\r\n+          onChange={(e) => setInputValue(e.target.value)}\r\n+          placeholder=\"Ask me about urban living...\"\r\n+          disabled={isTyping}\r\n+          style={{\r\n+            flex: 1,\r\n+            padding: '0.6rem 1rem',\r\n+            borderRadius: '20px',\r\n+            border: darkMode ? '1px solid #4a5568' : '1px solid #e2e8f0',\r\n+            backgroundColor: darkMode ? '#2d3748' : 'white',\r\n+            color: darkMode ? 'white' : '#1e293b',\r\n+            outline: 'none',\r\n+            opacity: isTyping ? 0.7 : 1\r\n+          }}\r\n+        />\r\n+        <button \r\n+          type=\"submit\"\r\n+          disabled={isTyping}\r\n+          style={{\r\n+            background: isTyping \r\n+              ? (darkMode ? '#4a5568' : '#e2e8f0')\r\n+              : (darkMode ? '#4a5568' : '#3b82f6'),\r\n+            color: 'white',\r\n+            border: 'none',\r\n+            borderRadius: '50%',\r\n+            width: '40px',\r\n+            height: '40px',\r\n+            display: 'flex',\r\n+            alignItems: 'center',\r\n+            justifyContent: 'center',\r\n+            cursor: isTyping ? 'not-allowed' : 'pointer'\r\n+          }}\r\n+        >\r\n+          {isTyping ? '...' : '‚û§'}\r\n+        </button>\r\n+      </form>\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+// Weather Widget Component\r\n+const WeatherWidget = ({ darkMode }) => {\r\n+  const [weather, setWeather] = useState(null);\r\n+  const [loading, setLoading] = useState(true);\r\n+  const [error, setError] = useState(null);\r\n+\r\n+  useEffect(() => {\r\n+    const fetchWeather = async () => {\r\n+      try {\r\n+        // Note: In production, use your own backend to make this API call\r\n+        const response = await fetch(\r\n+          `https://api.openweathermap.org/data/2.5/weather?q=Nairobi&appid=${process.env.REACT_APP_WEATHER_API_KEY}&units=metric`\r\n+        );\r\n+        \r\n+        if (!response.ok) {\r\n+          throw new Error('Failed to fetch weather data');\r\n+        }\r\n+        \r\n+        const data = await response.json();\r\n+        setWeather(data);\r\n+      } catch (err) {\r\n+        setError(err.message);\r\n+      } finally {\r\n+        setLoading(false);\r\n+      }\r\n+    };\r\n+\r\n+    fetchWeather();\r\n+  }, []);\r\n+\r\n+  const getWeatherIcon = (condition) => {\r\n+    switch (condition) {\r\n+      case 'Clear':\r\n+        return '‚òÄÔ∏è';\r\n+      case 'Clouds':\r\n+        return '‚òÅÔ∏è';\r\n+      case 'Rain':\r\n+        return 'üåßÔ∏è';\r\n+      case 'Thunderstorm':\r\n+        return '‚õàÔ∏è';\r\n+      default:\r\n+        return 'üå§Ô∏è';\r\n+    }\r\n+  };\r\n+\r\n+  if (loading) return <div>Loading weather...</div>;\r\n+  if (error) return <div>Weather data unavailable</div>;\r\n+\r\n+  return (\r\n+    <div style={{\r\n+      backgroundColor: darkMode ? '#2d3748' : '#f3f4f6',\r\n+      borderRadius: '12px',\r\n+      padding: '1rem',\r\n+      margin: '1rem 0',\r\n+      boxShadow: '0 2px 4px rgba(0,0,0,0.1)'\r\n+    }}>\r\n+      <h3 style={{ marginTop: 0, color: darkMode ? '#e2e8f0' : '#1e293b' }}>Nairobi Weather</h3>\r\n+      <div style={{ display: 'flex', alignItems: 'center', gap: '1rem' }}>\r\n+        <span style={{ fontSize: '2rem' }}>\r\n+          {weather && getWeatherIcon(weather.weather[0].main)}\r\n+        </span>\r\n+        <div>\r\n+          <p style={{ margin: 0, fontSize: '1.5rem', fontWeight: 'bold', color: darkMode ? '#e2e8f0' : '#1e293b' }}>\r\n+            {weather?.main?.temp}¬∞C\r\n+          </p>\r\n+          <p style={{ margin: 0, color: darkMode ? '#a0aec0' : '#64748b' }}>\r\n+            {weather?.weather[0].description}\r\n+          </p>\r\n+        </div>\r\n+      </div>\r\n+      <div style={{ display: 'flex', justifyContent: 'space-between', marginTop: '0.5rem' }}>\r\n+        <span style={{ color: darkMode ? '#a0aec0' : '#64748b' }}>Humidity: {weather?.main?.humidity}%</span>\r\n+        <span style={{ color: darkMode ? '#a0aec0' : '#64748b' }}>Wind: {weather?.wind?.speed} m/s</span>\r\n+      </div>\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+// Emergency Services Component\r\n+const EmergencyServices = ({ darkMode }) => {\r\n+  const services = [\r\n+    { name: \"Police\", number: \"999\", icon: \"üëÆ\", color: \"#3b82f6\" },\r\n+    { name: \"Ambulance\", number: \"911\", icon: \"üöë\", color: \"#ef4444\" },\r\n+    { name: \"Fire Brigade\", number: \"999\", icon: \"üöí\", color: \"#f59e0b\" },\r\n+    { name: \"Child Helpline\", number: \"116\", icon: \"üßí\", color: \"#10b981\" }\r\n+  ];\r\n+\r\n+  return (\r\n+    <div style={{\r\n+      backgroundColor: darkMode ? '#2d3748' : '#f3f4f6',\r\n+      borderRadius: '12px',\r\n+      padding: '1rem',\r\n+      margin: '1rem 0',\r\n+      boxShadow: '0 2px 4px rgba(0,0,0,0.1)'\r\n+    }}>\r\n+      <h3 style={{ marginTop: 0, color: darkMode ? '#e2e8f0' : '#1e293b' }}>Emergency Services</h3>\r\n+      <div style={{ \r\n+        display: 'grid',\r\n+        gridTemplateColumns: 'repeat(auto-fit, minmax(120px, 1fr))',\r\n+        gap: '0.5rem'\r\n+      }}>\r\n+        {services.map((service) => (\r\n+          <a \r\n+            key={service.name}\r\n+            href={`tel:${service.number}`}\r\n+            style={{\r\n+              display: 'flex',\r\n+              flexDirection: 'column',\r\n+              alignItems: 'center',\r\n+              padding: '0.75rem',\r\n+              borderRadius: '8px',\r\n+              backgroundColor: darkMode ? '#4a5568' : '#e2e8f0',\r\n+              color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+              textDecoration: 'none',\r\n+              transition: 'transform 0.2s',\r\n+              ':hover': {\r\n+                transform: 'scale(1.05)'\r\n+              }\r\n+            }}\r\n+          >\r\n+            <span style={{ fontSize: '1.5rem' }}>{service.icon}</span>\r\n+            <span style={{ fontWeight: '600' }}>{service.name}</span>\r\n+            <span style={{ fontSize: '0.9rem' }}>{service.number}</span>\r\n+          </a>\r\n+        ))}\r\n+      </div>\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+// Main Home Component\r\n+export default function Home() {\r\n+  const navigate = useNavigate();\r\n+  const [searchQuery, setSearchQuery] = useState('');\r\n+  const [darkMode, setDarkMode] = useState(false);\r\n+  const [selectedService, setSelectedService] = useState(null);\r\n+  const [orderCount, setOrderCount] = useState(0);\r\n+  const [achievements, setAchievements] = useState([]);\r\n+  const [showChat, setShowChat] = useState(false);\r\n+  const [events, setEvents] = useState([]);\r\n+  const [eventsLoading, setEventsLoading] = useState(true);\r\n+\r\n+  const services = [\r\n+    { \r\n+      name: 'Transport', \r\n+      path: '/transport', \r\n+      icon: 'üöå', \r\n+      desc: 'Plan your multi-modal journey across the city',\r\n+      color: '#3b82f6',\r\n+      details: 'Find the best routes combining metro, buses, and bikes. Real-time updates and ticket purchasing available.'\r\n+    },\r\n+    { \r\n+      name: 'Food Delivery', \r\n+      path: '/food', \r\n+      icon: 'üçî', \r\n+      desc: 'Discover local restaurants and cafes',\r\n+      color: '#ef4444',\r\n+      details: 'Order from hundreds of restaurants with special discounts. Track your delivery in real-time.'\r\n+    },\r\n+    { \r\n+      name: 'Groceries', \r\n+      path: '/food', \r\n+      icon: 'üõí', \r\n+      desc: 'Get groceries delivered in minutes',\r\n+      color: '#10b981',\r\n+      details: 'Same-day delivery from local supermarkets. Schedule recurring orders for essentials.'\r\n+    },\r\n+    { \r\n+      name: 'Services', \r\n+      path: '/food', \r\n+      icon: 'üõ†Ô∏è', \r\n+      desc: 'Find urban services near you',\r\n+      color: '#8b5cf6',\r\n+      details: 'Book home services, repairs, and professional help with verified providers.'\r\n+    },\r\n+    { \r\n+      name: 'Live Events', \r\n+      path: '/events', \r\n+      icon: 'üé§', \r\n+      desc: 'Discover concerts, shows and happenings in Nairobi',\r\n+      color: '#f59e0b',\r\n+      details: 'Find the latest concerts, theater shows, art exhibitions and special events happening around Nairobi. Get tickets and directions.'\r\n+    }\r\n+  ];\r\n+\r\n+  // Fetch Nairobi events\r\n+  useEffect(() => {\r\n+    const fetchEvents = async () => {\r\n+      try {\r\n+        // Note: In production, use your own backend to make this API call\r\n+        const response = await fetch(\r\n+          `https://app.ticketmaster.com/discovery/v2/events.json?city=Nairobi&apikey=${process.env.REACT_APP_TICKETMASTER_API_KEY}`\r\n+        );\r\n+        \r\n+        if (!response.ok) {\r\n+          throw new Error('Failed to fetch events');\r\n+        }\r\n+        \r\n+        const data = await response.json();\r\n+        setEvents(data._embedded?.events || []);\r\n+      } catch (err) {\r\n+        console.error('Error fetching events:', err);\r\n+        // Fallback to sample events if API fails\r\n+        setEvents([\r\n+          {\r\n+            name: \"Nairobi Jazz Festival\",\r\n+            dates: { start: { localDate: \"2023-08-15\" } },\r\n+            _embedded: {\r\n+              venues: [{ name: \"KICC\" }]\r\n+            }\r\n+          },\r\n+          {\r\n+            name: \"Kenya National Theatre Play\",\r\n+            dates: { start: { localDate: \"2023-08-20\" } },\r\n+            _embedded: {\r\n+              venues: [{ name: \"Kenya National Theatre\" }]\r\n+            }\r\n+          }\r\n+        ]);\r\n+      } finally {\r\n+        setEventsLoading(false);\r\n+      }\r\n+    };\r\n+\r\n+    fetchEvents();\r\n+  }, []);\r\n+\r\n+  // Check for achievements\r\n+  useEffect(() => {\r\n+    if (orderCount === 1) {\r\n+      addAchievement('First Order!', 'üéâ');\r\n+    } else if (orderCount === 5) {\r\n+      addAchievement('Regular Customer!', 'üèÜ');\r\n+    } else if (orderCount === 10) {\r\n+      addAchievement('Super User!', 'üåü');\r\n+    }\r\n+  }, [orderCount]);\r\n+\r\n+  const addAchievement = (title, icon) => {\r\n+    if (!achievements.some(a => a.title === title)) {\r\n+      const newAchievement = { title, icon, id: Date.now() };\r\n+      setAchievements(prev => [...prev, newAchievement]);\r\n+      \r\n+      // Auto-hide achievement after 3 seconds\r\n+      setTimeout(() => {\r\n+        setAchievements(prev => prev.filter(a => a.id !== newAchievement.id));\r\n+      }, 3000);\r\n+    }\r\n+  };\r\n+\r\n+  const handleSearch = (e) => {\r\n+    e.preventDefault();\r\n+    if (searchQuery.trim()) {\r\n+      navigate(`/food?search=${encodeURIComponent(searchQuery)}`);\r\n+    }\r\n+  };\r\n+\r\n+  const toggleDarkMode = () => {\r\n+    setDarkMode(!darkMode);\r\n+  };\r\n+\r\n+  const openServicePopup = (service) => {\r\n+    setSelectedService(service);\r\n+    setOrderCount(prev => prev + 1);\r\n+  };\r\n+\r\n+  const closePopup = () => {\r\n+    setSelectedService(null);\r\n+  };\r\n+\r\n+  const toggleChat = () => {\r\n+    setShowChat(!showChat);\r\n+  };\r\n+\r\n+  return (\r\n+    <div style={{\r\n+      backgroundColor: darkMode ? '#1a202c' : '#f8fafc',\r\n+      minHeight: '100vh',\r\n+      paddingBottom: '3rem',\r\n+      color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+      transition: 'all 0.3s ease',\r\n+      position: 'relative'\r\n+    }}>\r\n+      {/* Theme Toggle Button */}\r\n+      <button \r\n+        onClick={toggleDarkMode} \r\n+        style={{\r\n+          position: 'fixed',\r\n+          top: '1.5rem',\r\n+          right: '1.5rem',\r\n+          background: darkMode ? '#4a5568' : '#e2e8f0',\r\n+          border: 'none',\r\n+          borderRadius: '50%',\r\n+          width: '40px',\r\n+          height: '40px',\r\n+          display: 'flex',\r\n+          alignItems: 'center',\r\n+          justifyContent: 'center',\r\n+          cursor: 'pointer',\r\n+          transition: 'all 0.3s ease',\r\n+          boxShadow: '0 2px 5px rgba(0, 0, 0, 0.2)',\r\n+          zIndex: 100\r\n+        }}\r\n+        aria-label={darkMode ? 'Switch to light mode' : 'Switch to dark mode'}\r\n+      >\r\n+        {darkMode ? '‚òÄÔ∏è' : 'üåô'}\r\n+      </button>\r\n+      \r\n+      {/* Hero Section with UrbanBuddy */}\r\n+      <section style={{\r\n+        background: darkMode \r\n+          ? 'linear-gradient(135deg, #2d3748 0%, #1a202c 100%)' \r\n+          : 'linear-gradient(135deg, #6b46c1 0%, #3b82f6 100%)',\r\n+        color: 'white',\r\n+        padding: '4rem 1rem',\r\n+        textAlign: 'center',\r\n+        borderRadius: '0 0 20px 20px',\r\n+        boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',\r\n+        position: 'relative',\r\n+        overflow: 'hidden',\r\n+        height: '300px'\r\n+      }}>\r\n+        <div style={{\r\n+          maxWidth: '800px',\r\n+          margin: '0 auto',\r\n+          position: 'relative',\r\n+          zIndex: 2\r\n+        }}>\r\n+          <h1 style={{\r\n+            fontSize: '3.5rem',\r\n+            fontWeight: '800',\r\n+            marginBottom: '0.5rem',\r\n+            textShadow: '2px 2px 4px rgba(0, 0, 0, 0.2)',\r\n+          }}>UrbanFlow</h1>\r\n+          <p style={{\r\n+            fontSize: '1.25rem',\r\n+            marginBottom: '2rem',\r\n+            opacity: 0.9,\r\n+          }}>Your seamless urban living companion</p>\r\n+          \r\n+          <form onSubmit={handleSearch} style={{\r\n+            display: 'flex',\r\n+            maxWidth: '600px',\r\n+            margin: '0 auto',\r\n+            borderRadius: '50px',\r\n+            overflow: 'hidden',\r\n+            boxShadow: '0 4px 10px rgba(0, 0, 0, 0.2)',\r\n+          }}>\r\n+            <input\r\n+              type=\"text\"\r\n+              placeholder=\"Search for restaurants, services...\"\r\n+              value={searchQuery}\r\n+              onChange={(e) => setSearchQuery(e.target.value)}\r\n+              style={{\r\n+                flex: 1,\r\n+                padding: '1rem 1.5rem',\r\n+                border: 'none',\r\n+                fontSize: '1rem',\r\n+                outline: 'none',\r\n+                backgroundColor: darkMode ? '#2d3748' : 'white',\r\n+                color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+              }}\r\n+            />\r\n+            <button type=\"submit\" style={{\r\n+              backgroundColor: darkMode ? '#4a5568' : '#1e40af',\r\n+              color: 'white',\r\n+              border: 'none',\r\n+              padding: '0 1.5rem',\r\n+              cursor: 'pointer',\r\n+              fontSize: '1.25rem',\r\n+              transition: 'background-color 0.2s'\r\n+            }}>\r\n+              <span>üîç</span>\r\n+            </button>\r\n+          </form>\r\n+        </div>\r\n+        <UrbanBuddy darkMode={darkMode} onChatOpen={toggleChat} />\r\n+      </section>\r\n+\r\n+      {/* Services Grid */}\r\n+      <section style={{\r\n+        padding: '2rem 1rem',\r\n+        maxWidth: '1200px',\r\n+        margin: '0 auto',\r\n+      }}>\r\n+        <h2 style={{\r\n+          fontSize: '2rem',\r\n+          fontWeight: '700',\r\n+          marginBottom: '1.5rem',\r\n+          color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+          textAlign: 'center',\r\n+        }}>What do you need today?</h2>\r\n+        <div style={{\r\n+          display: 'grid',\r\n+          gridTemplateColumns: 'repeat(auto-fit, minmax(250px, 1fr))',\r\n+          gap: '1.5rem',\r\n+          marginTop: '1rem',\r\n+        }}>\r\n+          {services.map((service) => (\r\n+            <div \r\n+              key={service.name} \r\n+              onClick={() => openServicePopup(service)}\r\n+              style={{ \r\n+                padding: '2rem 1.5rem',\r\n+                borderRadius: '16px',\r\n+                border: `2px solid ${service.color}`,\r\n+                textAlign: 'center',\r\n+                cursor: 'pointer',\r\n+                transition: 'transform 0.3s, box-shadow 0.3s',\r\n+                backgroundColor: darkMode \r\n+                  ? `${service.color}20` \r\n+                  : `${service.color}10`,\r\n+                ':hover': {\r\n+                  transform: 'translateY(-5px)',\r\n+                  boxShadow: '0 10px 20px rgba(0, 0, 0, 0.1)',\r\n+                }\r\n+              }}\r\n+            >\r\n+              <div style={{ \r\n+                fontSize: '3rem',\r\n+                marginBottom: '1rem',\r\n+                display: 'inline-block',\r\n+                animation: 'float 3s ease-in-out infinite'\r\n+              }}>{service.icon}</div>\r\n+              <h3 style={{fontSize: '1.5rem', fontWeight: '600', marginBottom: '0.5rem'}}>{service.name}</h3>\r\n+              <p style={{color: darkMode ? '#a0aec0' : '#64748b'}}>{service.desc}</p>\r\n+            </div>\r\n+          ))}\r\n+        </div>\r\n+      </section>\r\n+\r\n+      {/* Weather and Emergency Services Section */}\r\n+      <section style={{\r\n+        padding: '2rem 1rem',\r\n+        maxWidth: '1200px',\r\n+        margin: '0 auto',\r\n+        display: 'grid',\r\n+        gridTemplateColumns: 'repeat(auto-fit, minmax(300px, 1fr))',\r\n+        gap: '1.5rem'\r\n+      }}>\r\n+        <WeatherWidget darkMode={darkMode} />\r\n+        <EmergencyServices darkMode={darkMode} />\r\n+      </section>\r\n+\r\n+      {/* Featured Section */}\r\n+      <section style={{\r\n+        padding: '2rem 1rem',\r\n+        maxWidth: '1200px',\r\n+        margin: '0 auto',\r\n+      }}>\r\n+        <h2 style={{\r\n+          fontSize: '2rem',\r\n+          fontWeight: '700',\r\n+          marginBottom: '1.5rem',\r\n+          color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+          textAlign: 'center',\r\n+        }}>Quick Access</h2>\r\n+        <div style={{\r\n+          display: 'flex',\r\n+          justifyContent: 'center',\r\n+          gap: '1rem',\r\n+          flexWrap: 'wrap',\r\n+        }}>\r\n+          <button \r\n+            onClick={() => navigate('/transport?from=home&to=downtown')}\r\n+            style={{\r\n+              padding: '0.75rem 1.5rem',\r\n+              borderRadius: '50px',\r\n+              border: 'none',\r\n+              backgroundColor: darkMode ? '#2d3748' : '#e2e8f0',\r\n+              color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+              fontWeight: '600',\r\n+              cursor: 'pointer',\r\n+              transition: 'all 0.2s',\r\n+              display: 'flex',\r\n+              alignItems: 'center',\r\n+              gap: '0.5rem',\r\n+              fontSize: '1rem'\r\n+            }}\r\n+          >\r\n+            üöï To Downtown\r\n+          </button>\r\n+          <button \r\n+            onClick={() => navigate('/food?category=fastfood')}\r\n+            style={{\r\n+              padding: '0.75rem 1.5rem',\r\n+              borderRadius: '50px',\r\n+              border: 'none',\r\n+              backgroundColor: darkMode ? '#2d3748' : '#e2e8f0',\r\n+              color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+              fontWeight: '600',\r\n+              cursor: 'pointer',\r\n+              transition: 'all 0.2s',\r\n+              display: 'flex',\r\n+              alignItems: 'center',\r\n+              gap: '0.5rem',\r\n+              fontSize: '1rem'\r\n+            }}\r\n+          >\r\n+            üçü Fast Food\r\n+          </button>\r\n+          <button \r\n+            onClick={() => navigate('/food?category=coffee')}\r\n+            style={{\r\n+              padding: '0.75rem 1.5rem',\r\n+              borderRadius: '50px',\r\n+              border: 'none',\r\n+              backgroundColor: darkMode ? '#2d3748' : '#e2e8f0',\r\n+              color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+              fontWeight: '600',\r\n+              cursor: 'pointer',\r\n+              transition: 'all 0.2s',\r\n+              display: 'flex',\r\n+              alignItems: 'center',\r\n+              gap: '0.5rem',\r\n+              fontSize: '1rem'\r\n+            }}\r\n+          >\r\n+            ‚òï Coffee Shops\r\n+          </button>\r\n+          <button \r\n+            onClick={() => navigate('/events')}\r\n+            style={{\r\n+              padding: '0.75rem 1.5rem',\r\n+              borderRadius: '50px',\r\n+              border: 'none',\r\n+              backgroundColor: darkMode ? '#2d3748' : '#e2e8f0',\r\n+              color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+              fontWeight: '600',\r\n+              cursor: 'pointer',\r\n+              transition: 'all 0.2s',\r\n+              display: 'flex',\r\n+              alignItems: 'center',\r\n+              gap: '0.5rem',\r\n+              fontSize: '1rem'\r\n+            }}\r\n+          >\r\n+            üé§ Nairobi Events\r\n+          </button>\r\n+        </div>\r\n+      </section>\r\n+\r\n+      {/* Service Popup */}\r\n+      {selectedService && (\r\n+        <div style={{\r\n+          position: 'fixed',\r\n+          top: 0,\r\n+          left: 0,\r\n+          right: 0,\r\n+          bottom: 0,\r\n+          backgroundColor: 'rgba(0, 0, 0, 0.7)',\r\n+          display: 'flex',\r\n+          justifyContent: 'center',\r\n+          alignItems: 'center',\r\n+          zIndex: 1000,\r\n+        }} onClick={closePopup}>\r\n+          <div style={{\r\n+            backgroundColor: darkMode ? '#2d3748' : 'white',\r\n+            borderRadius: '16px',\r\n+            padding: '2rem',\r\n+            maxWidth: '500px',\r\n+            width: '90%',\r\n+            boxShadow: '0 10px 25px rgba(0, 0, 0, 0.2)',\r\n+            position: 'relative',\r\n+            border: darkMode ? '1px solid #4a5568' : '1px solid #e2e8f0',\r\n+          }} onClick={(e) => e.stopPropagation()}>\r\n+            <button style={{\r\n+              position: 'absolute',\r\n+              top: '1rem',\r\n+              right: '1rem',\r\n+              background: 'none',\r\n+              border: 'none',\r\n+              fontSize: '1.5rem',\r\n+              cursor: 'pointer',\r\n+              color: darkMode ? '#a0aec0' : '#64748b',\r\n+            }} onClick={closePopup}>√ó</button>\r\n+            <div style={{ \r\n+              display: 'flex', \r\n+              alignItems: 'center', \r\n+              gap: '1rem',\r\n+              marginBottom: '1.5rem'\r\n+            }}>\r\n+              <span style={{ fontSize: '2.5rem', animation: 'float 3s ease-in-out infinite' }}>{selectedService.icon}</span>\r\n+              <h3 style={{fontSize: '1.8rem', fontWeight: '700', marginBottom: '1rem', color: darkMode ? '#e2e8f0' : '#1e293b'}}>{selectedService.name}</h3>\r\n+            </div>\r\n+            <p style={{color: darkMode ? '#a0aec0' : '#64748b', fontSize: '1.1rem', lineHeight: '1.6', marginBottom: '2rem'}}>{selectedService.details}</p>\r\n+            {selectedService.name === 'Live Events' && (\r\n+              <div style={{\r\n+                backgroundColor: darkMode ? '#4a5568' : '#f3f4f6',\r\n+                borderRadius: '12px',\r\n+                padding: '1rem',\r\n+                marginBottom: '1.5rem'\r\n+              }}>\r\n+                <h4 style={{\r\n+                  fontSize: '1.2rem',\r\n+                  fontWeight: '600',\r\n+                  marginBottom: '0.5rem',\r\n+                  color: darkMode ? '#e2e8f0' : '#1e293b'\r\n+                }}>Upcoming Events</h4>\r\n+                {eventsLoading ? (\r\n+                  <p>Loading events...</p>\r\n+                ) : events.length > 0 ? (\r\n+                  <ul style={{\r\n+                    listStyle: 'none',\r\n+                    padding: 0,\r\n+                    margin: 0\r\n+                  }}>\r\n+                    {events.slice(0, 3).map((event, index) => (\r\n+                      <li key={index} style={{padding: '0.5rem 0', borderBottom: darkMode ? '1px solid #4a5568' : '1px solid #e2e8f0'}}>\r\n+                        <strong>üé§ {event.name}</strong>\r\n+                        <div style={{ display: 'flex', justifyContent: 'space-between' }}>\r\n+                          <span>{event.dates?.start?.localDate}</span>\r\n+                          <span>{event._embedded?.venues?.[0]?.name || 'Nairobi'}</span>\r\n+                        </div>\r\n+                      </li>\r\n+                    ))}\r\n+                  </ul>\r\n+                ) : (\r\n+                  <p>No upcoming events found</p>\r\n+                )}\r\n+              </div>\r\n+            )}\r\n+            <button \r\n+              style={{ \r\n+                padding: '0.75rem 1.5rem',\r\n+                borderRadius: '8px',\r\n+                border: 'none',\r\n+                backgroundColor: selectedService.color,\r\n+                color: 'white',\r\n+                fontWeight: '600',\r\n+                cursor: 'pointer',\r\n+                transition: 'all 0.2s',\r\n+                fontSize: '1rem'\r\n+              }}\r\n+              onClick={() => {\r\n+                navigate(selectedService.path);\r\n+                closePopup();\r\n+              }}\r\n+            >\r\n+              Explore {selectedService.name}\r\n+            </button>\r\n+          </div>\r\n+        </div>\r\n+      )}\r\n+\r\n+      {/* Achievements */}\r\n+      {achievements.map(achievement => (\r\n+        <div key={achievement.id} style={{\r\n+          position: 'fixed',\r\n+          bottom: '20px',\r\n+          right: '20px',\r\n+          background: darkMode ? '#2d3748' : 'white',\r\n+          color: darkMode ? 'white' : '#1e293b',\r\n+          padding: '1rem',\r\n+          borderRadius: '12px',\r\n+          boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',\r\n+          display: 'flex',\r\n+          alignItems: 'center',\r\n+          gap: '0.5rem',\r\n+          zIndex: 1000,\r\n+          animation: 'slideIn 0.5s forwards, fadeOut 0.5s forwards 2.5s'\r\n+        }}>\r\n+          <span style={{fontSize: '1.5rem'}}>{achievement.icon}</span>\r\n+          <span>{achievement.title}</span>\r\n+        </div>\r\n+      ))}\r\n+\r\n+      {/* Chat Modal */}\r\n+      {showChat && <ChatModal darkMode={darkMode} onClose={toggleChat} />}\r\n+\r\n+      {/* Footer with copyright */}\r\n+      <footer style={{\r\n+        textAlign: 'center',\r\n+        padding: '2rem 1rem',\r\n+        color: darkMode ? '#a0aec0' : '#64748b',\r\n+        fontSize: '0.9rem',\r\n+        marginTop: '2rem'\r\n+      }}>\r\n+        <p>¬© {new Date().getFullYear()} UrbanFlow - Created by Nick</p>\r\n+      </footer>\r\n+    </div>\r\n+  );\r\n+};\n\\ No newline at end of file\n"
                },
                {
                    "date": 1754890706228,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -386,9 +386,9 @@\n         <input\r\n           ref={inputRef}\r\n           type=\"text\"\r\n           value={inputValue}\r\n-          onChange={(e) => setInputValue(e.target.value)}\r\n+          onChange={(e) => setInputValue(e.value)}\r\n           placeholder=\"Ask me about urban living...\"\r\n           disabled={isTyping}\r\n           style={{\r\n             flex: 1,\r\n@@ -427,79 +427,98 @@\n };\r\n \r\n // Weather Widget Component\r\n const WeatherWidget = ({ darkMode }) => {\r\n-  const [weather, setWeather] = useState(null);\r\n-  const [loading, setLoading] = useState(true);\r\n-  const [error, setError] = useState(null);\r\n+  const [weather, setWeather] = useState({\r\n+    temp: 22,\r\n+    condition: 'Partly Cloudy',\r\n+    humidity: 65,\r\n+    wind: 12,\r\n+    icon: '‚õÖ'\r\n+  });\r\n \r\n-  useEffect(() => {\r\n-    const fetchWeather = async () => {\r\n-      try {\r\n-        // Note: In production, use your own backend to make this API call\r\n-        const response = await fetch(\r\n-          `https://api.openweathermap.org/data/2.5/weather?q=Nairobi&appid=${process.env.REACT_APP_WEATHER_API_KEY}&units=metric`\r\n-        );\r\n-        \r\n-        if (!response.ok) {\r\n-          throw new Error('Failed to fetch weather data');\r\n-        }\r\n-        \r\n-        const data = await response.json();\r\n-        setWeather(data);\r\n-      } catch (err) {\r\n-        setError(err.message);\r\n-      } finally {\r\n-        setLoading(false);\r\n-      }\r\n-    };\r\n-\r\n-    fetchWeather();\r\n-  }, []);\r\n-\r\n-  const getWeatherIcon = (condition) => {\r\n-    switch (condition) {\r\n-      case 'Clear':\r\n-        return '‚òÄÔ∏è';\r\n-      case 'Clouds':\r\n-        return '‚òÅÔ∏è';\r\n-      case 'Rain':\r\n-        return 'üåßÔ∏è';\r\n-      case 'Thunderstorm':\r\n-        return '‚õàÔ∏è';\r\n-      default:\r\n-        return 'üå§Ô∏è';\r\n-    }\r\n-  };\r\n-\r\n-  if (loading) return <div>Loading weather...</div>;\r\n-  if (error) return <div>Weather data unavailable</div>;\r\n-\r\n   return (\r\n     <div style={{\r\n       backgroundColor: darkMode ? '#2d3748' : '#f3f4f6',\r\n       borderRadius: '12px',\r\n-      padding: '1rem',\r\n+      padding: '1.5rem',\r\n       margin: '1rem 0',\r\n-      boxShadow: '0 2px 4px rgba(0,0,0,0.1)'\r\n+      boxShadow: '0 2px 8px rgba(0,0,0,0.1)',\r\n+      border: darkMode ? '1px solid #4a5568' : '1px solid #e2e8f0'\r\n     }}>\r\n-      <h3 style={{ marginTop: 0, color: darkMode ? '#e2e8f0' : '#1e293b' }}>Nairobi Weather</h3>\r\n-      <div style={{ display: 'flex', alignItems: 'center', gap: '1rem' }}>\r\n-        <span style={{ fontSize: '2rem' }}>\r\n-          {weather && getWeatherIcon(weather.weather[0].main)}\r\n-        </span>\r\n+      <h3 style={{ \r\n+        marginTop: 0, \r\n+        marginBottom: '1rem',\r\n+        color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+        display: 'flex',\r\n+        alignItems: 'center',\r\n+        gap: '0.5rem'\r\n+      }}>\r\n+        <span>üå§Ô∏è</span> Nairobi Weather\r\n+      </h3>\r\n+      <div style={{ display: 'flex', alignItems: 'center', gap: '1.5rem' }}>\r\n+        <span style={{ fontSize: '3rem' }}>{weather.icon}</span>\r\n         <div>\r\n-          <p style={{ margin: 0, fontSize: '1.5rem', fontWeight: 'bold', color: darkMode ? '#e2e8f0' : '#1e293b' }}>\r\n-            {weather?.main?.temp}¬∞C\r\n+          <p style={{ \r\n+            margin: 0, \r\n+            fontSize: '2rem', \r\n+            fontWeight: 'bold', \r\n+            color: darkMode ? '#e2e8f0' : '#1e293b' \r\n+          }}>\r\n+            {weather.temp}¬∞C\r\n           </p>\r\n-          <p style={{ margin: 0, color: darkMode ? '#a0aec0' : '#64748b' }}>\r\n-            {weather?.weather[0].description}\r\n+          <p style={{ \r\n+            margin: '0.25rem 0 0', \r\n+            color: darkMode ? '#a0aec0' : '#64748b',\r\n+            fontSize: '0.9rem'\r\n+          }}>\r\n+            {weather.condition}\r\n           </p>\r\n         </div>\r\n       </div>\r\n-      <div style={{ display: 'flex', justifyContent: 'space-between', marginTop: '0.5rem' }}>\r\n-        <span style={{ color: darkMode ? '#a0aec0' : '#64748b' }}>Humidity: {weather?.main?.humidity}%</span>\r\n-        <span style={{ color: darkMode ? '#a0aec0' : '#64748b' }}>Wind: {weather?.wind?.speed} m/s</span>\r\n+      <div style={{ \r\n+        display: 'flex', \r\n+        justifyContent: 'space-between', \r\n+        marginTop: '1.5rem',\r\n+        paddingTop: '1rem',\r\n+        borderTop: darkMode ? '1px solid #4a5568' : '1px solid #e2e8f0'\r\n+      }}>\r\n+        <div style={{ textAlign: 'center' }}>\r\n+          <p style={{ \r\n+            margin: '0 0 0.25rem', \r\n+            fontSize: '0.8rem',\r\n+            color: darkMode ? '#a0aec0' : '#64748b'\r\n+          }}>Humidity</p>\r\n+          <p style={{ \r\n+            margin: 0, \r\n+            fontWeight: '600',\r\n+            color: darkMode ? '#e2e8f0' : '#1e293b'\r\n+          }}>{weather.humidity}%</p>\r\n+        </div>\r\n+        <div style={{ textAlign: 'center' }}>\r\n+          <p style={{ \r\n+            margin: '0 0 0.25rem', \r\n+            fontSize: '0.8rem',\r\n+            color: darkMode ? '#a0aec0' : '#64748b'\r\n+          }}>Wind</p>\r\n+          <p style={{ \r\n+            margin: 0, \r\n+            fontWeight: '600',\r\n+            color: darkMode ? '#e2e8f0' : '#1e293b'\r\n+          }}>{weather.wind} km/h</p>\r\n+        </div>\r\n+        <div style={{ textAlign: 'center' }}>\r\n+          <p style={{ \r\n+            margin: '0 0 0.25rem', \r\n+            fontSize: '0.8rem',\r\n+            color: darkMode ? '#a0aec0' : '#64748b'\r\n+          }}>Feels Like</p>\r\n+          <p style={{ \r\n+            margin: 0, \r\n+            fontWeight: '600',\r\n+            color: darkMode ? '#e2e8f0' : '#1e293b'\r\n+          }}>{weather.temp}¬∞C</p>\r\n+        </div>\r\n       </div>\r\n     </div>\r\n   );\r\n };\r\n@@ -516,17 +535,27 @@\n   return (\r\n     <div style={{\r\n       backgroundColor: darkMode ? '#2d3748' : '#f3f4f6',\r\n       borderRadius: '12px',\r\n-      padding: '1rem',\r\n+      padding: '1.5rem',\r\n       margin: '1rem 0',\r\n-      boxShadow: '0 2px 4px rgba(0,0,0,0.1)'\r\n+      boxShadow: '0 2px 8px rgba(0,0,0,0.1)',\r\n+      border: darkMode ? '1px solid #4a5568' : '1px solid #e2e8f0'\r\n     }}>\r\n-      <h3 style={{ marginTop: 0, color: darkMode ? '#e2e8f0' : '#1e293b' }}>Emergency Services</h3>\r\n+      <h3 style={{ \r\n+        marginTop: 0, \r\n+        marginBottom: '1.5rem',\r\n+        color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+        display: 'flex',\r\n+        alignItems: 'center',\r\n+        gap: '0.5rem'\r\n+      }}>\r\n+        <span>üö®</span> Emergency Contacts\r\n+      </h3>\r\n       <div style={{ \r\n         display: 'grid',\r\n-        gridTemplateColumns: 'repeat(auto-fit, minmax(120px, 1fr))',\r\n-        gap: '0.5rem'\r\n+        gridTemplateColumns: 'repeat(2, 1fr)',\r\n+        gap: '1rem'\r\n       }}>\r\n         {services.map((service) => (\r\n           <a \r\n             key={service.name}\r\n@@ -534,1161 +563,285 @@\n             style={{\r\n               display: 'flex',\r\n               flexDirection: 'column',\r\n               alignItems: 'center',\r\n-              padding: '0.75rem',\r\n+              justifyContent: 'center',\r\n+              padding: '1rem',\r\n               borderRadius: '8px',\r\n               backgroundColor: darkMode ? '#4a5568' : '#e2e8f0',\r\n               color: darkMode ? '#e2e8f0' : '#1e293b',\r\n               textDecoration: 'none',\r\n-              transition: 'transform 0.2s',\r\n+              transition: 'transform 0.2s, box-shadow 0.2s',\r\n               ':hover': {\r\n-                transform: 'scale(1.05)'\r\n+                transform: 'translateY(-2px)',\r\n+                boxShadow: '0 4px 8px rgba(0,0,0,0.1)'\r\n               }\r\n             }}\r\n           >\r\n-            <span style={{ fontSize: '1.5rem' }}>{service.icon}</span>\r\n-            <span style={{ fontWeight: '600' }}>{service.name}</span>\r\n-            <span style={{ fontSize: '0.9rem' }}>{service.number}</span>\r\n+            <span style={{ \r\n+              fontSize: '1.8rem',\r\n+              marginBottom: '0.5rem'\r\n+            }}>{service.icon}</span>\r\n+            <span style={{ \r\n+              fontWeight: '600',\r\n+              marginBottom: '0.25rem'\r\n+            }}>{service.name}</span>\r\n+            <span style={{ \r\n+              fontSize: '1rem',\r\n+              fontWeight: '700',\r\n+              color: service.color\r\n+            }}>{service.number}</span>\r\n           </a>\r\n         ))}\r\n       </div>\r\n     </div>\r\n   );\r\n };\r\n \r\n-// Main Home Component\r\n-export default function Home() {\r\n-  const navigate = useNavigate();\r\n-  const [searchQuery, setSearchQuery] = useState('');\r\n-  const [darkMode, setDarkMode] = useState(false);\r\n-  const [selectedService, setSelectedService] = useState(null);\r\n-  const [orderCount, setOrderCount] = useState(0);\r\n-  const [achievements, setAchievements] = useState([]);\r\n-  const [showChat, setShowChat] = useState(false);\r\n-  const [events, setEvents] = useState([]);\r\n-  const [eventsLoading, setEventsLoading] = useState(true);\r\n-\r\n-  const services = [\r\n-    { \r\n-      name: 'Transport', \r\n-      path: '/transport', \r\n-      icon: 'üöå', \r\n-      desc: 'Plan your multi-modal journey across the city',\r\n-      color: '#3b82f6',\r\n-      details: 'Find the best routes combining metro, buses, and bikes. Real-time updates and ticket purchasing available.'\r\n+// Events Widget Component\r\n+const EventsWidget = ({ darkMode }) => {\r\n+  const [events, setEvents] = useState([\r\n+    {\r\n+      id: 1,\r\n+      name: \"Nairobi Jazz Festival\",\r\n+      date: \"2023-08-15\",\r\n+      venue: \"KICC\",\r\n+      description: \"Annual jazz festival featuring local and international artists. A celebration of African jazz heritage.\",\r\n+      image: \"https://images.unsplash.com/photo-1470229722913-7c0e2dbbafd3?ixlib=rb-1.2.1&auto=format&fit=crop&w=500&q=60\"\r\n     },\r\n-    { \r\n-      name: 'Food Delivery', \r\n-      path: '/food', \r\n-      icon: 'üçî', \r\n-      desc: 'Discover local restaurants and cafes',\r\n-      color: '#ef4444',\r\n-      details: 'Order from hundreds of restaurants with special discounts. Track your delivery in real-time.'\r\n+    {\r\n+      id: 2,\r\n+      name: \"Kenya National Theatre Play\",\r\n+      date: \"2023-08-20\",\r\n+      venue: \"Kenya National Theatre\",\r\n+      description: \"Award-winning theatrical performance showcasing Kenya's rich cultural stories.\",\r\n+      image: \"https://images.unsplash.com/photo-1492684223066-81342ee5ff30?ixlib=rb-1.2.1&auto=format&fit=crop&w=500&q=60\"\r\n     },\r\n-    { \r\n-      name: 'Groceries', \r\n-      path: '/food', \r\n-      icon: 'üõí', \r\n-      desc: 'Get groceries delivered in minutes',\r\n-      color: '#10b981',\r\n-      details: 'Same-day delivery from local supermarkets. Schedule recurring orders for essentials.'\r\n-    },\r\n-    { \r\n-      name: 'Services', \r\n-      path: '/food', \r\n-      icon: 'üõ†Ô∏è', \r\n-      desc: 'Find urban services near you',\r\n-      color: '#8b5cf6',\r\n-      details: 'Book home services, repairs, and professional help with verified providers.'\r\n-    },\r\n-    { \r\n-      name: 'Live Events', \r\n-      path: '/events', \r\n-      icon: 'üé§', \r\n-      desc: 'Discover concerts, shows and happenings in Nairobi',\r\n-      color: '#f59e0b',\r\n-      details: 'Find the latest concerts, theater shows, art exhibitions and special events happening around Nairobi. Get tickets and directions.'\r\n+    {\r\n+      id: 3,\r\n+      name: \"Nairobi Food Festival\",\r\n+      date: \"2023-09-05\",\r\n+      venue: \"Carnivore Grounds\",\r\n+      description: \"Experience the diverse culinary delights from across Kenya and beyond.\",\r\n+      image: \"https://images.unsplash.com/photo-1504674900247-0877df9cc836?ixlib=rb-1.2.1&auto=format&fit=crop&w=500&q=60\"\r\n     }\r\n-  ];\r\n+  ]);\r\n+  const [selectedEvent, setSelectedEvent] = useState(null);\r\n \r\n-  // Fetch Nairobi events\r\n-  useEffect(() => {\r\n-    const fetchEvents = async () => {\r\n-      try {\r\n-        // Note: In production, use your own backend to make this API call\r\n-        const response = await fetch(\r\n-          `https://app.ticketmaster.com/discovery/v2/events.json?city=Nairobi&apikey=${process.env.REACT_APP_TICKETMASTER_API_KEY}`\r\n-        );\r\n-        \r\n-        if (!response.ok) {\r\n-          throw new Error('Failed to fetch events');\r\n-        }\r\n-        \r\n-        const data = await response.json();\r\n-        setEvents(data._embedded?.events || []);\r\n-      } catch (err) {\r\n-        console.error('Error fetching events:', err);\r\n-        // Fallback to sample events if API fails\r\n-        setEvents([\r\n-          {\r\n-            name: \"Nairobi Jazz Festival\",\r\n-            dates: { start: { localDate: \"2023-08-15\" } },\r\n-            _embedded: {\r\n-              venues: [{ name: \"KICC\" }]\r\n-            }\r\n-          },\r\n-          {\r\n-            name: \"Kenya National Theatre Play\",\r\n-            dates: { start: { localDate: \"2023-08-20\" } },\r\n-            _embedded: {\r\n-              venues: [{ name: \"Kenya National Theatre\" }]\r\n-            }\r\n-          }\r\n-        ]);\r\n-      } finally {\r\n-        setEventsLoading(false);\r\n-      }\r\n-    };\r\n-\r\n-    fetchEvents();\r\n-  }, []);\r\n-\r\n-  // Check for achievements\r\n-  useEffect(() => {\r\n-    if (orderCount === 1) {\r\n-      addAchievement('First Order!', 'üéâ');\r\n-    } else if (orderCount === 5) {\r\n-      addAchievement('Regular Customer!', 'üèÜ');\r\n-    } else if (orderCount === 10) {\r\n-      addAchievement('Super User!', 'üåü');\r\n-    }\r\n-  }, [orderCount]);\r\n-\r\n-  const addAchievement = (title, icon) => {\r\n-    if (!achievements.some(a => a.title === title)) {\r\n-      const newAchievement = { title, icon, id: Date.now() };\r\n-      setAchievements(prev => [...prev, newAchievement]);\r\n-      \r\n-      // Auto-hide achievement after 3 seconds\r\n-      setTimeout(() => {\r\n-        setAchievements(prev => prev.filter(a => a.id !== newAchievement.id));\r\n-      }, 3000);\r\n-    }\r\n-  };\r\n-\r\n-  const handleSearch = (e) => {\r\n-    e.preventDefault();\r\n-    if (searchQuery.trim()) {\r\n-      navigate(`/food?search=${encodeURIComponent(searchQuery)}`);\r\n-    }\r\n-  };\r\n-\r\n-  const toggleDarkMode = () => {\r\n-    setDarkMode(!darkMode);\r\n-  };\r\n-\r\n-  const openServicePopup = (service) => {\r\n-    setSelectedService(service);\r\n-    setOrderCount(prev => prev + 1);\r\n-  };\r\n-\r\n-  const closePopup = () => {\r\n-    setSelectedService(null);\r\n-  };\r\n-\r\n-  const toggleChat = () => {\r\n-    setShowChat(!showChat);\r\n-  };\r\n-\r\n   return (\r\n-    <div style={{\r\n-      backgroundColor: darkMode ? '#1a202c' : '#f8fafc',\r\n-      minHeight: '100vh',\r\n-      paddingBottom: '3rem',\r\n-      color: darkMode ? '#e2e8f0' : '#1e293b',\r\n-      transition: 'all 0.3s ease',\r\n-      position: 'relative'\r\n-    }}>\r\n-      {/* Theme Toggle Button */}\r\n-      <button \r\n-        onClick={toggleDarkMode} \r\n-        style={{\r\n-          position: 'fixed',\r\n-          top: '1.5rem',\r\n-          right: '1.5rem',\r\n-          background: darkMode ? '#4a5568' : '#e2e8f0',\r\n-          border: 'none',\r\n-          borderRadius: '50%',\r\n-          width: '40px',\r\n-          height: '40px',\r\n-          display: 'flex',\r\n-          alignItems: 'center',\r\n-          justifyContent: 'center',\r\n-          cursor: 'pointer',\r\n-          transition: 'all 0.3s ease',\r\n-          boxShadow: '0 2px 5px rgba(0, 0, 0, 0.2)',\r\n-          zIndex: 100\r\n-        }}\r\n-        aria-label={darkMode ? 'Switch to light mode' : 'Switch to dark mode'}\r\n-      >\r\n-        {darkMode ? '‚òÄÔ∏è' : 'üåô'}\r\n-      </button>\r\n-      \r\n-      {/* Hero Section with UrbanBuddy */}\r\n-      <section style={{\r\n-        background: darkMode \r\n-          ? 'linear-gradient(135deg, #2d3748 0%, #1a202c 100%)' \r\n-          : 'linear-gradient(135deg, #6b46c1 0%, #3b82f6 100%)',\r\n-        color: 'white',\r\n-        padding: '4rem 1rem',\r\n-        textAlign: 'center',\r\n-        borderRadius: '0 0 20px 20px',\r\n-        boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',\r\n-        position: 'relative',\r\n-        overflow: 'hidden',\r\n-        height: '300px'\r\n+    <>\r\n+      <div style={{\r\n+        backgroundColor: darkMode ? '#2d3748' : '#f3f4f6',\r\n+        borderRadius: '12px',\r\n+        padding: '1.5rem',\r\n+        margin: '1rem 0',\r\n+        boxShadow: '0 2px 8px rgba(0,0,0,0.1)',\r\n+        border: darkMode ? '1px solid #4a5568' : '1px solid #e2e8f0'\r\n       }}>\r\n-        <div style={{\r\n-          maxWidth: '800px',\r\n-          margin: '0 auto',\r\n-          position: 'relative',\r\n-          zIndex: 2\r\n-        }}>\r\n-          <h1 style={{\r\n-            fontSize: '3.5rem',\r\n-            fontWeight: '800',\r\n-            marginBottom: '0.5rem',\r\n-            textShadow: '2px 2px 4px rgba(0, 0, 0, 0.2)',\r\n-          }}>UrbanFlow</h1>\r\n-          <p style={{\r\n-            fontSize: '1.25rem',\r\n-            marginBottom: '2rem',\r\n-            opacity: 0.9,\r\n-          }}>Your seamless urban living companion</p>\r\n-          \r\n-          <form onSubmit={handleSearch} style={{\r\n-            display: 'flex',\r\n-            maxWidth: '600px',\r\n-            margin: '0 auto',\r\n-            borderRadius: '50px',\r\n-            overflow: 'hidden',\r\n-            boxShadow: '0 4px 10px rgba(0, 0, 0, 0.2)',\r\n-          }}>\r\n-            <input\r\n-              type=\"text\"\r\n-              placeholder=\"Search for restaurants, services...\"\r\n-              value={searchQuery}\r\n-              onChange={(e) => setSearchQuery(e.target.value)}\r\n-              style={{\r\n-                flex: 1,\r\n-                padding: '1rem 1.5rem',\r\n-                border: 'none',\r\n-                fontSize: '1rem',\r\n-                outline: 'none',\r\n-                backgroundColor: darkMode ? '#2d3748' : 'white',\r\n-                color: darkMode ? '#e2e8f0' : '#1e293b',\r\n-              }}\r\n-            />\r\n-            <button type=\"submit\" style={{\r\n-              backgroundColor: darkMode ? '#4a5568' : '#1e40af',\r\n-              color: 'white',\r\n-              border: 'none',\r\n-              padding: '0 1.5rem',\r\n-              cursor: 'pointer',\r\n-              fontSize: '1.25rem',\r\n-              transition: 'background-color 0.2s'\r\n-            }}>\r\n-              <span>üîç</span>\r\n-            </button>\r\n-          </form>\r\n-        </div>\r\n-        <UrbanBuddy darkMode={darkMode} onChatOpen={toggleChat} />\r\n-      </section>\r\n-\r\n-      {/* Services Grid */}\r\n-      <section style={{\r\n-        padding: '2rem 1rem',\r\n-        maxWidth: '1200px',\r\n-        margin: '0 auto',\r\n-      }}>\r\n-        <h2 style={{\r\n-          fontSize: '2rem',\r\n-          fontWeight: '700',\r\n+        <h3 style={{ \r\n+          marginTop: 0, \r\n           marginBottom: '1.5rem',\r\n           color: darkMode ? '#e2e8f0' : '#1e293b',\r\n-          textAlign: 'center',\r\n-        }}>What do you need today?</h2>\r\n-        <div style={{\r\n-          display: 'grid',\r\n-          gridTemplateColumns: 'repeat(auto-fit, minmax(250px, 1fr))',\r\n-          gap: '1.5rem',\r\n-          marginTop: '1rem',\r\n+          display: 'flex',\r\n+          alignItems: 'center',\r\n+          gap: '0.5rem'\r\n         }}>\r\n-          {services.map((service) => (\r\n+          <span>üé≠</span> Upcoming Events\r\n+        </h3>\r\n+        \r\n+        <div style={{ display: 'flex', flexDirection: 'column', gap: '1rem' }}>\r\n+          {events.slice(0, 2).map(event => (\r\n             <div \r\n-              key={service.name} \r\n-              onClick={() => openServicePopup(service)}\r\n-              style={{ \r\n-                padding: '2rem 1.5rem',\r\n-                borderRadius: '16px',\r\n-                border: `2px solid ${service.color}`,\r\n-                textAlign: 'center',\r\n+              key={event.id}\r\n+              onClick={() => setSelectedEvent(event)}\r\n+              style={{\r\n+                display: 'flex',\r\n+                gap: '1rem',\r\n+                padding: '0.75rem',\r\n+                borderRadius: '8px',\r\n+                backgroundColor: darkMode ? '#4a5568' : '#e2e8f0',\r\n                 cursor: 'pointer',\r\n-                transition: 'transform 0.3s, box-shadow 0.3s',\r\n-                backgroundColor: darkMode \r\n-                  ? `${service.color}20` \r\n-                  : `${service.color}10`,\r\n+                transition: 'transform 0.2s',\r\n                 ':hover': {\r\n-                  transform: 'translateY(-5px)',\r\n-                  boxShadow: '0 10px 20px rgba(0, 0, 0, 0.1)',\r\n+                  transform: 'translateY(-2px)'\r\n                 }\r\n               }}\r\n             >\r\n-              <div style={{ \r\n-                fontSize: '3rem',\r\n-                marginBottom: '1rem',\r\n-                display: 'inline-block',\r\n-                animation: 'float 3s ease-in-out infinite'\r\n-              }}>{service.icon}</div>\r\n-              <h3 style={{fontSize: '1.5rem', fontWeight: '600', marginBottom: '0.5rem'}}>{service.name}</h3>\r\n-              <p style={{color: darkMode ? '#a0aec0' : '#64748b'}}>{service.desc}</p>\r\n+              <img \r\n+                src={event.image} \r\n+                alt={event.name}\r\n+                style={{\r\n+                  width: '80px',\r\n+                  height: '80px',\r\n+                  borderRadius: '8px',\r\n+                  objectFit: 'cover'\r\n+                }}\r\n+              />\r\n+              <div>\r\n+                <h4 style={{ \r\n+                  margin: '0 0 0.25rem', \r\n+                  color: darkMode ? '#e2e8f0' : '#1e293b'\r\n+                }}>\r\n+                  {event.name}\r\n+                </h4>\r\n+                <p style={{ \r\n+                  margin: '0 0 0.25rem', \r\n+                  fontSize: '0.9rem',\r\n+                  color: darkMode ? '#a0aec0' : '#64748b'\r\n+                }}>\r\n+                  {event.venue}\r\n+                </p>\r\n+                <p style={{ \r\n+                  margin: 0, \r\n+                  fontSize: '0.8rem',\r\n+                  fontWeight: '600',\r\n+                  color: darkMode ? '#a0aec0' : '#64748b'\r\n+                }}>\r\n+                  {event.date}\r\n+                </p>\r\n+              </div>\r\n             </div>\r\n           ))}\r\n         </div>\r\n-      </section>\r\n+        \r\n+        <button \r\n+          onClick={() => setSelectedEvent(events[2])}\r\n+          style={{\r\n+            width: '100%',\r\n+            marginTop: '1rem',\r\n+            padding: '0.75rem',\r\n+            backgroundColor: 'transparent',\r\n+            border: darkMode ? '1px solid #4a5568' : '1px solid #e2e8f0',\r\n+            borderRadius: '8px',\r\n+            color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+            cursor: 'pointer',\r\n+            transition: 'background-color 0.2s',\r\n+            ':hover': {\r\n+              backgroundColor: darkMode ? '#4a5568' : '#e2e8f0'\r\n+            }\r\n+          }}\r\n+        >\r\n+          View More Events\r\n+        </button>\r\n+      </div>\r\n \r\n-      {/* Weather and Emergency Services Section */}\r\n-      <section style={{\r\n-        padding: '2rem 1rem',\r\n-        maxWidth: '1200px',\r\n-        margin: '0 auto',\r\n-        display: 'grid',\r\n-        gridTemplateColumns: 'repeat(auto-fit, minmax(300px, 1fr))',\r\n-        gap: '1.5rem'\r\n-      }}>\r\n-        <WeatherWidget darkMode={darkMode} />\r\n-        <EmergencyServices darkMode={darkMode} />\r\n-      </section>\r\n-\r\n-      {/* Featured Section */}\r\n-      <section style={{\r\n-        padding: '2rem 1rem',\r\n-        maxWidth: '1200px',\r\n-        margin: '0 auto',\r\n-      }}>\r\n-        <h2 style={{\r\n-          fontSize: '2rem',\r\n-          fontWeight: '700',\r\n-          marginBottom: '1.5rem',\r\n-          color: darkMode ? '#e2e8f0' : '#1e293b',\r\n-          textAlign: 'center',\r\n-        }}>Quick Access</h2>\r\n+      {/* Event Detail Modal */}\r\n+      {selectedEvent && (\r\n         <div style={{\r\n-          display: 'flex',\r\n-          justifyContent: 'center',\r\n-          gap: '1rem',\r\n-          flexWrap: 'wrap',\r\n-        }}>\r\n-          <button \r\n-            onClick={() => navigate('/transport?from=home&to=downtown')}\r\n-            style={{\r\n-              padding: '0.75rem 1.5rem',\r\n-              borderRadius: '50px',\r\n-              border: 'none',\r\n-              backgroundColor: darkMode ? '#2d3748' : '#e2e8f0',\r\n-              color: darkMode ? '#e2e8f0' : '#1e293b',\r\n-              fontWeight: '600',\r\n-              cursor: 'pointer',\r\n-              transition: 'all 0.2s',\r\n-              display: 'flex',\r\n-              alignItems: 'center',\r\n-              gap: '0.5rem',\r\n-              fontSize: '1rem'\r\n-            }}\r\n-          >\r\n-            üöï To Downtown\r\n-          </button>\r\n-          <button \r\n-            onClick={() => navigate('/food?category=fastfood')}\r\n-            style={{\r\n-              padding: '0.75rem 1.5rem',\r\n-              borderRadius: '50px',\r\n-              border: 'none',\r\n-              backgroundColor: darkMode ? '#2d3748' : '#e2e8f0',\r\n-              color: darkMode ? '#e2e8f0' : '#1e293b',\r\n-              fontWeight: '600',\r\n-              cursor: 'pointer',\r\n-              transition: 'all 0.2s',\r\n-              display: 'flex',\r\n-              alignItems: 'center',\r\n-              gap: '0.5rem',\r\n-              fontSize: '1rem'\r\n-            }}\r\n-          >\r\n-            üçü Fast Food\r\n-          </button>\r\n-          <button \r\n-            onClick={() => navigate('/food?category=coffee')}\r\n-            style={{\r\n-              padding: '0.75rem 1.5rem',\r\n-              borderRadius: '50px',\r\n-              border: 'none',\r\n-              backgroundColor: darkMode ? '#2d3748' : '#e2e8f0',\r\n-              color: darkMode ? '#e2e8f0' : '#1e293b',\r\n-              fontWeight: '600',\r\n-              cursor: 'pointer',\r\n-              transition: 'all 0.2s',\r\n-              display: 'flex',\r\n-              alignItems: 'center',\r\n-              gap: '0.5rem',\r\n-              fontSize: '1rem'\r\n-            }}\r\n-          >\r\n-            ‚òï Coffee Shops\r\n-          </button>\r\n-          <button \r\n-            onClick={() => navigate('/events')}\r\n-            style={{\r\n-              padding: '0.75rem 1.5rem',\r\n-              borderRadius: '50px',\r\n-              border: 'none',\r\n-              backgroundColor: darkMode ? '#2d3748' : '#e2e8f0',\r\n-              color: darkMode ? '#e2e8f0' : '#1e293b',\r\n-              fontWeight: '600',\r\n-              cursor: 'pointer',\r\n-              transition: 'all 0.2s',\r\n-              display: 'flex',\r\n-              alignItems: 'center',\r\n-              gap: '0.5rem',\r\n-              fontSize: '1rem'\r\n-            }}\r\n-          >\r\n-            üé§ Nairobi Events\r\n-          </button>\r\n-        </div>\r\n-      </section>\r\n-\r\n-      {/* Service Popup */}\r\n-      {selectedService && (\r\n-        <div style={{\r\n           position: 'fixed',\r\n           top: 0,\r\n           left: 0,\r\n           right: 0,\r\n           bottom: 0,\r\n-          backgroundColor: 'rgba(0, 0, 0, 0.7)',\r\n+          backgroundColor: 'rgba(0,0,0,0.7)',\r\n           display: 'flex',\r\n           justifyContent: 'center',\r\n           alignItems: 'center',\r\n           zIndex: 1000,\r\n-        }} onClick={closePopup}>\r\n+          padding: '1rem'\r\n+        }} onClick={() => setSelectedEvent(null)}>\r\n           <div style={{\r\n             backgroundColor: darkMode ? '#2d3748' : 'white',\r\n-            borderRadius: '16px',\r\n-            padding: '2rem',\r\n+            borderRadius: '12px',\r\n             maxWidth: '500px',\r\n-            width: '90%',\r\n-            boxShadow: '0 10px 25px rgba(0, 0, 0, 0.2)',\r\n-            position: 'relative',\r\n-            border: darkMode ? '1px solid #4a5568' : '1px solid #e2e8f0',\r\n-          }} onClick={(e) => e.stopPropagation()}>\r\n-            <button style={{\r\n-              position: 'absolute',\r\n-              top: '1rem',\r\n-              right: '1rem',\r\n-              background: 'none',\r\n-              border: 'none',\r\n-              fontSize: '1.5rem',\r\n-              cursor: 'pointer',\r\n-              color: darkMode ? '#a0aec0' : '#64748b',\r\n-            }} onClick={closePopup}>√ó</button>\r\n-            <div style={{ \r\n-              display: 'flex', \r\n-              alignItems: 'center', \r\n-              gap: '1rem',\r\n-              marginBottom: '1.5rem'\r\n-            }}>\r\n-              <span style={{ fontSize: '2.5rem', animation: 'float 3s ease-in-out infinite' }}>{selectedService.icon}</span>\r\n-              <h3 style={{fontSize: '1.8rem', fontWeight: '700', marginBottom: '1rem', color: darkMode ? '#e2e8f0' : '#1e293b'}}>{selectedService.name}</h3>\r\n-            </div>\r\n-            <p style={{color: darkMode ? '#a0aec0' : '#64748b', fontSize: '1.1rem', lineHeight: '1.6', marginBottom: '2rem'}}>{selectedService.details}</p>\r\n-            {selectedService.name === 'Live Events' && (\r\n-              <div style={{\r\n-                backgroundColor: darkMode ? '#4a5568' : '#f3f4f6',\r\n-                borderRadius: '12px',\r\n-                padding: '1rem',\r\n+            width: '100%',\r\n+            overflow: 'hidden',\r\n+            boxShadow: '0 10px 25px rgba(0,0,0,0.2)'\r\n+          }} onClick={e => e.stopPropagation()}>\r\n+            <img \r\n+              src={selectedEvent.image} \r\n+              alt={selectedEvent.name}\r\n+              style={{\r\n+                width: '100%',\r\n+                height: '200px',\r\n+                objectFit: 'cover'\r\n+              }}\r\n+            />\r\n+            <div style={{ padding: '1.5rem' }}>\r\n+              <div style={{ \r\n+                display: 'flex',\r\n+                justifyContent: 'space-between',\r\n+                alignItems: 'center',\r\n+                marginBottom: '1rem'\r\n+              }}>\r\n+                <h3 style={{ \r\n+                  margin: 0,\r\n+                  color: darkMode ? '#e2e8f0' : '#1e293b'\r\n+                }}>\r\n+                  {selectedEvent.name}\r\n+                </h3>\r\n+                <button \r\n+                  onClick={() => setSelectedEvent(null)}\r\n+                  style={{\r\n+                    background: 'none',\r\n+                    border: 'none',\r\n+                    color: darkMode ? '#a0aec0' : '#64748b',\r\n+                    fontSize: '1.5rem',\r\n+                    cursor: 'pointer'\r\n+                  }}\r\n+                >\r\n+                  √ó\r\n+                </button>\r\n+              </div>\r\n+              \r\n+              <div style={{ \r\n+                display: 'flex',\r\n+                alignItems: 'center',\r\n+                gap: '0.5rem',\r\n+                marginBottom: '0.5rem'\r\n+              }}>\r\n+                <span>üìÖ</span>\r\n+                <span style={{ color: darkMode ? '#a0aec0' : '#64748b' }}>\r\n+                  {selectedEvent.date}\r\n+                </span>\r\n+              </div>\r\n+              \r\n+              <div style={{ \r\n+                display: 'flex',\r\n+                alignItems: 'center',\r\n+                gap: '0.5rem',\r\n                 marginBottom: '1.5rem'\r\n               }}>\r\n-                <h4 style={{\r\n-                  fontSize: '1.2rem',\r\n+                <span>üìç</span>\r\n+                <span style={{ color: darkMode ? '#a0aec0' : '#64748b' }}>\r\n+                  {selectedEvent.venue}\r\n+                </span>\r\n+              </div>\r\n+              \r\n+              <p style={{ \r\n+                color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+                lineHeight: '1.6'\r\n+              }}>\r\n+                {selectedEvent.description}\r\n+              </p>\r\n+              \r\n+              <button \r\n+                style={{\r\n+                  width: '100%',\r\n+                  marginTop: '1.5rem',\r\n+                  padding: '0.75rem',\r\n+                  backgroundColor: darkMode ? '#4a5568' : '#3b82f6',\r\n+                  color: 'white',\r\n+                  border: 'none',\r\n+                  borderRadius: '8px',\r\n                   fontWeight: '600',\r\n-                  marginBottom: '0.5rem',\r\n-                  color: darkMode ? '#e2e8f0' : '#1e293b'\r\n-                }}>Upcoming Events</h4>\r\n-                {eventsLoading ? (\r\n-                  <p>Loading events...</p>\r\n-                ) : events.length > 0 ? (\r\n-                  <ul style={{\r\n-                    listStyle: 'none',\r\n-                    padding: 0,\r\n-                    margin: 0\r\n-                  }}>\r\n-                    {events.slice(0, 3).map((event, index) => (\r\n-                      <li key={index} style={{padding: '0.5rem 0', borderBottom: darkMode ? '1px solid #4a5568' : '1px solid #e2e8f0'}}>\r\n-                        <strong>üé§ {event.name}</strong>\r\n-                        <div style={{ display: 'flex', justifyContent: 'space-between' }}>\r\n-                          <span>{event.dates?.start?.localDate}</span>\r\n-                          <span>{event._embedded?.venues?.[0]?.name || 'Nairobi'}</span>\r\n-                        </div>\r\n-                      </li>\r\n-                    ))}\r\n-                  </ul>\r\n-                ) : (\r\n-                  <p>No upcoming events found</p>\r\n-                )}\r\n-              </div>\r\n-            )}\r\n-            <button \r\n-              style={{ \r\n-                padding: '0.75rem 1.5rem',\r\n-                borderRadius: '8px',\r\n-                border: 'none',\r\n-                backgroundColor: selectedService.color,\r\n-                color: 'white',\r\n-                fontWeight: '600',\r\n-                cursor: 'pointer',\r\n-                transition: 'all 0.2s',\r\n-                fontSize: '1rem'\r\n-              }}\r\n-              onClick={() => {\r\n-                navigate(selectedService.path);\r\n-                closePopup();\r\n-              }}\r\n-            >\r\n-              Explore {selectedService.name}\r\n-            </button>\r\n+                  cursor: 'pointer',\r\n+                  transition: 'opacity 0.2s',\r\n+                  ':hover': {\r\n+                    opacity: 0.9\r\n+                  }\r\n+                }}\r\n+              >\r\n+                Get Tickets\r\n+              </button>\r\n+            </div>\r\n           </div>\r\n         </div>\r\n       )}\r\n-\r\n-      {/* Achievements */}\r\n-      {achievements.map(achievement => (\r\n-        <div key={achievement.id} style={{\r\n-          position: 'fixed',\r\n-          bottom: '20px',\r\n-          right: '20px',\r\n-          background: darkMode ? '#2d3748' : 'white',\r\n-          color: darkMode ? 'white' : '#1e293b',\r\n-          padding: '1rem',\r\n-          borderRadius: '12px',\r\n-          boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',\r\n-          display: 'flex',\r\n-          alignItems: 'center',\r\n-          gap: '0.5rem',\r\n-          zIndex: 1000,\r\n-          animation: 'slideIn 0.5s forwards, fadeOut 0.5s forwards 2.5s'\r\n-        }}>\r\n-          <span style={{fontSize: '1.5rem'}}>{achievement.icon}</span>\r\n-          <span>{achievement.title}</span>\r\n-        </div>\r\n-      ))}\r\n-\r\n-      {/* Chat Modal */}\r\n-      {showChat && <ChatModal darkMode={darkMode} onClose={toggleChat} />}\r\n-\r\n-      {/* Footer with copyright */}\r\n-      <footer style={{\r\n-        textAlign: 'center',\r\n-        padding: '2rem 1rem',\r\n-        color: darkMode ? '#a0aec0' : '#64748b',\r\n-        fontSize: '0.9rem',\r\n-        marginTop: '2rem'\r\n-      }}>\r\n-        <p>¬© {new Date().getFullYear()} UrbanFlow - Created by Nick</p>\r\n-      </footer>\r\n-    </div>\r\n-  );\r\n-};\n-import { useState, useEffect, useRef } from 'react';\r\n-import { useNavigate } from 'react-router-dom';\r\n-\r\n-// UrbanBuddy AI Assistant Component\r\n-const UrbanBuddy = ({ darkMode, onChatOpen }) => {\r\n-  const [position, setPosition] = useState({ x: 20, y: 50 });\r\n-  const [expression, setExpression] = useState('üòä');\r\n-  const [direction, setDirection] = useState(1);\r\n-  const [costume, setCostume] = useState(null);\r\n-  const [isActive, setIsActive] = useState(false);\r\n-  const botRef = useRef(null);\r\n-  const animationRef = useRef(null);\r\n-  const lastInteractionTime = useRef(Date.now());\r\n-\r\n-  // Seasonal costumes\r\n-  useEffect(() => {\r\n-    const today = new Date();\r\n-    const month = today.getMonth() + 1;\r\n-    \r\n-    if (month === 12) setCostume('üéÑ');\r\n-    else if (month === 10) setCostume('üéÉ');\r\n-    else if (month === 2) setCostume('üíù');\r\n-    else if (month === 4) setCostume('üå∏');\r\n-    else setCostume(null);\r\n-  }, []);\r\n-\r\n-  // Make the bot wander with more dynamic movement\r\n-  useEffect(() => {\r\n-    const moveInterval = setInterval(() => {\r\n-      setPosition(prev => {\r\n-        const now = Date.now();\r\n-        const timeSinceLastInteraction = now - lastInteractionTime.current;\r\n-        \r\n-        // More active movement right after interaction\r\n-        const speedMultiplier = timeSinceLastInteraction < 5000 ? 2 : 1;\r\n-        \r\n-        let newX = prev.x + (3 * direction * speedMultiplier);\r\n-        let newY = prev.y + (Math.random() * 6 - 3);\r\n-        \r\n-        // Bounce off edges\r\n-        if (newX > window.innerWidth - 80) {\r\n-          setDirection(-1);\r\n-          triggerAnimation('spin');\r\n-        }\r\n-        if (newX < 20) {\r\n-          setDirection(1);\r\n-          triggerAnimation('spin');\r\n-        }\r\n-        if (newY < 20) newY = 20;\r\n-        if (newY > window.innerHeight - 100) newY = window.innerHeight - 100;\r\n-        \r\n-        return { x: newX, y: newY };\r\n-      });\r\n-    }, 100);\r\n-\r\n-    return () => clearInterval(moveInterval);\r\n-  }, [direction]);\r\n-\r\n-  // Change expressions randomly with more variety\r\n-  useEffect(() => {\r\n-    const expressions = ['üòä', 'ü§î', 'üòÆ', 'üòé', 'üëã', 'ü§ñ', '‚ú®', 'üåü'];\r\n-    const expressionInterval = setInterval(() => {\r\n-      if (!isActive) {\r\n-        setExpression(expressions[Math.floor(Math.random() * expressions.length)]);\r\n-        // Random animations when idle\r\n-        if (Math.random() > 0.8) {\r\n-          triggerAnimation(['bounce', 'spin', 'wobble'][Math.floor(Math.random() * 3)]);\r\n-        }\r\n-      }\r\n-    }, 3000);\r\n-    return () => clearInterval(expressionInterval);\r\n-  }, [isActive]);\r\n-\r\n-  const triggerAnimation = (type) => {\r\n-    if (animationRef.current) {\r\n-      clearTimeout(animationRef.current);\r\n-    }\r\n-    \r\n-    const botElement = botRef.current;\r\n-    if (!botElement) return;\r\n-    \r\n-    botElement.style.animation = 'none';\r\n-    void botElement.offsetWidth; // Trigger reflow\r\n-    \r\n-    switch(type) {\r\n-      case 'spin':\r\n-        botElement.style.animation = 'spin 1s ease';\r\n-        break;\r\n-      case 'bounce':\r\n-        botElement.style.animation = 'bounce 0.5s ease';\r\n-        break;\r\n-      case 'wobble':\r\n-        botElement.style.animation = 'wobble 0.8s ease';\r\n-        break;\r\n-      default:\r\n-        botElement.style.animation = '';\r\n-    }\r\n-    \r\n-    animationRef.current = setTimeout(() => {\r\n-      if (botElement) botElement.style.animation = '';\r\n-    }, 1000);\r\n-  };\r\n-\r\n-  const handleClick = () => {\r\n-    lastInteractionTime.current = Date.now();\r\n-    setIsActive(true);\r\n-    triggerAnimation('bounce');\r\n-    setExpression('üí°');\r\n-    \r\n-    // Trigger chat opening in parent component\r\n-    onChatOpen();\r\n-    \r\n-    // Return to normal after a delay\r\n-    setTimeout(() => {\r\n-      setIsActive(false);\r\n-    }, 3000);\r\n-  };\r\n-\r\n-  // Custom animations\r\n-  const animations = `\r\n-    @keyframes spin {\r\n-      0% { transform: rotate(0deg) scaleX(${direction}); }\r\n-      100% { transform: rotate(360deg) scaleX(${direction}); }\r\n-    }\r\n-    @keyframes bounce {\r\n-      0%, 100% { transform: translateY(0) scaleX(${direction}); }\r\n-      50% { transform: translateY(-20px) scaleX(${direction}); }\r\n-    }\r\n-    @keyframes wobble {\r\n-      0%, 100% { transform: rotate(0deg) scaleX(${direction}); }\r\n-      25% { transform: rotate(5deg) scaleX(${direction}); }\r\n-      75% { transform: rotate(-5deg) scaleX(${direction}); }\r\n-    }\r\n-    @keyframes float {\r\n-      0% { transform: translateY(0px) scaleX(${direction}); }\r\n-      50% { transform: translateY(-10px) scaleX(${direction}); }\r\n-      100% { transform: translateY(0px) scaleX(${direction}); }\r\n-    }\r\n-  `;\r\n-\r\n-  return (\r\n-    <>\r\n-      <style>{animations}</style>\r\n-      <div \r\n-        ref={botRef}\r\n-        onClick={handleClick}\r\n-        style={{\r\n-          position: 'fixed',\r\n-          left: `${position.x}px`,\r\n-          top: `${position.y}px`,\r\n-          fontSize: '2.5rem',\r\n-          cursor: 'pointer',\r\n-          transition: 'all 0.3s ease',\r\n-          transform: `scaleX(${direction})`,\r\n-          zIndex: 100,\r\n-          filter: darkMode \r\n-            ? 'drop-shadow(0 0 8px rgba(255,255,255,0.7))' \r\n-            : 'drop-shadow(0 0 8px rgba(0,0,0,0.3))',\r\n-          userSelect: 'none',\r\n-          animation: 'float 4s ease-in-out infinite'\r\n-        }}\r\n-      >\r\n-        <div style={{ \r\n-          position: 'relative',\r\n-          display: 'flex',\r\n-          flexDirection: 'column',\r\n-          alignItems: 'center'\r\n-        }}>\r\n-          {/* Bot icon with costume */}\r\n-          <div style={{\r\n-            position: 'relative',\r\n-            width: '60px',\r\n-            height: '60px',\r\n-            backgroundColor: darkMode ? '#4a5568' : '#3b82f6',\r\n-            borderRadius: '50%',\r\n-            display: 'flex',\r\n-            justifyContent: 'center',\r\n-            alignItems: 'center',\r\n-            color: 'white'\r\n-          }}>\r\n-            <span style={{ fontSize: '1.8rem' }}>{expression}</span>\r\n-            {costume && (\r\n-              <span style={{\r\n-                position: 'absolute',\r\n-                top: '-15px',\r\n-                right: '-10px',\r\n-                fontSize: '1.5rem',\r\n-                transform: 'rotate(15deg)'\r\n-              }}>\r\n-                {costume}\r\n-              </span>\r\n-            )}\r\n-          </div>\r\n-        </div>\r\n-      </div>\r\n     </>\r\n   );\r\n };\r\n \r\n-// Chat Modal Component with Functional API Connection\r\n-const ChatModal = ({ darkMode, onClose }) => {\r\n-  const [messages, setMessages] = useState([\r\n-    { text: \"Hello! I'm UrbanBuddy, your AI assistant for urban living. How can I help you today?\", sender: 'bot' }\r\n-  ]);\r\n-  const [inputValue, setInputValue] = useState('');\r\n-  const [isTyping, setIsTyping] = useState(false);\r\n-  const chatEndRef = useRef(null);\r\n-  const inputRef = useRef(null);\r\n-\r\n-  // Auto-scroll to bottom and focus input\r\n-  useEffect(() => {\r\n-    chatEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n-    inputRef.current?.focus();\r\n-  }, [messages]);\r\n-\r\n-  // Function to call the AI API\r\n-  const generateResponse = async (userMessage) => {\r\n-    setIsTyping(true);\r\n-    \r\n-    try {\r\n-      // In a real app, you should call your own backend endpoint that then calls OpenAI\r\n-      // This is just for demonstration purposes\r\n-      const response = await fetch('https://api.openai.com/v1/chat/completions', {\r\n-        method: \"POST\",\r\n-        headers: { \r\n-          \"Content-Type\": \"application/json\",\r\n-          // Note: In production, never expose your API key in frontend code\r\n-          // This should be handled through your own backend\r\n-          \"Authorization\": `Bearer ${process.env.REACT_APP_OPENAI_API_KEY}` \r\n-        },\r\n-        body: JSON.stringify({\r\n-          model: \"gpt-3.5-turbo\",\r\n-          messages: [\r\n-            {\r\n-              role: \"system\",\r\n-              content: \"You are UrbanBuddy, a friendly AI assistant for urban living. \" +\r\n-                \"Provide helpful, concise answers (1-2 sentences) about city life, \" +\r\n-                \"transportation, food delivery, local services, and urban living tips. \" +\r\n-                \"Keep responses practical and urban-focused.\"\r\n-            },\r\n-            {\r\n-              role: \"user\",\r\n-              content: userMessage\r\n-            }\r\n-          ],\r\n-          temperature: 0.7,\r\n-          max_tokens: 150\r\n-        })\r\n-      });\r\n-      \r\n-      if (!response.ok) {\r\n-        throw new Error(`API request failed with status ${response.status}`);\r\n-      }\r\n-      \r\n-      const data = await response.json();\r\n-      const aiResponse = data.choices?.[0]?.message?.content || \r\n-        \"I'm having trouble thinking of a response right now. Could you try asking something else?\";\r\n-      \r\n-      setMessages(prev => [...prev, { \r\n-        text: aiResponse, \r\n-        sender: 'bot' \r\n-      }]);\r\n-    } catch (error) {\r\n-      console.error(\"API error:\", error);\r\n-      // Fallback to a local AI response if API fails\r\n-      const fallbackResponses = [\r\n-        \"I'm currently experiencing high demand. Try again in a moment!\",\r\n-        \"Let me think differently about that... Can you rephrase your question?\",\r\n-        \"I specialize in urban living tips. Ask me about transportation, food, or city services!\",\r\n-        \"I'm having connection issues, but I'd love to help with your urban living questions!\"\r\n-      ];\r\n-      setMessages(prev => [...prev, { \r\n-        text: fallbackResponses[Math.floor(Math.random() * fallbackResponses.length)], \r\n-        sender: 'bot' \r\n-      }]);\r\n-    } finally {\r\n-      setIsTyping(false);\r\n-    }\r\n-  };\r\n-\r\n-  const handleSendMessage = async (e) => {\r\n-    e.preventDefault();\r\n-    if (inputValue.trim() && !isTyping) {\r\n-      // Add user message\r\n-      const userMessage = inputValue.trim();\r\n-      setMessages(prev => [...prev, { text: userMessage, sender: 'user' }]);\r\n-      setInputValue('');\r\n-      \r\n-      // Generate AI response\r\n-      await generateResponse(userMessage);\r\n-    }\r\n-  };\r\n-\r\n-  return (\r\n-    <div style={{\r\n-      position: 'fixed',\r\n-      bottom: '100px',\r\n-      right: '30px',\r\n-      width: '350px',\r\n-      maxWidth: '90%',\r\n-      backgroundColor: darkMode ? '#2d3748' : 'white',\r\n-      borderRadius: '16px',\r\n-      boxShadow: '0 10px 25px rgba(0, 0, 0, 0.2)',\r\n-      border: darkMode ? '1px solid #4a5568' : '1px solid #e2e8f0',\r\n-      zIndex: 1000,\r\n-      overflow: 'hidden',\r\n-      display: 'flex',\r\n-      flexDirection: 'column',\r\n-      maxHeight: '60vh'\r\n-    }}>\r\n-      {/* Chat header */}\r\n-      <div style={{\r\n-        padding: '1rem',\r\n-        backgroundColor: darkMode ? '#4a5568' : '#3b82f6',\r\n-        color: 'white',\r\n-        display: 'flex',\r\n-        justifyContent: 'space-between',\r\n-        alignItems: 'center'\r\n-      }}>\r\n-        <div style={{ display: 'flex', alignItems: 'center', gap: '0.5rem' }}>\r\n-          <span style={{ fontSize: '1.5rem' }}>ü§ñ</span>\r\n-          <h3 style={{ margin: 0 }}>UrbanBuddy AI</h3>\r\n-          {isTyping && (\r\n-            <span style={{ \r\n-              fontSize: '0.8rem',\r\n-              marginLeft: '0.5rem',\r\n-              opacity: 0.8\r\n-            }}>typing...</span>\r\n-          )}\r\n-        </div>\r\n-        <button \r\n-          onClick={onClose}\r\n-          style={{\r\n-            background: 'none',\r\n-            border: 'none',\r\n-            color: 'white',\r\n-            fontSize: '1.2rem',\r\n-            cursor: 'pointer'\r\n-          }}\r\n-        >\r\n-          √ó\r\n-        </button>\r\n-      </div>\r\n-      \r\n-      {/* Chat messages */}\r\n-      <div style={{\r\n-        flex: 1,\r\n-        padding: '1rem',\r\n-        overflowY: 'auto',\r\n-        display: 'flex',\r\n-        flexDirection: 'column',\r\n-        gap: '0.8rem'\r\n-      }}>\r\n-        {messages.map((msg, index) => (\r\n-          <div \r\n-            key={index}\r\n-            style={{\r\n-              alignSelf: msg.sender === 'user' ? 'flex-end' : 'flex-start',\r\n-              maxWidth: '80%',\r\n-              padding: '0.6rem 1rem',\r\n-              borderRadius: msg.sender === 'user' \r\n-                ? '18px 18px 0 18px' \r\n-                : '18px 18px 18px 0',\r\n-              backgroundColor: msg.sender === 'user'\r\n-                ? (darkMode ? '#4a5568' : '#3b82f6')\r\n-                : (darkMode ? '#4a5568' : '#e2e8f0'),\r\n-              color: msg.sender === 'user' ? 'white' : (darkMode ? 'white' : '#1e293b'),\r\n-              animation: msg.sender === 'bot' && index === messages.length - 1 \r\n-                ? 'fadeIn 0.3s ease' \r\n-                : 'none'\r\n-            }}\r\n-          >\r\n-            {msg.text}\r\n-          </div>\r\n-        ))}\r\n-        <div ref={chatEndRef} />\r\n-      </div>\r\n-      \r\n-      {/* Chat input */}\r\n-      <form onSubmit={handleSendMessage} style={{\r\n-        padding: '0.8rem',\r\n-        borderTop: darkMode ? '1px solid #4a5568' : '1px solid #e2e8f0',\r\n-        display: 'flex',\r\n-        gap: '0.5rem'\r\n-      }}>\r\n-        <input\r\n-          ref={inputRef}\r\n-          type=\"text\"\r\n-          value={inputValue}\r\n-          onChange={(e) => setInputValue(e.target.value)}\r\n-          placeholder=\"Ask me about urban living...\"\r\n-          disabled={isTyping}\r\n-          style={{\r\n-            flex: 1,\r\n-            padding: '0.6rem 1rem',\r\n-            borderRadius: '20px',\r\n-            border: darkMode ? '1px solid #4a5568' : '1px solid #e2e8f0',\r\n-            backgroundColor: darkMode ? '#2d3748' : 'white',\r\n-            color: darkMode ? 'white' : '#1e293b',\r\n-            outline: 'none',\r\n-            opacity: isTyping ? 0.7 : 1\r\n-          }}\r\n-        />\r\n-        <button \r\n-          type=\"submit\"\r\n-          disabled={isTyping}\r\n-          style={{\r\n-            background: isTyping \r\n-              ? (darkMode ? '#4a5568' : '#e2e8f0')\r\n-              : (darkMode ? '#4a5568' : '#3b82f6'),\r\n-            color: 'white',\r\n-            border: 'none',\r\n-            borderRadius: '50%',\r\n-            width: '40px',\r\n-            height: '40px',\r\n-            display: 'flex',\r\n-            alignItems: 'center',\r\n-            justifyContent: 'center',\r\n-            cursor: isTyping ? 'not-allowed' : 'pointer'\r\n-          }}\r\n-        >\r\n-          {isTyping ? '...' : '‚û§'}\r\n-        </button>\r\n-      </form>\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-// Weather Widget Component with Fake Store API\r\n-const WeatherWidget = ({ darkMode }) => {\r\n-  const [weather, setWeather] = useState(null);\r\n-  const [loading, setLoading] = useState(true);\r\n-  const [error, setError] = useState(null);\r\n-\r\n-  useEffect(() => {\r\n-    const fetchWeather = async () => {\r\n-      try {\r\n-        // Using fake store API to simulate weather data\r\n-        const response = await fetch('https://fakestoreapi.com/products/1');\r\n-        \r\n-        if (!response.ok) {\r\n-          throw new Error('Failed to fetch weather data');\r\n-        }\r\n-        \r\n-        const data = await response.json();\r\n-        \r\n-        // Simulate weather data based on product info\r\n-        const simulatedWeather = {\r\n-          temp: Math.round(Math.random() * 15 + 15), // 15-30¬∞C\r\n-          condition: ['Sunny', 'Cloudy', 'Rainy', 'Thunderstorm'][Math.floor(Math.random() * 4)],\r\n-          humidity: Math.round(Math.random() * 50 + 30), // 30-80%\r\n-          wind: (Math.random() * 5 + 1).toFixed(1) // 1-6 m/s\r\n-        };\r\n-        \r\n-        setWeather({\r\n-          main: {\r\n-            temp: simulatedWeather.temp,\r\n-            humidity: simulatedWeather.humidity\r\n-          },\r\n-          weather: [{\r\n-            main: simulatedWeather.condition,\r\n-            description: simulatedWeather.condition.toLowerCase()\r\n-          }],\r\n-          wind: {\r\n-            speed: simulatedWeather.wind\r\n-          }\r\n-        });\r\n-      } catch (err) {\r\n-        setError(err.message);\r\n-      } finally {\r\n-        setLoading(false);\r\n-      }\r\n-    };\r\n-\r\n-    fetchWeather();\r\n-  }, []);\r\n-\r\n-  const getWeatherIcon = (condition) => {\r\n-    switch (condition) {\r\n-      case 'Sunny':\r\n-        return '‚òÄÔ∏è';\r\n-      case 'Cloudy':\r\n-        return '‚òÅÔ∏è';\r\n-      case 'Rainy':\r\n-        return 'üåßÔ∏è';\r\n-      case 'Thunderstorm':\r\n-        return '‚õàÔ∏è';\r\n-      default:\r\n-        return 'üå§Ô∏è';\r\n-    }\r\n-  };\r\n-\r\n-  if (loading) return <div>Loading weather...</div>;\r\n-  if (error) return <div>Weather data unavailable</div>;\r\n-\r\n-  return (\r\n-    <div style={{\r\n-      backgroundColor: darkMode ? '#2d3748' : '#f3f4f6',\r\n-      borderRadius: '12px',\r\n-      padding: '1rem',\r\n-      margin: '1rem 0',\r\n-      boxShadow: '0 2px 4px rgba(0,0,0,0.1)',\r\n-      flex: 1\r\n-    }}>\r\n-      <h3 style={{ marginTop: 0, color: darkMode ? '#e2e8f0' : '#1e293b' }}>Nairobi Weather</h3>\r\n-      <div style={{ display: 'flex', alignItems: 'center', gap: '1rem' }}>\r\n-        <span style={{ fontSize: '2rem' }}>\r\n-          {weather && getWeatherIcon(weather.weather[0].main)}\r\n-        </span>\r\n-        <div>\r\n-          <p style={{ margin: 0, fontSize: '1.5rem', fontWeight: 'bold', color: darkMode ? '#e2e8f0' : '#1e293b' }}>\r\n-            {weather?.main?.temp}¬∞C\r\n-          </p>\r\n-          <p style={{ margin: 0, color: darkMode ? '#a0aec0' : '#64748b' }}>\r\n-            {weather?.weather[0].description}\r\n-          </p>\r\n-        </div>\r\n-      </div>\r\n-      <div style={{ display: 'flex', justifyContent: 'space-between', marginTop: '0.5rem' }}>\r\n-        <span style={{ color: darkMode ? '#a0aec0' : '#64748b' }}>Humidity: {weather?.main?.humidity}%</span>\r\n-        <span style={{ color: darkMode ? '#a0aec0' : '#64748b' }}>Wind: {weather?.wind?.speed} m/s</span>\r\n-      </div>\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-// Emergency Services Component\r\n-const EmergencyServices = ({ darkMode }) => {\r\n-  const services = [\r\n-    { name: \"Police\", number: \"999\", icon: \"üëÆ\", color: \"#3b82f6\" },\r\n-    { name: \"Ambulance\", number: \"911\", icon: \"üöë\", color: \"#ef4444\" },\r\n-    { name: \"Fire Brigade\", number: \"999\", icon: \"üöí\", color: \"#f59e0b\" },\r\n-    { name: \"Child Helpline\", number: \"116\", icon: \"üßí\", color: \"#10b981\" }\r\n-  ];\r\n-\r\n-  return (\r\n-    <div style={{\r\n-      backgroundColor: darkMode ? '#2d3748' : '#f3f4f6',\r\n-      borderRadius: '12px',\r\n-      padding: '1rem',\r\n-      margin: '1rem 0',\r\n-      boxShadow: '0 2px 4px rgba(0,0,0,0.1)',\r\n-      flex: 1\r\n-    }}>\r\n-      <h3 style={{ marginTop: 0, color: darkMode ? '#e2e8f0' : '#1e293b' }}>Emergency Services</h3>\r\n-      <div style={{ \r\n-        display: 'grid',\r\n-        gridTemplateColumns: 'repeat(auto-fit, minmax(120px, 1fr))',\r\n-        gap: '0.5rem'\r\n-      }}>\r\n-        {services.map((service) => (\r\n-          <a \r\n-            key={service.name}\r\n-            href={`tel:${service.number}`}\r\n-            style={{\r\n-              display: 'flex',\r\n-              flexDirection: 'column',\r\n-              alignItems: 'center',\r\n-              padding: '0.75rem',\r\n-              borderRadius: '8px',\r\n-              backgroundColor: darkMode ? '#4a5568' : '#e2e8f0',\r\n-              color: darkMode ? '#e2e8f0' : '#1e293b',\r\n-              textDecoration: 'none',\r\n-              transition: 'transform 0.2s',\r\n-              ':hover': {\r\n-                transform: 'scale(1.05)'\r\n-              }\r\n-            }}\r\n-          >\r\n-            <span style={{ fontSize: '1.5rem' }}>{service.icon}</span>\r\n-            <span style={{ fontWeight: '600' }}>{service.name}</span>\r\n-            <span style={{ fontSize: '0.9rem' }}>{service.number}</span>\r\n-          </a>\r\n-        ))}\r\n-      </div>\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n // Main Home Component\r\n export default function Home() {\r\n   const navigate = useNavigate();\r\n   const [searchQuery, setSearchQuery] = useState('');\r\n@@ -1696,10 +849,8 @@\n   const [selectedService, setSelectedService] = useState(null);\r\n   const [orderCount, setOrderCount] = useState(0);\r\n   const [achievements, setAchievements] = useState([]);\r\n   const [showChat, setShowChat] = useState(false);\r\n-  const [events, setEvents] = useState([]);\r\n-  const [eventsLoading, setEventsLoading] = useState(true);\r\n \r\n   const services = [\r\n     { \r\n       name: 'Transport', \r\n@@ -1733,63 +884,17 @@\n       color: '#8b5cf6',\r\n       details: 'Book home services, repairs, and professional help with verified providers.'\r\n     },\r\n     { \r\n-      name: 'Live Events', \r\n+      name: 'Events', \r\n       path: '/events', \r\n       icon: 'üé§', \r\n-      desc: 'Discover concerts, shows and happenings in Nairobi',\r\n+      desc: 'Discover concerts, shows and happenings',\r\n       color: '#f59e0b',\r\n       details: 'Find the latest concerts, theater shows, art exhibitions and special events happening around Nairobi. Get tickets and directions.'\r\n     }\r\n   ];\r\n \r\n-  // Fetch Nairobi events\r\n-  useEffect(() => {\r\n-    const fetchEvents = async () => {\r\n-      try {\r\n-        // Using fake store API to simulate events\r\n-        const response = await fetch('https://fakestoreapi.com/products?limit=3');\r\n-        \r\n-        if (!response.ok) {\r\n-          throw new Error('Failed to fetch events');\r\n-        }\r\n-        \r\n-        const data = await response.json();\r\n-        setEvents(data.map(item => ({\r\n-          name: item.title,\r\n-          dates: { start: { localDate: new Date(Date.now() + Math.random() * 30 * 24 * 60 * 60 * 1000).toISOString().split('T')[0] } },\r\n-          _embedded: {\r\n-            venues: [{ name: ['KICC', 'Carnivore', 'National Theatre'][Math.floor(Math.random() * 3)] }]\r\n-          }\r\n-        })));\r\n-      } catch (err) {\r\n-        console.error('Error fetching events:', err);\r\n-        // Fallback to sample events if API fails\r\n-        setEvents([\r\n-          {\r\n-            name: \"Nairobi Jazz Festival\",\r\n-            dates: { start: { localDate: \"2023-08-15\" } },\r\n-            _embedded: {\r\n-              venues: [{ name: \"KICC\" }]\r\n-            }\r\n-          },\r\n-          {\r\n-            name: \"Kenya National Theatre Play\",\r\n-            dates: { start: { localDate: \"2023-08-20\" } },\r\n-            _embedded: {\r\n-              venues: [{ name: \"Kenya National Theatre\" }]\r\n-            }\r\n-          }\r\n-        ]);\r\n-      } finally {\r\n-        setEventsLoading(false);\r\n-      }\r\n-    };\r\n-\r\n-    fetchEvents();\r\n-  }, []);\r\n-\r\n   // Check for achievements\r\n   useEffect(() => {\r\n     if (orderCount === 1) {\r\n       addAchievement('First Order!', 'üéâ');\r\n@@ -1992,9 +1097,9 @@\n           ))}\r\n         </div>\r\n       </section>\r\n \r\n-      {/* Weather and Emergency Services Section */}\r\n+      {/* Widgets Section */}\r\n       <section style={{\r\n         padding: '2rem 1rem',\r\n         maxWidth: '1200px',\r\n         margin: '0 auto',\r\n@@ -2003,8 +1108,9 @@\n         gap: '1.5rem'\r\n       }}>\r\n         <WeatherWidget darkMode={darkMode} />\r\n         <EmergencyServices darkMode={darkMode} />\r\n+        <EventsWidget darkMode={darkMode} />\r\n       </section>\r\n \r\n       {/* Featured Section */}\r\n       <section style={{\r\n@@ -2038,24 +1144,12 @@\n               transition: 'all 0.2s',\r\n               display: 'flex',\r\n               alignItems: 'center',\r\n               gap: '0.5rem',\r\n-              fontSize: '1rem',\r\n-              ':hover': {\r\n-                backgroundColor: darkMode ? '#4a5568' : '#d1d5db',\r\n-                transform: 'scale(1.05)',\r\n-                boxShadow: '0 2px 5px rgba(0, 0, 0, 0.2)'\r\n-              }\r\n+              fontSize: '1rem'\r\n             }}\r\n           >\r\n-            <span style={{ \r\n-              fontSize: '1.2rem',\r\n-              transition: 'transform 0.3s',\r\n-              ':hover': {\r\n-                transform: 'scale(1.2)'\r\n-              }\r\n-            }}>üöï</span>\r\n-            To Downtown\r\n+            üöï To Downtown\r\n           </button>\r\n           <button \r\n             onClick={() => navigate('/food?category=fastfood')}\r\n             style={{\r\n@@ -2069,24 +1163,12 @@\n               transition: 'all 0.2s',\r\n               display: 'flex',\r\n               alignItems: 'center',\r\n               gap: '0.5rem',\r\n-              fontSize: '1rem',\r\n-              ':hover': {\r\n-                backgroundColor: darkMode ? '#4a5568' : '#d1d5db',\r\n-                transform: 'scale(1.05)',\r\n-                boxShadow: '0 2px 5px rgba(0, 0, 0, 0.2)'\r\n-              }\r\n+              fontSize: '1rem'\r\n             }}\r\n           >\r\n-            <span style={{ \r\n-              fontSize: '1.2rem',\r\n-              transition: 'transform 0.3s',\r\n-              ':hover': {\r\n-                transform: 'scale(1.2)'\r\n-              }\r\n-            }}>üçü</span>\r\n-            Fast Food\r\n+            üçü Fast Food\r\n           </button>\r\n           <button \r\n             onClick={() => navigate('/food?category=coffee')}\r\n             style={{\r\n@@ -2100,24 +1182,12 @@\n               transition: 'all 0.2s',\r\n               display: 'flex',\r\n               alignItems: 'center',\r\n               gap: '0.5rem',\r\n-              fontSize: '1rem',\r\n-              ':hover': {\r\n-                backgroundColor: darkMode ? '#4a5568' : '#d1d5db',\r\n-                transform: 'scale(1.05)',\r\n-                boxShadow: '0 2px 5px rgba(0, 0, 0, 0.2)'\r\n-              }\r\n+              fontSize: '1rem'\r\n             }}\r\n           >\r\n-            <span style={{ \r\n-              fontSize: '1.2rem',\r\n-              transition: 'transform 0.3s',\r\n-              ':hover': {\r\n-                transform: 'scale(1.2)'\r\n-              }\r\n-            }}>‚òï</span>\r\n-            Coffee Shops\r\n+            ‚òï Coffee Shops\r\n           </button>\r\n           <button \r\n             onClick={() => navigate('/events')}\r\n             style={{\r\n@@ -2131,24 +1201,12 @@\n               transition: 'all 0.2s',\r\n               display: 'flex',\r\n               alignItems: 'center',\r\n               gap: '0.5rem',\r\n-              fontSize: '1rem',\r\n-              ':hover': {\r\n-                backgroundColor: darkMode ? '#4a5568' : '#d1d5db',\r\n-                transform: 'scale(1.05)',\r\n-                boxShadow: '0 2px 5px rgba(0, 0, 0, 0.2)'\r\n-              }\r\n+              fontSize: '1rem'\r\n             }}\r\n           >\r\n-            <span style={{ \r\n-              fontSize: '1.2rem',\r\n-              transition: 'transform 0.3s',\r\n-              ':hover': {\r\n-                transform: 'scale(1.2)'\r\n-              }\r\n-            }}>üé§</span>\r\n-            Nairobi Events\r\n+            üé§ Nairobi Events\r\n           </button>\r\n         </div>\r\n       </section>\r\n \r\n@@ -2195,44 +1253,8 @@\n               <span style={{ fontSize: '2.5rem', animation: 'float 3s ease-in-out infinite' }}>{selectedService.icon}</span>\r\n               <h3 style={{fontSize: '1.8rem', fontWeight: '700', marginBottom: '1rem', color: darkMode ? '#e2e8f0' : '#1e293b'}}>{selectedService.name}</h3>\r\n             </div>\r\n             <p style={{color: darkMode ? '#a0aec0' : '#64748b', fontSize: '1.1rem', lineHeight: '1.6', marginBottom: '2rem'}}>{selectedService.details}</p>\r\n-            {selectedService.name === 'Live Events' && (\r\n-              <div style={{\r\n-                backgroundColor: darkMode ? '#4a5568' : '#f3f4f6',\r\n-                borderRadius: '12px',\r\n-                padding: '1rem',\r\n-                marginBottom: '1.5rem'\r\n-              }}>\r\n-                <h4 style={{\r\n-                  fontSize: '1.2rem',\r\n-                  fontWeight: '600',\r\n-                  marginBottom: '0.5rem',\r\n-                  color: darkMode ? '#e2e8f0' : '#1e293b'\r\n-                }}>Upcoming Events</h4>\r\n-                {eventsLoading ? (\r\n-                  <p>Loading events...</p>\r\n-                ) : events.length > 0 ? (\r\n-                  <ul style={{\r\n-                    listStyle: 'none',\r\n-                    padding: 0,\r\n-                    margin: 0\r\n-                  }}>\r\n-                    {events.slice(0, 3).map((event, index) => (\r\n-                      <li key={index} style={{padding: '0.5rem 0', borderBottom: darkMode ? '1px solid #4a5568' : '1px solid #e2e8f0'}}>\r\n-                        <strong>üé§ {event.name}</strong>\r\n-                        <div style={{ display: 'flex', justifyContent: 'space-between' }}>\r\n-                          <span>{event.dates?.start?.localDate}</span>\r\n-                          <span>{event._embedded?.venues?.[0]?.name || 'Nairobi'}</span>\r\n-                        </div>\r\n-                      </li>\r\n-                    ))}\r\n-                  </ul>\r\n-                ) : (\r\n-                  <p>No upcoming events found</p>\r\n-                )}\r\n-              </div>\r\n-            )}\r\n             <button \r\n               style={{ \r\n                 padding: '0.75rem 1.5rem',\r\n                 borderRadius: '8px',\r\n@@ -2241,13 +1263,9 @@\n                 color: 'white',\r\n                 fontWeight: '600',\r\n                 cursor: 'pointer',\r\n                 transition: 'all 0.2s',\r\n-                fontSize: '1rem',\r\n-                ':hover': {\r\n-                  opacity: 0.9,\r\n-                  transform: 'scale(1.02)'\r\n-                }\r\n+                fontSize: '1rem'\r\n               }}\r\n               onClick={() => {\r\n                 navigate(selectedService.path);\r\n                 closePopup();\r\n"
                },
                {
                    "date": 1755244985886,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -432,93 +432,220 @@\n     temp: 22,\r\n     condition: 'Partly Cloudy',\r\n     humidity: 65,\r\n     wind: 12,\r\n-    icon: '‚õÖ'\r\n+    feelsLike: 24,\r\n+    icon: '‚õÖ',\r\n+    location: 'Nairobi, Kenya',\r\n+    time: new Date().toLocaleTimeString('en-US', { \r\n+      hour: '2-digit', \r\n+      minute: '2-digit',\r\n+      hour12: true \r\n+    })\r\n   });\r\n \r\n+  // Mock weather data that changes every time\r\n+  const weatherConditions = [\r\n+    { temp: 18, condition: 'Partly Cloudy', humidity: 72, wind: 8, feelsLike: 20, icon: '‚õÖ' },\r\n+    { temp: 25, condition: 'Sunny', humidity: 45, wind: 15, feelsLike: 27, icon: '‚òÄÔ∏è' },\r\n+    { temp: 16, condition: 'Rainy', humidity: 88, wind: 20, feelsLike: 14, icon: 'üåßÔ∏è' },\r\n+    { temp: 22, condition: 'Cloudy', humidity: 68, wind: 12, feelsLike: 24, icon: '‚òÅÔ∏è' },\r\n+    { temp: 28, condition: 'Clear Night', humidity: 55, wind: 6, feelsLike: 30, icon: 'üåô' },\r\n+    { temp: 19, condition: 'Misty', humidity: 85, wind: 5, feelsLike: 21, icon: 'üå´Ô∏è' },\r\n+    { temp: 31, condition: 'Hot & Sunny', humidity: 38, wind: 18, feelsLike: 35, icon: 'üî•' },\r\n+    { temp: 14, condition: 'Stormy', humidity: 92, wind: 25, feelsLike: 12, icon: '‚õàÔ∏è' }\r\n+  ];\r\n+\r\n+  // Update weather randomly every 30 seconds\r\n+  useEffect(() => {\r\n+    const updateWeather = () => {\r\n+      const randomWeather = weatherConditions[Math.floor(Math.random() * weatherConditions.length)];\r\n+      setWeather(prev => ({\r\n+        ...prev,\r\n+        ...randomWeather,\r\n+        time: new Date().toLocaleTimeString('en-US', { \r\n+          hour: '2-digit', \r\n+          minute: '2-digit',\r\n+          hour12: true \r\n+        })\r\n+      }));\r\n+    };\r\n+\r\n+    const interval = setInterval(updateWeather, 30000); // Update every 30 seconds\r\n+    return () => clearInterval(interval);\r\n+  }, []);\r\n+\r\n   return (\r\n     <div style={{\r\n-      backgroundColor: darkMode ? '#2d3748' : '#f3f4f6',\r\n-      borderRadius: '12px',\r\n+      background: darkMode \r\n+        ? 'linear-gradient(135deg, #1e293b 0%, #334155 100%)' \r\n+        : 'linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%)',\r\n+      borderRadius: '16px',\r\n       padding: '1.5rem',\r\n       margin: '1rem 0',\r\n-      boxShadow: '0 2px 8px rgba(0,0,0,0.1)',\r\n-      border: darkMode ? '1px solid #4a5568' : '1px solid #e2e8f0'\r\n+      boxShadow: '0 8px 32px rgba(0,0,0,0.1)',\r\n+      border: darkMode ? '1px solid #475569' : '1px solid #cbd5e1',\r\n+      position: 'relative',\r\n+      overflow: 'hidden'\r\n     }}>\r\n-      <h3 style={{ \r\n-        marginTop: 0, \r\n-        marginBottom: '1rem',\r\n-        color: darkMode ? '#e2e8f0' : '#1e293b',\r\n-        display: 'flex',\r\n-        alignItems: 'center',\r\n-        gap: '0.5rem'\r\n-      }}>\r\n-        <span>üå§Ô∏è</span> Nairobi Weather\r\n-      </h3>\r\n-      <div style={{ display: 'flex', alignItems: 'center', gap: '1.5rem' }}>\r\n-        <span style={{ fontSize: '3rem' }}>{weather.icon}</span>\r\n-        <div>\r\n-          <p style={{ \r\n-            margin: 0, \r\n-            fontSize: '2rem', \r\n-            fontWeight: 'bold', \r\n-            color: darkMode ? '#e2e8f0' : '#1e293b' \r\n+      {/* Weather background pattern */}\r\n+      <div style={{\r\n+        position: 'absolute',\r\n+        top: '-50%',\r\n+        right: '-50%',\r\n+        width: '200%',\r\n+        height: '200%',\r\n+        background: darkMode \r\n+          ? 'radial-gradient(circle, rgba(59, 130, 246, 0.1) 0%, transparent 70%)'\r\n+          : 'radial-gradient(circle, rgba(59, 130, 246, 0.05) 0%, transparent 70%)',\r\n+        animation: 'rotate 20s linear infinite'\r\n+      }}></div>\r\n+\r\n+      <div style={{ position: 'relative', zIndex: 2 }}>\r\n+        {/* Header with location and time */}\r\n+        <div style={{ \r\n+          display: 'flex', \r\n+          justifyContent: 'space-between', \r\n+          alignItems: 'center',\r\n+          marginBottom: '1rem'\r\n+        }}>\r\n+          <h3 style={{ \r\n+            margin: 0,\r\n+            color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+            display: 'flex',\r\n+            alignItems: 'center',\r\n+            gap: '0.5rem',\r\n+            fontSize: '1.1rem',\r\n+            fontWeight: '600'\r\n           }}>\r\n-            {weather.temp}¬∞C\r\n-          </p>\r\n-          <p style={{ \r\n-            margin: '0.25rem 0 0', \r\n-            color: darkMode ? '#a0aec0' : '#64748b',\r\n-            fontSize: '0.9rem'\r\n+            <span>üå§Ô∏è</span> Weather\r\n+          </h3>\r\n+          <span style={{\r\n+            fontSize: '0.8rem',\r\n+            color: darkMode ? '#94a3b8' : '#64748b',\r\n+            backgroundColor: darkMode ? 'rgba(148, 163, 184, 0.1)' : 'rgba(100, 116, 139, 0.1)',\r\n+            padding: '0.25rem 0.5rem',\r\n+            borderRadius: '12px'\r\n           }}>\r\n-            {weather.condition}\r\n-          </p>\r\n+            {weather.time}\r\n+          </span>\r\n         </div>\r\n-      </div>\r\n-      <div style={{ \r\n-        display: 'flex', \r\n-        justifyContent: 'space-between', \r\n-        marginTop: '1.5rem',\r\n-        paddingTop: '1rem',\r\n-        borderTop: darkMode ? '1px solid #4a5568' : '1px solid #e2e8f0'\r\n-      }}>\r\n-        <div style={{ textAlign: 'center' }}>\r\n-          <p style={{ \r\n-            margin: '0 0 0.25rem', \r\n-            fontSize: '0.8rem',\r\n-            color: darkMode ? '#a0aec0' : '#64748b'\r\n-          }}>Humidity</p>\r\n-          <p style={{ \r\n-            margin: 0, \r\n-            fontWeight: '600',\r\n-            color: darkMode ? '#e2e8f0' : '#1e293b'\r\n-          }}>{weather.humidity}%</p>\r\n+\r\n+        {/* Location */}\r\n+        <p style={{\r\n+          margin: '0 0 1rem 0',\r\n+          fontSize: '0.9rem',\r\n+          color: darkMode ? '#94a3b8' : '#64748b',\r\n+          fontWeight: '500'\r\n+        }}>\r\n+          üìç {weather.location}\r\n+        </p>\r\n+\r\n+        {/* Main weather display */}\r\n+        <div style={{ display: 'flex', alignItems: 'center', gap: '1.5rem', marginBottom: '1.5rem' }}>\r\n+          <div style={{\r\n+            fontSize: '4rem',\r\n+            filter: 'drop-shadow(0 4px 8px rgba(0,0,0,0.1))',\r\n+            animation: 'float 3s ease-in-out infinite'\r\n+          }}>\r\n+            {weather.icon}\r\n+          </div>\r\n+          <div>\r\n+            <p style={{ \r\n+              margin: 0, \r\n+              fontSize: '2.5rem', \r\n+              fontWeight: 'bold', \r\n+              color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+              lineHeight: 1\r\n+            }}>\r\n+              {weather.temp}¬∞C\r\n+            </p>\r\n+            <p style={{ \r\n+              margin: '0.25rem 0 0', \r\n+              color: darkMode ? '#94a3b8' : '#64748b',\r\n+              fontSize: '1rem',\r\n+              fontWeight: '500'\r\n+            }}>\r\n+              {weather.condition}\r\n+            </p>\r\n+          </div>\r\n         </div>\r\n-        <div style={{ textAlign: 'center' }}>\r\n-          <p style={{ \r\n-            margin: '0 0 0.25rem', \r\n-            fontSize: '0.8rem',\r\n-            color: darkMode ? '#a0aec0' : '#64748b'\r\n-          }}>Wind</p>\r\n-          <p style={{ \r\n-            margin: 0, \r\n-            fontWeight: '600',\r\n-            color: darkMode ? '#e2e8f0' : '#1e293b'\r\n-          }}>{weather.wind} km/h</p>\r\n+\r\n+        {/* Weather details grid */}\r\n+        <div style={{ \r\n+          display: 'grid',\r\n+          gridTemplateColumns: 'repeat(3, 1fr)',\r\n+          gap: '1rem',\r\n+          paddingTop: '1rem',\r\n+          borderTop: darkMode ? '1px solid #475569' : '1px solid #cbd5e1'\r\n+        }}>\r\n+          <div style={{ \r\n+            textAlign: 'center',\r\n+            padding: '0.75rem',\r\n+            backgroundColor: darkMode ? 'rgba(71, 85, 105, 0.3)' : 'rgba(203, 213, 225, 0.3)',\r\n+            borderRadius: '12px',\r\n+            transition: 'transform 0.2s ease'\r\n+          }}>\r\n+            <p style={{ \r\n+              margin: '0 0 0.5rem', \r\n+              fontSize: '0.75rem',\r\n+              color: darkMode ? '#94a3b8' : '#64748b',\r\n+              fontWeight: '500',\r\n+              textTransform: 'uppercase',\r\n+              letterSpacing: '0.5px'\r\n+            }}>Humidity</p>\r\n+            <p style={{ \r\n+              margin: 0, \r\n+              fontWeight: '700',\r\n+              color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+              fontSize: '1.1rem'\r\n+            }}>{weather.humidity}%</p>\r\n+          </div>\r\n+          <div style={{ \r\n+            textAlign: 'center',\r\n+            padding: '0.75rem',\r\n+            backgroundColor: darkMode ? 'rgba(71, 85, 105, 0.3)' : 'rgba(203, 213, 225, 0.3)',\r\n+            borderRadius: '12px',\r\n+            transition: 'transform 0.2s ease'\r\n+          }}>\r\n+            <p style={{ \r\n+              margin: '0 0 0.5rem', \r\n+              fontSize: '0.75rem',\r\n+              color: darkMode ? '#94a3b8' : '#64748b',\r\n+              fontWeight: '500',\r\n+              textTransform: 'uppercase',\r\n+              letterSpacing: '0.5px'\r\n+            }}>Wind</p>\r\n+            <p style={{ \r\n+              margin: 0, \r\n+              fontWeight: '700',\r\n+              color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+              fontSize: '1.1rem'\r\n+            }}>{weather.wind} km/h</p>\r\n+          </div>\r\n+          <div style={{ \r\n+            textAlign: 'center',\r\n+            padding: '0.75rem',\r\n+            backgroundColor: darkMode ? 'rgba(71, 85, 105, 0.3)' : 'rgba(203, 213, 225, 0.3)',\r\n+            borderRadius: '12px',\r\n+            transition: 'transform 0.2s ease'\r\n+          }}>\r\n+            <p style={{ \r\n+              margin: '0 0 0.5rem', \r\n+              fontSize: '0.75rem',\r\n+              color: darkMode ? '#94a3b8' : '#64748b',\r\n+              fontWeight: '500',\r\n+              textTransform: 'uppercase',\r\n+              letterSpacing: '0.5px'\r\n+            }}>Feels Like</p>\r\n+            <p style={{ \r\n+              margin: 0, \r\n+              fontWeight: '700',\r\n+              color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+              fontSize: '1.1rem'\r\n+            }}>{weather.feelsLike}¬∞C</p>\r\n+          </div>\r\n         </div>\r\n-        <div style={{ textAlign: 'center' }}>\r\n-          <p style={{ \r\n-            margin: '0 0 0.25rem', \r\n-            fontSize: '0.8rem',\r\n-            color: darkMode ? '#a0aec0' : '#64748b'\r\n-          }}>Feels Like</p>\r\n-          <p style={{ \r\n-            margin: 0, \r\n-            fontWeight: '600',\r\n-            color: darkMode ? '#e2e8f0' : '#1e293b'\r\n-          }}>{weather.temp}¬∞C</p>\r\n-        </div>\r\n       </div>\r\n     </div>\r\n   );\r\n };\r\n@@ -857,41 +984,46 @@\n       path: '/transport', \r\n       icon: 'üöå', \r\n       desc: 'Plan your multi-modal journey across the city',\r\n       color: '#3b82f6',\r\n-      details: 'Find the best routes combining metro, buses, and bikes. Real-time updates and ticket purchasing available.'\r\n+      details: 'Find the best routes combining metro, buses, and bikes. Real-time updates and ticket purchasing available.',\r\n+      features: ['Route Planning', 'Real-time Updates', 'Multi-modal Options', 'Ticket Booking']\r\n     },\r\n     { \r\n-      name: 'Food Delivery', \r\n+      name: 'Food & Markets', \r\n       path: '/food', \r\n       icon: 'üçî', \r\n-      desc: 'Discover local restaurants and cafes',\r\n+      desc: 'Discover local restaurants and fresh markets',\r\n       color: '#ef4444',\r\n-      details: 'Order from hundreds of restaurants with special discounts. Track your delivery in real-time.'\r\n+      details: 'Order from hundreds of restaurants with special discounts. Explore local markets for fresh produce and crafts.',\r\n+      features: ['Restaurant Delivery', 'Local Markets', 'Fresh Produce', 'Cultural Crafts']\r\n     },\r\n     { \r\n-      name: 'Groceries', \r\n-      path: '/food', \r\n-      icon: 'üõí', \r\n-      desc: 'Get groceries delivered in minutes',\r\n+      name: 'AI Assistant', \r\n+      path: '/assistant', \r\n+      icon: 'ü§ñ', \r\n+      desc: 'Get personalized urban living guidance',\r\n+      color: '#8b5cf6',\r\n+      details: 'Your AI companion for navigating city life, finding services, and getting personalized recommendations.',\r\n+      features: ['24/7 Support', 'Personalized Tips', 'Service Discovery', 'Smart Recommendations']\r\n+    },\r\n+    { \r\n+      name: 'City Services', \r\n+      path: '/transport', \r\n+      icon: 'üèõÔ∏è', \r\n+      desc: 'Access essential urban services',\r\n       color: '#10b981',\r\n-      details: 'Same-day delivery from local supermarkets. Schedule recurring orders for essentials.'\r\n+      details: 'Find government services, utilities, and essential city resources all in one place.',\r\n+      features: ['Government Services', 'Utilities', 'Emergency Contacts', 'Local Information']\r\n     },\r\n     { \r\n-      name: 'Services', \r\n+      name: 'Events & Culture', \r\n       path: '/food', \r\n-      icon: 'üõ†Ô∏è', \r\n-      desc: 'Find urban services near you',\r\n-      color: '#8b5cf6',\r\n-      details: 'Book home services, repairs, and professional help with verified providers.'\r\n-    },\r\n-    { \r\n-      name: 'Events', \r\n-      path: '/events', \r\n-      icon: 'üé§', \r\n+      icon: 'üé≠', \r\n       desc: 'Discover concerts, shows and happenings',\r\n       color: '#f59e0b',\r\n-      details: 'Find the latest concerts, theater shows, art exhibitions and special events happening around Nairobi. Get tickets and directions.'\r\n+      details: 'Find the latest concerts, theater shows, art exhibitions and special events happening around Nairobi.',\r\n+      features: ['Event Discovery', 'Ticket Booking', 'Cultural Experiences', 'Local Entertainment']\r\n     }\r\n   ];\r\n \r\n   // Check for achievements\r\n@@ -919,9 +1051,19 @@\n \r\n   const handleSearch = (e) => {\r\n     e.preventDefault();\r\n     if (searchQuery.trim()) {\r\n-      navigate(`/food?search=${encodeURIComponent(searchQuery)}`);\r\n+      // Enhanced search functionality\r\n+      const query = searchQuery.toLowerCase();\r\n+      if (query.includes('food') || query.includes('restaurant') || query.includes('eat')) {\r\n+        navigate('/food');\r\n+      } else if (query.includes('transport') || query.includes('bus') || query.includes('taxi')) {\r\n+        navigate('/transport');\r\n+      } else if (query.includes('assistant') || query.includes('help') || query.includes('ai')) {\r\n+        navigate('/assistant');\r\n+      } else {\r\n+        navigate(`/food?search=${encodeURIComponent(searchQuery)}`);\r\n+      }\r\n     }\r\n   };\r\n \r\n   const toggleDarkMode = () => {\r\n@@ -978,17 +1120,17 @@\n       {/* Hero Section with UrbanBuddy */}\r\n       <section style={{\r\n         background: darkMode \r\n           ? 'linear-gradient(135deg, #2d3748 0%, #1a202c 100%)' \r\n-          : 'linear-gradient(135deg, #6b46c1 0%, #3b82f6 100%)',\r\n+          : 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',\r\n         color: 'white',\r\n         padding: '4rem 1rem',\r\n         textAlign: 'center',\r\n         borderRadius: '0 0 20px 20px',\r\n         boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',\r\n         position: 'relative',\r\n         overflow: 'hidden',\r\n-        height: '300px'\r\n+        height: '350px'\r\n       }}>\r\n         <div style={{\r\n           maxWidth: '800px',\r\n           margin: '0 auto',\r\n@@ -1004,9 +1146,9 @@\n           <p style={{\r\n             fontSize: '1.25rem',\r\n             marginBottom: '2rem',\r\n             opacity: 0.9,\r\n-          }}>Your seamless urban living companion</p>\r\n+          }}>Your seamless urban living companion in Nairobi</p>\r\n           \r\n           <form onSubmit={handleSearch} style={{\r\n             display: 'flex',\r\n             maxWidth: '600px',\r\n@@ -1016,9 +1158,9 @@\n             boxShadow: '0 4px 10px rgba(0, 0, 0, 0.2)',\r\n           }}>\r\n             <input\r\n               type=\"text\"\r\n-              placeholder=\"Search for restaurants, services...\"\r\n+              placeholder=\"Search for restaurants, transport, services...\"\r\n               value={searchQuery}\r\n               onChange={(e) => setSearchQuery(e.target.value)}\r\n               style={{\r\n                 flex: 1,\r\n@@ -1060,9 +1202,9 @@\n           textAlign: 'center',\r\n         }}>What do you need today?</h2>\r\n         <div style={{\r\n           display: 'grid',\r\n-          gridTemplateColumns: 'repeat(auto-fit, minmax(250px, 1fr))',\r\n+          gridTemplateColumns: 'repeat(auto-fit, minmax(280px, 1fr))',\r\n           gap: '1.5rem',\r\n           marginTop: '1rem',\r\n         }}>\r\n           {services.map((service) => (\r\n@@ -1091,9 +1233,31 @@\n                 display: 'inline-block',\r\n                 animation: 'float 3s ease-in-out infinite'\r\n               }}>{service.icon}</div>\r\n               <h3 style={{fontSize: '1.5rem', fontWeight: '600', marginBottom: '0.5rem'}}>{service.name}</h3>\r\n-              <p style={{color: darkMode ? '#a0aec0' : '#64748b'}}>{service.desc}</p>\r\n+              <p style={{color: darkMode ? '#a0aec0' : '#64748b', marginBottom: '1rem'}}>{service.desc}</p>\r\n+              \r\n+              {/* Service Features */}\r\n+              <div style={{\r\n+                display: 'flex',\r\n+                flexWrap: 'wrap',\r\n+                gap: '0.5rem',\r\n+                justifyContent: 'center',\r\n+                marginTop: '1rem'\r\n+              }}>\r\n+                {service.features.slice(0, 2).map((feature, index) => (\r\n+                  <span key={index} style={{\r\n+                    fontSize: '0.8rem',\r\n+                    backgroundColor: `${service.color}20`,\r\n+                    color: service.color,\r\n+                    padding: '0.25rem 0.5rem',\r\n+                    borderRadius: '12px',\r\n+                    fontWeight: '500'\r\n+                  }}>\r\n+                    {feature}\r\n+                  </span>\r\n+                ))}\r\n+              </div>\r\n             </div>\r\n           ))}\r\n         </div>\r\n       </section>\r\n@@ -1188,9 +1352,9 @@\n           >\r\n             ‚òï Coffee Shops\r\n           </button>\r\n           <button \r\n-            onClick={() => navigate('/events')}\r\n+            onClick={() => navigate('/assistant')}\r\n             style={{\r\n               padding: '0.75rem 1.5rem',\r\n               borderRadius: '50px',\r\n               border: 'none',\r\n@@ -1204,9 +1368,9 @@\n               gap: '0.5rem',\r\n               fontSize: '1rem'\r\n             }}\r\n           >\r\n-            üé§ Nairobi Events\r\n+            ü§ñ AI Assistant\r\n           </button>\r\n         </div>\r\n       </section>\r\n \r\n@@ -1252,9 +1416,29 @@\n             }}>\r\n               <span style={{ fontSize: '2.5rem', animation: 'float 3s ease-in-out infinite' }}>{selectedService.icon}</span>\r\n               <h3 style={{fontSize: '1.8rem', fontWeight: '700', marginBottom: '1rem', color: darkMode ? '#e2e8f0' : '#1e293b'}}>{selectedService.name}</h3>\r\n             </div>\r\n-            <p style={{color: darkMode ? '#a0aec0' : '#64748b', fontSize: '1.1rem', lineHeight: '1.6', marginBottom: '2rem'}}>{selectedService.details}</p>\r\n+            <p style={{color: darkMode ? '#a0aec0' : '#64748b', fontSize: '1.1rem', lineHeight: '1.6', marginBottom: '1.5rem'}}>{selectedService.details}</p>\r\n+            \r\n+            {/* Features List */}\r\n+            <div style={{ marginBottom: '2rem' }}>\r\n+              <h4 style={{ color: darkMode ? '#e2e8f0' : '#1e293b', marginBottom: '0.5rem' }}>Key Features:</h4>\r\n+              <div style={{ display: 'flex', flexWrap: 'wrap', gap: '0.5rem' }}>\r\n+                {selectedService.features.map((feature, index) => (\r\n+                  <span key={index} style={{\r\n+                    fontSize: '0.9rem',\r\n+                    backgroundColor: `${selectedService.color}20`,\r\n+                    color: selectedService.color,\r\n+                    padding: '0.5rem 0.75rem',\r\n+                    borderRadius: '12px',\r\n+                    fontWeight: '500'\r\n+                  }}>\r\n+                    {feature}\r\n+                  </span>\r\n+                ))}\r\n+              </div>\r\n+            </div>\r\n+            \r\n             <button \r\n               style={{ \r\n                 padding: '0.75rem 1.5rem',\r\n                 borderRadius: '8px',\r\n@@ -1263,9 +1447,10 @@\n                 color: 'white',\r\n                 fontWeight: '600',\r\n                 cursor: 'pointer',\r\n                 transition: 'all 0.2s',\r\n-                fontSize: '1rem'\r\n+                fontSize: '1rem',\r\n+                width: '100%'\r\n               }}\r\n               onClick={() => {\r\n                 navigate(selectedService.path);\r\n                 closePopup();\r\n@@ -1309,9 +1494,9 @@\n         color: darkMode ? '#a0aec0' : '#64748b',\r\n         fontSize: '0.9rem',\r\n         marginTop: '2rem'\r\n       }}>\r\n-        <p>¬© {new Date().getFullYear()} UrbanFlow - Created by Nick</p>\r\n+        <p>¬© {new Date().getFullYear()} UrbanFlow - Your Nairobi Urban Living Companion</p>\r\n       </footer>\r\n     </div>\r\n   );\r\n };\n\\ No newline at end of file\n"
                },
                {
                    "date": 1755245031141,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -652,74 +652,239 @@\n \r\n // Emergency Services Component\r\n const EmergencyServices = ({ darkMode }) => {\r\n   const services = [\r\n-    { name: \"Police\", number: \"999\", icon: \"üëÆ\", color: \"#3b82f6\" },\r\n-    { name: \"Ambulance\", number: \"911\", icon: \"üöë\", color: \"#ef4444\" },\r\n-    { name: \"Fire Brigade\", number: \"999\", icon: \"üöí\", color: \"#f59e0b\" },\r\n-    { name: \"Child Helpline\", number: \"116\", icon: \"üßí\", color: \"#10b981\" }\r\n+    { \r\n+      name: \"Police\", \r\n+      number: \"999\", \r\n+      icon: \"üëÆ\", \r\n+      color: \"#3b82f6\",\r\n+      description: \"Emergency police response\",\r\n+      responseTime: \"5-10 min\"\r\n+    },\r\n+    { \r\n+      name: \"Ambulance\", \r\n+      number: \"911\", \r\n+      icon: \"üöë\", \r\n+      color: \"#ef4444\",\r\n+      description: \"Medical emergency response\",\r\n+      responseTime: \"3-7 min\"\r\n+    },\r\n+    { \r\n+      name: \"Fire Brigade\", \r\n+      number: \"999\", \r\n+      icon: \"üöí\", \r\n+      color: \"#f59e0b\",\r\n+      description: \"Fire and rescue services\",\r\n+      responseTime: \"5-12 min\"\r\n+    },\r\n+    { \r\n+      name: \"Child Helpline\", \r\n+      number: \"116\", \r\n+      icon: \"üßí\", \r\n+      color: \"#10b981\",\r\n+      description: \"24/7 child protection\",\r\n+      responseTime: \"Immediate\"\r\n+    },\r\n+    { \r\n+      name: \"Traffic Police\", \r\n+      number: \"112\", \r\n+      icon: \"üö¶\", \r\n+      color: \"#8b5cf6\",\r\n+      description: \"Traffic incidents\",\r\n+      responseTime: \"8-15 min\"\r\n+    },\r\n+    { \r\n+      name: \"Coast Guard\", \r\n+      number: \"113\", \r\n+      icon: \"‚öì\", \r\n+      color: \"#06b6d4\",\r\n+      description: \"Maritime emergencies\",\r\n+      responseTime: \"10-20 min\"\r\n+    }\r\n   ];\r\n \r\n   return (\r\n     <div style={{\r\n-      backgroundColor: darkMode ? '#2d3748' : '#f3f4f6',\r\n-      borderRadius: '12px',\r\n+      background: darkMode \r\n+        ? 'linear-gradient(135deg, #dc2626 0%, #991b1b 100%)' \r\n+        : 'linear-gradient(135deg, #fef2f2 0%, #fee2e2 100%)',\r\n+      borderRadius: '16px',\r\n       padding: '1.5rem',\r\n       margin: '1rem 0',\r\n-      boxShadow: '0 2px 8px rgba(0,0,0,0.1)',\r\n-      border: darkMode ? '1px solid #4a5568' : '1px solid #e2e8f0'\r\n+      boxShadow: '0 8px 32px rgba(220, 38, 38, 0.15)',\r\n+      border: darkMode ? '1px solid #dc2626' : '1px solid #fecaca',\r\n+      position: 'relative',\r\n+      overflow: 'hidden'\r\n     }}>\r\n-      <h3 style={{ \r\n-        marginTop: 0, \r\n-        marginBottom: '1.5rem',\r\n-        color: darkMode ? '#e2e8f0' : '#1e293b',\r\n-        display: 'flex',\r\n-        alignItems: 'center',\r\n-        gap: '0.5rem'\r\n-      }}>\r\n-        <span>üö®</span> Emergency Contacts\r\n-      </h3>\r\n-      <div style={{ \r\n-        display: 'grid',\r\n-        gridTemplateColumns: 'repeat(2, 1fr)',\r\n-        gap: '1rem'\r\n-      }}>\r\n-        {services.map((service) => (\r\n-          <a \r\n-            key={service.name}\r\n-            href={`tel:${service.number}`}\r\n-            style={{\r\n-              display: 'flex',\r\n-              flexDirection: 'column',\r\n-              alignItems: 'center',\r\n-              justifyContent: 'center',\r\n-              padding: '1rem',\r\n-              borderRadius: '8px',\r\n-              backgroundColor: darkMode ? '#4a5568' : '#e2e8f0',\r\n-              color: darkMode ? '#e2e8f0' : '#1e293b',\r\n-              textDecoration: 'none',\r\n-              transition: 'transform 0.2s, box-shadow 0.2s',\r\n-              ':hover': {\r\n-                transform: 'translateY(-2px)',\r\n-                boxShadow: '0 4px 8px rgba(0,0,0,0.1)'\r\n-              }\r\n-            }}\r\n-          >\r\n-            <span style={{ \r\n-              fontSize: '1.8rem',\r\n-              marginBottom: '0.5rem'\r\n-            }}>{service.icon}</span>\r\n-            <span style={{ \r\n-              fontWeight: '600',\r\n-              marginBottom: '0.25rem'\r\n-            }}>{service.name}</span>\r\n-            <span style={{ \r\n-              fontSize: '1rem',\r\n-              fontWeight: '700',\r\n-              color: service.color\r\n-            }}>{service.number}</span>\r\n-          </a>\r\n-        ))}\r\n+      {/* Emergency background pattern */}\r\n+      <div style={{\r\n+        position: 'absolute',\r\n+        top: '-50%',\r\n+        right: '-50%',\r\n+        width: '200%',\r\n+        height: '200%',\r\n+        background: darkMode \r\n+          ? 'radial-gradient(circle, rgba(220, 38, 38, 0.1) 0%, transparent 70%)'\r\n+          : 'radial-gradient(circle, rgba(220, 38, 38, 0.05) 0%, transparent 70%)',\r\n+        animation: 'pulse 2s ease-in-out infinite'\r\n+      }}></div>\r\n+\r\n+      <div style={{ position: 'relative', zIndex: 2 }}>\r\n+        {/* Header */}\r\n+        <div style={{ \r\n+          display: 'flex', \r\n+          alignItems: 'center', \r\n+          gap: '0.75rem',\r\n+          marginBottom: '1.5rem'\r\n+        }}>\r\n+          <div style={{\r\n+            fontSize: '1.5rem',\r\n+            animation: 'pulse 1.5s ease-in-out infinite'\r\n+          }}>\r\n+            üö®\r\n+          </div>\r\n+          <div>\r\n+            <h3 style={{ \r\n+              margin: 0,\r\n+              color: darkMode ? '#fecaca' : '#991b1b',\r\n+              fontSize: '1.2rem',\r\n+              fontWeight: '700'\r\n+            }}>\r\n+              Emergency Contacts\r\n+            </h3>\r\n+            <p style={{\r\n+              margin: '0.25rem 0 0',\r\n+              fontSize: '0.8rem',\r\n+              color: darkMode ? '#fca5a5' : '#dc2626',\r\n+              fontWeight: '500'\r\n+            }}>\r\n+              Tap to call emergency services\r\n+            </p>\r\n+          </div>\r\n+        </div>\r\n+\r\n+        {/* Services Grid */}\r\n+        <div style={{ \r\n+          display: 'grid',\r\n+          gridTemplateColumns: 'repeat(2, 1fr)',\r\n+          gap: '0.75rem'\r\n+        }}>\r\n+          {services.map((service) => (\r\n+            <a \r\n+              key={service.name}\r\n+              href={`tel:${service.number}`}\r\n+              style={{\r\n+                display: 'flex',\r\n+                flexDirection: 'column',\r\n+                alignItems: 'center',\r\n+                justifyContent: 'center',\r\n+                padding: '1rem',\r\n+                borderRadius: '12px',\r\n+                background: darkMode \r\n+                  ? 'rgba(220, 38, 38, 0.2)' \r\n+                  : 'rgba(255, 255, 255, 0.8)',\r\n+                color: darkMode ? '#fecaca' : '#991b1b',\r\n+                textDecoration: 'none',\r\n+                transition: 'all 0.3s ease',\r\n+                border: darkMode \r\n+                  ? '1px solid rgba(220, 38, 38, 0.3)' \r\n+                  : '1px solid rgba(220, 38, 38, 0.1)',\r\n+                backdropFilter: 'blur(10px)',\r\n+                WebkitBackdropFilter: 'blur(10px)',\r\n+                position: 'relative',\r\n+                overflow: 'hidden'\r\n+              }}\r\n+              onMouseEnter={(e) => {\r\n+                e.target.style.transform = 'translateY(-4px) scale(1.02)';\r\n+                e.target.style.boxShadow = '0 12px 24px rgba(220, 38, 38, 0.2)';\r\n+              }}\r\n+              onMouseLeave={(e) => {\r\n+                e.target.style.transform = 'translateY(0) scale(1)';\r\n+                e.target.style.boxShadow = 'none';\r\n+              }}\r\n+            >\r\n+              {/* Service icon with glow effect */}\r\n+              <div style={{\r\n+                fontSize: '2rem',\r\n+                marginBottom: '0.5rem',\r\n+                filter: `drop-shadow(0 0 8px ${service.color})`,\r\n+                animation: 'float 2s ease-in-out infinite'\r\n+              }}>\r\n+                {service.icon}\r\n+              </div>\r\n+              \r\n+              {/* Service name */}\r\n+              <span style={{ \r\n+                fontWeight: '700',\r\n+                marginBottom: '0.25rem',\r\n+                fontSize: '0.9rem',\r\n+                textAlign: 'center'\r\n+              }}>\r\n+                {service.name}\r\n+              </span>\r\n+              \r\n+              {/* Phone number */}\r\n+              <span style={{ \r\n+                fontSize: '1.1rem',\r\n+                fontWeight: '800',\r\n+                color: service.color,\r\n+                marginBottom: '0.5rem'\r\n+              }}>\r\n+                {service.number}\r\n+              </span>\r\n+              \r\n+              {/* Description */}\r\n+              <span style={{\r\n+                fontSize: '0.7rem',\r\n+                textAlign: 'center',\r\n+                color: darkMode ? '#fca5a5' : '#dc2626',\r\n+                fontWeight: '500',\r\n+                lineHeight: 1.2\r\n+              }}>\r\n+                {service.description}\r\n+              </span>\r\n+              \r\n+              {/* Response time */}\r\n+              <span style={{\r\n+                fontSize: '0.65rem',\r\n+                color: darkMode ? '#fca5a5' : '#dc2626',\r\n+                fontWeight: '600',\r\n+                marginTop: '0.25rem',\r\n+                backgroundColor: darkMode \r\n+                  ? 'rgba(220, 38, 38, 0.2)' \r\n+                  : 'rgba(220, 38, 38, 0.1)',\r\n+                padding: '0.2rem 0.4rem',\r\n+                borderRadius: '8px'\r\n+              }}>\r\n+                {service.responseTime}\r\n+              </span>\r\n+            </a>\r\n+          ))}\r\n+        </div>\r\n+\r\n+        {/* Emergency notice */}\r\n+        <div style={{\r\n+          marginTop: '1rem',\r\n+          padding: '0.75rem',\r\n+          backgroundColor: darkMode \r\n+            ? 'rgba(220, 38, 38, 0.2)' \r\n+            : 'rgba(255, 255, 255, 0.9)',\r\n+          borderRadius: '8px',\r\n+          border: darkMode \r\n+            ? '1px solid rgba(220, 38, 38, 0.3)' \r\n+            : '1px solid rgba(220, 38, 38, 0.2)',\r\n+          textAlign: 'center'\r\n+        }}>\r\n+          <p style={{\r\n+            margin: 0,\r\n+            fontSize: '0.75rem',\r\n+            color: darkMode ? '#fca5a5' : '#991b1b',\r\n+            fontWeight: '600'\r\n+          }}>\r\n+            ‚ö†Ô∏è For life-threatening emergencies, call 999 immediately\r\n+          </p>\r\n+        </div>\r\n       </div>\r\n     </div>\r\n   );\r\n };\r\n"
                },
                {
                    "date": 1755245064109,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -894,32 +894,106 @@\n   const [events, setEvents] = useState([\r\n     {\r\n       id: 1,\r\n       name: \"Nairobi Jazz Festival\",\r\n-      date: \"2023-08-15\",\r\n-      venue: \"KICC\",\r\n-      description: \"Annual jazz festival featuring local and international artists. A celebration of African jazz heritage.\",\r\n-      image: \"https://images.unsplash.com/photo-1470229722913-7c0e2dbbafd3?ixlib=rb-1.2.1&auto=format&fit=crop&w=500&q=60\"\r\n+      date: \"2024-12-15\",\r\n+      time: \"7:00 PM\",\r\n+      venue: \"KICC Convention Centre\",\r\n+      description: \"Annual jazz festival featuring local and international artists. A celebration of African jazz heritage with performances from Grammy-winning musicians.\",\r\n+      image: \"https://images.unsplash.com/photo-1470229722913-7c0e2dbbafd3?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&q=80\",\r\n+      category: \"Music\",\r\n+      price: \"KSh 2,500\",\r\n+      organizer: \"Nairobi Arts Council\",\r\n+      capacity: \"2,000 people\"\r\n     },\r\n     {\r\n       id: 2,\r\n       name: \"Kenya National Theatre Play\",\r\n-      date: \"2023-08-20\",\r\n+      date: \"2024-12-20\",\r\n+      time: \"6:30 PM\",\r\n       venue: \"Kenya National Theatre\",\r\n-      description: \"Award-winning theatrical performance showcasing Kenya's rich cultural stories.\",\r\n-      image: \"https://images.unsplash.com/photo-1492684223066-81342ee5ff30?ixlib=rb-1.2.1&auto=format&fit=crop&w=500&q=60\"\r\n+      description: \"Award-winning theatrical performance showcasing Kenya's rich cultural stories. Directed by acclaimed director John Sibi-Okumu.\",\r\n+      image: \"https://images.unsplash.com/photo-1492684223066-81342ee5ff30?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&q=80\",\r\n+      category: \"Theatre\",\r\n+      price: \"KSh 1,800\",\r\n+      organizer: \"Kenya National Theatre\",\r\n+      capacity: \"500 people\"\r\n     },\r\n     {\r\n       id: 3,\r\n       name: \"Nairobi Food Festival\",\r\n-      date: \"2023-09-05\",\r\n+      date: \"2024-12-25\",\r\n+      time: \"12:00 PM\",\r\n       venue: \"Carnivore Grounds\",\r\n-      description: \"Experience the diverse culinary delights from across Kenya and beyond.\",\r\n-      image: \"https://images.unsplash.com/photo-1504674900247-0877df9cc836?ixlib=rb-1.2.1&auto=format&fit=crop&w=500&q=60\"\r\n+      description: \"Experience the diverse culinary delights from across Kenya and beyond. Food tasting, cooking demonstrations, and live entertainment.\",\r\n+      image: \"https://images.unsplash.com/photo-1504674900247-0877df9cc836?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&q=80\",\r\n+      category: \"Food & Culture\",\r\n+      price: \"KSh 3,000\",\r\n+      organizer: \"Kenya Tourism Board\",\r\n+      capacity: \"5,000 people\"\r\n+    },\r\n+    {\r\n+      id: 4,\r\n+      name: \"Tech Innovation Summit\",\r\n+      date: \"2024-12-28\",\r\n+      time: \"9:00 AM\",\r\n+      venue: \"Nairobi Innovation Hub\",\r\n+      description: \"Join tech leaders, entrepreneurs, and innovators for a day of networking, workshops, and cutting-edge technology demonstrations.\",\r\n+      image: \"https://images.unsplash.com/photo-1515187029135-18ee286d815b?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&q=80\",\r\n+      category: \"Technology\",\r\n+      price: \"KSh 5,000\",\r\n+      organizer: \"Nairobi Tech Community\",\r\n+      capacity: \"1,000 people\"\r\n+    },\r\n+    {\r\n+      id: 5,\r\n+      name: \"Art Exhibition: Modern Africa\",\r\n+      date: \"2024-12-30\",\r\n+      time: \"10:00 AM\",\r\n+      venue: \"Nairobi Gallery\",\r\n+      description: \"Contemporary African art exhibition featuring works from emerging and established artists across the continent.\",\r\n+      image: \"https://images.unsplash.com/photo-1541961017774-22349e4a1262?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&q=80\",\r\n+      category: \"Art\",\r\n+      price: \"Free Entry\",\r\n+      organizer: \"Nairobi Arts Foundation\",\r\n+      capacity: \"300 people\"\r\n+    },\r\n+    {\r\n+      id: 6,\r\n+      name: \"Sports & Fitness Expo\",\r\n+      date: \"2025-01-05\",\r\n+      time: \"8:00 AM\",\r\n+      venue: \"Nyayo National Stadium\",\r\n+      description: \"Annual sports and fitness expo featuring equipment demonstrations, fitness challenges, and wellness workshops.\",\r\n+      image: \"https://images.unsplash.com/photo-1571019613454-1cb2f99b2d8b?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&q=80\",\r\n+      category: \"Sports\",\r\n+      price: \"KSh 1,500\",\r\n+      organizer: \"Kenya Sports Federation\",\r\n+      capacity: \"10,000 people\"\r\n     }\r\n   ]);\r\n+  \r\n   const [selectedEvent, setSelectedEvent] = useState(null);\r\n+  const [currentEventIndex, setCurrentEventIndex] = useState(0);\r\n \r\n+  // Rotate through events every 10 seconds\r\n+  useEffect(() => {\r\n+    const interval = setInterval(() => {\r\n+      setCurrentEventIndex(prev => (prev + 1) % events.length);\r\n+    }, 10000);\r\n+    return () => clearInterval(interval);\r\n+  }, [events.length]);\r\n+\r\n+  // Format date for display\r\n+  const formatDate = (dateStr) => {\r\n+    const date = new Date(dateStr);\r\n+    return date.toLocaleDateString('en-US', { \r\n+      weekday: 'short', \r\n+      month: 'short', \r\n+      day: 'numeric' \r\n+    });\r\n+  };\r\n+\r\n   return (\r\n     <>\r\n       <div style={{\r\n         backgroundColor: darkMode ? '#2d3748' : '#f3f4f6',\r\n"
                },
                {
                    "date": 1755245127547,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1013,81 +1013,223 @@\n         }}>\r\n           <span>üé≠</span> Upcoming Events\r\n         </h3>\r\n         \r\n-        <div style={{ display: 'flex', flexDirection: 'column', gap: '1rem' }}>\r\n-          {events.slice(0, 2).map(event => (\r\n+        {/* Featured Event Carousel */}\r\n+        <div style={{ \r\n+          position: 'relative',\r\n+          marginBottom: '1.5rem'\r\n+        }}>\r\n+          <div style={{\r\n+            position: 'relative',\r\n+            borderRadius: '16px',\r\n+            overflow: 'hidden',\r\n+            boxShadow: '0 8px 32px rgba(0,0,0,0.15)',\r\n+            cursor: 'pointer'\r\n+          }}\r\n+          onClick={() => setSelectedEvent(events[currentEventIndex])}\r\n+          >\r\n+            {/* Event Image */}\r\n+            <img \r\n+              src={events[currentEventIndex].image} \r\n+              alt={events[currentEventIndex].name}\r\n+              style={{\r\n+                width: '100%',\r\n+                height: '200px',\r\n+                objectFit: 'cover',\r\n+                transition: 'transform 0.3s ease'\r\n+              }}\r\n+            />\r\n+            \r\n+            {/* Event Overlay */}\r\n+            <div style={{\r\n+              position: 'absolute',\r\n+              bottom: 0,\r\n+              left: 0,\r\n+              right: 0,\r\n+              background: 'linear-gradient(transparent, rgba(0,0,0,0.8))',\r\n+              padding: '1.5rem',\r\n+              color: 'white'\r\n+            }}>\r\n+              {/* Category Badge */}\r\n+              <span style={{\r\n+                display: 'inline-block',\r\n+                backgroundColor: '#3b82f6',\r\n+                color: 'white',\r\n+                padding: '0.25rem 0.75rem',\r\n+                borderRadius: '20px',\r\n+                fontSize: '0.75rem',\r\n+                fontWeight: '600',\r\n+                marginBottom: '0.75rem',\r\n+                textTransform: 'uppercase',\r\n+                letterSpacing: '0.5px'\r\n+              }}>\r\n+                {events[currentEventIndex].category}\r\n+              </span>\r\n+              \r\n+              {/* Event Title */}\r\n+              <h4 style={{ \r\n+                margin: '0 0 0.5rem', \r\n+                fontSize: '1.2rem',\r\n+                fontWeight: '700',\r\n+                lineHeight: 1.2\r\n+              }}>\r\n+                {events[currentEventIndex].name}\r\n+              </h4>\r\n+              \r\n+              {/* Event Details */}\r\n+              <div style={{\r\n+                display: 'flex',\r\n+                alignItems: 'center',\r\n+                gap: '1rem',\r\n+                fontSize: '0.85rem',\r\n+                opacity: 0.9\r\n+              }}>\r\n+                <span>üìÖ {formatDate(events[currentEventIndex].date)}</span>\r\n+                <span>üïê {events[currentEventIndex].time}</span>\r\n+                <span>üìç {events[currentEventIndex].venue}</span>\r\n+              </div>\r\n+            </div>\r\n+          </div>\r\n+          \r\n+          {/* Carousel Indicators */}\r\n+          <div style={{\r\n+            display: 'flex',\r\n+            justifyContent: 'center',\r\n+            gap: '0.5rem',\r\n+            marginTop: '1rem'\r\n+          }}>\r\n+            {events.map((_, index) => (\r\n+              <button\r\n+                key={index}\r\n+                onClick={() => setCurrentEventIndex(index)}\r\n+                style={{\r\n+                  width: '8px',\r\n+                  height: '8px',\r\n+                  borderRadius: '50%',\r\n+                  border: 'none',\r\n+                  backgroundColor: index === currentEventIndex \r\n+                    ? (darkMode ? '#3b82f6' : '#1e40af')\r\n+                    : (darkMode ? '#4a5568' : '#cbd5e1'),\r\n+                  cursor: 'pointer',\r\n+                  transition: 'all 0.3s ease'\r\n+                }}\r\n+              />\r\n+            ))}\r\n+          </div>\r\n+        </div>\r\n+\r\n+        {/* Quick Event List */}\r\n+        <div style={{ display: 'flex', flexDirection: 'column', gap: '0.75rem' }}>\r\n+          {events.slice(0, 3).map((event, index) => (\r\n             <div \r\n               key={event.id}\r\n               onClick={() => setSelectedEvent(event)}\r\n               style={{\r\n                 display: 'flex',\r\n-                gap: '1rem',\r\n+                gap: '0.75rem',\r\n                 padding: '0.75rem',\r\n-                borderRadius: '8px',\r\n-                backgroundColor: darkMode ? '#4a5568' : '#e2e8f0',\r\n+                borderRadius: '12px',\r\n+                backgroundColor: darkMode ? 'rgba(71, 85, 105, 0.3)' : 'rgba(203, 213, 225, 0.3)',\r\n                 cursor: 'pointer',\r\n-                transition: 'transform 0.2s',\r\n-                ':hover': {\r\n-                  transform: 'translateY(-2px)'\r\n-                }\r\n+                transition: 'all 0.3s ease',\r\n+                border: darkMode ? '1px solid rgba(71, 85, 105, 0.2)' : '1px solid rgba(203, 213, 225, 0.2)',\r\n+                backdropFilter: 'blur(10px)',\r\n+                WebkitBackdropFilter: 'blur(10px)'\r\n               }}\r\n+              onMouseEnter={(e) => {\r\n+                e.target.style.transform = 'translateY(-2px)';\r\n+                e.target.style.backgroundColor = darkMode ? 'rgba(71, 85, 105, 0.5)' : 'rgba(203, 213, 225, 0.5)';\r\n+              }}\r\n+              onMouseLeave={(e) => {\r\n+                e.target.style.transform = 'translateY(0)';\r\n+                e.target.style.backgroundColor = darkMode ? 'rgba(71, 85, 105, 0.3)' : 'rgba(203, 213, 225, 0.3)';\r\n+              }}\r\n             >\r\n               <img \r\n                 src={event.image} \r\n                 alt={event.name}\r\n                 style={{\r\n-                  width: '80px',\r\n-                  height: '80px',\r\n+                  width: '60px',\r\n+                  height: '60px',\r\n                   borderRadius: '8px',\r\n-                  objectFit: 'cover'\r\n+                  objectFit: 'cover',\r\n+                  flexShrink: 0\r\n                 }}\r\n               />\r\n-              <div>\r\n-                <h4 style={{ \r\n+              <div style={{ flex: 1, minWidth: 0 }}>\r\n+                <h5 style={{ \r\n                   margin: '0 0 0.25rem', \r\n-                  color: darkMode ? '#e2e8f0' : '#1e293b'\r\n+                  color: darkMode ? '#e2e8f0' : '#1e293b',\r\n+                  fontSize: '0.9rem',\r\n+                  fontWeight: '600',\r\n+                  lineHeight: 1.2\r\n                 }}>\r\n                   {event.name}\r\n-                </h4>\r\n+                </h5>\r\n                 <p style={{ \r\n                   margin: '0 0 0.25rem', \r\n-                  fontSize: '0.9rem',\r\n-                  color: darkMode ? '#a0aec0' : '#64748b'\r\n+                  fontSize: '0.75rem',\r\n+                  color: darkMode ? '#94a3b8' : '#64748b',\r\n+                  fontWeight: '500'\r\n                 }}>\r\n-                  {event.venue}\r\n+                  üìç {event.venue}\r\n                 </p>\r\n-                <p style={{ \r\n-                  margin: 0, \r\n-                  fontSize: '0.8rem',\r\n-                  fontWeight: '600',\r\n-                  color: darkMode ? '#a0aec0' : '#64748b'\r\n+                <div style={{\r\n+                  display: 'flex',\r\n+                  justifyContent: 'space-between',\r\n+                  alignItems: 'center'\r\n                 }}>\r\n-                  {event.date}\r\n-                </p>\r\n+                  <span style={{ \r\n+                    fontSize: '0.7rem',\r\n+                    fontWeight: '600',\r\n+                    color: darkMode ? '#94a3b8' : '#64748b'\r\n+                  }}>\r\n+                    üìÖ {formatDate(event.date)}\r\n+                  </span>\r\n+                  <span style={{\r\n+                    fontSize: '0.7rem',\r\n+                    fontWeight: '700',\r\n+                    color: event.price === 'Free Entry' ? '#10b981' : '#3b82f6',\r\n+                    backgroundColor: event.price === 'Free Entry' \r\n+                      ? 'rgba(16, 185, 129, 0.1)' \r\n+                      : 'rgba(59, 130, 246, 0.1)',\r\n+                    padding: '0.2rem 0.4rem',\r\n+                    borderRadius: '6px'\r\n+                  }}>\r\n+                    {event.price}\r\n+                  </span>\r\n+                </div>\r\n               </div>\r\n             </div>\r\n           ))}\r\n         </div>\r\n         \r\n         <button \r\n-          onClick={() => setSelectedEvent(events[2])}\r\n+          onClick={() => setSelectedEvent(events[Math.floor(Math.random() * events.length)])}\r\n           style={{\r\n             width: '100%',\r\n             marginTop: '1rem',\r\n             padding: '0.75rem',\r\n             backgroundColor: 'transparent',\r\n             border: darkMode ? '1px solid #4a5568' : '1px solid #e2e8f0',\r\n-            borderRadius: '8px',\r\n+            borderRadius: '12px',\r\n             color: darkMode ? '#e2e8f0' : '#1e293b',\r\n             cursor: 'pointer',\r\n-            transition: 'background-color 0.2s',\r\n-            ':hover': {\r\n-              backgroundColor: darkMode ? '#4a5568' : '#e2e8f0'\r\n-            }\r\n+            transition: 'all 0.3s ease',\r\n+            fontWeight: '600',\r\n+            fontSize: '0.9rem'\r\n           }}\r\n+          onMouseEnter={(e) => {\r\n+            e.target.style.backgroundColor = darkMode ? 'rgba(71, 85, 105, 0.3)' : 'rgba(203, 213, 225, 0.3)';\r\n+            e.target.style.transform = 'translateY(-2px)';\r\n+          }}\r\n+          onMouseLeave={(e) => {\r\n+            e.target.style.backgroundColor = 'transparent';\r\n+            e.target.style.transform = 'translateY(0)';\r\n+          }}\r\n         >\r\n-          View More Events\r\n+          üé≠ View All Events ({events.length})\r\n         </button>\r\n       </div>\r\n \r\n       {/* Event Detail Modal */}\r\n"
                },
                {
                    "date": 1755245175005,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1879,5 +1879,37 @@\n         <p>¬© {new Date().getFullYear()} UrbanFlow - Your Nairobi Urban Living Companion</p>\r\n       </footer>\r\n     </div>\r\n   );\r\n-};\n\\ No newline at end of file\n+};\r\n+\r\n+// Add CSS animations to the document\r\n+if (typeof document !== 'undefined') {\r\n+  const style = document.createElement('style');\r\n+  style.textContent = `\r\n+    @keyframes float {\r\n+      0%, 100% { transform: translateY(0px); }\r\n+      50% { transform: translateY(-10px); }\r\n+    }\r\n+    \r\n+    @keyframes rotate {\r\n+      from { transform: rotate(0deg); }\r\n+      to { transform: rotate(360deg); }\r\n+    }\r\n+    \r\n+    @keyframes pulse {\r\n+      0%, 100% { opacity: 1; }\r\n+      50% { opacity: 0.7; }\r\n+    }\r\n+    \r\n+    @keyframes slideIn {\r\n+      from { transform: translateX(100%); opacity: 0; }\r\n+      to { transform: translateX(0); opacity: 1; }\r\n+    }\r\n+    \r\n+    @keyframes fadeOut {\r\n+      from { opacity: 1; }\r\n+      to { opacity: 0; }\r\n+    }\r\n+  `;\r\n+  document.head.appendChild(style);\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1755805027222,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,203 +1,9 @@\n import { useState, useEffect, useRef } from 'react';\r\n import { useNavigate } from 'react-router-dom';\r\n \r\n-// UrbanBuddy AI Assistant Component\r\n-const UrbanBuddy = ({ darkMode, onChatOpen }) => {\r\n-  const [position, setPosition] = useState({ x: 20, y: 50 });\r\n-  const [expression, setExpression] = useState('üòä');\r\n-  const [direction, setDirection] = useState(1);\r\n-  const [costume, setCostume] = useState(null);\r\n-  const [isActive, setIsActive] = useState(false);\r\n-  const botRef = useRef(null);\r\n-  const animationRef = useRef(null);\r\n-  const lastInteractionTime = useRef(Date.now());\r\n+// UrbanBuddy AI Assistant Component - REMOVED\r\n \r\n-  // Seasonal costumes\r\n-  useEffect(() => {\r\n-    const today = new Date();\r\n-    const month = today.getMonth() + 1;\r\n-    \r\n-    if (month === 12) setCostume('üéÑ');\r\n-    else if (month === 10) setCostume('üéÉ');\r\n-    else if (month === 2) setCostume('üíù');\r\n-    else if (month === 4) setCostume('üå∏');\r\n-    else setCostume(null);\r\n-  }, []);\r\n-\r\n-  // Make the bot wander with more dynamic movement\r\n-  useEffect(() => {\r\n-    const moveInterval = setInterval(() => {\r\n-      setPosition(prev => {\r\n-        const now = Date.now();\r\n-        const timeSinceLastInteraction = now - lastInteractionTime.current;\r\n-        \r\n-        // More active movement right after interaction\r\n-        const speedMultiplier = timeSinceLastInteraction < 5000 ? 2 : 1;\r\n-        \r\n-        let newX = prev.x + (3 * direction * speedMultiplier);\r\n-        let newY = prev.y + (Math.random() * 6 - 3);\r\n-        \r\n-        // Bounce off edges\r\n-        if (newX > window.innerWidth - 80) {\r\n-          setDirection(-1);\r\n-          triggerAnimation('spin');\r\n-        }\r\n-        if (newX < 20) {\r\n-          setDirection(1);\r\n-          triggerAnimation('spin');\r\n-        }\r\n-        if (newY < 20) newY = 20;\r\n-        if (newY > window.innerHeight - 100) newY = window.innerHeight - 100;\r\n-        \r\n-        return { x: newX, y: newY };\r\n-      });\r\n-    }, 100);\r\n-\r\n-    return () => clearInterval(moveInterval);\r\n-  }, [direction]);\r\n-\r\n-  // Change expressions randomly with more variety\r\n-  useEffect(() => {\r\n-    const expressions = ['üòä', 'ü§î', 'üòÆ', 'üòé', 'üëã', 'ü§ñ', '‚ú®', 'üåü'];\r\n-    const expressionInterval = setInterval(() => {\r\n-      if (!isActive) {\r\n-        setExpression(expressions[Math.floor(Math.random() * expressions.length)]);\r\n-        // Random animations when idle\r\n-        if (Math.random() > 0.8) {\r\n-          triggerAnimation(['bounce', 'spin', 'wobble'][Math.floor(Math.random() * 3)]);\r\n-        }\r\n-      }\r\n-    }, 3000);\r\n-    return () => clearInterval(expressionInterval);\r\n-  }, [isActive]);\r\n-\r\n-  const triggerAnimation = (type) => {\r\n-    if (animationRef.current) {\r\n-      clearTimeout(animationRef.current);\r\n-    }\r\n-    \r\n-    const botElement = botRef.current;\r\n-    if (!botElement) return;\r\n-    \r\n-    botElement.style.animation = 'none';\r\n-    void botElement.offsetWidth; // Trigger reflow\r\n-    \r\n-    switch(type) {\r\n-      case 'spin':\r\n-        botElement.style.animation = 'spin 1s ease';\r\n-        break;\r\n-      case 'bounce':\r\n-        botElement.style.animation = 'bounce 0.5s ease';\r\n-        break;\r\n-      case 'wobble':\r\n-        botElement.style.animation = 'wobble 0.8s ease';\r\n-        break;\r\n-      default:\r\n-        botElement.style.animation = '';\r\n-    }\r\n-    \r\n-    animationRef.current = setTimeout(() => {\r\n-      if (botElement) botElement.style.animation = '';\r\n-    }, 1000);\r\n-  };\r\n-\r\n-  const handleClick = () => {\r\n-    lastInteractionTime.current = Date.now();\r\n-    setIsActive(true);\r\n-    triggerAnimation('bounce');\r\n-    setExpression('üí°');\r\n-    \r\n-    // Trigger chat opening in parent component\r\n-    onChatOpen();\r\n-    \r\n-    // Return to normal after a delay\r\n-    setTimeout(() => {\r\n-      setIsActive(false);\r\n-    }, 3000);\r\n-  };\r\n-\r\n-  // Custom animations\r\n-  const animations = `\r\n-    @keyframes spin {\r\n-      0% { transform: rotate(0deg) scaleX(${direction}); }\r\n-      100% { transform: rotate(360deg) scaleX(${direction}); }\r\n-    }\r\n-    @keyframes bounce {\r\n-      0%, 100% { transform: translateY(0) scaleX(${direction}); }\r\n-      50% { transform: translateY(-20px) scaleX(${direction}); }\r\n-    }\r\n-    @keyframes wobble {\r\n-      0%, 100% { transform: rotate(0deg) scaleX(${direction}); }\r\n-      25% { transform: rotate(5deg) scaleX(${direction}); }\r\n-      75% { transform: rotate(-5deg) scaleX(${direction}); }\r\n-    }\r\n-    @keyframes float {\r\n-      0% { transform: translateY(0px) scaleX(${direction}); }\r\n-      50% { transform: translateY(-10px) scaleX(${direction}); }\r\n-      100% { transform: translateY(0px) scaleX(${direction}); }\r\n-    }\r\n-  `;\r\n-\r\n-  return (\r\n-    <>\r\n-      <style>{animations}</style>\r\n-      <div \r\n-        ref={botRef}\r\n-        onClick={handleClick}\r\n-        style={{\r\n-          position: 'fixed',\r\n-          left: `${position.x}px`,\r\n-          top: `${position.y}px`,\r\n-          fontSize: '2.5rem',\r\n-          cursor: 'pointer',\r\n-          transition: 'all 0.3s ease',\r\n-          transform: `scaleX(${direction})`,\r\n-          zIndex: 100,\r\n-          filter: darkMode \r\n-            ? 'drop-shadow(0 0 8px rgba(255,255,255,0.7))' \r\n-            : 'drop-shadow(0 0 8px rgba(0,0,0,0.3))',\r\n-          userSelect: 'none',\r\n-          animation: 'float 4s ease-in-out infinite'\r\n-        }}\r\n-      >\r\n-        <div style={{ \r\n-          position: 'relative',\r\n-          display: 'flex',\r\n-          flexDirection: 'column',\r\n-          alignItems: 'center'\r\n-        }}>\r\n-          {/* Bot icon with costume */}\r\n-          <div style={{\r\n-            position: 'relative',\r\n-            width: '60px',\r\n-            height: '60px',\r\n-            backgroundColor: darkMode ? '#4a5568' : '#3b82f6',\r\n-            borderRadius: '50%',\r\n-            display: 'flex',\r\n-            justifyContent: 'center',\r\n-            alignItems: 'center',\r\n-            color: 'white'\r\n-          }}>\r\n-            <span style={{ fontSize: '1.8rem' }}>{expression}</span>\r\n-            {costume && (\r\n-              <span style={{\r\n-                position: 'absolute',\r\n-                top: '-15px',\r\n-                right: '-10px',\r\n-                fontSize: '1.5rem',\r\n-                transform: 'rotate(15deg)'\r\n-              }}>\r\n-                {costume}\r\n-              </span>\r\n-            )}\r\n-          </div>\r\n-        </div>\r\n-      </div>\r\n-    </>\r\n-  );\r\n-};\r\n-\r\n // Chat Modal Component with Functional API Connection\r\n const ChatModal = ({ darkMode, onClose }) => {\r\n   const [messages, setMessages] = useState([\r\n     { text: \"Hello! I'm UrbanBuddy, your AI assistant for urban living. How can I help you today?\", sender: 'bot' }\r\n@@ -1565,9 +1371,9 @@\n               <span>üîç</span>\r\n             </button>\r\n           </form>\r\n         </div>\r\n-        <UrbanBuddy darkMode={darkMode} onChatOpen={toggleChat} />\r\n+        {/* UrbanBuddy floating bot removed */}\r\n       </section>\r\n \r\n       {/* Services Grid */}\r\n       <section style={{\r\n"
                }
            ],
            "date": 1752166632088,
            "name": "Commit-0",
            "content": "export default function Home() {\r\n  return (\r\n    <div className=\"home-page\">\r\n      <h1>UrbanFlow</h1>\r\n      <h2>All-Powered Urban Transport & Food Marketplace</h2>\r\n      \r\n      <div className=\"services-grid\">\r\n        <div className=\"service-card\">\r\n          <h3>Transport</h3>\r\n          <p>Plan your journey across the city</p>\r\n        </div>\r\n        <div className=\"service-card\">\r\n          <h3>Food</h3>\r\n          <p>Discover local restaurants</p>\r\n        </div>\r\n        <div className=\"service-card\">\r\n          <h3>Drinks</h3>\r\n          <p>Find cafes and bars</p>\r\n        </div>\r\n        <div className=\"service-card\">\r\n          <h3>Services</h3>\r\n          <p>Urban services at your fingertips</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}"
        }
    ]
}